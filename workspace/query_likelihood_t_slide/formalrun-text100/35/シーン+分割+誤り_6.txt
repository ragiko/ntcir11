エラー制御
エラー検出
データは長い距離を旅しているわけですから、通信を行っている間にどうしてもエラーが発生します。電話回線にしても、LAN回線にしても周りの環境などによりノイズが発生します。通信途中でノイズが入ったとしても、コンピュータは素直にエラーの入ったままデータをやり取りします。「0」と「1」の、2種類しか存在しないコンピュータの世界では、少しノイズが入っただけでも、送り側のデータと受け側のデータが全く異なったものになってしまいます。例えば、テキストデータを受信する場合にノイズが入ると、そこから文字化けが起こり、何が書いてあるか全くわからないものになってしまいます。
文字化け
私が図書館業務で通信を始めたころには、この様な文字化けはよく起こっていました。そこで、通信などで受送信したデータを通信終了後プリントアウトしてエラーのチェックを人の目で確認し、文字化けなどが起こっていたら、再度同じデータを受送信したりしてエラーを修正したりしていました。ひどい時には途中で通信ができなくなり、回線が切れてしまうこともありました。
この様なエラーを機械的にチェックするために考え出されたのがエラー制御(Error Control)の仕組みです。シンプルなものから、徐々に高性能なものが搭載されるようになったのですが、ここでは代表的なものを幾つかご紹介します。初めてパソコン通信する場合などには、どの方法でエラーチェックをするのか、予め通信ソフトで設定しておく必要があります。
今回の話は、少し難しいかも知れません。インターネットのみを利用していて、Nifty-ServeやNEC PC-VANなどのパソコン通信は利用していない人にはほとんど知らなくていい世界です。パソコン通信をしている人も、特に内容を理解する必要はありません。どの方式でエラーチェックを行うかを調べて、そのようにソフトを設定できれば良いのです。
パリティ・チェック(Parity check)
通信ソフトやモデムの設定欄には、大抵「パリティ」という項目があります。「偶数(even)パリティ」、「奇数(odd)パリティ」、「パリティなし(none)」などの選択ができるようになっています。
パリティ・チェックは、基本的でシンプルなエラー制御方式です。この方式では、まず、どの方法でチェックするのか(「偶数」か「奇数」か「なし」か)を送信側と受信側で先に決めておきます。そして、データに1ビット(0か1)を加えて、常に偶数か奇数の状態になるようにしてチェックを行うのです。例えば、「A」という文字のASCIIコードは「01000001」ですが、「偶数(even)」パリティでは、最後に「0」を加えて、「010000010」の形にして送信します(この最後の0をパリティ・ビットと呼びます)。すると、データ内の「1」の数が2つ、つまり、偶数になります。受信側では、送られてきたデータの1の数が偶数ならば正しいデータ、奇数ならばエラー・データと判断します。
偶数パリティチェック(末尾の数字がパリティビット)
エラー制御 - CyberLibrarian
