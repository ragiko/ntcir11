
Paul Reiners は Sun 認定の Java プログラマーであり Java 開発者です。彼は Automatous Monk や Twisted Life、Leipzig などいくつかのオープン・ソース・プログラムの開発者です。彼は University of Illinois at Urbana-Champaign で応用数学 (計算理論) で修士号を取得しています。彼はミネソタに住み、時間がある時には電子ベース・ギターを練習し、ペットのネズミである Fred と Mortimer と遊び、また TopCoder で競いあっています。
遺伝学では、非常に大量の生データをデータベースに保持しています。ヒトゲノムだけでも約 30 億の DNA 塩基対を持っています。こうしたデータすべてを検索し、その中から意味のある関係を見つけるために、分子生物学者はコンピューター・サイエンスの効率的なストリング・アルゴリズムに次第に大きく依存するようになってきています。この記事では、そうしたアルゴリズムのうちの 3 つを紹介しますが、この 3 つのアルゴリズムはどれも動的計画法を使用しています。動的計画法は、副問題に対する最適解を発見しながらボトムアップの方法で最適化問題を解決する、高度なアルゴリズム手法です。この記事ではこれらのアルゴリズムを Java™ で実装し、また生物学のデータを処理するためのオープンソースの Java フレームワークについて学びます。遺伝学とストリング・アルゴリズム遺伝物質である DNA と RNA の鎖は、ヌクレオチド (nucleotide) と呼ばれる小さな単位の配列 (sequence) からなっています。研究上の重要な疑問に答えるという目的において、遺伝のストリングはコンピューター・サイエンスのストリングと等価です。つまり物理的、化学的な性質を無視すれば、遺伝のストリングは単なる文字の配列と考えることができます。(ただし厳密に言えば、遺伝のストリングの化学的性質も、通常はこの記事で説明するストリング・アルゴリズムのパラメーターとしてコード化されています。)この記事の例では DNA を使いますが、DNA はアデニン (adenine: A)、シトシン (cytosine: C)、チミン (thymine: T)、そしてグアニン (guanine: G) というヌクレオチドの 2 本の鎖から構成されています。DNA の 2 本の逆向きの鎖は互いに相補関係になっています。A と T、そして C と G がそれぞれ相補的塩基です。つまり、1 本の鎖の A はもう 1 本の鎖の T と対になり (またその逆同士が対になり)、そして1 本の鎖の C はもう 1 本の鎖の G と対に (またその逆同士が対に) なっています。そのため、1 本の鎖の A、C、T、G の配列がわかると、もう 1 本の鎖の配列も導き出すことができます。従って DNA の鎖は単なる A、C、G、T という文字のストリングと考えることができます。
上に戻る動的計画法動的計画法は配列解析で一般的に使われるアルゴリズム手法です。動的計画法が使われるケースは、再帰が使えるものの、再帰では同じ副問題を繰り返し解決することになるため非効率になってしまうケースです。例えばフィボナッチ数列 (0, 1, 1, 2, 3, 5, 8, 13, …) を考えてみてください。1 番目と 2 番目のフィボナッチ数は、それぞれ 0 と 1 に定義されています。n 番目のフィボナッチ数は、この数の前 2 つのフィボナッチ数の和として定義されます。従って n 番目のフィボナッチ数は再帰関数を使って計算することができます (リスト 1)。リスト 1. n 番目のフィボナッチ数を計算する再帰関数
動的計画法と配列アラインメント
