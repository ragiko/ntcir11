どうやってみんなを驚かせようかな?
どんな風に喜んでもらおうかな?
あなたにそのアプリケーションのイメージと、ちょっとしたLinuxとC/C++の知識、それとPALROさえあれば、今まで誰も体験したことのないような驚きをあなたが提供することができるのです。
ここでは、アプリケーションを開発するための手順の概要を紹介しています。
詳しい説明は、【 デベロッパー 】-【 ドキュメント 】 の " アプリケーション開発ガイド " を参照してください。
システムソフトウェア 3.0.x / 3.1.x の説明はこちら
システムソフトウェア 2.x.x 以前の説明はこちら
アプリケーションの開発は、Linux(ubuntu)上で行います。また、PALRO Application Studio や PALRO Motion Editor を使用することによって、
アプリケーションで使用する部品(例えば、顔のLEDやモーション)、PALROへのインストールや開発中のアプリケーションのテストなどは、Windows上で簡単に操作できます。
また、プログラミングのための開発環境がセットアップされたVMwareイメージを配布していますので、ダウンロードして展開するだけで開発を開始することができます。
開発環境の構築方法は、【 デベロッパー 】-【 ドキュメント 】 の " アプリケーション開発環境構築ガイド " を参照してください。
アプリケーションで使用する主なファイルは、次の5つです。
(1) プログラムファイル (必須)
(2) アプリケーションコンフィグファイル (必須)
(3) トリガーワードファイル (任意)
(4) PALRO LEDファイル (任意)
(5) PALRO モーションファイル (任意)
システムソフトウェア2.x.x以前では、SAPI( Sapie API )やPAPI( PALRO API )を使用することで、PALROを詳細に制御することが可能でした。(この方法で作成したアプリケーションをPAPPSと呼びます。) しかし、PAPPSプログラミングはフレームワークに対する手続きがどうしても煩雑となってしまうため、難易度が高いというデベロッパーからの意見がありました。
このため、システムソフトウェア3.0では、"SPCBase"という基底クラスを準備しました。
この"SPCBase"クラスでは、イベントハンドラをセンサーなど外界からの入力によるイベント駆動に変更し、PALROを動作させるための定型的な手続きは新たに基底クラスで提供する動作関数内に吸収しました。
これにより、フレームワークを考慮した処理の記述がほぼ不要となるため、デベロッパーはより一層独自のビジネスロジックの構築に注力することができます。(この方法で作成したアプリケーションをSPCと呼びます。)
※弊社開発の都合上、仕様を予告なく変更する場合はありますが、これまでのSAPI及びPAPIも提供しています。ただし、SPCBaseと併用はできません。
「顔検出イベント」、「動体検知イベント」が発生したタイミングでPALROと簡単な会話を行うサンプルです。
登録されている人の顔を見つけたら、「こんにちはさん」とあいさつします。登録されていない人の顔を見つけた際には異なるあいさつをします。
PALROが動体検知を行った際に話しかけてきますので、 『 はい。』、『 いいえ。 』、『 やめる。 』 のいずれかで返答してください。
PALROは返答内容により、「やっぱりそうですか。」、「おかしいなぁ。」と発話するか、アプリケーションを終了します。
/**
* @file SpcSample.cpp
* @brief SPCフレームワークサンプルアプリケーション、メインファイル
*
* @note 本サンプルプログラムの最終行にある変数宣言は非常に重要です。
* SPCフレームワークは、「spcApp」と言う固定の変数に対して処理を行うように作られています。
*/
#include "spc/spcbase.h"
/**
* 顔検出イベント、動体検知イベントに反応して、PALROと簡単な会話を行うサンプルです。
*
* 顔検出イベントで通知された名前を記憶し、動体検知イベントの時に呼びかけます。
* また、呼びかけは、 『 はい。』、『 いいえ。 』、『 やめる。 』 の3択形式の質問要求APIを使用して行い、
* 『 やめる。 』と答えた時にアプリケーションを終了します。
* 顔検出後に、顔認識ができなくなった場合にも、顔検出イベントで通知された名前で呼びかけます。
*
*/
class SpcSample : spc::SPCBase {
private:
std::string face_catch_name;
public:
/**
* @brief SPC起動時にフレームワークにより呼び出されるインタフェース。
*
*/
void onInitialize() {
long    result;
face_catch_name = "";
// 発話は必須ではありませんが、アプリケーション起動確認のために発話させています。
result = speak("サンプル起動しました");
// 動体検知を開始
result = startDetectMovingObject();
if(result != 0){
// 発話API呼び出し
result = speak("動体検知開始は失敗しました、"
"動体検知ができないためアプリケーションを終了します。");
// アプリケーション終了API呼び出し
result = exitComponent();
}
}
/**
* @brief 人の顔を検出した際にフレームワークにより呼び出されるインタフェース
* @param name 認識した個人の登録名(全角カタカナ). 個人未確定の場合は空白文字列
* @param owner 認識した個人がPALROのオーナーであるかどうか. オーナーの場合はtrue
*
*/
void onFaceCatch(std::string name, bool owner) {
long    result;
std::string str;
/*
* 顔識別結果の登録名が格納されている場合は、登録名で呼びかけます。
*/
if(name != ""){       // 登録者の場合
// 発話内容組み立て
face_catch_name = name + "さん";
str = name + "、こんにちわ";
}
else{   // 未知の人の場合
face_catch_name = "あのー";
str = "どなたかわかりませんが、こんにちわ";
}
// 発話API呼び出し
result = speak(str);
}
/**
* @brief onCatchedFace後に、顔を見失った際にフレームワークにより呼び出されるインタフェース
*
* 顔検出が行われた後であれば、顔検出で設定した呼び名を2回発話します。
*/
void onFaceDrop() {
if(face_catch_name != ""){
long    result;
// 発話API呼び出し
result = speak(face_catch_name);
result = speak("どこですかー?");
}
}
/**
* @brief 動体を検知した際にフレームワークにより呼び出されるインタフェース
* @param speed 動体移動速度
* @param direction 検知した動体の方向
*
* 動体を検知したら、顔検出で設定した呼び名を使用して、動体検知を知らせます。
*/
void onMovingObjectCatch(float speed, spc::SPC_MOVING_OBJECT_DIRECTION direction)
{
long    result;
if(face_catch_name != ""){
spc::SPC_ANSWER ans_result;
// 発話API呼び出し
result = speak(face_catch_name);
/*
* 質問要求(Yes/No)
*  『 はい。』、『 いいえ。 』、『 やめる。 』 で回答する質問をする
*/
result = waitForAnswer("今、何か動きましたか?", ans_result);
// 質問結果確認
if(result == spc::SPC_ANSWER_RECOGEND){
switch(ans_result){
case spc::SPC_ANSWER_YES:   // 『 はい。』 と回答された
result = speak("やっぱりそうですか。");
break;
case spc::SPC_ANSWER_NO:        // 『 いいえ。』 と回答された
result = speak("おかしいなぁ。");
break;
case spc::SPC_ANSWER_CANCEL:    // 『 やめる。』 と回答された
result = speak("わかりました、アプリケーションを終了します。");
// アプリケーション終了API呼び出し
result = exitComponent();
break;
default:
break;
}
}
}
}
/**
* @brief SPC終了時にフレームワークにより呼び出されるインタフェース。
*
* onInitializeで開始した動体検知を終了させ、SPCアプリケーションを終了させる。
*/
void onFinalize() {
long    result;
// onInitializeで動体検知を開始したので、動体検知を終了する
result = stopDetectMovingObject();
// SPC終了
exit(0);
}
};
// SPCアプリケーションインスタンス生成
SpcSample   spcApp;
PALRO Garden - アプリケーションを作ってみよう
