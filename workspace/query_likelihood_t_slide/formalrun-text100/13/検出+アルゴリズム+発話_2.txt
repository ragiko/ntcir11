Juliusにおける入力の無音区間・休止の扱い
はじめに
音声入力においては,発声区間の前後に無音区間が含まれる.また,発話中の息継ぎなどにより,文中や単語間に短い休止が含まれることが多くある.
このような発話前後の無音や発話中の休止に対して,音声区間検出や音響モデル,言語モデル,デコーディングなどの様々なレベルで対処することで,全体の認識精度を高めることができる.
本文書では,Julius/Julian における無音区間の扱いについてまとめて解説する.
無音部による音声区間の検出や,発話中の無音にマッチさせる無音単語の定義,単語間ショートポーズの扱いについて解説する.また,通常版/マルチパス版,Julius/Julian
などの設定の違いごとの設定方法を詳解する.
入力音声からの音声区間の検出
検出方法とパラメータ
Julius/Julian は,音声データの入力ストリームに対して,300ms〜500ms程度の比較的長い無音区間をカットして発声区間を検出することができる.
切り出しは,入力の前段階,音声波形上の処理で行われる.一定時間内の零交差数とレベルの閾値を元に切り出しが行われる.非発話状態 (=無音状態) のときは認識が行われず,発話開始と同時に切り出しが行われ (同時に第1パスの認識が始まる) ,発話終了 (=長い無音区間の発生) と同時に第1パスが終了し,第 2 パスが実行される.
マイク入力ではこの機能を用いて入力区間の検出を行っている.ファ
イル入力の場合,デフォルトでは切り出しは行われず,そのファイル全
体を 1 つの入力として認識が行われる.
デフォルトでは,マイク入力では区間検出が ON, ファイル入力では
OFF となっているが,実行時オプション "-cutsilence"
および "-nocutsilence" を指定することで,ファイル入
力に対してもマイク入力と同様に発声区間の切り出しを行うことができ
る.複数の発話を含むような長い音声ファイルについて,Juliusで切り
出しながら認識を行いたい場合は,-cutsilence を指定する.
音声区間検出アルゴリズムは,一定時間内の零交差数と振幅レベル
を基準とする.ある一定時間内において,振幅レベルが指定値以上の振
幅の零交差数が一定数以上になれば音声区間開始,同数が一定数以下に
なれば発声終了とみなす.実際には,音声区間の先頭や末尾において音
声の立ち上がりや立ち下がりに相当する振幅の小さい部分が切れてしま
うことを防ぐため,発声開始時点より前と発声終了時点より後ろに,そ
れぞれマージンを持たせて検出する.振幅レベルの閾値は "-lv"
(0-3276 7) ,零交差数は"-zc"  (一秒あたり) ,切り出し先頭のマー
ジン長は "-headmargin"  (単位:ミリ秒) ,切り出し末尾のマージン
長は "-tailmargin"  (単位:ミリ秒) で指定する.
音声入力区間の最大長は 20 秒に制限されている.これより長い区間を一度に認識したい場合は,ソースアーカイブの libsent/include/sent/speech.h の MAXSPEECHLEN の値を変更して再コンパイルすればよい.ただし,この値に比例して必要メモリ量が増大するので注意すること.
文頭・文末に対応する単語の定義
切り出された音声区間は,その両端に無音区間を含む.Julius/Julian では,
これらの無音を「文頭・文末無音単語」として特別に扱う.すなわち,音響モデルにおいては,
これらの無音 (ノイズ入力) に対応する音響モデルを用意し,言語モデルにおいても,
文頭・文末の記号を定義し,その読みとしてそれらの音響モデルを割り
当てる.
音響モデルでは,この無音部にあたるモデルを通常の音素モデルとは別に用意する.
通常は無音モデル "/sil/",あるいは文頭無音 "/silB/" と文末無音 "/silE/" として,学習コーパスからモデル化を行う.
単語N-gramでは,通常,学習コーパスの文ごとに最初と最後に文開始タ
グ<s>と文終了タグ </s>をそ
れぞれ付与して学習を行うとともに,それぞれのタグを辞書に登録して,
無音モデルを読みとして与える.以下は文頭・文末の無音単語の辞書の
エントリの例である.
<s> [<s>] silB
</s> [</s>] silE
Julianで認識文法を用いる場合は,文の先頭および末尾に文頭・文末無音単語がくるよう,文法で明示的に指定する.以下は文法と辞書の例である.
文法:
S: NS_B SENTENCE NS_E
辞書:
% NS_B
silB	silB
% NS_E
silE	silE
Julius では,以上のような文頭・文末の無音モデル化がモデル上で行われていることを前提としている.
探索時には,始終端の単語仮説をそれぞれ "<s>", "</s>" に固定する.このため,Julius で認識を行うには,<s>", </s>" という読みの単語が単語辞書に登録されている必要がある. (ただしこれらの単語の発音が /silB/, /silE/ である必要はない) 
Julius における始終端の無音単語については,それぞれオプション "-silhead", "-siltail" で変更可能である.無音単語の読みを指定する.指定しない場合のデフォルトはそれぞれ"<s>", "</s>"である.
文中の短い無音のモデル化
上記の区間検出は,数百ミリ〜数秒以上の比較的長い無音区間に対して,入力を
区切って認識するものであり,基本的に文と文の間の長い休止に対応する.
これに対して,実際の発話では,発話中の息継ぎや punctuation によって比較的短い無音が出現する.このような発話中の短い無音を,ここではショートポーズと呼ぶ.
音声認識におけるショートポーズのモデル化方法は様々であるが,Julius/Julian では 2 つの方法を提供している.一つは,このようなショートポーズを,言語モデルと音響モデルで音声と同様の枠組みでモデル化する方法である.すなわち,無音音響モデルを読みとする「無音単語」を辞書に加え,その出現位置を言語モデルで与える.これによって,punctuation のような規則的なショートポーズに対処できる.
もう一つの方法は,「任意の単語間にショートポーズが入りうる」という前提で特別な認識処理を行う方法である.認識処理時に,すべての単語間に任意長のショートポーズが入りうることを考慮したスコア計算を行う.Julius/Julian ではマルチパス版にこの機能が提供されている.
以下,この 2 つの方法について順に解説する.
なお,どちらの方法も,音響モデルに,このショートポーズのモデルが含まれていることを前提としている.デフォルトは名前が "sp" であるモデルが使われる.実行時オプション "-spmodel モデル名" で,以下で使用されるショートポーズモデルを変更できる.
無音単語によるモデル化
非音声部 (無音部分) に対して学習した音響モデルを読みとする「無音単語」を辞書に加え,その出現位置を言語モデルで与える.
無音単語の出現パターンは,言語モデルによって決められる.例えば,IPAや
CSRCで配布している日本語のN-gram言語モデルでは,読み上げ文中の読点「、」
にあたる部分にショートポーズが発生しやすいと考え,以下のように読点を 
無音単語として定義することで,ショートポーズを予測している.
、+78 [、]  sp
無音単語は通常の単語と同様に,トライフォン使用時には前後で単語間の音素環
境依存性が考慮される.すなわち,
a | sp | b       ..-a+sp | sp | sp-b+..
のように,無音単語の前後の単語について,"sp" がコンテキストとして考慮される.
言語モデルや辞書に無音単語が含まれない場合でも,単純に辞書に無音単語を
未知語として追加登録するだけで効果がある.Julius にはこのためのオプションが用意されている.実行時オプション "-iwspword" を指定することで,起動時に自動的に無音単語のエントリを辞書に追加できる.追加される単語エントリの内容は "-iwspentry" で指定できる.デフォルトは "<UNK> [sp] sp sp"である.
なお,Julian では,文法で無音単語の出現位置を明示的に指定する必要がある.
無音単語の出現位置が文法 (および辞書) で定義されていれば,その無音単語に対
してスキップを考慮した特別な認識処理が行われる.無音単語が定義されてい
ない場合,これらの無音単語に関する処理はいっさい行われない.
以下は無音単語とその出現位置を定義する文法の例である.
文法:
S: NS_B DATE NOISE TIME NS_E
辞書:
% NS_B
silB silB
% NS_E
silE silE
% NOISE
sp sp
% DATE
1    i ch i
2    n i
..
% TIME
...
Julian では無音単語は自動検出され,特別に扱われる.無音単語は,
「音素の並びがすべてショートポーズモデルからなる単語」として定義される.
単語間ショートポーズの挿入によるモデル化
文中のショートポーズをモデル化するもう一つの方法は,「任意の単語間にショートポーズが入りうる」という前提で特別な認識処理を行う方法である.認識処理時に,すべての単語間に任意長のショートポーズが入りうることを考慮したスコア計算を行う.
Julius/Julian では,マルチパス版にこの機能が提供されている.マルチパス版は,
音響モデルに関する仕様の拡張により,音素モデル全体をスキップするような複雑な遷移の音響モデルを扱うことができるバージョンである (3.4.2 までは別アーカイブとして配布されていましたが,3.5 より通常版のソースに統合された) .単語間ショートポーズの挿入は,このバージョンでのみ提供される機能である.
マルチパス版で,オプション "-iwsp" を指定することで,この単語間ショートポーズ
への対処の機能が ON になる.具体的には,単語間に登場しうるショートポーズに対応するモデルとして,全単語の末尾に,コンテキストとして考慮されないスキップ可能なショートポーズモデルを自動付加して認識処理を行う.すなわち,各辞書単語に対する /sp/ の付加は以下のように行われる.
<> <> <>         <>            <> <> <>  
->->->-> + ->->   =>  ->->->--->
\<>/
/a/              /sp/                /a sp/
/sp/ がモデルをスキップする遷移をあらかじめ持っている場合は,それ
を用いる.そのような遷移を持たない場合には,確率 1.0 のスキップ遷移が
自動的に付与される.
前節の無音単語と比較したときの大きな処理の違いは,任意の単語末に出現を想定していることと,このショートポーズモデルがトライフォンの
コンテキストとして無視される点にある.単語間における音素環境依存性の処
理は,以下のように sp をスキップして行われる.
a | sp | b       ..-a+b | sp | a-b+..
なお設定オプションとして,単語末尾に付加された sp への遷移確率 (対数尤度) を
オプション "-iwsppenalty" で指定できる.
マイナス方向に大きくなるほど,sp の挿入を抑制できる. (default: -1.0) 
自動アラインメント機能との関係
自動アラインメント(-walign, -palign, -salign)においても,上記のショー
トポーズの扱いが考慮される.認識結果について,無音単語や単語末spが考慮
されたアラインメント結果が出力される.
無音単語のアラインメント結果は通常の単語と同様に出力される.認識結果に
無音単語が含まれれば,その部分は sp を挿入した形で forced alignment が
実行される.
単語末 sp については,自動アラインメントにおいて,各単語末ごとに sp を
挟む場合と挟まない場合で尤度の高い方が選択され,出力される.例えば「今
日」のアラインメント結果は,なら,-walign では「ky o:」「ky o: sp」の
うち尤度が高い方の区間が出力される.-palign では「ky」に続いて「o:」
「o: sp」のうち尤度が高い方の結果が出力される.-salign の場合は,sp 部
分の遷移に関しては [o:#4 (sp)] のように出力される.
文中ポーズ関連のオプションまとめ
Julius/Julian の文中ショートポーズに関するオプションを以下にまとめる.
なお Julian については無音単語は文法で明示的に出現場所を指定する
必要がある点に注意されたい.
-iwspword (Juliusのみ)
無音単語のエントリを未知語として辞書に追加する.
-iwsp (multipath版のJulius/Julianのみ) 
単語間にスキップ可能なショートポーズ音響モデルを挟んで認識を行う.
-spmodel
ショートポーズ音響モデルの名前を指定する.デフォルトは "sp".
-iwspentry
"-iwspword" で追加するエントリを指定する.デフォルトは
"<UNK> [sp] sp sp"である.

