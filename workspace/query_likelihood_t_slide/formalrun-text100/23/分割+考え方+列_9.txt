
アルゴリズムとは、プログラムで特定の問題を解くための方法である。
例えば、いくつかのデータをある順番(大きい順、小さい順)に並べるソートには、
バブルソートや基本挿入法、シェルソート、ヒープソート、クイックソートなど数多くのアルゴリズムが考案されている。
アルゴリズムで特に特徴的なことは、一般にアルゴリズムはプログラミング言語に依存しないということである。一度あるアルゴリズムを理解すれば、将来他のプログラミング言語を勉強する際にも、
そのアルゴリズムが使える。アルゴリズムを知っておくと、「単にプログラムが書けるだけの人」に
対して大きく優位にたつことができる。ぜひマスターして欲しい。
ソートとは
ソート(整列)は、同じ種類のデータを順番に並べる方法である。
例えば、試験の答案であれば、得点の良い順番に並べる、学籍番号順に並べる。
また、各個人であれば、学籍番号順に並べる、身長順に並べる、といたことである。
並べる場合、当然ながら何らかの値の大小に注目する。上の例では、点数、学籍番号、身長のそれぞれの値である。並べる順番には二種類ある。
昇順 - 小さい順番、つまり、小さいほうを先頭に徐々に大きくなるように並べる
(例: 1,3,4,6,8)。
降順 - 大きい順番、つまり、大きいほうを先頭に徐々に小さくなるように並べる
(例: 8,6,4,3,1)。
ソートができるデータは、数値だけとは限らない。大小関係が判別できるデータであれば、ソートできる。例えば、文字列は、それぞれの文字コードの値で大小関係が求まる。これにより、例えば辞書に載っている順番に文字列を並べることができる。
ソートのアルゴリズム
ここでは、ソート(並びかえ)のアルゴリズムとして、バブルソート(基本交換法)、
基本挿入法、クイックソートを紹介する。
バブルソート(基本交換法)
参考:教科書 p.56-62
バブルソートは以下の図の要領でソートを行う。
バブルソートでは、隣り合ったデータを比較し、その大小関係がおかしい場合は、データを交換する。
それを順にずらしながら行っていくと、最終的にソートがされる。
上の図は、昇順に並べる例である。
昇順に並べる場合、左側のデータは右側のデータより小さい値にする必要がある。
まず最初は1つめのデータ(10)と2つめのデータ(8)を比べる。
左側のデータのほうが大きいので大小関係がおかしい。そこで10と8を交換する。
次に1つ右側に寄って2つめのデータ(10)と3つめのデータ(15)を比べる。
大小関係は正しいので交換しない。このように徐々に右にずらしていく。
これを一番右まで行う(図の左下端)とデータのうち最大の値(21)が一番右に来る。
このように最大の値が一番右に移動するのである。
以上のことをまた繰り返す。ただし、最大の値(21)は既に一番右に移動したので、その場所は確定した。
したがって、今回は3つめと4つめのデータ比較まで行えば良い。
これを行うと、2番目に大きな値(15)が右から2番目の場所に移動している。
これで21と15の2つのデータの場所が確定した。
今度はデータの比較を2つめと3つめまで行えば良い。
これで3番目に大きな値(10)が右から3番目の場所に移動し確定した。
最後に1つめと2つめのデータを比較し交換したら全ての場所が確定し、ソートが完了する。
このように最大の値が徐々に右に寄っていく様子が泡が上っているようであるため、
バブルソートと呼ばれている。
バブルソートは簡単で理解しやすいアルゴリズムであるが、他の多くのアルゴリズムと比べ、処理時間が長くかかるのが弱点である。
課題sort-1
以下のプログラムを元にバブルソートのプログラムを完成させよ。
public class BubbleSortTest {
static void bubble_sort(int[] d) {
for (int i = d.length-1; i > 0; i-- ) {
for (int j = 0; j 
課題sort-2
課題sort-1のプログラムを元にバブルソートにより「降順」にソートするプログラムを作成せよ。
基本挿入法
参考:教科書 p.63-65(教科書では挿入ソートと呼んでいる)
基本挿入法は、まだソートしていない1個のデータを既にソートしてあるデータ列の
適切な場所に挿入する方法である。下図のようにソート済の範囲(オレンジ色)が徐々に増えていき、最終的に全てがソートされる。
基本挿入法では、新たなデータを挿入する処理をいかに高速に行なうかが重要である。
データを挿入する場合、まず思い付く処理は、
挿入すべき位置を探す: ソートされている範囲の先頭から、挿入したいデータと値を比較し、挿入したいデータより大きい値が現われるまで右に移動する。
右側にあるデータを1つ右に移動する:ソートされている範囲のうち、挿入位置より右側にあるデータを1つ右に移動して、挿入する場所を確保する。
データを代入する:挿入する位置が空いたので、そこにデータを代入する。
というものである。これを図にすると以下のようになる。
ソート(整列)
