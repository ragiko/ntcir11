関係データベース設計の必須技術である「正規化」について、具体的な考え方と正規形の種類、関数従属といった基本的な概念を説明する。また正規化の手順を示し、各手順におけるポイントや正規化を崩すケースなどについて述べる。
【学習の要点】
* 関係データベースを設計する上で、データの冗長性を減らす正規化という作業が、品質確保のために重要となる。
* 正規化には段階があり、一般に、第1正規化、第2正規化、第3正規化の順で行われる。
* 実際の設計においては、あえて正規化を崩す(データに冗長性を持たせる)場合もある。
図I-22-10.  正規化の例
【解説】
1)  正規化とそのメリット
関係データベースにおける正規化とは、データの整合性を保ったまま、データの冗長性を減らす作業のことである。冗長性を減らすことで、関係代数による演算に適した形となり、データの操作やデータベースの保守が容易になり、データベースやアプリケーションの品質を確保することが期待される。正規化の具体的な手順としては、第1正規化第2正規化第3正規化の順に行うのが一般的であり、以下、図を例に説明する。
* 第1正規化
表の各列の値から分割可能な値を排除する作業を第1正規化といい、正規化されていない表(非正規形という)に第1正規化を適用した結果を第1正規形という。ここで、分割可能かどうかは、分割した結果のデータが必要かどうかで判断される。第1正規形を満たさない表では、関係代数の演算の対象にできない値が存在しうるという問題がある。図の表A0は非正規形であり、[名称]列の値は銀行名と支店名に分割され、[銀行名][支店名]列と重複しており、また、[電話番号]列には複数の値が入っているものがある。表A0を第1正規化することで、表A1と表Bとに分離される。
* 関数従属
表において、列(または列の組み合わせ)P、Qがあり、Pの値が定まるとQの値も一意に定まる場合、(Pに対して)Qは関数従属であるという。(ここで主キーは、実際に主キーに設定しなくとも、主キーとなりうるものを指す。)
- 部分関数従属  主キーの一部の列に対して関数従属であること。
- 完全関数従属  主キー全体に対して関数従属であり、部分関数従属でないこと。
- 推移関数従属
Aに対しBが関数従属、かつ、Bに対しCが関数従属の場合、Aに対しCは推移関数従属であるという。
* 第2正規化
表の部分関数従属である列を他の表に分離する作業を第2正規化といい、第1正規形に第2正規化を適用した結果を第2正規形という。図の表A1は第1正規形であり、[銀行コード]列に対し[銀行名]列は関数従属である。[銀行コード]列と[支店コード]列との組み合わせは主キーとなりうるので、[銀行名]列は部分関数従属である。表A1を第2正規化することで、表A2と表Cとに分離される。
* 第3正規化
表の推移関数従属である列を他の表に分離する作業を第3正規化といい、第2正規形に第3正規化を適用した結果を第3正規形という。図の表A2は第2正規形であり、[都道府県コード]列に対し[都道府県名]列は関数従属である。主キーに対し[都道府県コード]列は関数従属であるので、[都道府県名]は推移関数従属である。表A2を第3正規化することで、表A3と表Dとに分離される。
2) 正規化のデメリットと非正規化
正規化には前述のメリットがある反面、多くの表に分解されるため、RDBMSの実装上の問題で、検索速度の低下等を招く可能性もある。そこで、正規形を敢えて冗長化する場合がある。この作業を非正規化という。
I-22-10. データベース正規化の具体的な考え方と手順 | 日本OSS推進フォーラム
