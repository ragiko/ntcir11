9.6. random — 擬似乱数を生成する¶
ソースコード: Lib/random.py
このモジュールでは様々な分布をもつ擬似乱数生成器を実装しています。
整数用に、ある範囲からの一様な選択があります。シーケンス用には、シーケンスからのランダムな要素の一様な選択、リストのランダムな置換をインプレースに生成する関数、順列を置換せずにランダムサンプリングする関数があります。
実数用としては、一様分布、正規分布 (ガウス分布)、対数正規分布、負の指数分布、ガンマおよびベータ分布を計算する関数があります。角度分布の生成用には、フォンミーゼス分布が利用できます。
ほとんど全てのモジュール関数は、基礎となる関数 random() に依存します。この関数はランダムな浮動小数点数を半開区間 [0.0, 1.0) から一様に生成します。Python は中心となる乱数生成器としてメルセンヌツイスタを使います。これは 53 ビット精度の浮動小数点を生成し、周期は 2**19937-1 です、本体は C で実装されていて、高速でスレッドセーフです。メルセンヌツイスタは、現存する中で、最も大規模にテストされた乱数生成器のひとつです。しかし、完全に決定論的であるため、この乱数生成器は全ての目的に合致しているわけではなく、暗号化の目的には全く向いていません。
このモジュールで提供されている関数は、実際には random.Random クラスの隠蔽されたインスタンスのメソッドに束縛されています。内部状態を共有しない生成器を取得するため、自分で Random のインスタンスを生成することができます。
自分で考案した基本乱数生成器を使いたいなら、クラス Random をサブクラス化することもできます: この場合、メソッド random() 、 seed() 、 getstate() 、および setstate() をオーバライドしてください。オプションとして、新しいジェネレータは getrandbits() メソッドを提供できます — これにより randrange() メソッドが任意に大きな範囲から選択を行えるようになります。
random モジュールは SystemRandom クラスも提供していて、このクラスは OS が提供している乱数発生源を利用して乱数を生成するシステム関数 os.urandom() を使うものです。
保守(bookkeeping)関数:
random.seed(a=None, version=2)¶
乱数生成器を初期化します。
a が省略されるか None の場合、現在のシステム時刻が使用されます。乱数のソースがオペレーティングシステムによって提供される場合、システム時刻の代わりにそれが使用されます (利用可能性についての詳細は os.urandom() 関数を参照)。
a が int の場合、それが直接使われます。
バージョン2 (デフォルト) では、 str, bytes, bytearray オブジェクトは int に変換され、そのビットがすべて使用されます。バージョン1では a の hash() が代わりに使用されます。
random.getstate()¶
乱数生成器の現在の内部状態を記憶したオブジェクトを返します。このオブジェクトを setstate() に渡して内部状態を復帰することができます。
random.setstate(state)¶
state は予め getstate() を呼び出して得ておかなくてはなりません。 setstate() は getstate() が呼び出された時の乱数生成器の内部状態を復帰します。
random.getrandbits(k)¶
k ビット分の乱数ビットを納めた Python の整数を返します。このメソッドはメルセンヌツイスタ生成器で提供されており、その他の乱数生成器でもオプションの API として提供されているかもしれません。 getrandbits() が使えるとき、 randrange() メソッドは大きな範囲を扱えるようになります。
整数用の関数:
random.randrange(stop)¶
random.randrange(start, stop[, step])
range(start, stop, step) からランダムに選ばれた要素を返します。この関数は choice(range(start, stop, step)) と等価ですが、実際には range オブジェクトを生成しません。
位置引数のパターンは range() のそれと一致します。キーワード引数は、この関数に望まれない方法で使われるかもしれないので、使うべきではありません。
random.randint(a, b)¶
a <= N <= b であるようなランダムな整数 N を返します。 randrange(a, b+1) のエイリアスです。
シーケンス用の関数:
random.choice(seq)¶
空でないシーケンス seq からランダムに要素を返します。 seq が空のときは、 IndexError が送出されます。
random.shuffle(x[, random])¶
シーケンス x をインプレースにによって混ぜます。オプションの引数 random は、引数を持たず、 [0.0, 1.0) のランダムな浮動小数点数を返すような関数です; 標準では、これは関数 random() です。
やや小さい len(x) であっても、 x の順列の総数はほとんどの乱数生成器の周期よりも大きくなるので注意してください; このことは長いシーケンスに対してはほとんどの順列は生成されないことを意味します。
random.sample(population, k)¶
母集団のシーケンスまたは集合から選ばれた長さ k の一意な要素からなるリストを返します。置換を行わないランダムサンプリングに用いられます。
母集団自体を変更せずに、母集団内の要素を含む新たなリストを返します。返されたリストは選択された順に並んでいるので、このリストの部分スライスもランダムなサンプルになります。これにより、くじの当選者 (サンプル) を1等賞と2等賞(の部分スライス)に分けることも可能です。
母集団の要素はハッシュ可能 (hashable) でなくても、ユニークでなくても、かまいません。母集団が繰り返しを含む場合、出現するそれぞれがサンプルに選択されえます。
整数のある範囲からサンプルを選ぶには、引数に range() オブジェクトを使いましょう。特に、巨大な母集団からサンプルを取るとき、速度と空間効率が上がります: sample(range(10000000), 60) 。
サンプルの大きさが母集団の大きさより大きいなら、 ValueError が送出されます。
以下の関数は特定の実数値分布を生成します。関数パラメタの名前は、数学的な慣行において分布の公式で使われている、対応する変数から取られています; これらの公式のほとんどはどんな統計学のテキストにも載っています。
random.random()¶
範囲 [0.0, 1.0) の次のランダムな浮動小数点数を返します。
random.uniform(a, b)¶
a <= b であれば a <= N <= b 、 b < a であれば b <= N <= a であるようなランダムな浮動小数点数 N を返します。
端点の値 b が範囲に含まれるかどうかは、等式 a + (b-a) * random() における浮動小数点の丸めに依存します。
random.triangular(low, high, mode)¶
low <= N < high でありこれら境界値の間に指定された最頻値 mode を持つようなランダムな浮動小数点数 N を返します。境界 low と high のデフォルトは 0 と 1 です。最頻値 mode 引数のデフォルトは両境界値の中点になり、対称な分布を与えます。
random.betavariate(alpha, beta)¶
ベータ分布です。引数の満たすべき条件は alpha > 0 および beta > 0 です。範囲 0 から 1 の値を返します。
random.expovariate(lambd)¶
指数分布です。 lambd は平均にしたい値で 1.0 を割ったものです。 (このパラメタは “lambda” と呼ぶべきなのですが、Python の予約語なので使えません。) 返される値の範囲は lambd が正なら 0 から正の無限大、 lambd が負なら負の無限大から 0 です。
random.gammavariate(alpha, beta)¶
ガンマ分布です。 (ガンマ関数 ではありません !)  引数の満たすべき条件は alpha > 0 および beta > 0 です。
確率分布関数は:
9.6. random — 擬似乱数を生成する &mdash; Python 3.3.6 ドキュメント
