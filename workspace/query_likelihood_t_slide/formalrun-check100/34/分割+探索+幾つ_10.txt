
ソフトウェアの開発において、クラスの設計は、大切なポイントの1つです。どのようなクラスや関数を作るのか。ソフトウェアのデザインは、それによって決まります。
現在のソフトウェア工学で主流となっているのは、オブジェクト指向の考え方です。開発言語も、C++やJavaといったオブジェクト指向言語が広く使われています。しかし、いくらオブジェクト指向言語を使って開発していても、クラス設計の考え方が誤っていれば、まったくオブジェクト指向的でないソフトウェアができてしまいます。
貴方が、あるちょっとした機能の追加を頼まれたとしましょう。さて、いくつのクラスや関数を作れば良いのでしょうか。また、そのクラスや関数の名前は、どのように付ければ良いのでしょうか。貴方なら、どのように考えを進めて、クラスや関数を設計していきますか?
ここでは、ワイルドカードを使った文字列の検索を例に、クラス設計をする際の考え方を紹介します。
サンプルケース
次のような画面を持つ、英和辞典アプリケーションを作るとしましょう。
検索語を入力して、「検索」ボタンを押すと、発音と、日本語の訳が表示されます。ここでのポイントは、「検索語」欄には、ワイルドカードを使える、という点です。例えば、「検索語」欄に「*ight」と入力して、「検索」ボタンを押すと、画面には「eight」や「night」などが表示される、という訳です。
この画面は、貴方のチームメイトがすでに作ってくれました。SearchWordDialogという名前のダイアログクラスになっています。
貴方は、入力された(ワイルドカードを使った)検索語と、辞書にある英単語が、一致するかどうか、の判定をするルーチンを作ってくれるように、頼まれました。例えば、検索語が「l*v*」だったとすると、「love」ならOK、「like」ならNG、という判定をするルーチンを作れば良い訳です。
アルゴリズム
判定をするアルゴリズムは、図の通りとします。
まずはじめに、与えられた検索語を、ワイルドカード文字「*」で区切って、いくつかのブロック文字列に分割します。それから、与えられた英単語の前から順に、ブロック文字列が含まれているかどうか、1つずつ探していきます。
クラス設計の考え方
