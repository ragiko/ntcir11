
【特許名】動的分散環境におけるノードマッチング製造方法
【要約】動的分散環境におけるノードマッチングを提供すること。  動的分散コンピューティング環境における各計算エンティティを、あたかもその計算エンティティが、エッジによってリンクされたグラフ中のノードであるかのように処理することによって、これらのノードをそれ以上のマッチが可能でなくなるまでマッチさせる。新しいノードが分散コンピューティング環境に動的に導入された場合でも、本発明の様々な実施形態は、この分散コンピューティング環境においてデッドロックを避けながらノードをマッチさせ続けることができる。  A
【目的】要するに、集中コンピューティングアーキテクチャは、インターネットなど、分散型の大規模コンピュータシステムにはうまく使えない。ノードが使用可能であり通信しようとしているにもかかわらず、通信相手である他のノードを見つけることができないときに、デッドロックが発生する可能性がある。動的分散コンピューティング環境で適切に動作し、動的に分散された通信可能なノードのマッチングを調整できるプロトコルが無ければ、ユーザはそのうち、ネットワーク100が所望のコンピューティング環境を提供するものだとはもはや信頼しなくなるかもしれず、市場におけるネットワーク100の需要は次第に減少するはずである。したがって、求められているのは、上で論じた問題を回避または軽減しながら、動的分散コンピューティング環境における通信可能なノードをマッチさせる方法およびシステムである。
【構成】
【背景技術】0002集中コンピューティングアーキテクチャは、あらゆる計算は単一のコンピュータシステムによって完全に実行できるという、1950年代のメインフレームコンピュータから始まったフィクションを続けている。このアーキテクチャでは、あらゆるリソースはそのコンピュータシステムにとってローカルであると想定される。あらゆるリソースは、(単一のコンピュータシステム内に存在するものと想定され、)そのシステム内でアドレス指定され、検出され、ロードされ、使用され、解放される。しかし、今日および予測できる将来において、リソース(およびインターネットの普及によりユーザデータ)は、しばしば異なる信頼ドメインに存在し、各々が独自のセキュリティポリシーを有する多数のコンピュータシステムに分散される。過去の集中型コンピューティングアーキテクチャは、今日まで続く多くの問題を有している。図1は、これらの問題のいくつかを詳細に図示したものである。0003メインフレームコンピュータ104は、集中型の計算タスクを処理するように設計されている。図1を参照されたい。メインフレームコンピュータ、例えばメインフレームコンピュータ104は、端末によってそのコンピュータに接続された多数のユーザを同時にサポートする能力を特徴とする。メインフレームという名前は、元々このようなコンピュータの処理ユニットを格納するために使用されるキャビネットである「本体(main  frame)」に由来する。複数のノード102A?102Dがメインフレームコンピュータ104に結合されている。ノードは、例えばクライアントコンピュータ102A?Cや共用プリンタ102Dなどの装置であり、ネットワーク100に接続され、他のネットワーク装置と通信することができる。ノード102Aがノード102Dと通信しようとし、ノード102Bがノード102Cと通信しようとしていると想定する。ノード102A?102Dはすべてメインフレームコンピュータ104にとってローカルなので、メインフレームコンピュータ104は、これらのノード102A?102Dの全体を視野に入れ、これらのノードのどれが通信に使用できるかを認識することができる。例えば、ノード102A、102Dのどちらもが使用可能な場合は、メインフレームコンピュータ104は、ノード102Aと102Dの間で通信を行うことを可能にする。同様に、ノード102B、102Cが使用可能な場合は、メインフレームコンピュータ104は、ノード102Bと102Cを相互に通信可能にする。メインフレームコンピュータ104の集中コンピューティングアーキテクチャを用いると、相互に通信可能なノードをマッチさせる問題の全体を一度に調べることが可能であり、通信可能なノード間のマッチングを瞬時に見つけ出すことができる。0004メインフレームコンピュータ104が、ネットワーク100に存在しない場合のシナリオを考える。この場合、通信のために、あるノードを他のノードにマッチさせる問題は解決不可能にも思える。1つのノード、例えばノード102A?102Dが認識できるのは、それに隣接するノードだけである。例えば、ノード102Aは、ノード102Bまたは102Dだけを認識することが可能であり、ノード102Cを認識することはできない。ノード102Bがノード102Aに対し早期に通信をコミットし、同様にノード102Cがノード102Dに対して早期に通信をコミットしていると想定する。この早期のコミットメントのために、ノード102B、102Cは、互いに通信のためにマッチできる可能性があることに気づかない。さらに、ノード102Aがノード102Bにコミットしかつノード102Dがノード102Cにコミットするのではなく、ノード102Aが通信のためにノード102Dとの接続を進めたと想定する。デッドリーエンブレイス(deadly  embrace)すなわちデッドロックが発生する。デッドロックは、2つのプログラム、装置、またはノード(例えばノード102B、102C)が、続行の前に、各々ノード102A、102Dからの応答を待っているときに発生する状況である。もちろん、ノード102A、102Dからの応答を受信することは絶対にない。その理由は、ノード102B、102Cにとって不利なことには、102Aと102Dが通信のためにすでに互いに接続してしまったからである。0005集中コンピューティングアーキテクチャは、インターネットの分散アーキテクチャの成長を妨げる。インターネットでは、先に論じたように、ユーザデータは多数のコンピュータシステムに分散されている。もう1つの問題は、インターネットの分散アーキテクチャの動的な性質に関する。ノードが追加される可能性があり、したがってネットワーク100は動的に成長する。このことにより、ノードが動的に導入された場合でも2つのノード間で通信ができるように、使用可能なノードを互いにマッチさせるネットワーク100の機能が複雑なものになる。デッドロックを避けるためには、マッチさせることができるノードがあれば、それらを必ずマッチさせる必要がある。
【技術分野】5B089計算機?データ通信5B098マルチプログラミング
【請求項】
※以下の情報は公開日時点(2005年11月4日)のものです。
請求項1
複数のノードを備える分散コンピューティング環境であって、前記複数のノード中の各ノードは前記複数のノード中の他のノードの隣接ノードになることができ、各ノードはマッチのために隣接ノードの使用可能性を問い合わせることができ、第1のノードが第2のノードの使用可能性を問い合わせかつ前記第2のノードが前記第1のノードの使用可能性を問い合わせたときに、前記マッチが形成されることを特徴とする分散コンピューティング環境。
請求項2
前記第1のノードが前記第2のノードの使用可能性を問い合わせ、前記第2のノードが肯定メッセージで応答したときに、他のマッチが形成されることを特徴とする請求項1に記載の分散コンピューティング環境。
請求項3
前記第1のノードが前記第2のノードの使用可能性を問い合わせ、前記第2のノードが否定メッセージで応答したときには、マッチが形成されないことを特徴とする請求項1に記載の分散コンピューティング環境。
請求項4
前記複数のノードに通信を要請してマッチを見つけるインバイタをさらに備えることを特徴とする請求項1に記載の分散コンピューティング環境。
請求項5
前記分散コンピューティング環境に動的に導入された新しいノードをさらに備え、前記新しいノードは、マッチのために隣接ノードの使用可能性を問い合わせることができることを特徴とする請求項1に記載の分散コンピューティング環境。
請求項6
動的分散コンピューティング環境において通信可能なノードをマッチさせるためのコンピュータ実装されたプロトコルであって、マッチを見つけるために各ノードに通信を要請するステップと、アベイラビリティメッセージを送信することによって、マッチのためのノードの使用可能性を認識するステップと、第1のノードから第2のノードに別のアベイラビリティメッセージを送信したときに、前記第2のノードがアベイラビリティメッセージと肯定メッセージからなるグループから選択されたメッセージを送信した場合にマッチを形成するステップとを備えることを特徴とするプロトコル。
請求項7
前記通信要請のステップはインバイタによって実行され、前記インバイタは、隣接する第1のノードと第2のノードとを識別し、前記第1のノードおよび前記第2のノードのアドレスを含む通信要請を前記第1のノードに送信し、さらに前記インバイタは他の通信要請を前記第2のノードに送信することを特徴とする請求項6に記載のプロトコル。
請求項8
前記第1のノードが既に他のノードとマッチしている場合は、さらに前記プロトコルを終了し、そうでない場合は、前記プロトコルは、さらにアベイラビリティメッセージを前記第2のノードに送信してマッチのためにそのノードの使用可能性を判断することを特徴とする請求項7に記載のプロトコル。
請求項9
前記第1のノードから送信された前記アベイラビリティメッセージを前記第2のノードが受信し、前記第2のノードが既に他のノードとマッチしている場合は、前記第2のノードは前記第1のノードに否定メッセージで応答し、そうでない場合は、前記第2のノードの使用状態が、前記第2のノードが前記第1のノードにマッチしたことを示す真に設定されることを特徴とする請求項8に記載のプロトコル。
請求項10
前記第1のノードの使用状態を、前記第1のノードが前記第2のノードにマッチしたことを示す真に設定するステップをさらに備えることを特徴とする請求項9に記載のプロトコル。
請求項11
動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を実施するコンピュータ実行可能な命令を有するコンピュータ可読媒体であって、プロトコルが、マッチを見つけるために各ノードに通信を要請するステップと、アベイラビリティメッセージを送信することによってノードのマッチのための使用可能性を認識するステップと、第1のノードから第2のノードに別のアベイラビリティメッセージを送信したときに、前記第2のノードがアベイラビリティメッセージと肯定メッセージとからなるグループから選択されたメッセージを送信した場合にマッチを形成するステップとを備えることを特徴とするコンピュータ可読媒体。
請求項12
前記通信要請のステップはインバイタによって実行され、前記インバイタは、隣接する第1のノードと第2のノードとを識別し、前記第1のノードおよび前記第2のノードのアドレスを含む通信要請を前記第1のノードに送信し、さらに前記インバイタは別の通信要請を前記第2のノードに送信することを特徴とする請求項11に記載のコンピュータ可読媒体。
請求項13
前記第1のノードが既に他のノードとマッチしている場合は、さらに前記プロトコルを終了し、そうでない場合は、前記プロトコルはさらに、アベイラビリティメッセージを前記第2のノードに送信してマッチのためにそのノードの使用可能性を判断することを特徴とする請求項12に記載のコンピュータ可読媒体。
請求項14
前記第1のノードから送信された前記アベイラビリティメッセージを前記第2のノードが受信し、前記第2のノードが既に他のノードとマッチしている場合は、前記第2のノードは前記第1のノードに否定メッセージで応答し、そうでない場合は、前記第2のノードの使用状態が、前記第2のノードが前記第1のノードにマッチしたことを示す真に設定されることを特徴とする請求項13に記載のコンピュータ可読媒体。
請求項15
前記第1のノードの使用状態を、前記第1のノードが前記第2のノードにマッチしたことを示す真に設定するステップをさらに備えることを特徴とする請求項14に記載のコンピュータ可読媒体。
【解決課題】0006要するに、集中コンピューティングアーキテクチャは、インターネットなど、分散型の大規模コンピュータシステムにはうまく使えない。ノードが使用可能であり通信しようとしているにもかかわらず、通信相手である他のノードを見つけることができないときに、デッドロックが発生する可能性がある。動的分散コンピューティング環境で適切に動作し、動的に分散された通信可能なノードのマッチングを調整できるプロトコルが無ければ、ユーザはそのうち、ネットワーク100が所望のコンピューティング環境を提供するものだとはもはや信頼しなくなるかもしれず、市場におけるネットワーク100の需要は次第に減少するはずである。したがって、求められているのは、上で論じた問題を回避または軽減しながら、動的分散コンピューティング環境における通信可能なノードをマッチさせる方法およびシステムである。
【解決手段】0007以下では、「ノード」という用語は、あるエンティティを、永続的にまたは一時的に他のエンティティと関連づけることを可能にするコンピュータ機器、ウェブサービス、タンパク結合、社会ネットワーク上の各ポイントを含むものとする。本発明によると、動的分散コンピューティング環境における通信可能なノードをマッチさせるためのシステム、プロトコル、およびコンピュータ可読媒体が提供される。本発明のシステム形態には、複数のノードを含む分散コンピューティング環境が含まれる。複数のノード中の各ノードは、複数のノード中の他のノードの隣接ノードになる。各ノードは、マッチのための隣接ノードの使用可能性を問い合わせる(query)ことができる。マッチは、第1のノードが、第2のノードの使用可能性を問い合わせ、それに応答して第2のノードが、第1のノードの使用可能性を問い合わせたときに形成される。
0008本発明の他の態様によれば、本発明のプロトコル形態は、動的分散コンピューティング環境において通信可能なノードをマッチさせるためのコンピュータ実装されたプロトコルを含む。このプロトコルは、マッチを見つけるために各ノードに通信を要請する(invite)ステップを含む。このプロトコルはさらに、アベイラビリティメッセージ(availability  message)を送信することによって、マッチのためのノードの使用可能性を認識する(discover)ステップを含む。このプロトコルはさらに、第1のノードから第2のノードに別のアベイラビリティメッセージを送信したとき、第2のノードがアベイラビリティメッセージと肯定メッセージとからなるグループから選択された応答を返した場合にマッチを形成するステップも含む。
0009本発明の他の態様は、動的分散コンピューティング環境において通信可能なノードをマッチさせる方法を実施するためのコンピュータ実行可能な命令を有するコンピュータ可読媒体であり、この態様によれば、プロトコルは、マッチを見つけるためにノードに通信を要請するステップを含む。このプロトコルはさらに、アベイラビリティメッセージを送信することによって、ノードがマッチのために使用可能かどうかを認識するステップも含む。このプロトコルはさらに、第1のノードから第2のノードに別のアベイラビリティメッセージを送信したとき、第2のノードがアベイラビリティメッセージと肯定メッセージとからなるグループから選択された応答を返した場合にマッチを形成するステップも含む。
0010本発明の前述の態様および付随する利点の多くは、以下の詳細な説明を添付の図面と併せて読むことによって本発明をより良く理解できるようになり、より容易に理解できるようになるはずである。
【発明効果】
【図面簡単説明】0046メインフレームコンピュータ104および複数のノードを含む従来のネットワークを示すブロック図である。本発明の一実施形態による、通信のために他のノードとのマッチを試みる複数のノードを示すブロック図である。本発明の一実施形態による、マッチング処理中の通信可能ノードを示すブロック図である。本発明の一実施形態による、マッチを判断するために相互に通信するインバイタと3つのノードを示すプロトコル図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。動的分散コンピューティング環境において、通信可能なノードをマッチさせる方法を示すプロセス図である。
【出願人】マイクロソフト  コーポレーション
【発明者】スティーブ  ジー.ビヨルグ
【出願日】2005年3月10日(9年3ヶ月経過)
【出願番号】2005-067119
【公開日】2005年11月4日(8年7ヶ月経過)
【公開番号】2005-310117
【登録日】-
【登録番号】-
【特許期限】2025年3月10日(残10年9ヶ月)
【状態】拒絶査定(最終処分)
動的分散環境におけるノードマッチング製造方法
