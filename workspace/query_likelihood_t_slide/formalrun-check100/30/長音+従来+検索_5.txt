最終更新: 1998.12.20
目次
はじめに
似た文字
旧JISと新JIS
ベンダー固有文字
「全角」「半角」
ASCIIとJIS X 0201ローマ文字
おわりに
余談
1. はじめに
ISO/IEC 10646とUnicode(以下Unicode)は、いろいろと論議をかもしてきましたが、
すでにいろいろなところで陰に陽に使われるようになってきました。
Windows NTの内部コードがUnicodeであるのはよく知られています。
BeOSでは、内部だけでなく全面的にUnicodeが使われています。
また、Javaのchar型もUnicodeです。
しかし、とくに入出力においては、当分は従来の文字コードと共存することになります。
すなわち、意識するしないに関わらず、Unicodeと従来コードの変換が頻繁に行われます。
変換といっても、Unicodeコンソーシアムが提供しているテーブルを引くだけで、
何の問題もないように思いますが、
実は日本語環境だけに限ってもいろいろな問題があり、
特定の文字だけが正しく表示されないなどの現象を生むことになります。
本稿では、主に日本語環境に関係する範囲で、
従来JISとUnicodeとの対応づけあるいは変換に関する問題点について、
いくつか具体例を挙げて考察します。
Unicodeがらみの問題が起きたときの原因の推定や、
問題を引き起こさないような実装に役立ててください。
なお、本稿では、JIS X 0201、JIS X 0208、シフトJIS、
Unicodeなどについて基本的な知識があることを前提としています。
また、ISO/IEC 10646の規格書かThe Unicode Standard, Version 2.0
が手元にあるとなおよいでしょう。
2. 似た文字
Unicodeというと、その名前や、CJK統合漢字の件などから、
「似た形の文字を一つにまとめている」という点が(日本では)強調されているふしがありますが、
実際には、それは漢字だけの話といっても過言ではありません。
とくに記号類については、見た目がほとんど同じであっても、
役割や用途が違うものは積極的に別の文字として扱おうとしています。
また、ソース・セパレーションの原則(原規格で区別しているものは互換性のため区別する)も、
これに拍車をかけています。
例をあげると、ラテン文字のAとギリシア文字のΑとキリル文字のАはもちろん別の文字ですし、
ギリシア文字のμと百万分の一を意味するμも別の文字になっています。
また、ダッシュやハイフンなどの「横棒」系の記号はすさまじく、
以下のように細かく分かれています
(ちなみに「空白」はもっとあります)。
従来の文字コードとUnicodeの対応に関する諸問題
