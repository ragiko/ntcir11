
なぜVHDLか?
これからはVHDLでディジタル設計をしよう
VHDLとはテキストベースで回路(または機能)を表現するための言語(HDL)の1つです。 以前はASIC,PLDの開発に回路図入力がよく使用されていましたが、 なぜそれが今はHDLを使用するようになったのでしょうか? 1つは開発効率をあげるため、そして標準化のためです。 
理由 配線数・端子数の増大に対応するため
ASIC,PLDの進歩は早く高集積度、高速になりました。 回路図入力を使用してゲートレベルで入力するよりもHDLを使用して、RTLレベルで入力する方が楽です。 回路図レベルでもソフトマクロを使用すれば抽象度をあげられますがこれらソフトマクロは標準化がされませんでした。 (ソフトマクロによって互換性がないので回路図の再利用ができない。) シュミレーションをする際もRTLレベルで行った方が高速。 実際に回路図ベースで大規模な回路入力をしてみるとわかるのですが、上の方の階層の方に行くにしたがってブロック(またはシンボル)の端子数が多くなるで入力するのが大変なばかりでなく一番大きな用紙を使用してもブロックが紙からはみ出てしまったり、印刷した場合に端子名があまりに小さくなってしまって紙(回路図)を目で見て読めなくなってしまったりします。 仕方がなく複数のページに分割するのですが今度はページ数が多くなりすぎてしまって端子名、信号名などを目で見て探すのが大変になってしまいます。 セルベースICでなくFPGAでも1000pinぐらいを使用する事が時々あります。 テキストベース(HDL)ならばどんなにピン数が多くなっても印刷して文字が見れなくなることがありません。 
理由 データの標準化
回路図ベースの場合はファイルが通常バイナリになっておりCAD固有のため互換性がありません。 ツールを変えたい場合、入力した回路図資産の継承に困りました。 HDLについてはVerilogとVHDLの2つにほぼ統一されました。 テキストベースであるためツールを変更した場合やPCワークステーションのデータ交換も問題がありません。 (設計資産の再利用が可能) CADファイルの場合そのCADをインストールしてあるPCでないとそのデータを見ることができません。 HDLならばテキストベースなのでメールで送れば誰でも見ることが可能、かつ変更も可能です。 メーカの異なるPLDでも同じソースファイルが使用可能なのはVHDLの大きなメリットです。 
回路図の方が見やすく感じるかもしれませんがそれはなれの問題です。 
開発ツールには回路図入力もありますがそれは過去の遺物で新規設計には使わないようにしましょう。 
Verilog 対 VHDL
初めてHDLを学習する方にとってVerilogとVHDLのどちらを学習すればよいか迷うと思います。 結果から申し上げますと両方です。 Verilog、 VHDLどちらも特徴があります。 ソフト開発の経験が有る方ならばVerilogはC言語に近い、VHDLはAdaやPascalに近いといえばニュアンスはわかると思います。 
Verilogはそれほど型にはうるさくなく、ソースの記述量もVHDLよりも少なくてすみます。 
また、シュミレーション/テストベンチの時に便利な機能があります。 
VHDLは型に厳密であるため型が違う場合、いちいち変換しなければなりません。 厳密であるのでソースファイルの不具合をコンパイラが自動検出してくれます。 IPを作るために便利な機能があります。 
実際に大規模なセルベースICを作成する場合は社内にある設計資産をかき集めたり、外部から購入してきたIPを組み合わせて使用します。 全てのブロックを新規設計するわけにはいかないのでVerilogだけまたはVHDLだけで構成するのは不可能です。 結局 VerilogとVHDL、回路図入力全ての知識が必要になる場合が多いです。 それぞれの使い分けですがテストベンチなどはVerilogでIPはVHDLで記述する場合が多いようです。 小規模なPLDを開発する場合はVHDL,Verilogのどちらでも大差はないと思います。 
開発フロー
Xilinx社の開発ツール ISEとModelSimを使用する場合について説明します。 
ツール
テキストエディタ(デザイン入力)
テキストエディタはソースファイルの作成のために使用します。 
統合開発環境(ISE)に付属しているものを使用してもかまいませんが
普段使い慣れているものの方が効率がいいと思います。 
シミュレータ(シミュレーション)
設計した回路が正しく動作するかをコンピュータ上の
計算によって確認します。 
RTLシミュレーションとゲートレベルシミュレーションがあります。 
コンパイラ(論理合成/デザイン合成)
ソースファイルからプリミティブ(またはセル)と配線のみで生成された
回路表現であるネットリストを出力します。 
この状態では配線の遅延、プリミティブが実際にどこに配置されるか決まっていません。 
フィッタ(配置配線/デザインインプリメンテーション)
実際にプリミティブがPLDの中のどこに配置するかを決めます。 
FPGAの場合は配線の仕方も決めます。 (回路の遅延が決定します。) 
STA(遅延の確認/スタッティックタイミング解析)
配置配線後の遅延が設計どうりにできたか確認します。 
コンフィグレーションハードウェア(ダウンロード)
ビットストリームをPLDデバイスに電気的に転送して
設計した回路が動作できる状態にします。 
実機(実機での動作確認)
システム全体を含めた状態 かつリアルタイムで動作させて
仕様どうりに動いているか確認します。 
ファイル
VHDLソースファイル
回路の動作、またはプリミティブの接続をテキストファイルで
表現します。 (設計者が入力するファイル)
その他の言語のソースファイル
小さいPLDの場合は1つの言語で設計できますが
ゲート数の大きなPLD,ASICの場合は複数の言語を組み合わせて使用
します。 (本ページでは使用しません) 
制約ファイル
論理合成をする際の条件を指定します。 
最低限必要な制約はピン配置の決定と最大動作クロック周波数です。 
(設計者が入力するファイル) テキストファイルで指定することも
できますしGUIで入力することも可能です。 
ネットリスト(EDIF)
対象とするPLD固有のプリミティブ(またはセル)と配線のみの回路表現です。 
EDIFと呼ばれるファイル形式が業界標準で使用されています。 
遅延情報(SDF)
プリミティブと配線の遅延データです。 
SDFと呼ばれるファイル形式が業界標準で使用されています。 
ゲートレベルシミュレーションの場合に必要でRTLシミュレーションでは使用しません。 
各種レポートファイル、ログファイル
テキスト形式でSTAの結果などが出力されます。 
(ほとんどのツールはレポートファイルまたはログファイルを出力します) 
バグの無い回路を設計するためには面倒ぐさがらずログファイルを
チェックすることが重要です。 
ビットストリーム
最終的にPLDに転送する 配置配線済みの回路が入ったデータ
ファイル構成
VHDL開発で設計者が入力するファイルはVHDLのソースファイル、制約ファイルです。 
C言語で言うところのヘッダファイルに相当するものはありません。 
VHDLのソースファイルは実際にロジック(回路)を生成するのに使用するものと
ロジックをテストするために使用するテストベンチがあります。 
大規模な回路を設計する場合にはロジックを生成することは
できないが抽象的な機能を実現するシュミレーションモデルを作る場合もあります。 
通常は1つのファイルに1つのエンティティと関連するアーキテクチャ1つを入れます。 
(1つのファイルが1つのブロックに対応) 
制約ファイルはVHDLの規格ではなく各PLDメーカ固有で互換性は無いようです。 
VHDLの文法の基本要素
マイコンなどでC言語を知っている方が多いと思いますので
C言語との比較をしながら説明します。 
予約語
以下の予約語はアルファベッド順になっています。 
Waitなどは端子名としてよく使われるので重複に注意する必要があります。 
absaccessafteralias
allandarchitecturearray
assertattribute
filefor	function
nand
newnextnornot
null
thentotransporttype
beginblockbodybuffer
bus
generategenericgroupguarded
ofonopenor
othersout
unaffectedunitsuntiluse
casecomponentconfigurationconstant
ifimpureininertial
inoutis
packageportpostponed
procedurepure
variable
disconnectdownto
labellibrary
linkageliteralloop
rangerecordregisterreject
remreportreturnrol
ror
waitwhenwhilewhith
elseelseifendentity
exit
mapmod
selectseveritysharedsignal
slasllsrasrlsubtype
xnorxor
識別子
識別子とは信号名、端子名、ブロック名、ラベルなどに使用される名前です。 
予約語と重複しないことが必要です。 
先頭や最後に_を使用しないこと、  _を連続して2つ以上繰り返さないことなどの制約があります。 
VHDLでは大文字と小文字を区別しませんが大文字と小文字の使い分け
には何かルールを決めておくと見やすくなります。 
たとえば予約語は小文字を使用、識別子は大文字を使用など。 
コメント(注釈)
コメントはロジックの生成にはいっさい影響をあたえず自由な文章を挿入できます。 
一般的にソースファイルの説明などを記入します。 VHDLのコメントは--で始まって行末で終了します。 C言語の /*  */ のように複数行にわたって継続するコメントはありません。 
コメントはまったくなくてもロジック(回路)を作ることができるのでおざなりにされやすいのですが重要な部分です。 
私は以下のようにしています。 
最低限必要なコメント
タイトル(ファイル名)
ソースファイル先頭にブロックの名称(エンディティー)を入れます。 
-- ブロック名   日付 設計担当者
-- ブロックの簡単な説明  これはコメントのサンプルです。
設計担当者
大規模な回路設計の場合、すでに社内にある設計済みのソースファイルやIPをかき集めてきて、それで1機種の製品、(またはASIC)を作成します。 
何か疑問点があってそのブロックに対する質問をしたい場合(社内で設計したソースファイルで古いソースファイルとか)にそのブロックは誰が設計したかわからなくて困る場合があります。 
最近は日本でも人間の移動が活発になってきていますので、設計者が他の部署に移動していたり、派遣の人間が設計していて今は社内にいないとかがよくあります。 
開発が終わって年月がたっても設計者がわかるようにしておくことが重要です。 
日付
ファイルは簡単にコピーできてしまうのであちこちのPC,ワークステーションに重要なファイルのコピーが存在したりします。 
この際にどのファイル、バージョンが最新で信用できるものなのかわからなくなる場合があります。 
ファイルのタイムスタンプも目安にはなりますが、ファイルの内容を変更していないで上書き保存する場合もあり確実ではありません。 
ファイル先頭にコメントとして入れておくと管理ミスが発生しにくいです。 
外部ポートの部分の説明
エンティーティーの部分でそれぞれの端子の意味または機能の説明をいれます。 
外部ポートはそのブロックの内部回路と外部とのインターフェースを定義する部分なので重要です。 
それに対して内部回路を記述する部分の1行、1行の説明は重要ではありません。 
ソースファイルの再利用の観点からすると評価済のロジック部分はできるだけ、変更をするべきではなく理解する必要もありません。 
ロジック部分(アーキテクチャ内部)の記述部分を見始めてしまうと記述がきたなくて変更したくなるとか識別子のネーミングが気に入らないとか出てきてしまうと思います。 この業界は短納期で仕事をやらなければならない場合が多いので記述がきたなくても評価済で正常に動作することが保障されているのであればできるだけ見ない・さわなないようにすべきでしょう。 
できればあったほうがいいコメント
ロジック部分(アーキテクチャ内部)の1行毎のコメント
設計者が自分のためのメモ的な役割なのでそれほど重要ではありません。 
保守性という意味ではコメントは多いほうがいいのですがコメントを多くしすぎるとそのコメントの作成に時間がかかってしまうのでそれらはバランス感覚になると思います。 
小見出し的なものはいれると見やすくなります。 
そのブロックの機能の説明
再利用の観点から、ソースファイル全体を見ないでそのブロックのおよその動作がわかるような説明文があった方がいいと思います。 ただブロックの機能をわかりやすく文章で表現するのは難しいので省略されてしまう場合が多いと思います。 
紙に整理されたきれいなドキュメント(またはワープロのファイル)はたしかに見やすいのですが作成するのに多大な工数がかかります。 
それに紙に整理されたドキュメントの場合はソースファイルと1体ではないのでソースファイルを変更してドキュメントは修正されていないということがよくあります。 
必要最低限の工数で保守可能な情報を残すという意味でファイル先頭での機能の説明は重要です。 
改行の扱い
単語の途中でないならば任意の場所で改行ができます。 コメント中の場合はそこでコメントが終了します。 
1つの文を複数の行に分割して記述したり、1行の中に複数の文を記述することができます。(セミコロンで区切る) 
演算子
分類演算子説明
論理演算子and論理積
or論理和
not否定
xor排他的論理和
nand反転・論理積
nor反転・論理和
xnor反転・排他的論理和
算術演算子+加算
-減算
*乗算
/除算 (論理合成不可の場合が多いので注意)
modモジュロ
rem剰余
言語によるディジタル回路の設計 〜 VHDL
