ノンパラメトリック法本節以降では、ノンパラメトリック推定法のピリオドグラム、修正ピリオドグラム、ウェルチ法、および マルチテーパー法を、関連する CPSD 関数、伝達関数推定、およびコヒーレンス関数とともに説明します。ピリオドグラム一般的に、変動過程の PSD を推定する 1 つの方法は、過程のサンプルの離散型フーリエ変換を求め (通常は FFT を使用してグリッド上で実行)、結果の振幅の 2 乗を適宜スケーリングするというものです。この推定は、"ピリオドグラム" と呼ばれます。 長さ L の信号 xL[n] の PSD のピリオドグラム推定は、以下のように表せます。Pxx(f)=1LFs|∑n=0L−1xL(n)e−j2πfn/Fs|2,ここで、Fs はサンプリング周波数です。実際には、Pxx(f) の計算は有限個の周波数点のみで実行でき、この計算には通常 FFT が使用されます。ピリオドグラム法を実装する場合は通常、次の周波数での N 点の PSD 推定を計算します。fk=kFsN, k=0,1,…,N−1.場合によっては、FFT アルゴリズムによるピリオドグラムの計算は、周波数点の数が 2 のべき乗である場合に効率的です。したがって、入力信号に 0 を加え、長さが 2 のべき乗となるように伸ばす操作はめずらしくありません。ピリオドグラムの例として、以下の 1,001 要素の信号 xn を考えます。この中には、2 つの正弦波とノイズが含まれています。fs = 1000;                % Sampling frequency
t = (0:fs)/fs;            % One second worth of samples
A = [1 2];                % Sinusoid amplitudes (row vector)
f = [150;140];            % Sinusoid frequencies (column vector)
xn = A*sin(2*pi*f*t) + 0.1*randn(size(t));
PSD のピリオドグラム推定は、periodogram を使用して計算できます。この場合、データ ベクトルにハミング ウィンドウが乗算され、修正されたピリオドグラムが作成されます。[Pxx,F] = periodogram(xn,hamming(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
xlabel('Hz'); ylabel('dB');
title('Modified Periodogram Power Spectral Density Estimate');
アルゴリズム-  ピリオドグラムでは、以下のように FFT の出力の計算とスケーリングを行い、パワーと周波数プロットが生成されます。詳細な例は、「FFT を使用したパワー スペクトル密度推定」 を参照してください。入力信号が実数値の場合、結果として得られる FFT の振幅は、ゼロ周波数 (DC) に対し対称的となります。偶数長の FFT では、最初の (1+nfft/2) 点だけが一意です。一意である値の数を決定し、一意な点だけを保存します。一意の FFT 値の振幅を 2 乗します。振幅の 2 乗を (DC の場合を除いて) 2Fs/N でスケーリングします。N は、ゼロを加える "前" の信号の長さです。DC の値は、Fs/N によりスケーリングします。 一意な点数、nfft とサンプリング周波数から周波数ベクトルを作成します。振幅の二乗 FFT と周波数をプロットします。ピリオドグラムの性能本節以降では、リーケージ、解像度、バイアス、および分散を基準にピリオドグラムの性能について説明します。スペクトル リーケージ-  「ピリオドグラム」の節で説明した、(長さ L の) 有限長信号 xL[n] の PSD を考えます。大半の場合、xL[n] は、無限長の信号 x[n] に有限長の  箱型ウィンドウ wR[n] を乗算した結果と解釈すると便利です。 xL[n]=x[n]wR[n].時間領域での乗算は、周波数領域でのたたみ込みになるので、周波数領域でのピリオドグラムの期待値は、次のようになります。E{P^xx(f)}=1Fs∫−Fs/2Fs/2sin⁡2(Lπ(f−f′)/Fs)Lsin⁡2(π(f−f′)/Fs)Pxx(f′)df′,これにより、ピリオドグラムの期待値は、真の PSD とディリクレ カーネルの 2 乗とのたたみ込みであることが示されます。たたみ込みの影響を最も理解しやすいのは、正弦波データの場合です。x[n] が、M 個の複素正弦波の和から構成されていると仮定します。x(n)=∑k=1NAkejωkn.このスペクトルは、次のようになります。X(ω)=∑k=1NAkδ(ω−ωk),有限長のデータ列については、以下のように表せます。X(ω)=∫−ππ(∑k=1NAkδ(ε−ωk))WR(ω−ε) dε.この方程式は、X(ω)=∑k=1NAkWR(ω−ωk). と等価です。有限長の信号のスペクトルで、ディラック デルタ関数は WR(ω-ωk) の型の項で置き換えられました。これは、周波数 ωk を中心とする箱型ウィンドウの周波数応答に対応します。箱型ウィンドウの周波数応答は、以下に示す Sinc 信号の型をしています。
プロットには、メインローブといくつかのサイドローブが表示されています。サイドローブの中で最大のものは、メインローブより約 13.5dB 小さくなっています。これらのローブは、"スペクトル リーケージ" と呼ばれます。無限長の信号は、離散周波数点 fk に厳密な意味で集中したパワーをもつ一方、ウィンドウを適用された (または打ち切られた) 信号は、離散周波数点 fk の近傍で、「leaked」パワーを示しています。短い箱型ウィンドウの周波数応答は、より長いウィンドウの周波数応答よりも Dirac のデルタ関数への近似が良くないので、スペクトルリーケージは、データ長が短い場合に非常に重要になります。100 サンプルの次のデータ列を考えましょう。fs = 1000;                 % Sampling frequency
t = (0:fs/10)/fs;          % One-tenth second worth of samples
A = [1 2];                 % Sinusoid amplitudes
f = [150;140];             % Sinusoid frequencies
xn = A*sin(2*pi*f*t) + 0.1*randn(size(t));
[Pxx,F] = periodogram(xn,rectwin(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
スペクトルリーケージの影響が、データの長さにのみに依存することは、特筆すべきことです。これは、ピリオドグラムが有限個の周波数サンプルで計算されることから起因するものでは "ありません"。分解能-  "解像度" は、個々のスペクトルを区別できる程度 (能力) を表し、スペクトル推定の性能解析の基本的な考えになっています。周波数的に比較的に近い2 つの正弦波を分離するには、これらの正弦波のどちらか一方に対して、leaked スペクトルのメインローブの幅よりも、2 つの周波数間の違いが大きいことが必要です。メインローブ幅は、パワーがピークのメインローブの半分になる点の幅 (すなわち、3 dB幅) で定義されます。この幅は、fs / L と近似的に等価です。言い換えれば、周波数 f1 と f2 の正弦波に対して、分解可能な条件は以下を満たす必要があります。 f2−f1>FsL.上の例で、2 つの正弦波の差は、わずか 10Hz です。ピリオドグラムを使用して 2 つを明確に分離するために必要な解像度を得るには、100 サンプルを超える記録データを必要とします。 この基準が満たされない、すなわち、67 サンプルの場合を考えてみましょう。fs = 1000;                  % Sampling frequency
t = (0:fs/15)./fs;          % 67 samples
A = [1 2];                  % Sinusoid amplitudes
f = [150;140];              % Sinusoid frequencies
xn = A*sin(2*pi*f*t) + 0.1*randn(size(t));
[Pxx,F] = periodogram(xn,rectwin(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
解像度に関する上の議論は、S/N 比 (SNR) が、相対的にかなり高いためノイズの影響を考えなくても良いです。S/N 比 が低い場合、真のスペクトルは、分離が難しく、ノイズにより、ピリオドグラム上でのスペクトルの計算に人工的な邪魔な部分が現れます。例として、次のものを参考としてください。fs = 1000;                  % Sampling frequency
t = (0:fs/10)./fs;          % One-tenth second worth of samples
A = [1 2];                  % Sinusoid amplitudes
f = [150;140];              % Sinusoid frequencies
xn = A*sin(2*pi*f*t) + 2*randn(size(t));
[Pxx,F] = periodogram(xn,rectwin(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
ピリオドグラムのバイアス-  ピリオドグラムは、PSD のバイアス付き推定子です。その期待値は、以下のようになることが先に示されました。
ピリオドグラムは漸近的に無バイアスで、このことは、データ長が無限大に近付くにつれ、箱型ウィンドウの周波数応答がディラック デルタ関数により近くなるという、前述の観測からも明らかです。しかし場合によっては、ピリオドグラムは、データが長い場合でも PSD の推定法を満たさないものとなります。これは、次に説明する、ピリオドグラムの分散によるものです。ピリオドグラムの分散-  ピリオドグラムの分散は、次のように示されます。Var(P^xx(f))={Pxx2(f),0<f<Fs/2,2Pxx2(f),f=0 or f=Fs/2,これは、データ長 L を無限大にするにつれ、分散は、ゼロ方向に向かないことを示しています。統計的に、ピリオドグラムは、PSD の一致推定器ではありません。けれども、ピリオドグラムは、SNR が高い場合のスペクトル推定には、有効なツールです。特に、データが長い場合には、有効です。修正ピリオドグラム"修正ピリオドグラム" では、信号の端を滑らかにするために、DFT を計算する前に、時間領域で信号にウィンドウを適用します。これは、サイドローブの高さ、または、スペクトルリーケージのいずれかを小さくする効果があります。この現象は、箱型ウィンドウが使われたときに生じる急激な打ち切りにより、信号の中に取り込まれるスプリアス周波数として、サイドローブを解釈する可能性をもたせます。非箱型ウィンドウに対して、打ち切られた信号の端の点は、スムーズに減衰していきます。そして、取り込まれたスプリアス周波数は、ほとんど残りません。一方、非箱型ウィンドウはメインローブを広げることになり、その結果、解像度が減少します。periodogram では、データに適用するウィンドウを指定することにより、修正されたピリオドグラムが計算できます。たとえば、既定の箱型ウィンドウとハミング ウィンドウを比べます。fs = 1000;                  % Sampling frequency
t = (0:fs/10)./fs;          % One-tenth second worth of samples
A = [1 2];                  % Sinusoid amplitudes
f = [150;140];              % Sinusoid frequencies
xn = A*sin(2*pi*f*t) + 0.1*randn(size(t));
[Pxx,F] = periodogram(xn,rectwin(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
[Pxx,F] = periodogram(xn,hamming(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
ハミング ウィンドウを適用したピリオドグラムの中で、サイドローブが小さいですが、2 つのメインピークはより広がっていることはわかります。実際に、ハミングウィンドウに対応するメインローブの 3dB 幅は、箱型ウィンドウのものの約 2 倍になっています。そのために、固定したデータ長に対して、PSD 解像度がハミング ウィンドウにより達成できるものは、箱型ウィンドウで達成できるものの約半分になります。メインローブの幅とサイドローブの高さとの競合は、カイザー ウィンドウのような可変ウィンドウを使用することにより改善できます。非箱型ウィンドウ処理は、信号の平均パワーに影響を与えます。これは、時間サンプルは、ウィンドウを適用することにより、その一部が減衰するためです。これを補うには、periodogram と pwelch を使用して、ウィンドウの平均パワーが 1 となるように正規化します。ウィンドウの選択は、信号の平均パワーに影響を与えません。周波数成分が PSD 推定子によって解決されていない場合は、ウィンドウの選択は平均パワーに影響を与えます。PSD の修正ピリオドグラム推定は、次のようになります。 P^xx(f)=|X(f)|2FsLU,ここで、U は、ウィンドウの正規化定数です。U=1L∑n=0N−1|w(n)|2. Lおよび U が大きい場合は、ウィンドウ長に独立になる傾向があります。正規化定数のような U の加算は、修正ピリオドグラムに、漸近的にバイアスが適用されていないことを補償します。 ウェルチ法改善された PSD の推定子としては、ウェルチ [8]により提唱されたものがあります。この方法は、時系列データを (重ね合わせ可能) セグメントごとに分割し、各セグメントについて修正ピリオドグラムを計算し、その後、PSD 推定の平均を計算するものです。この結果を、ウェルチの PSD 推定と言います。ウェルチ法は、ツールボックスで、関数 pwelch により実装できます。修正ピリオドグラムの平均化は、データ全体を使った一つのピリオドグラムの場合と比べて、推定の分散を小さくする傾向があります。セグメント間のオーバーラップは冗長な情報を導入しますが、この影響は、非箱型ウィンドウを使用することで軽減できます。この非箱型ウィンドウは、セグメントの端のサンプル (オーバーラップしたサンプル) に設定する "重み" すなわち重要性を軽減するものです。しかし、上述したように、短いデータと非箱型ウィンドウとの組み合わせは、推定子の解像度が低下します。まとめると、分散の低減化と解像度の間にはトレードオフがあります。ピリオドグラムに関する改良された推定を得るように、ウェルチ法のパラメーターを取り扱うことができます。特に、SNR が低い場合は、より可能です。このことを、次の例の中で示すことができます。1000 サンプルのオリジナル信号を考えましょう。fs = 1000;             % Sampling frequency
t = (0:1*fs)./fs;    % 301 samples
A = [2 8];             % Sinusoid amplitudes (row vector)
f = [150;140];         % Sinusoid frequencies (column vector)
xn = A*sin(2*pi*f*t) + 5*randn(size(t));
[Pxx,F] = periodogram(xn,rectwin(length(xn)),length(xn),fs);
plot(F,10*log10(Pxx))
ハミング ウィンドウを使用して、3 つのセグメントに分割された 50% のオーバーラップをもつデータに対するウェルチ スペクトル推定を行います。[Pxx,F] = pwelch(xn,hamming(150),75,150,fs);
plot(F,10*log10(Pxx)); xlabel('Hz'); ylabel('dB');
title('Welch''s Overlapped Segment Averaging PSD Estimate');
上のピリオドグラムの中で、ノイズとリーケージは、正弦波によるピークと人工的に作られたピーク (ノイズ) との区別を不可能にしています。対照的に、ウェルチ法により作成された PSD は幅の広いピークを示しますが、2 つの正弦波の区別は可能です。これらは、ノイズ レベルとはかなり異なるものです。 しかし、さらに分散を低減しようとする場合、解像度の低下が、正弦波のどちらかを検出できないことになります。[Pxx,F] = pwelch(xn,rectwin(100),75,512,Fs);
plot(F,10*log10(Pxx))
PSD 推定におけるウェルチ法の詳細は、「Kay [2]」および「ウェルチ [8]」を参照してください。ウェルチ法でのバイアスと正規化ウェルチ法は、PSD のバイアス付きの推定子を提供します。PSD 推定の期待値は、次のようになります。E{PWelch(f)}=1FsLU∫−Fs/2Fs/2|W(f−f′)|2Pxx(f′)df′,ここで、L はデータ セグメントの長さ、U は修正ピリオドグラムの定義のものと同じ正規化定数、W(f) はウィンドウ関数のフーリエ変換です。すべてのピリオドグラムの場合と同じく、ウェルチ推定子は、漸近的にバイアスのないものになります。固定された長さのデータに対し、ウェルチ推定のバイアスは、セグメントの長さが全データ サンプルの長さより短いため、ピリオドグラムのバイアスよりも大きくなります。ウェルチ推定子の分散は、使用するウィンドウとセグメント間の重ね合わせ量の二つに依存するので、計算することが困難です。基本的に、分散は、平均化に使用する修正ピリオドグラムのセグメント数に反比例します。マルチテーパー法ピリオドグラムは、長さ L の信号 xL[n] を L 個の FIR バンドパス フィルターのフィルター バンク (並列配置のフィルター群) に通したものと解釈できます。これらのバンドパス フィルターのそれぞれの 3dB 帯域幅は、近似的に fs / L と等価であることが示されます。これらのバンドパス フィルターのそれぞれの振幅応答は、「スペクトル リーケージ」で説明した箱型ウィンドウの応答に似ています。ピリオドグラムは、フィルター処理された (各バンドパス フィルターの出力) 信号の 1 つのサンプルのみを使用して、フィルターが適用された個々の信号のパワーを計算したものと見なすことができます。そして、xL[n] の PSD は、各バンドパス フィルターの帯域幅に渡り定数であると仮定しています。信号の長さを長くすればするほど、各バンドパス フィルターのバンド幅は小さくなり、より望ましいフィルターになり、このフィルターのバンド幅に渡って、定数の PSD の近似を改良することができます。これは、信号の長さを長くするに連れ、ピリオドグラムの PSD 推定が良くなる理由の別な解釈を与えます。しかし、ピリオドグラムの推定の精度を良くする観点において、2 つのファクターが明らかになります。まず、箱型ウィンドウは、質の悪いバンドパス フィルターです。2 つ目は、各バンドパス フィルターの出力でのパワーの計算は、出力信号の単一サンプルをもとにしていて、その結果、非常に粗い近似になります。Welch 法は、フィルター バンクを使用して、同様な解釈ができます。ウェルチ法の実装で、いくつかのサンプルが、出力パワーを計算するために使われ、その結果、推定の分散が低減します。一方、各バンドパス フィルターの帯域幅は、ピリオドグラム法に対応するものよりも広くなり、結果として、解像度が低下します。フィルター バンク モデルは、分散と解像度の関係を向上させる新しい解釈を提供するものです。トンプソンの "マルチテーパー法" (MTM) はこれらの結果を使用して、改良された PSD 推定を行います。本質的に (ピリオドグラム法で使用した) 箱型ウィンドウであるバンドパス フィルターを使用する代わりに、MTM 法は、最適なバンドパス フィルターのバンクを使用して、推定が計算されます。これらの最適 FIR フィルターは、"離散扁長回転楕円体列" (DPSS、"スレピアン列" としても知られています) として知られる数列群から導出されたものです。 さらに、MTM 法は、分散と解像度とのバランスを考慮し、時間と帯域幅パラメーターが使用されます。このパラメーターは、時間 - 帯域幅の積 NW  で与えられ、スペクトルを計算するために使用するテーパーの数に直接関連します。推定を行う場合に使用するものは、常に、2*NW-1 です。このことは、NW が増加するにつれ、パワー スペクトルの推定が良くなり、推定の分散が減少することを意味しています。しかし、各テーパーの帯域幅は、NW に比例します。そのため、NW が増加すると、各推定は、スペクトルのリーケージをより鮮明にし、スペクトル推定全体にバイアスがより適用されます。各データセットに対して、バイアスと分散との最適トレードオフを可能にする値が、NW に対して存在します。MTM 法を実装する Signal Processing Toolbox™ の関数は pmtm で、これを実装するするオブジェクトは spectrum.mtm です。 spectrum.mtm を使用して、前の例の xn の PSD が計算されます。fs = 1000;                % Sampling frequency
t = (0:fs)/fs;            % One second worth of samples
A = [1 2];                % Sinusoid amplitudes
f = [150;140];            % Sinusoid frequencies
xn = A*sin(2*pi*f*t) + 0.1*randn(size(t));
[Pxx1,F1] = pmtm(xn,4,fs);
plot(F1,10*log10(Pxx1))
時間と帯域幅の積を小さくすることにより、より大きな分散を押さえて、解像度を増すことができます。[Pxx2,F2] = pmtm(xn,1.5,fs);
plot(F2,10*log10(Pxx2))
この方法は、ウェルチ法と比べて、離散扁長回転楕円体列を計算するため、より長い計算時間を要します。長いデータ列 (10,000 点以上) に対して、DPSS を一回計算し、それを MAT ファイルとして保存しておくことが重要です。dpsssave、dpssload、dpssdir、および dpssclear は、保存 DPSS のデータベースを MAT ファイル dpss.mat 内に保持するために用意されています。クロススペクトル密度関数PSD は、2 つの信号 xn と yn との間で次のように定義される、"クロス スペクトル密度" (CPSD) 関数の特殊なものです。Pxy(ω)=12π∑m=−∞∞Rxy(m)e−jωm.相関列および共分散列の場合と同じように、ツールボックスでは、信号列が有限であることから PSD と CPSD を "推定" します。 ウェルチ法を使用して 2 つの同じ長さの信号 x および y のクロススペクトル密度を推定するには、関数 cpsd  を使い、x の FFT の積と y の FFT の共役としてピリオドグラムを作成します。実数値 PSD と異なり、CPSD は複素関数です。cpsd は、関数 pwelch と同様に、x と y の分割したものやウィンドウ処理した部分を取り扱います。Sxy = cpsd(x,y,nwin,noverlap,nfft,fs)
伝達関数の推定ウェルチ法のアプリケーションの 1 つとして、ノンパラメトリック システム同定があります。H が線形の、時不変システムで、x(n) と y(n) は、それぞれ H への入力と出力であると仮定します。そして、x(n) のパワー スペクトルは、以下の式により、x(n) と y(n) の CPSD に関連付けられます。Pyx(ω)=H(ω)Pxx(ω).x(n) と y(n) の間の伝達関数の推定は、以下のようになります。H⌢(ω)=P⌢yx(ω)P⌢xx(ω).この方法は、振幅と位相の両方を推定します。関数 tfestimate は、ウェルチ法を使用して CPSD とパワー スペクトルを計算し、伝達関数推定用に、それらの比を形作ります。tfestimate を関数 cpsd と同様に使用できます。信号 xn に FIR フィルターを適用して、実際の振幅応答と推定応答をプロットします。h = ones(1,10)/10;	            % Moving-average filter
yn = filter(h,1,xn);
[HEST,f] = tfestimate(xn,yn,256,128,256,fs);
H = freqz(h,1,f,fs);
subplot(2,1,1); plot(f,abs(H)); 
title('Actual Transfer Function Magnitude'); 
subplot(2,1,2); plot(f,abs(HEST));
title('Transfer Function Magnitude Estimate'); 
xlabel('Frequency (Hz)');
コヒーレンス関数2 つの信号 x(n) と y(n) の間の振幅二乗コヒーレンスは、以下のように表せます。Cxy(ω)=|Pxy(ω)|2Pxx(ω)Pyy(ω).この割合を使った表現は、0 と 1 の間の実数値になり、周波数 ω での x(n) と y(n) の間の相関の尺度になります。関数 mscohere  は、データ列 x と y を使用して個々のパワー スペクトルと CPSD を計算し、CPSD の大きさの 2 乗と個々のパワー スペクトルの積との比を返します。このオプションと演算は、関数 cpsd および tfestimate と同じです。xn とフィルター出力 yn の周波数に関するコヒーレンス関数は、以下のようにして求めます。mscohere(xn,yn,256,128,256,fs)
入力データ列の長さを nfft、ウィンドウの長さを window とし、mscohere の演算で単一レコードのみ演算するよう、1 つのウィンドウ内でのオーバーラップ部分のデータ点数 numoverlap, を設定すると、関数では、すべて 1 からなるものが返されます。これは、線形的な従属性をもつデータに対するコヒーレンス関数は、1 になるためです。
パラメトリック法信号長が短い場合、パラメトリック法は、ノンパラメトリック法よりも高い解像度を提供します。これら 2 つの方法は、スペクトル推定へのアプローチが異なるもので、データから直接 PSD を推定する代わりに、データをホワイト ノイズがある線形システムに入力した結果の出力として "モデル化" するもので、結果として、その線形モデルのパラメーターを推定するものです。一般的に使用される線形システム モデルは、"全極モデル" で、z 平面の原点に、すべての零点をもつフィルターです。このようなフィルターへのホワイト ノイズの出力は、自己回帰 (AR) 過程です。このために、これらの方法は、スペクトル推定の "AR モデル" と見なされます。 AR 法には、ピークのあるデータ、すなわち、PSD がある周波数で大きくなるデータのスペクトルを適切に記述する傾向があります。多くの実際的アプリケーション中のデータ (たとえば音声のような) は、"ピークのあるスペクトル" を示す傾向があるため、AR モデルは多くの場合有効となります。加えて、AR モデルは、比較的簡単に解くことのできる線形方程式を導きます。 Signal Processing Toolbox では、スペクトル推定に対して、以下の AR 法を提供しています。ユール-ウォーカー AR 法 (自己相関法)バーグ法共分散法修正共分散法すべての AR 法は、次式で得られる PSD を与えます。P^(f)=1Fsεp|1−∑k=1pa^p(k)e−j2πkf/Fs|2.異なった AR 法ではパラメーターをわずかに異なった形で推定し、異なった PSD 推定を与えます。次の表は、種々の AR 法をまとめたものです。   AR 法 バーグ共分散修正共分散ユール・ウォーカー
スペクトル解析 - MATLAB & Simulink - MathWorks 日本
