『 <- 』は代入(この場合『 = 』とも書けるが推奨はされていない)、『 runif(a) 』は一様乱数を a 個作りベクトルで返す関数、『 a^2 』は a の二乗、『 sum(a<=b) 』は関係式 a<=b が真であるようなベクトル要素の個数、を意味する。ここで、ごく普通の数式によって、条件分け計算を複数回行なう指示が暗黙のうちになされることに注目されたい。 プログラム全体を読めば「サンプル数十万個として、一様乱数で xy のサンプルをつくり、半径1の円弧内に入ったサンプルだけを数える。」という計算の本質を反映した記述ができることが見て取れる。
代入『 <- 』は「付値」と呼ばれる関数でもあり、以下のように一行に書き換えても意味は同じ。
また、付値記号に矢印を用いると代入の向きを左右に使い分けられる。
ベクトルは「論理添字(元のベクトルと要素数が等しい論理値ベクトルを用いた添字指定)」を使うことで要素の絞り込みができ、そのベクトルに対して付値を行うと、絞り込んだ要素だけを別内容に置き換えることが可能になる。
以下はFizzBuzz問題の解答例である。(記号"#"から改行まではコメント文)
#  1から100までの整数を、ベクトルで生成する。(n: 加工前の数列 ・ Ans: 加工後の結果用数列)
1:100 -> n -> Ans
#  3の倍数FizzSet相当のAns要素を、文字列"Fizz"に置き換える。(FizzSet: 3の倍数位置を示す論理ベクトル)
Ans[n%%3==0 -> FizzSet] <- "Fizz"
#  5の倍数BuzzSet相当のAns要素を、文字列"Buzz"に置き換える。(BuzzSet: 5の倍数位置を示す論理ベクトル)
Ans[n%%5==0 -> BuzzSet] <- "Buzz"
#  両倍数の共通集合相当のAns要素を、文字列"FizzBizz"に置き換える。
Ans[FizzSet & BuzzSet] <- "FizzBuzz"
#  出力する。
cat(Ans)
これは実用的ではないが、関数のネスティング・再帰呼び出し・スコープの例として挙げる。R言語ではPascalやModula-2のように関数のネスティングが可能である。この例では、関数内部で更に局所的な関数を生成し、 f として参照している。スコープもPascal等と同様辞書式で関数 f の中ではその外側にある toyfactorial の変数が「見える」。 f は局所変数なので、関数の外側に同じ名前の変数があっても影響を与えない。ただし、Rは呼び出しスタックを遡る動的スコープも実現可能である。 f の内部では自分の名前を参照することができないので、自分自身を再帰的に呼び出すために Recall 関数を用いている。関数型の引数を利用することもでき、その場合複数の関数が互いに呼び出しあうことができ、また無名の関数をその場で定義して関数型の引数として渡すことができる。一種の複文のような用途に用いられる。NAは統計処理においては欠くことのできない特殊なデータで、データが無効であることを示す。
R言語の関数はそれ自体がオブジェクトであり、ある関数自体を外から参照したり書き換えたりすることができる。関数の本体部分を返す body 関数・仮引数リストを返す formals 関数・関数に付随する環境を返す environment 関数などが用意されている。
渡された式そのものを操作することも可能で、特定の環境(名前とポインタのリスト)の下で与えられた式を評価する eval 関数・渡された式の要素を環境に応じて置き換える substitute 関数・式を文字列に分解する deparse 関数等がある。
関数呼び出しも一種のリストとして処理されており、次のように call 関数を用いて、関数名と引数のリストから関数呼び出しオブジェクトを生成できる。
関数はファイルから読み込むこともでき、更には、パッケージとして一纏まりにすることもできる。
オブジェクト指向[編集]
R言語には継承やメソッドの実行時ディスパッチといったオブジェクト指向プログラミングの手法が取り入られており、数多くの総称的な (generic) 関数を持つ。これは同じ関数名であっても、取り扱うオブジェクトが属しているクラスによって独自の方法で処理を行うものである。Rでは、クラスはオブジェクトに付随する属性として扱われるものの一つであり、リストとして保管されている。
データ型[編集]
数値型(複素数を含む)・文字型・論理型といった基本的な型やベクトル・リスト・行列といった統計処理や情報処理に必要な型を備えている。既述のように、関数それ自体もデータである。データフレームは配列ないしはリストの拡張版で、コラム毎に異なったデータ型を持てるため、表の形で表現されたデータを格納/操作するのに有用である。データフレームは行列から生成することもあるが、ここではリストとの関連で説明する。
ベクトルとリスト[編集]
ベクトル型は、データをある順序で並べたものである。 2:5 または c(2, 3, 4, 5) は数値型データ2, 3, 4, 5をこの順序で並べたものである。変数 a, b を同じ要素数をもつ数値型データのベクトルとすると、 a + b は両ベクトルを要素毎に加算してできた、同じ要素数の数値型ベクトルを返す。 a + 1 はベクトル a の各要素に1を加算したベクトルを返す。 c('猫', '猫', '犬') のように文字(列)型・論理型データを要素とするベクトルを作ることもできる。
リスト型は様々な型のデータを並べたものである。ベクトルのリストやリストのリストも可能である。 list 関数によって生成できる。
R言語 - Wikipedia
