 時の過ぎるのは早いもので、年が明けたと思っていたら、気が付けばもう5月になってしまいました。新社会人の皆さんであればこれからエンジニアの仲間入りをしていろいろな知識を習得していこうと張り切っていらっしゃることでしょう。 
この連載ではJavaエンジニアの皆さんが必ずぶつかるデバッグについて実例を挙げながらその具体的な対処法について解説していきます。コンパイルエラーのメッセージは、現在よく使われているEclipse 3.1.x(の「問題」ビュー)で表示されるメッセージを基本に解説していきます。コンパイルに用いるJDKのバージョンは、5.0を想定しています。 
Javaプログラムにおけるデバッグのパターンは?
Javaプログラムにおけるデバッグの対象となりうるものには、大きく3つのパターンがあります。
(1)コンパイルエラー
Javaのプログラムを書いていて最初にやるデバッグは、おそらくコンパイルエラーのデバッグではないでしょうか。コンパイルエラーとは文字通りプログラムをコンパイルしたときに発生するエラーで、プログラムの文法的な誤りを示してくれるものです。 
コンパイルエラーが存在しているプログラムは実行することができません(実行してもコンパイルエラーが解消されていないというメッセージが出て実行できない)。そのためコンパイルエラーは実行前にすべて取り除いておかなければなりません。 
(2)ランタイムエラー
ランタイムエラーとはこれも文字通り実行時(ランタイム)に発生するエラーです。文法は正しく、「コンパイルエラー」も発生しないプログラムをいざ実行してみると、実行途中に例外が発生してしまう、というケースがこれに当たります。プログラムの中には、値の内容を自在に変えることのできる「変数」や、プログラム自身では完全には管理できない外部と連携する処理などを書くことがあります。コンパイル時には、これらについては基本的に、「正しい値がセットされている」「外部要因は正しく動作している」という前提の下に解析を行っているために、実際、実行してみると値が正しくなかったり、外部のシステムがうまく動いていなかったりするケースも当然あります。 
ランタイムエラーの場合も、コンピュータのコード実行時に発見され、コードのどの部分でどのような異常な動作になったかが例外のスタックトレースなどで指摘されます。ですから、コンパイルエラーと同じく、修正は意外とたやすいように思えてしまいそうですが、実際には、それほど簡単な作業ではありません。あるプログラムにおいて、なぜその変数に異常な値が代入されたのか、どうして外部システムとの連携がうまくいかないのか、といった、エラーに至るまでの原因をコードを見たり、環境を調査したりしながら細かく分析していかなければいけないことが多いからです。 
(3)仕様どおり動かない
コンパイルエラー、ランタイムエラーは、エラーメッセージや例外のスタックトレースのように通知が行われますので、その見方さえ知っていれば、修正個所や原因の特定を比較的簡単に行うことができます。それらに対して、「仕様どおり動かない」パターンのデバッグは、少々厄介なものです。まず、「仕様どおり動かない」ことは、コンパイラや実行環境は指摘してくれません。どのように動作すれば「仕様どおり」であり、どのように動作すれば「仕様どおりでない」かは、コンパイラや実行環境は判断できないからです。このケースのデバッグに対処するためには、デバッガーを使ったり、コードを机上デバッグするなどして、仕様どおりに動かない原因となっている個所をプログラマ自身が究明していかなければなりません。 
「〜を型に解決できません」が出てしまったら 
分類:コンパイルエラー
このメッセージは、Javaのプログラムをコーディングしていて、頻繁に見かけるエラーメッセージです。例えば、次のようなコードを見てください。 
デバッグのヒント教えます(1):Javaプログラムにおけるデバッグのパターンは? - @IT
