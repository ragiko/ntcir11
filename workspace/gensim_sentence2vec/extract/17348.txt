
Javaでは、データ型をきちんと扱わなければならず、たとえば数字にしても、やり方しだいでは文字列として扱われるので、そのままでは計算に使うことができません。たとえば、氏名と点数を扱う多次元配列を考えてみます。String test[][]={{"山田","7"},{"田中","8"},{"佐藤","9"}};いうまでもなく、山田さんは7点、田中さんは8点、佐藤さんは9点です。われわれ人間は、"7"が数字をあらわしていることが常識で分かるのですが、コンピュータはそうはいきません。このtestという配列では、文字列である氏名と数字の点数を一緒に管理するために、一括してString型(文字列)として扱っています。要するに、コンピュータにとってString型の"7"はただの文字列で、これを計算に使うなんて考えも及ばないのです。しかし、人間にとってみれば"7"をString型にしたのは配列を作って管理するためというただの便宜上の話で、これを数値として扱えなければコンピュータを利用する意味がありません。ここでは、上の配列の数字を文字列から数値に変換して、3人の点数の平均点を求めるという作業をしてみます。				                                Integerクラスはint型を発展させて便利にしたもので、「包み込む」という意味の「ラッパークラス」と呼ばれるものの一種です。今回の例でいけば、文字列を包み込んで数値に変えてしまうというわけです。たとえば、"7"という文字列を数値に変換してnumという変数に代入するには、以下のように、IntegerクラスのparseIntメソッドというのを使います。  int num=Integer.parseInt("7");Integerクラスにはいろんな機能があり、そのうちのparseIntという機能を使うと文字列が数値として扱えるようになるというわけです。では、3人の点数を数値に直して、平均点を求めてみましょう。public class Sample{    public static void main( String[] args )    {    	    	 String test[][]={{"山田","7"},{"田中","8"},{"佐藤","9"}};    	    	 int result1=Integer.parseInt(test[0][1]);    	 int result2=Integer.parseInt(test[1][1]);    	 int result3=Integer.parseInt(test[2][1]);    	  		    	 System.out.println((result1+result2+result3)/test.length);	    }}解説しますと、int result1=Integer.parseInt(test[0][1]);は、testという配列の一番目のかたまり {"山田","7"} のうちの2番目のデータ"7"をInteger.parseIntを利用して数値に変換し、result1という変数に代入したという意味です。関連記事for文で九九の表を作るequalsでパスワードと照合文字列から数値に変換ややこしい多次元配列配列は便利!
ど素人のJava入門 - 文字列から数値に変換
