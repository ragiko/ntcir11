
テストコードの分離
一般に、本番用コードのデプロイ時には、テストコードを除いたパッケージを作り、それをデプロイするので、テストコードは分離しやすい形で作成しておくのが普通です。
ここで、sMashの場合、Groovyのテストコードは/app/scriptsに配置されている必要があるため、テスト用のソース・フォルダを分けることができません。そのため、テストコードを分離するには、以下の方法を取る必要があります。
テストクラスのパッケージを分け、Antなどで分離する。
Ivyモジュールとして分離する。
テストクラスのパッケージを分け、Antなどで分離する方法は、通常のJavaアプリケーションと同様で、"test"などを先頭もしくは末尾に付与したパッケージを作成し、Antタスクなどによって、その文字列が付いたパッケージをデプロイ・モジュールに含めないようにビルドする方法です。同じモジュールの中にテストクラスが含まれるため、テストを含めてパッケージを作成することができたり、テストコードの有無を判別しやすいですが、分離のためにAntタスクなどに処理を記述する必要があります。
Ivyモジュールとして分離する方法は、テストコードを別のsMashアプリケーションに作成し、依存性を追加することで、別モジュールからテストを実行する方法です。テスト用アプリケーションから、テスト対象のアプリケーションとzero.testへの依存性を追加し、テスト用アプリケーションでzero testを実行します。これによって、テストコードが完全に分離されるため、デプロイ時に特別の考慮が必要なくなりますが、モジュールがわかれてしまうので、2つのアプリケーションのコードを管理しないとならず、また、別パッケージになるため、ブレーク・ポイントがうまく動作しないというデメリットがあります。
どちらの場合も、コードアシストの機能は利用できますので、テストの記述に関する差はありませんが、単体テストを実行しながらデバッグを行うことを考えると、ブレーク・ポイントが使えるよう、同一アプリケーション内に含めておくのがよいでしょう。
よくある質問
Q. Groovyのテストが2回実行されてしまう。
概要: Groovy-Eclipseプラグインを利用しており、Groovyで単体テストを記述していて、かつGroovyのクラスファイルの出力先を"/classes"にしている場合に発生します。
回避方法: Groovyのクラスファイルの出力先を、"/classes"以外のディレクトリーにする(例: /groovy_classes)。
原因: zero testの実行時には、Groovy-Eclipseプラグインによる"/app/scripts"のビルドを行わないように変更する必要があります。zero testでは、/app/scripts内にあるテスト"スクリプト"(Groovyのため)と、/classes内にあるテスト"クラス"(Javaのため)を検索して、テストを実行します。また、Groovy-Eclipseプラグインでは、Groovyスクリプトを事前にコンパイルし、デフォルトでは、Javaと同じ"/classes"フォルダに出力します。そのため、zero testでは2つの重複したテストを、別々のディレクトリーから発見することになり、2回実行されることになります。
Q. ブレーク・ポイントを張っているのに停止されない。リソース・ハンドラーのテスト中に、ブレーク・ポイントでブレークしたい。
概要: zero testをコマンドラインから実行している場合や、ApplicationLauncherクラスによって起動されたアプリケーションでリソース・ハンドラーをテストしている場合に発生します。
回避方法: eclipseのDebug機能経由でアプリケーションを起動する(通常のGroovyクラスは、zero testをeclipseの機能経由で起動する。リソース・ハンドラーなどは、アプリケーションを事前にDebugモードで起動しておく)。
原因: そもそも、ブレーク・ポイントで停止されるのはeclipseの機能なので、他の手段で起動した場合にはブレークできません。よって、sMashに動的にコンパイルされたクラスは停止されず、ApplicationLauncherクラスで起動した場合も同様です。ApplicationLauncherを使う事自体は問題ないので、ApplicationLauncherを利用したテストにするか、別途起動しているアプリケーションに対してリクエストするのかを切り替える仕組みを用意しておくと良いでしょう(別途起動しておけば、ApplicationLauncherで上げ下げする時間も短縮できます)。この切り替えにzero.configを使うことは可能ですが、起動していないアプリケーションのzero.configから値を取得するには、zero.core.groovysupport.ZeroObjectを利用する必要があることに注意してください。
切り替え用メソッドのサンプル: 以下のようなメソッドを用意し、各テストコードからは、assert文の入っているClosureを与えるようにすれば共通化できます。
void resourceHandlerTest(String methodName, Closure clos) {
ConfigLoader.initialize(".");
if (GlobalContext.zget("/config/test/launchByCode") == true) {
ApplicationLauncher launcher = new ApplicationLauncher(methodName, ".")
try {
launcher.startApplication();
clos.call();
} finally {
launcher.stopApplication();
}
} else {
clos.call();
}
}
※インデントのため、全角スペースを入れているので注意してください。
Q. ブレーク・ポイントで止まっているようだが、"Source not found"と表示される。
概要: テストクラスを別モジュール(別アプリケーション)にしており、テスト対象のアプリケーションにブレーク・ポイントを設定している場合に発生します。
回避方法: 残念ながら、回避できません。
原因: テスト用のアプリケーション側に、コードが見つからないために発生します。

