大きな効果を上げるために
チューニンガソン#1～#3の改善率を見ると,アプリケーションや全体のアーキテクチャに手を入れないで改善できるのは最大でも10倍以下です。もちろん数倍速度が違えばサーバ台数を大きく減らせるので有意義なのは間違いないのですが,ISUCONやチューニンガソン#4のような飛躍的な高速化は望めないことがわかります。
つまりチューニングでは,単にパラメータ設定を変更するのみではなく,ボトルネックになっているコードやクエリ,アーキテクチャに的確に手を入れていくことで大きな効果を上げることができるのです。
ボトルネックの発見と解消が大事
システム全体の処理時間についてパレートの法則(経験則)を適用すると,「全体の処理時間の80%は20%の部分で発生している」ということになります。実際にシステム全体で一番ボトルネックになっている部分を解消しないことには,ほかの部分に手を入れても大きな効果を上げることはできません。
そのボトルネックはシステムによってまちまちです。データベースの設定であったり,非効率なSQLクエリであったり,行儀の悪いアプリケーションのコードであったり,時間がかかる外部APIの呼び出しだったりします。
以降では,そのボトルネックを発見するには具体的にどうすればよいのかを見ていきます。
システムの現状を知る
パフォーマンスチューニングが必要な場合,何らかの理由で「遅い」と認識しているわけですが,本稿ではサーバサイドのWebアプリケーションに対象を絞りますので,フロントエンド側での問題がないかを簡単に確認しましょう。
『ハイパフォーマンスWebサイト』では,次のように書かれています。
エンドユーザーの応答時間のうち,HTML文書のダウンロードにかかる時間は10%から20%にすぎない。残りの80%から90%はページ内のすべてのコンポーネントをダウンロードするのに消費される。
Steve Souders著/武舎広幸ほか訳
『ハイパフォーマンスWebサイト—高速サイトを実現する14のルール』
オライリー・ジャパン,2008年,p.5
Google ChromeのPageSpeed拡張などを利用し,フロントエンド側での問題がないか確認してください。
各種メトリクスの収集
フロントエンド側ではなく,サーバサイドのWebアプリケーションがレスポンスを返すまでの速度に問題があるという確信が得られたら,まず現状の把握を行います。
チューニングを行う場合の鉄則ですが,何を変更し,その結果どのように数値指標が変化したかを計測可能な状態にすることが大事です。計測できない状態でむやみに変更を行うと,改善どころか,かえって性能を落とすことになりかねません。
プロダクション環境では普通に行われていることと思いますが,Munin,Cacti,Zabbix,Ganglia,CloudForecastなどのリソースモニタリングツールを利用し,各種の基本的な数値を収集,グラフ化します。
CPU使用率
メモリ使用率
ネットワーク帯域・パケット数
ディスクI/O
HTTPリクエスト数
データベース,KVS(Key-Value Store)などに対する発行クエリ数
レスポンスタイムの計測
Webアプリケーションへのリクエストに対してレスポンスタイムを計測して可視化することで,次のような現象を把握できます。
突発的な現象で,短時間だけレスポンスタイムが悪化した
日時が経つにつれて徐々に性能が劣化している
ある時点のデプロイ後,障害になるほどではないが性能劣化が認められる
死活監視として,特定URLのレスポンスに時間がかかり過ぎた場合に障害と見なすようなことは広く行われているでしょう。しかしそれだけでは,一部のリクエストのみ遅くなっていたり,全体の処理速度が徐々に遅くなっていったりする現象を把握できません。
チューニングする際の指標となるデータとして,レスポンスタイムを記録し可視化することをお勧めします。
nginxの設定例
Webサーバがnginxの場合,処理時間として$request_time,$upstream_response_timeをログに記録できます。$request_timeはnginxがリクエストを受け取りはじめてからレスポンスをクライアントに返しきるまでの時間(小数点を含む秒数),$upstream_response_timeはnginxがリバースプロキシとして動作する場合に,プロキシ先からのレスポンスを得るまでの時間が記録されています。
それに加えてリスト1のように$upstream_addrも同時に記録することで,どのアプリケーションサーバに接続して何秒でレスポンスが得られたかをログから読み取ることができます。トラブル時には特定のアプリケーションサーバからのレスポンスのみが悪化するような場合もあるため,同時に記録するとよいでしょう。
第17回 Webアプリケーションのパフォーマンス改善(1):Perl Hackers Hub｜gihyo.jp … 技術評論社
