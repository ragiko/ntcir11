
ここでの尤度は(11の確率)×(13の確率)×(23の確率)になる事に注意してください。平均が15で分散が40の正規分布であれば、11は0.053、13は0.061、23は0.027の確率で発生するので、尤度はそれらを乗じて0.000085708になります。
平均が16、分散が40の所で尤度が最大になりました。試した範囲では、これがもっともらしい正規分布の平均と分散となります。観測されたサンプルの値は固定(11、13、23)になるので、尤度関数は平均と分散の関数になります。
2. 尤度関数、対数尤度関数、一階条件から最尤法を試みる
実際は手当たり次第にパラメーター(平均と分散)の組み合わせを試すわけにはいかないので、尤度関数の対数をとって対数尤度関数にした後に、対数尤度関数をパラメーターでそれぞれ微分して連立方程式にした後に、数値解析アルゴリズムを使ってせっせと計算します。
尤度関数は平均と分散をパラメーターとする同時確率となりますから、以下のようになります(「経済統計補足資料#27:最尤推定量の導出」から転載)。要するに正規分布による同時確率の計算式ですね。
このままだと計算が難しいので対数化します。
対数化したままだとコンピューターは計算できないので、偏微分して一階の条件を整理します。
この連立方程式をニュートン・ラフソン法のような数値解析アルゴリズムで解きます。正規分布の場合は、整理すると手計算可能なぐらいシンプルな方程式になりますが、試しにコードを書いてみましょう。
# サンプル
x <- c(11, 13, 23)
# x <- rnorm(300, mean=15, sd=10) 等でも計算できる
n <- length(x)
# 連立方程式を設定
f1 <- expression(-sum(x-mu)/s2)
f2 <- expression(-n/(2*s2) + sum((x-mu)^2)/(2*(s2^2)))
# muとs2で一階微分を作っておく
g11 <- expression(n/s2)
g12 <- expression(sum(x - mu)/(s2^2))
g21 <- expression(sum(mu - x)/(s2^2))
g22 <- expression(n/(2*(s2^2)) - sum( (x - mu)^2 )/(s2^3))
# 初期値を設定
mu <- 10 # 正規分布の平均値
s2 <- 10 # 正規分布の分散
for(i in 1:10){
# (mu, s2)を2x1行列にする
m <- matrix(c(mu, s2), 2, 1)
# (mu, s2)で評価したf1とf2の値を2x1行列にする
f <- matrix(c(eval(f1), eval(f2)), 2, 1)
# ヤコビアンに(mu, s2)を代入した行列を作る
j <- matrix(c(eval(g11), eval(g21), eval(g12), eval(g22)), 2, 2)
# 行列mから、ヤコビアンの逆行列と評価式を乗じたものを引く
m <- m - solve(j)%*%f
# 行列mを(x, y)に展開しておく
mu <- m[1]; s2 <- m[2]
print(sprintf("[%d] (mu,s2)=(%f,%f)", i, mu, s2))
}
print(sprintf("平均%2.3f、分散%2.3f(標準偏差%2.3f)の正規分布", mu, s2, sqrt(s2)))
実行すると以下の表のように9順目ぐらいで収束します。例えば初期値を0付近にすると収束しなくなるので注意してください。
平均分散11の確率13の確率23の確率尤度(=同時確率)
Rと手作業で覚える最尤法 - 餡子付゛録゛
