
Think ! Software Reuse ソフトウェアの部品化・再利用
私が一部を執筆担当した書籍をベースに、初心者にもわかりやすく加筆修正してオープンいたします。文章内にでてくる「領域分析」「領域モデル」は、別のところでは「ドメイン分析」「ドメインモデル」と呼んでいたりもします。
1−1 背景
ソフトウェアの部品化・再利用の研究は、1968年にベル研究所の
DougMcllroyの「部品再利用に基づくソフトウェア開発の提唱」の発表に始まったといわれてます。それ以来、各種の研究が進められており、1984年、1987年には、IEEEの雑誌で再利用に関する特集が組まれ、1991年には第1回ソフトウェア再利用ワークショップが開催されてます。1990年代に入って、更に熱心な取組みを続けています。
ソフトウェアの部品化再利用の課題とは、
(1) 再利用可能なソフトウェア部品の開発
(2) ソフトウェア部品を再利用による新規開発
(3) 部品化再利用の開発標準への組込
の3つがあります。
(1)については、ある部品を『いかに作成するか(HOW)』についての技術は、複合化設計や構造化設計におけるモジュール化の方法などで、既に十分に語り尽くされているといえます。ただしそこには、「開発すべきソフトウェア部品の機能要求が確定している」という前提が必要になってきます。つまり、あるシステムを開発する時に、『何を部品化すべきか(WHAT)』が重要であるにも関わらず、優秀な開発リーダーの経験と勘と度胸によって、「えい、やぁ!」で行われてきた部分であると言ってよいでしょう。。この『何を部品化すべきか(WHAT)』の検討に関する技術は、これまであまり研究の焦点とはなってきていませんでした。再利用を意識した部品の開発において、今や『HOW』よりも『WHAT』が重要であり、 戦略的な部品化・再利用によるソフトウェア生産を前提としないで語ることは出来ないでしょう。
(2)、(3)については、まず、再利用可能なソフトウェア部品が部品ライブラリーに蓄積され、整備管理された状態で、設計者や開発者が自由に検索できるメカニズムが提供されている必要が有ります。これにより、再利用によるソフトウェア開発が開発の現場に浸透し、開発部門のソフトウェア開発プロセスの標準に組み込むことが可能となります。このような「管理的側面」は「技術的側面」と対比されながら、1990年前半に話題を集めました。
この『WHAT』が、『領域分析』の目指すところです。1980年に Jim Neighborsは、この『領域分析』を次のように提唱しています。
「ある特殊な問題領域内のよく似たシステムの集合について、オブジェクトとオペレーションを識別する。」
以来、領域分析の手法が幾つか提案されているが、現在に至ってもまだ未完成の分野ではある。
[このページのトップに戻る］
1−2 現状の課題
調査によると、 ソフトウェアの部品化・再利用の取組みの現状について、確かに、企業の部品ライブラリーにはいくつかのソフトウェア部品が蓄積されています。しかし、ベストセラーともいえる部品がわずかにあるだけで、それ以外のほとんどはあまり使われていないのが現状でした。たとえ処理効率性や資源実行性や使用性などの品質が優れていても、機能的に『何』を実行するものなのかがはっきりしないとか、または機能がごく限定されている等が、その理由としてあげられています。[*4]
そこには、そのような状況が起こる背景が有ります。ソフトウェア部品の開発に当たって、開発者は「部品」としての汎用性を高めようとします。しかし、開発者はその「部品」が使われるであろう場面を十分に想定することが出来ないといえます。すなわち、開発者の目から見た「再利用できるであろう」部品でしかないのです。このような経緯で開発されたソフトウェア部品(時には、ツールであったり、手法であったりします)を、開発者の想定は異なった場面で再利用しようとすると、利用者にとって非効率であったり、不具合を検出したりすることになります。
また、ソフトウェア部品の開発者が十分に汎用性を追求していたとしても、逆に活用できる範囲を明確にすることが出来なかったり、それを記述するすべがなかったりして、利用者はどれが自分にとって有用なものなのかを選別することが容易でないのも事実です。
『そもそも部品がなければ、再利用なんてできるはずがない』のは、まぎれもない事実です。しかし、「はい、これが部品だよ。」と言って手渡されても、その部品が自分の開発に使われることを想定して作られたものでなければ、安心して使えるものではないでしょう。また、既に存在する部品がかつてAやBの開発で利用した実績が有るからといって、XやYの開発に利用できるとは限らないでしょう。逆に、Xの開発で使われた「部品らしきもの」が、XやXの開発でもたまたま利用できた場合、それはまるで誰もが認めた「真の部品」であるかのように扱われてしまうこともあります。この過程において、その「部品らしきもの」が用途に応じて更新され、洗練されて、「真の部品」へと成長して行く場合もあるでしょう。しかし、生まれた時に抱えていた爆弾のようなもの(制約)に縛られて、それを利用して開発するソフトウェアの品質(例えば、レスポンス)が不十分なものとなる危険性を持ちあわせていると言ってもいいでしょう。同様に、Xの開発で使われた「部品らしきもの」を、Xの開発で利用しようと「試みる」事がよくあります。要するに、まず使えそうかどうかを判断するのです。この時の判断基準は曖昧であり、「使えそうにない」と判断すれば、それを使わずに他を探すか、自作するかのいずれかになります。では、「使えそうである」と判断するには、ロジック内容を理解し、結合してテストした上で、「必要な修正を施せば使えそうだ」と判断し勝ちである。このため、ソフトウェア部品を再利用するに当たっては、部品を修正しその結果をテストする作業を伴い、思わぬ非効率や不具合を引き起こすことになってしまうのです。
これらから言えることは、部品を開発する人も再利用する人も「ソフトウェア部品はそもそも完全な形で存在していない」と認識していることです。どうせ利用する人が自分の好きなようにカスタマイズして使うだろうとか、きっとこの部品は修正しなけりゃ使えないだろうと考えていることが問題です。そういった意識の問題があるかぎり、真の意味での部品化・再利用は実現できないでしょう。
[このページのトップに戻る］
1−3 再利用可能部品の開発
再利用可能なソフトウェアとは、「再利用されるために設計されたソフトウェア」と定義されています。ここでいう『再利用』とは、与えられているものを一切の修正を施さずにそのまま使用する(Black-Box
Reuse)ことを指しています。現在個人レベルもしくはプロジェクトレベルで進められている『再利用』は、既に述べたような危険性をはらんでおり、本来のソフトウェア工学が目指すところの「計画された(planned)」かつ「組織化された(systematic)」『再利用』とは性質を異にするものとして扱う必要があります。[*13]
「再利用のために部品を開発する」作業は、需要と供給のバランスの上に成り立つ『ビジネス』ということが出来ます。また、限られた人、物、金を有効に利用し、投資対効果を最大にするべき『SEプロジェクト』であるともいえます。(ただし、ここでのSEとは、システムズエンジニアではなく、ソフトウェアエンジニアリングです。)すなわち、分析、要件定義、設計、開発、テスト、運用保守の局面が必要であり、品質、納期、コストのマネジメントが要求されるのです。(日本科学技術連盟
ソフトウェア品質管理研究会で「ソフトウェア部品の品質特性」、「再利用の経済モデル」に関する研究が行われている。[*4])
また、ビジネスであるからには、顧客のターゲット層を明確にし、需要と供給のバランスのもとに、その分析作業(マーケティング活動)を進めなければならない。ソフトウェア部品の需要を明確にするこの作業こそ、計画的な再利用を進める上で重要なマーケティング分析、要求定義の局面であり、本章で述べる『領域分析』である。
[このページのトップに戻る］
1−4 期待
ソフトウェア開発において、新規に開発される単体のものはせいぜい2割程度と言われています。すなわち現状では、既存の同種類のシステムに組み込まれているソフトウェアや、同種類の開発を携わっているグループや個々の技術者に蓄積されている技術や経験を、次の新しいシステムの開発にできるだけ有効に活用していこうとしています。この現状を理解できれば、同種類のシステム全体をひとつの集合体とみなし、その対象領域を明確にし、その対象領域に固有な性質や知識を整理し体系化して「領域モデル」を作成することが重要であることが分かります。自部門でやっているソフトウェア開発の類似性をまとめ、「AもBもCもどのプロジェクトも結局GUIベースの画面設計とRDBを用いたシステムじゃないか」とか「XもYもZも工作機械の出力データを受け取って、散布図を作成するだけじゃないか」ってな具合に共通な性質を見出すことはよくあるでしょう。それをきちんと図式化(モデル化)してないのが問題です。ですから、この対象領域を明確に定義することで、この領域に属するソフトウェア開発を実施するのに必要な開発方法論や開発手法、ツール、再利用部品群等を見出すことが可能となるのです。[*16]
この「領域モデル」があれば、個々のソフトウェア開発はその領域のサブセットであることが認識できます。また、実際の開発作業を進めながらも常に「領域モデル」と照らし合わせることで、同一領域内の類似したソフトウェア開発の問題など、その領域の性質についての認識を明確にさせる利点をも併せ持ってるといえます。これはすなわち、個々のソフトウェアの開発作業を本質的に増強させることになります。従って、領域のモデリングによって、各領域毎に個別の開発の方法論や手法を再構成(リエンジニアリング)することを可能にするものであるといえます。
近年のビジネス環境は、多種多様なソフトウェアを短期間で効率よく生産しなければならなくなってきています。この動向は、重厚長大な製造業が衰退し多品種少量生産にシフトしてきた姿に類似しているといえましょう。総てのソフトウェア開発を、同じ一つの土壌の上で行なう必要はないのです。それぞれのソフトウェアの「領域」の特性に合わせて、個別に生産性と品質の向上を目指すべきでしょう。「領域」毎に部品化を図ることは、その領域に特有の戦略を明確に出来ますし、対象の絞り込みによって長く再利用される部品の開発を目指すことが出来ます。そのためにも『領域分析』は今後の重要な武器となります。
「領域モデル」はソフトウェアの設計や開発の局面だけでなく、保守や開発者向けの教育、リスク分析などにも利用することが可能です。すなわち、一度しっかりとした「領域分析」を行い「領域モデル」を作成することは、「製品定義」から「要求定義」「設計」「保守」「実現(開発)」のあらゆる局面で適用可能であり、ソフトウェアの開発の品質と生産性の向上を実現するカギであるといって良いでしょう。
[このページのトップに戻る］
参考文献:
松本正雄、『再利用技術の動向』 情報処理学会
ソフトウェア再利用シンポジウム、1992年
磯田定宏、 『ソフトウェア再利用技術の技術的側面から管理的側面まで』情報処理学会
ソフトウェア再利用シンポジウム、 1992年
伊藤潔、 『「ドメイン分析/モデリング」研究グループ研究会
設立趣意書』、情報処理学会
菅野文友、吉澤正監修、 『21世紀のソフトウェア品質保証技術』
日科技連出版社 石田敦子編集責任、第4部『ソフトウェア再利用技術』
片岡雅憲 『ソフトウェア・モデリング』 日科技連出版社
1988年9月
片岡雅憲 『ソフトウェア再利用技術』 日科技連出版社
1992年4月
Will Tracz, 『A Tutorial on Domain-Specific
Software Architectures and Megaprogramming』
IEEE Compsac'92 Tutorial, 09/22/1992
Ruben Prieto-Diaz and Guillermo Arango,"DOMAIN
ANALYSIS AND SOFTWARE SYSTEMS MODELING",
IEEE COMPUTER SOCIETY PRESS, 1991
Biggerstaff, T., and Richter, C., "Reusabilityy
Framework, Assessment,and Directions,"IEEE
Software, vol.4, no.2, pp.50-64, July 1987.
Biggerstaff, T.J., "Design Recovery
for Maintenance and Reuse," IEEE Computer,
vol.22, no.7, pp.23-29, July 1989.
Tracz, W., Coglianese, L,"Domain-Specific
Software Architecture Engineering Process
Guidelines," IBM Federal Systems Company,
ADAGE-IBM-92-02,1992
Tracz, W., "The Three Cons of Software
Reuse," Proceeding of Fourth Workshop
on Software Reuse Tools., 1990.
Prieto-Diaz, R., "STATUS REPORT: SOFTWARE
REUSABILITY," IEEE Software, pp.61-66,
May 1993.
James Withey & Will Tracz, "the
Fifth Workshop on Institutionalizing Software
Reuse, "Domain Analysis & Engineering
Working Group, 1993
William B. Frakes & Sadahiro Isoda, "Systematic
Reuse," IEEE Software, pp.15-19, September
1994.
田村恭久、伊藤潔、杵島修三、 『ドメイン分析・モデリング技術の現状と課題』
情報処理 Vol.35 No.10, 1994年10月
Coglianese, L., Smith, R., "Core avionics
domain analysis," IEEE/AIAA 11th Digital
Avionics Systems Conference (Cat. No.92CH3212-8)
p143-148 1992
Coglianese, L., Szymanski, R.,"DSSA
ADAGE: an environment for architecture based
avionics development," AGARD Conference
Proceeding 545,Aerospace Software Engineering
for Advanced Systems Architectures p32/1-8,
1993
Coglianese, L.,McIntyre, H., "DSSA-ADAGE
Domain Analisys using OMTool," IBM
Federal
Systems Company, ADAGE-IBM-92-12,1992
[このページのトップに戻る］
Copyright 1999−2008 by handoh
Think ! Reuse 「ソフトウェアの部品化と再利用」
