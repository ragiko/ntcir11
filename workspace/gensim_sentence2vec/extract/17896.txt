正規表現の概要
正規表現は、Perlの中で最も重宝する機能のひとつです。正規表現にはテキスト処理のための様々な機能があり、文字列の中から特定のパターンを見つけ出したり、置換したりすることができます。
正規表現の基本的な使用方法
たとえば、$strという変数に格納したデータの中から、「A」で始まって途中は何があるかわからないが最後が「E」という文字列を探したい場合、次のように記述することで、条件にマッチする文字列を見つけることができます。
$str =~ /A.*E/;
上記では、ドット( . )が改行以外の1文字を表し、アスタリスク( * )がその任意の文字の0回以上の繰り返しを意味します。このように、正規表現において特殊な働きを持った文字を正規表現演算子、またはメタ文字と呼びます。また、=~ はパターン結合演算子と呼ばれ、「左辺の値から右辺の値を検索する」という意味があります。
正規表現の構文
パターンマッチ演算子
VALUE =~ /PATTERN/gimosx
正規表現は、左辺の VALUE に格納されている文字列から右辺のPATTERN がマッチするかをチェックします。VALUE のなかに PATTERN がマッチすれば 1(TRUE)を返し、マッチしなければ "" (FALSE)を返します。通常、VALUEには変数を指定しますが、指定しない場合はデフォルトで特殊変数 $_ の値が使われます。
正規表現の最後に付加している g、 i、 m、 o、 s、 xはオプションです。これらは必要に応じて使うことができます。
次の例では、変数 $methodに格納された文字列から大文字の「GET」と小文字の「get」を探します。正規表現の最後にある iオプションは、大文字・小文字を区別しないように指示しています。
$method =~ /GET/i;
正規表現の構文と、演算子については、m演算子で詳しく説明しています。
パターンマッチ演算子の否定形
VALUE !~ /PATTERN/gimosx
この構文は構文1とは逆に、VALUE に PATTERN がマッチしない場合に 1 (TRUE)を返し、マッチすれば "" (FALSE) を返します。
置換演算子
VALUE =~ s/PATTERN/REPLACE/egimosx
置換演算子の構文は s/PATTERN/REPLACE/ となっています。この s 演算子は、指定されたPATTERN を見つければ、それを REPLACE で置き換えます。
変数を使ったパターン
PATTERNには、変数が含まれていてもよく、パターンが評価されるごとに変数が展開されます。特殊変数の$) と $|は文字列の終わりを調べるパターンであると解釈されるので、展開されません。
/<IMG $atr>/;
正規表現のメタ文字
正規表現で特に重要なのがメタ文字です。正規表現のメタ文字はその文字自体を表すものではありません。メタ文字を使うと、「行頭にあるパターンだけを探す」、「英数字を探す」、「大文字または小文字で始まるパターンだけを探す」など、さまざまな方法で検索パターンを指定することができます。
メタ文字の逆の意味を持つのがリテラルで、正規表現で特殊な意味がなく、表記どおりの文字列として扱われます。
正規表現のメタ文字の一覧
メタ文字
説明
正規表現 | Smart
