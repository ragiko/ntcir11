
はじめに
日本語で思考していたり、仕様書が日本語の場合、翻訳したり対訳表を作ったりする作業が無駄なのはあきらかなので、わざわざ英語に訳して識別子を命名し日本語のコメントを付ける必要はありません。
Q. E. D. 
しかしながら、歴史的経緯のようなものによって英語が得意で無い人でも英語で識別子を命名しようと言うのが多数派のようです。(※要出典)
例えば「進捗を確認してboolを返す関数」を英語で命名する事考えて下さい。
すぐに適切な関数名が英語で思いつきますか?日本語なら簡単に適切な関数名が思いつくはず。
簡単だし分かりやすい!!!
わざわざ英語に翻訳するのが無駄な事は明らかですね。
※注意:コメントも識別子も英語だよって人は対象にしていません。それは英語のままにした方が良いです。
※Qiitaのマークダウンが日本語識別子に対応してないのか表示が乱れますが、これはまともなコンパイラなら大丈夫なコードです。javaでは表示が乱れないので、報告しといた方が良いかな。
日本語の識別子
英語の識別子の命名規則は、キャメル、パスカル、スネーク、大文字スネーク云々、それを型名、変数名、関数名、マクロ等でそれぞれ統一する云々という事が多いです。
例えば、「定数以外はスネーク、定数は大文字スネーク」あるいは、「型名と関数名はパスカル、変数はキャメル、定数は大文字スネーク」とか、人によって多少の違いはありますが、どういう規則にすればよいかみたいな知見は大体の人が持っているでしょう。
しかしまともに日本語を使う事を考慮した命名規則を適用した経験がある人はいたりいなかったりするため、どうするのが良いかパッと思いつく人は少ないと思います。かといって日本語識別子をルール無しで使いはじめると書き方が高確率でバラバラになり、カオスで楽しいのですが、読みにくくなります。
こういう本末転倒なコードを書き出す人が出るかも、流石にないか?
そんなこんなで、コメントが日本語だし識別子に日本語を使ってみようと思う人向けに。
「本当に使えるのか」
「コーディング規則はどうするか」
あたりを解説したいと思います。
サンプルや用語や解説はC++のものになりますが、別にC++以外でも似たような話になると思います。
一応実際の経験を元にしたノウハウとなっています。
※再注意:コメントも識別子も英語だよって人は対象にしていません。それは英語のままにした方が良いです。
識別子に日本語を使う前に
識別子に日本語が使えるプログラミング言語って普通なの?
プログラミング言語によって微妙に異なる※1が、一般的なプログラミング言語は言語仕様上ASCII範囲内の文字以外にUTF-8の範囲内の文字が識別子に使える、使えない言語は少ないしもし使えないとしたらそれは非実用的な言語※2か古い言語か仕様のバグだと思われます。
あと日本語以外に数学記号等も普通に使えます。
(※1.言語によって、「てにをは」を含む識別子に制限がある、句読点が使えない、絵文字が使えたり使えなかったりと言った細かい違いはあります)
(※2.非実用的な言語の例:WhiteSpace、Brainfuck)
プログラミングの流儀的にどうなの?
多くのプログラミング言語がそういう風に設計されている以上、頭の中で日本語で考えていたり仕様書が日本語なら日本語で命名、英語でなら英語、ドイツ語ならドイツ語で識別子を命名するのが自然なプログラミングスタイルであると言えます。
キーワードが英語っぽいから識別子も英語にすべきとか言ってる人を見たことはありますが、日本語の文章に英単語が混ざるのはNormalなので何のProblemもNothingでしょう。
(※英語とローマ字が混ざると分かりにくいように、例えばアルファベットを使うエスペラントネイティブの人とかだと話は変わってくるかもしれません)
移植性について
ここ数年でUTF-8の対応状況はかなり良くなっており、文字コードの問題が起こる事はそんなにないです、文字コードで問題を起こすようなソフトはダメダメと言える状況になっています。
とはいえ自分が使っているソフトがダメダメな事はよくあるので、識別子に日本語を使いたい方は事前に使っているソフトがUTF-8に対応しているか確認した方が無難です、適当にUTF-8にしか存在しない文字を入れれば対応してるかは簡単に確認出来ると思います。
(©マークと著作者の表記を入れるのがオススメ)
ちなみにUTF-8が使えると公式に書いてあるからと言って互換性があるとは限りません。
BOMの有無や改行コードの違いがあったりするので、実際に確認を取りましょう。
あとファイル名の仕様はOS毎にバラバラでややこしいです。移植性を考慮した上でファイル名を日本語にしたい場合はわりと面倒そうです。
C++におけるコンパイラの対応状況
C++ではエンコーディングに規定が無いので、規格上はUTF-8でエンコードしたファイルをコンパイル可能かは実装依存です。さらに言えばパンチカードしか対応していないコンパイラも合法だったりします。
しかしながら主要なコンパイラはUTF-8でエンコーディングされたファイルに対応しています、ユニバーサル文字列リテラル入った時点でUTF-8対応しないってのは流石にないかと思います。
ただUTF-8に対応しているとは言ったものの、2014年10月現在、識別子のサポートについてはバラバラです。
・MSVC:絵文字や句読点等も使える
・Clang:Annex Eの規格通り
・g++:識別子名はASCIIとユニバーサル文字名のみ
・ICC:持ってないです(※要出典)
Clangが対応したのも2013年の夏頃だったりで、古いコンパイラを使わざるを得ない場合、ツール側で別の文字に変換してからコンパイルするみたいな工夫が必要です。
よく分かりませんが、MSVCは次期規格を見据えて実験的に拡張してるんだろうか?
g++はさっさと対応しろと言わざるを得ない。
(ちなみgccの中でもgddやghcは識別子のUTF-8対応しているようです)
規格上使える文字は、1236P辺りを参照して下さい。
n3337.pdf
C++以外は各自で調べて下さい。
g++でどうしても動かしたい場合
解説は以下が詳しい。
名古屋313の日記:日本語フィーバー開発
要約すると「あ」はプリプロセスでユニバーサル文字名「\u3042」に変換されるけど、この変換処理は単純なのでエディタやIDE側でも出来る、ちょっとプラグイン作って「HOGE3042」に変換してからコンパイラに渡せばASCIIしか対応していないコンパイラでもOKだよみたいな理屈です。ちなみに最新のg++であればユニバーサル文字名に変換しても大丈夫なようです。
この方法を使えば、アセンブラや周辺ツールがエラーを吐いても回避出来ると思います。
使われてない事もない
最初に日本語識別子は少数派だと書きましたが、使われている事もあるようです。
テストの分野では有名な書籍に日本語の方が楽だよみたいな事が書かれたのもあってわりと普通らしく、データベース分野なんかでもわりと普通らしいです、あとはぴゅう太とかなでしことか。
こちらが参考になります。
日本語テストメソッドについて
日本語識別子は止めた方が良い場合
社内公用語や仕様書が英語、オフショア開発している等の例では日本語識別子を使う理由はありません。使ってるツールの文字コード対応がお粗末だけど使わざるを得ない場合や大半のメンバーが日本語より英語が得意な場合も識別子は英語で良さそうですし、古いコードをなんとか保守している場合等も規則を変えるのは逆効果になるでしょう。
こういった場合は英語を勉強して英語で命名出来るようになった方が良いでしょう。
他の人を説得出来るかどうか
[Java] 内部的にunicodeだから日本語つかえるけど・・・いくら英語苦手だからって・・・
割合は不明ですが、積極的な賛成派、自分は使わないけど別にありじゃね?、テストコードのみOK、マルチバイト文字にトラウマがある、まで色んな人がいます。コメントを見ると日本語識別子有用派って多数派なんじゃないかとも感じます。
そのため「VBだと普通に使ってたけどC++でも出来るようになってたのかー、次のプロジェクトから命名規則変えるかー」みたいな感じになることもありえますが、「英語のライセンス文が分からないからBoost使うな、でも識別子を日本語にするのはださいから英語にしろ!!!」とかダブルスタンダードを適用して来る事もあり得ます。
大半の人が別に日本語で良いよなと思っている状況であなたの発言がきっかけとなる可能性もあるかもしれませんが、説得出来るかは運と政治力次第なので、なんとも言えませんし異端者扱いされても知りません。
今となっては夏場にネクタイを外すのは普通ですが、一昔前にそんな事を提案したら罵倒される事すらありました。日本語識別子は現状そういう感じかもしれないので、生産性が上がったり移植性に問題が無い事を説明してもどうにもならないかもしれません。
でも、職場の圧力なんかに絶対負けない!!!
職場じゃ駄目だったよ…
職場で駄目なら趣味でOSS等の開発をしましょう、他にコミッタもいないため自由な規則でコードが書けます!
it is done.
識別子に日本語を使うメリット
というわけで自分しかコミッタのいないOSS(あるいは運良く職場)で、日本語識別子を使う方針に転換しましたが、先も言ったとおり何も考えずに日本語を濫用するとメリットと共にデメリットが発生します。最大のデメリットは非論理的な反発が起こりうる事なのですが、そこはクリアしているとします。
目的は識別子に日本語を使う事では無く、あくまで生産性を上げ楽をする事です。
そのためにはメリットは出来るだけ受け、デメリットを受けない事が大事となります。
メリット-翻訳が不要
先ほどの「進捗どうですか?」のように、よほど英語が出来る人でも無い限りちゃんとした英語の識別子名を付けるのは時間がかかります。
またcoolをイケてるじゃなくて冷蔵と訳すような感じで辞書引いた上でも誤訳する事もあります。最悪の場合可読性の低いローマ字識別子を使う人まで現れます。
つまり識別子の翻訳をやめれば、分かりやすい識別子を短時間で付ける事が可能になるわけです。
「カーッ、識別子を素晴らしい英語で命名するのに半日かかっちまったぜー、ツレー」みたいなのが1分で出来るようになったりするので局所的には生産性100倍とかになります。
さらに英語で正しい識別子を付けられたとしても、残念ながら英語が得意でない人は辞書を引かないと読めないので、結局日本語のコメント付けるみたいな意味が良く分からない事が起こります。
C++ - [コーディングスタイル]識別子を日本語に切り替えていく - Qiita
