索引を用いた全文検索について考える。
特徴ベクトル法特徴ベクトルあるいはシグネチャー・ファイル(signature file)と呼ばれる2次情報を索引として高速検索処理を行う手法。
単語シグネチャー索引語となる単語を特定し、ハッシュ関数を使ってビット列からなる単語シグネチャーを生成する文書シグネチャー文書内から求めた全ての単語シグネチャーを用意してビットごとの論理和をとるスーパーインポーズド・コーディング(superimposed coding)を行い文書シグネチャーを生成する。
日本語の場合は複合語が多いために、単語を部分文字列に分解して単語シグネチャーを生成しないと検索が不可能になるので注意!特徴ベクトルの検索方法 検索単語の単語シグネチャーを生成する
文書シグネチャーと検索単語シグネチャーとのビットごとの論理積演算を行う
演算結果が検索単語の単語シグネチャーと一致しないものを除外していく
フォルス・ドロップ・レゾリューション(逐次検索を行い、判定を行う)
長所と短所
索引のインデックスが小さい:ハッシュ関数を使ってビット情報にするので小さくなる索引の構築時間が早い:ハッシュ関数の計算と論理和をするだけなので、高速に文書シグネチャーが構築できる索引の動的更新が簡単:追加文書に対する文書シグネチャーを作成し、特徴ベクトルに追加するだけなので簡単に更新できる検索候補の絞込みが高速:ビット演算だけで絞り込めるので高速【短所】フォルス・ドロップが発生:ハッシュ関数を使うので、どうしても検索情報を含んでいない文書がヒットしてしまう任意の文字列が検索できない:索引語となる単語がベースなので、索引語にない文字列の検索はできない(当たり前か...つまり索引語の作り方がポイント)逐次検索が必要:最後はどうしてもフォルス・ドロップ・レゾリューションをしないとダメだから、大規模文書集合には不向き。
転置ファイル法/転置インデックス法各索引語が出現する文書を転置ファイルと呼ばれる表構造の索引に格納して、検索時はこの転置ファイルのみにアクセスする転置ファイルの構成法 文書集合から登録文書を取り出す 登録文書から索引語を抽出 索引語ごとに位置情報を登録 索引語が昇順に並ぶように転置ファイル内をソート  例)ユニグラム索引(unigram index)で作った転置ファイルの例 日本語文章:にわにはにわにわとりがいる 
索引を用いた全文検索 - wiki::tani.masaru
