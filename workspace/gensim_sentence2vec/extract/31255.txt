用語集¶
>>>
インタラクティブシェルにおける、デフォルトのPythonプロンプト。インタラクティブに実行されるコードサンプルとしてよく出てきます。
...
インタラクティブシェルにおける、インデントされたコードブロックや対応する括弧(丸括弧()、角括弧[]、curly brace{})の内側で表示されるデフォルトのプロンプト。
2to3
Python 2.x のコードを Python 3.x のコードに変換するツール。ソースコードを解析して、その解析木を巡回(traverse)して、非互換なコードの大部分を処理する。
2to3 は、 lib2to3 モジュールとして標準ライブラリに含まれています。スタンドアローンのツールとして使うときのコマンドは Tools/scripts/2to3
として提供されています。 2to3 - Python 2 から 3 への自動コード変換 を参照してください。
abstract base class
(抽象基底クラス) ABCs - abstract base classes は duck-typing
を補完するもので、 hasattr() などの別のテクニックでは不恰好になる場合にインタフェースを定義する方法を提供します。
Pythonは沢山のビルトインABCsを、(collections モジュールで)データ構造、
(numbers モジュールで)数値型、(io モジュールで)ストリーム型で提供いています。
abc モジュールを利用して独自のABCを作成することもできます。
argument
(引数)
関数やメソッドに渡された値。関数の中では、名前の付いたローカル変数に代入されます。
関数やメソッドは、その定義中に位置指定引数(positional arguments, 訳注: f(1, 2)
のように呼び出し側で名前を指定せず、引数の位置に引数の値を対応付けるもの)
とキーワード引数(keyword arguments, 訳注: f(a=1, b=2) のように、引数名に引数の値を対応付けるもの)の両方を持つことができます。位置指定引数とキーワード引数は可変長です。関数定義や呼び出しは、 * を使って、不定数個の位置指定引数をシーケンス型に入れて受け取ったり渡したりすることができます。同じく、キーワード引数は ** を使って、辞書に入れて受け取ったり渡したりできます。
引数リスト内では任意の式を使うことができ、その式を評価した値が渡されます。
attribute
(属性)
オブジェクトに関連付けられ、ドット演算子を利用して名前で参照される値。例えば、オブジェクト o が属性 a を持っているとき、その属性は
o.a で参照されます。
BDFL
慈悲ぶかき独裁者 (Benevolent Dictator For Life) の略です。
Python の作者、 Guido van Rossum
のことです。
bytecode
(バイトコード)
Pythonのソースコードはバイトコードへとコンパイルされます。バイトコードはPythonプログラムのインタプリタ内部での形です。バイトコードはまた、 .pyc や .pyo ファイルにキャッシュされ、同じファイルを二度目に実行した際により高速に実行できるようにします
(ソースコードからバイトコードへの再度のコンパイルは回避されます)。このバイトコードは、各々のバイトコードに対応するサブルーチンを呼び出すような
“仮想計算機(virtual machine)” で動作する “中間言語 (intermediate language)” といえます。
バイトコードの命令一覧は dis モジュール
にあります。
class
(クラス)
ユーザー定義オブジェクトを作成するためのテンプレート。クラス定義は普通、そのクラスのインスタンス上の操作をするメソッドの定義を含みます。
classic class
(旧スタイルクラス)
object を継承していないクラス全てを指します。新スタイルクラス(new-style class) も参照してください。旧スタイルクラスはPython 3.0で削除されます。
coercion
(型強制)
同じ型の2つの引数を要する演算の最中に、ある型のインスタンスを別の型に暗黙のうちに変換することです。例えば、 int(3.15) は浮動小数点数を整数の 3 にします。しかし、 3+4.5 の場合、各引数は型が異なっていて(一つは整数、一つは浮動小数点数)、加算をする前に同じ型に変換しなければいけません。そうでないと、 TypeError 例外が投げられます。
2つの被演算子間の型強制は組み込み関数の coerce を使って行えます。従って、 3+4.5 は operator.add(*coerce(3, 4.5)) を呼び出すことに等しく、
operator.add(3.0, 4.5) という結果になります。型強制を行わない場合、たとえ互換性のある型であっても、すべての引数はプログラマーが、単に 3+4.5 とするのではなく、
float(3)+4.5 というように、同じ型に正規化しなければいけません。
complex number
(複素数)
よく知られている実数系を拡張したもので、すべての数は実部と虚部の和として表されます。虚数は虚数単位元(-1 の平方根)に実数を掛けたもので、一般に数学では i
と書かれ、工業では j と書かれます。
Pythonは複素数に組込みで対応し、後者の表記を取っています。虚部は末尾に j をつけて書きます。例えば、 3+1j となります。
math モジュールの複素数版を利用するには、 cmath を使います。
複素数の使用はかなり高度な数学の機能です。必要性を感じなければ、ほぼ間違いなく無視してしまってよいでしょう。
context manager
(コンテキストマネージャー)
with 文で扱われる、環境を制御するオブジェクト。
__enter__() と __exit__() メソッドを定義することで作られる。
PEP 343 を参照。
CPython
python.org で配布されている、Python
プログラミング言語の基準となる実装。
“CPython” という単語は、この実装を Jython や IronPython といった他の実装と区別する必要が有る場合に利用されます。
decorator
(デコレータ)
関数を返す関数。通常、 @wrapper という文法によって関数を変換するのに利用されます。デコレータの一般的な利用レとして、 classmethod() と
staticmethod() があります。
デコレータの文法はシンタックスシュガーです。次の2つの関数定義は意味的に同じものです。
デコレータについてのより詳しい情報は、
the documentation for function definition
を参照してください。
descriptor
(デスクリプタ)
メソッド __get__(), __set__(), あるいは __delete__()
が定義されている 新スタイル (new-style) のオブジェクトです。あるクラス属性がデスクリプタである場合、その属性を参照するときに、そのデスクリプタに束縛されている特別な動作を呼び出します。通常、get,set,deleteのために a.b と書くと、 a のクラス辞書内でオブジェクト
b を検索しますが、 b がデスクリプタの場合にはデスクリプタで定義されたメソッドを呼び出します。デスクリプタの理解は、 Python を深く理解する上で鍵となります。というのは、デスクリプタこそが、関数、メソッド、プロパティ、クラスメソッド、静的メソッド、そしてスーパクラスの参照といった多くの機能の基盤だからです。
dictionary
(辞書)
任意のキーを値に対応付ける連想配列です。
__hash__() メソッドと __eq__() メソッドを実装した任意のオブジェクトをキーにできます。
Perl ではハッシュ(hash)と呼ばれています。
docstring
クラス、関数、モジュールの最初の式となっている文字列リテラルです。実行時には無視されますが、コンパイラによって識別され、そのクラス、関数、モジュールの __doc__ 属性として保存されます。イントロスペクションできる(訳注: 属性として参照できる)ので、オブジェクトのドキュメントを書く正しい場所です。
duck-typing
あるオブジェクトが正しいインタフェースを持っているかどうかを確かめるのにオブジェクトの型をチェックしないプログラミングスタイル。代わりに、シンプルにオブジェクトのメソッドが呼ばれたり属性が使われたりします。(「もしそれがアヒルのようにみえて、ガチョウのように鳴けば、それはアヒルである」)インタフェースを型より重視することで、上手くデザインされたコードは
(polymorphicな置換を許可することによって)柔軟性を増すことができます。
duck-typing は type() や isinstance() を避けます。
(ただし、duck-typing を抽象ベースクラス(abstract base class)で補完することもできます。)
その代わりに hasattr() テストや EAFP プログラミングを利用します。
EAFP
「認可をとるより許しを請う方が容易  (easier to ask for forgiveness than permission、マーフィーの法則)」の略です。 Python で広く使われているコーディングスタイルでは、通常は有効なキーや属性が存在するものと仮定し、その仮定が誤っていた場合に例外を捕捉します。この簡潔で手早く書けるコーディングスタイルには、 try 文および
except 文がたくさんあるのが特徴です。このテクニックは、C のような言語でよく使われている LBYL スタイルと対照的なものです。
expression
(式)
何かの値に評価される、一つづきの構文(a piece of syntax).
言い換えると、リテラル、名前、属性アクセス、演算子や関数呼び出しといった、値を返す式の要素の組み合わせ。他の多くの言語と違い、Pythonは言語の全ての構成要素が式というわけではありません。
print や if のように、式にはならない、文(statement)
もあります。代入も式ではなく文です。
extension module
(拡張モジュール)
CやC++で書かれたモジュール。ユーザーコードやPythonのコアとやりとりするために、
PythonのC APIを利用します。
file object
内部リソースに対してファイル由来の API (read() や write() のようなメソッド) を持つオブジェクト。作成された方法に応じて、ファイルオブジェクトはディスクや他のストレージ上のファイルやコミュニュケーション機器
(例えば標準入出力、メモリ上のバッファ、ソケット、パイプなど)
に対するアクセスを仲介します。ファイルオブジェクトは file-like object やストリームなどと呼ばれます。
ファイルオブジェクトには3つの種類があります:
バイナリファイル、バイナリバッファ、テキストふぁいる。これらのインターフェースは io モジュール内で定義されています。ファイルオブジェクトを作成する標準的な方法は open() 関数を利用することです。
file-like object
file object の別名
finder
モジュールの loader を探すオブジェクト。
find_module() という名前のメソッドを実装していなければなりません。詳細については PEP 302 を参照してください。
floor division
一番近い小さい整数に丸める数学除算。floor division 演算子は // です。例えば、 11 // 4 は 2 になり、 float の true division の結果
2.75 と異なります。
(-11) // 4 は -2.75 を 小さい方に 丸めるので -3
になることに注意してください。 PEP 238 を参照してください。
function
(関数)
呼び出し側に値を返す、一連の文。ゼロ個以上の引数を受け取り、それを関数の本体を実行するときに諒できます。
argument や method も参照してください。
__future__
互換性のない新たな機能を現在のインタプリタで有効にするためにプログラマが利用できる擬似モジュールです。例えば、式 11/4 は現状では 2
になります。この式を実行しているモジュールで
用語集 &mdash; Python 2.7ja1 documentation
