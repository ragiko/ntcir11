HTMLは効率的に情報交換を行えるよう、文書の「構造」を記述することを目的にしています。そこに文字の色や形などの情報が混じってくると、せっかくの情報が不明確になってしまいます。
スタイルシートは、レイアウトを別の場所に定義しておき、それを構造に対して適用するという考え方です。いったん定義したスタイルは、複数の文書で共有できますから、全体のデザインに一貫性を持たせることができ、しかもメンテナンスがずっと容易になります。
目次:
スタイルシート:文書の論理と表現を分離する
カスケーディング・スタイルシート(CSS)
スタイルの定義場所
クラス、idによる定義の局所化
文脈セレクタと一括設定
カスケーディングと継承
スタイルのタイプ指定
取り上げる要素:
style
スタイルシート:文書の論理と表現を分離する
本文とは別に表現ルールを設定するスタイルシートは、文書のメンテナンスを容易にし、また表現に一貫性を持たせる手段として、HTMLの誕生よりも前から広く利用されてきました。多くのワープロソフトでも、スタイルシート機能によって「見出し」「箇条書き」などの表現方法を別途定義し、それを本文に適用することができるようになっています。
スタイルシートを使って文書のコンテンツや論理構造と表現のルールを分離することで、さまざまなメリットが生まれます。
(複数)文書全体に一貫したコンセプトに基づくデザインを適用できる
複数文書のスタイルを一括管理でき、メンテナンスの効率が大幅に向上する
出力メディアごとに異なるスタイルを設定できる
スタイル専用の言語を使うことで、きめ細かな表現を設定できる
HTMLが本来の役割に徹することですっきりし、作者、読者ともに利用しやすいものになる
スタイルシートによる表現は、シンプル、柔軟、強力と三拍子揃った便利な方法。簡単に利用できますから、ぜひ基本をマスターしてあなたのページにも取り入れてください。
カスケーディング・スタイルシート
HTMLでのスタイルシートの実現方法は一つに限定されておらず、自由に選ぶことが可能ですが、一般にブラウザに実装されているのはCSS(Cascading Style Sheet)と呼ばれるものです。これは、複数の場所で設定したスタイルを混合して利用(cascade)できるという特徴を持っています。
例えば段落(要素タイプp)の文字色を赤に設定する場合、CSSによるスタイルの記述はつぎのような形式になります。
(例)p  {color: red}
ここで、最初の p をセレクタ(Selector)、続く { } で囲まれた内容を宣言(Declaration)と呼び、宣言の中にはプロパティとその値をコロン( : )で区切って記述します。セレクタは、あるスタイルを適用する対象(要素タイプなど)を示すもの、プロパティは定義するスタイルの性質(色、大きさなど)に相当します。
プロパティと値のペアはセミコロン( ; )で区切って複数記述することができ、複数行にわたっても構いません。
具体的なプロパティについては次の章で取り上げます。その前に本章では、スタイルを定義するためのいくつかの約束を見ておきます。
スタイルの定義場所
HTMLでのスタイル設定は、大きく分けて3つの方法があります。
外部ファイルによるスタイル設定
もっとも汎用性が高いのは、外部ファイルにスタイルを記述し、それを取り込む方法です。スタイル定義ファイルは、前項で述べた「セレクタ」と「宣言」を必要なだけ列挙したテキストファイルで、CSSの場合は通常「.css」という拡張子をつけて保存します。
スタイルを設定した外部ファイルは、head要素の中のlink 要素をつかって取り込みます。
(例)<link rel="stylesheet" href="default.css" type="text/css" />
ファイル"default.css"にスタイルを定義した場合は、上の例のようにlink要素を記述します(空要素なので、/>で閉じます)。スタイルシートの実現方法はCSSだけに限定されないので、type属性によって利用するタイプを指定できます(HTML4ではこの属性は必須です。HTML5ではtype属性がない場合はCSSとみなされます)。
サイト全体の共通スタイルを定義したスタイルファイルを用意し、全てのHTMLファイルからそのファイルを参照するようにしておけば、サイト全体の表現を簡単に統一できます。さらにスタイル定義ファイルを変更するだけでサイト全ての表現を一度に変更することが可能になり、メンテナンスの効率が飛躍的に向上します。
head要素内のstyle要素で指定
head要素の中に style要素を加えてスタイルを記述すると、そのHTML文書の全体を通して共通のスタイルを設定することができます。複数のスタイルを同時に設定できます。外部ファイルと同様、HTML4ではtype属性が必須です。
このように記述した場合は、HTML文書内の全ての段落の文字色が赤になり、全てのh2見出しが青で120%の大きさになります。ここで設定したスタイルを変更すると、やはり同じファイル内の全ての該当する要素にその変更が反映されます。
〔補足〕
スタイルの説明では、抽象的な単位としての「要素タイプ」と文書中の具体的な要素が混乱すると分かりにくい点が多いので、本章では煩わしくない程度に両者を使い分けます。とくに違いをはっきりさせる場合は後者をに入れて表現することにします。この区別については「要素と要素タイプ」の説明を参照してください。
〔以上補足〕
(以下の例では、HTML5の方法に則ってtype属性は省略して記述します)
インラインstyle属性
個々の要素のタグに style属性としてスタイル情報を埋め込むことで、そのタグ(要素)の範囲にスタイルを設定します。スタイルを適用する対象はタグによって明らかなので、style属性ではセレクタを用いず、宣言のみを記述します。
(記述例)<p style="color: red">これは赤い文字の段落。</p>
とすると次のように段落全体の文字色を設定することができます。
インラインstyle属性で設定したスタイルは、その属性を指定している要素1カ所のみに対して適用され、同じ「要素タイプ」でも他の場所にある要素には反映されません。
クラス、idによる定義の局所化
せっかくスタイルできめ細かな表現ができるなら、たとえば「注釈」など特定の役割を持つ段落には異なるスタイル設定をしたいところです。しかし、style要素や外部ファイルを使う場合、セレクタに p や h1 などの要素タイプ名しか記述できないと、こうした使い分けができずあまり使い勝手が良くありません。そこで、個別の要素(タグ)に class属性 を指定し、そのクラスをセレクタとすることで、よりきめ細かなスタイル設定ができるようになっています。また、id属性とスタイルを対応させれば、ドキュメントの中でそのidを持つ要素だけに適用されるスタイルを定義できます。
クラスセレクタ
セレクタでクラスによる指定をするためには、「要素タイプ名.クラス名」のように、ピリオドの後ろにクラスの名前を記述します。要素タイプ名を省略して「.クラス名」のようにすると、全ての要素タイプに共通のクラスを設定することができます。
スタイルシートの基本 -- ごく簡単なHTMLの説明
