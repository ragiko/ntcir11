
表1:今回取り上げる「順番」
この表でも簡単に書きましたが、タブオーダーはユーザーが[TAB]キーを押したときにフォーカスが移動する順番です。Zオーダー(読み方:Zオーダー = 
ゼットオーダー)はコントロールが重なっているときにどのコントロールが手前に来てどのコントロールが後ろになるかという順番です。TabIndex(読み方:TabIndex 
= タブインデックス)は単純にコントロールのTabIndexプロパティで設定する順番です。
これらを簡単に説明するのならば以上で終わりなのですが、これらの順番をしっかり設定していないために使いにくいプログラムになってしまうこともありますし、逆にこれらの順番をうまく使って効率的にプログラムを組むこともできます。
また、3つの中で特に重要なのはタブオーダーです。タブオーダーはユーザーの操作感や、プログラムの簡潔性にも影響を与えます。
たかだか「順番」と思わないで是非今回の内容を一読してみてください。
今回はZオーダー、TabIndexを説明してから、タブオーダーの活用方法をいくつか紹介します。
2.Zオーダー
Zオーダーはコントロールの重なりの順番のことです。また、重なり方以外にもタブオーダーを決定する要素として使用されます。
画像1:Zオーダーの違い
上の2つの画像で、左の画像はLabel2の方が前面にあります。右側はLabel1の方が前面にあります。これがZオーダーです。
デザイン時にZオーダーを変更するには、目的のコントロールをクリックしてから[書式]メニューの[順序]を選択するか、レイアウトツールバーのボタンを使います。レイアウトツールバーが表示されていない場合は[表示]メニューの[ツールバー]から[レイアウト]を選択することで表示することができます。
画像2:Zオーダーを変更するボタン
左のボタンがZオーダーを最前面にするボタンで、右は最背面にするボタンです。
なお、Zオーダーはプロパティではありません。また、どういうわけかZオーダーの操作は「最前面」と「最背面」しかなく、3つコントロールがある場合真ん中の位置にしたいような場合は1つのコントロールを「最前面」にして、また別の1つのコントロールを「最背面」にするという手順を踏むことになります。
私としてはZオーダーもプロパティにして、プロパティウィンドウで指定できると便利だと思うのですが、どうもそのような方法は採用されないようです。なにか理由があるのでしょうか。
さて、プログラムでZオーダーを変更することもできます。コントロールを最前面に移動するにはBringToFrontメソッド(読み方:BringToFront = 
ブリングトゥーフロント)を使います。最背面に移動するにはSendToBackメソッド(読み方:SendToBack = センドトゥーバック)を使います。
これらのメソッドは引数なしで使用できます。特にサンプルを掲載する必要はないでしょう。
3.ZオーダーとDock
Zオーダーの設定はDockプロパティの効果にも影響を与えます。Dockプロパティは初級講座 第18回 コントロールの配置 で詳しく説明していますが、コントロールを指定した領域に自動的に配置するプロパティです。
画像3:正常なDock状態
上の画像を見ながらZオーダーとDockプロパティの関係を説明しましょう。上の画像ではPanel1とPanel2とButton1が配置されています。Button2はPanel2の中に配置されています。Panel1のDockはLeft、Panel2のDockはFill, 
Button1のDockはTopです。
ここで、Panel2のZオーダーを変更して、Panel2を最背面に移動するとレイアウトは次のように変わります。
画像4:誤ったDock状態
Panel2がPanel1の背面にもぐりこんだ結果です。
4.TabIndex
TabIndexはすぐ後で説明するタブオーダーを決定する要素の1つです。複数のコントロールに同じTabIndexを割り当てることもできます。
ユーザーが[TAB]キーを押したとき、フォーカスはTabIndexが小さい方からTabIndexが大きい方へ移動します。
通常はフォームに貼り付けた順に連番でTabIndexが自動的に割り当てられますので、フォームにコントロールを貼り付ける時点でフォーカスの移動のことを考慮しておくと、後でTabIndexを割り当てなおす必要がなくなるので楽です。
5.タブオーダー
タブオーダーは文字通り[TAB]キーが押されたときにフォーカスが移動する順番です。Windowsでは[TAB]キーを使ってフォーカスを順番に移動できると言う決まりがあります。
ちゃんとしたアプリケーションはタブオーダーがフォームの左上から右下に向かって綺麗に設定されています。ためしに、Windowsの何かの設定画面を表示して[TAB]キーを何度も押してみると分かります。
タブオーダーはプロパティではありません。タブオーダーはTabIndexプロパティの順番で決定し、TabIndexが同じコントロールがある場合にはZオーダーの順番で決定されます。Zオーダーは前面にあるものが優先されます。
また、後になってからタブオーダーを変更する場合は、プロパティウィンドウのTabIndexプロパティを手動で変更しなくても、便利な編集画面を使用することができます。[表示]メニューの[タブオーダー]を選択するとこの画面を表示することができます。
画像5:タブオーダー設定画面
この画面ではコントロールの左側に現在のタブオーダーを現す数値が表示されていて、コントロールを順番にクリックすることでタブオーダーの順番を変更することもできます。
なお、TabStopプロパティ(読み方:TabStop = 
タブストップ)がFalseの場合にはそのコントロールに[TAB]キーでフォーカスを移動することはできません。また、Labelなど本来フォーカスを取得できないコントロールにもタブオーダーはありますが、実際にフォーカスを移動することはできません。[TAB]キーが押された場合、こういったコントロールは無視されてさらにその次のコントロールにフォーカスが移動します。
このフォーカスの移動順序の設定によってユーザーの操作感が大きく変わる場合もあるので、アプリケーションを公開・配布する場合にはできるだけユーザーが使いやすい順番でTabIndexを設定するように心がけましょう。
6.SelectNextControl
さて、このタブオーダーはフォーカスの移動順だけではなく、SelectNextControlメソッド(読み方:SelectNextControl 
= セレクトネクストコントロール)と、GetNextControlメソッド(読み方:GetNextControl 
= ゲットネクストコントロール)に影響を与えます。
SelectNextControlメソッドはフォーカスを次のコントロールに移動するメソッドです。たとえば、次のように使います。
リスト1:フォーカスを次のコントロールへ移動する
このコードを実行すると、フォーカスはButton1の次のタブオーダーのコントロールに移動します。しかし、この例はそれほど役に立ちません。特定のコントロールに移動するのであればFocusメソッドを使った方が簡潔だからです。この例が役に立つとしたらButton1の次のコントロールが場合によって違う時でしょうか。
それはどんな場合かと思われるかもしれないので少し補足しておきます。Button1, 
Button2, 
Button3と並んできるとき通常はButton1の次のコントロールはButton2ですが、たとえば、Button2のEnabledプロパティがFalseの場合は、Button2は使用不可ですから次のコントロールはButton3となります。SelectNextControlメソッドを使えばこういった判定を自動的に行ってくれます。
さて、SelectNextControlメソッドは第一引数にActiveControlプロパティを指定
して便利に使うこともできます。
ActiveControlプロパティとはフォームなどのコンテナが持っているプロパティで、現在フォーカスのあるコントロールを表しています。そのため、次のコードは[ENTER]キーが押されると自動的に次のコントロールにフォーカスが移動します。

