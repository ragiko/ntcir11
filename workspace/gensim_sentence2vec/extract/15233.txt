
コンテキスト正規表現カラー表示
Context Regular Expression Coloring (CREC)
2003/11/17 Peggy Version 4.12 (CREC 1.3.1)
株式会社エスコア
兵庫県明石市魚住町中尾337
TEL: 078-946-5609
FAX: 078-946-5552
anchor@anchorsystems.jp
http://www.anchorsystems.jp/
目次
1. テストバージョンのお礼
2. はじめに
3. キーワード定義ファイル
4. キーワード定義ファイルの記述方法
4.1 ヘッダ部
4.2 キーワード部
キーワードの指定
文法色の指定
オプションの指定
4.3 補完候補部
4.4 コンテキスト
4.5 コンテキストとサブ言語
4.6 デフォルト文法色
5. 正規表現
5.1 メタ文字
5.2 バックトラックと効率
6. サンプル
7. 変更履歴
1. テストバージョンのお礼
コンテキスト正規表現カラー表示(CREC)のテストバージョンでは、
数々の貴重なご意見を頂きありがとうございました。
それらを元に、CRECをより便利で有益なものにできたことに感謝しています。
各テスト版からこのバージョン4.06までの変更箇所は、変更履歴にまとめてあります。
今後もご意見をお待ちしております。
2. はじめに
コンテキスト正規表現によるカラー表示(CREC: Context Regular Expression Coloring)の使い方を解説します。
従来から正規表現を使った色づけ表示をサポートしているエディタは幾つかありました。
正規表現は非常に柔軟で強力なツールですが、
それだけでいろいろな言語の文法をサポートするには無理があります。
コンテキスト正規表現とは、コンテキストの状態と正規表現を組み合わせることにより、
テキストファイルのより高度で正確な色分け表示を可能にするまったく新しい技術です。
何行にも続くコメントや文字列も、これだけで自由に定義可能になります。
もちろん、より単純な言語はコンテキストを使わず、
キーワードを書き並べるだけなので、とても簡単に追加できます。
このコンテキスト正規表現は、
従来のPeggyシリーズの色分け表示機能の延長としてインプリメントしました。
従来の言語サポートDLLとまったく同じインターフェイスを介して
エディタの描画処理から呼び出されます。
ただし、非常に汎用性の高い機能なので、
DLLとして分離することはせず、
Peggyにビルトインしました。
もちろん従来からあるDLLは、そのまま利用できます。
3. キーワード定義ファイル
コンテキスト正規表現を使って新しい言語の色分け表示を追加するには、
キーワード定義ファイルを作成し、shareフォルダに置きます。
キーワードファイルの名前は、ac_XXXXX.kwdです。
XXXXXの部分は、何のためのキーワード定義ファイルかを想像できる文字列にしておきます。
【例】 ac_make.kwd
1言語に付き1つの.kwdファイルを作成します。
Peggyは起動時にshareフォルダを調べ、
新しいキーワード定義ファイルやDLLがないかどうかをチェックします。
しかし実際の読み込みは、その言語のファイルを開くまで行われません。
いったん定義ファイルを読み込むと、その言語のファイルをすべて閉じてもメモリ上に残ります。
キーワードファイルをPeggy自身で編集して保存した場合は、
自動的に再ロードするので、すぐに結果を確認することができます。
自動再ロードは、[オプション設定]ダイアログボックスの[編集]ページ、
[編集オプション]の[キーワードファイルを自動的に再ロードする]の
チェックを外すことで抑止することもできます。
【注意】ただし自動ロードでは、
言語識別名、デフォルト拡張子、デフォルトタブ間隔の変更は反映されません。
これらを変更した場合は、Peggyを再起動してください。
自動再ロードにより読み込む再には、
記述エラー、文法エラーをタグジャンプ可能な形式でアウトプットウインドウに出力します。
エラーがあれば、F4キーを押してジャンプし、修正してから保存しなおしてください。
4. キーワード定義ファイルの記述方法
キーワード定義ファイルは、大きく2つの部分に分かれます。
ヘッダ部とキーワード部です。
なおコメントや空行は、どこに書いてもかまいません。
コメントの形式は、C++言語などと同じで2種類あります。
【例】  // から行末まではコメントです。
/*
* ブロックコメントは複数行に渡って記述できます。
* ...
*/
4.1 ヘッダ部
Peggyが必要とする言語の情報を記述する部分です。
色分け表示以外の情報も含まれますが、
これによって、より便利な編集機能が働くようになります。
以下の項目を1行1項目形式で記述します。
すべてを記述する必要はありません。
不要な項目は省略できます。
項目の名前は大文字小文字を区別しません。
名称意味省略(デフォルト値)
言語の識別名を指定します。
言語の識別子は、Peggyがその言語を一意に区別するための文字列です。
半角英数(または記号)の1〜10文字を目安に識別名を付けてください。
他の言語と重複しない名前を付けてください。
同じ名前の言語が複数あると、Peggyが混乱してしまいます。
識別名は、一重または二重引用符で囲みます。
【例】Id: "ANSI-C"
以下に現在までに定義した言語の識別名をリストアップしました。
これらの名前は避けるようにしてください。より詳しくは、langlist.pdfを参照してください。
【Peggyビルトイン言語】TEXT, MAIL, C, C++
【DLL内の言語】
VB, VC++, HTML40, ASP(VBS), ASP(JS), ASP(PHP), JSP, PHP, JavaScript, VBScript
Perl5, RC, Ruby, SQL/92, PL/SQL, Pro*C, Pro*C++, Pro*COBOL, 
Java, LaTeX2e, LaTeX2eNS, Batch, BCC++, COBOL, Delphi, HSP, 
C/ITRON3, C/ITRON4, Verilog-HDL, Verilog-AMS, VHDL, 
AS308, AS308S, NC308, MR308, AS30, AS30S, NC30, MR30, 
AS79, AS79S, NC79, MR79, RASM77, PRE77, NC77, MR77, 
SRA74, AASM740, ASM45, ASM72, ASM38, ASM96, 
CC78K0, ST78K0, RA78K0, CC78K0S, RA78K0S, 
CC900, ASM900, ASM870, APP870, CL870, CC870,
ASM870X, APP870X, CL870X, ASM870C, APP870C, 
8086, V25, PIC16, PIC17, Z80, SASMZ80, 68000, 68HC11, 6809, SA6809, Gen-ASM
【注意】インクルードファイル中のId:は無視されます。
コンテキスト正規表現によるカラー表示の定義
