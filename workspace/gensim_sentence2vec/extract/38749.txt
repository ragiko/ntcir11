リストの先頭または最後の要素を削除したり、先頭または最後に要素を追加するには (shift, unshift, pop, push)
PHP
2014/03/06
// 先頭を削除。削除した要素を返す
array_shift($arr);
// 先頭に追加
array_unshift($arr, $obj);
// 最後を削除。削除した要素を返す
array_pop($arr);
// 最後に追加
$arr[] = $obj;
// または
array_push($arr, $obj);
これらは配列自身を変更する破壊的な関数である。
array_shift 関数 | PHP Manual
http://www.php.net/manual/ja/function.array-shift.php
array_unshift 関数 | PHP Manual
http://www.php.net/manual/ja/function.array-unshift.php
array_pop 関数 | PHP Manual
http://www.php.net/manual/ja/function.array-pop.php
array_push 関数 | PHP Manual
http://www.php.net/manual/ja/function.array-push.php
最後への追加だけは、[] を使って以下の構文でもできる。これも配列自身を変更する破壊的な方法である。
$arr[] = $obj;
この構文はすでにある配列に対してだけでなく、まだ一度も現れていない未定義の変数に対してもいきなり使うことができて、要素が1つだけの配列になる。個人的には気持ち悪い仕様だ。さすがに配列以外の値がすでに代入されている変数に対して行うと、PHPのWarningが発生する。
複数の要素を配列で指定してまとめて追加するには以下のように
array_merge を使う。この関数は引数の配列を変更せずに連結した結果を返すのみであるので、先頭に追加したい場合も最後に追加したい場合も使える。
array_merge($arr1, $arr2);
例
$a1 = array(1, 2, 3);
$a2 = array(4, 5, 6);
$result = array_merge($a1, $a2);
var_export($a1); echo "\n";
// =>
//    array (
//      0 => 1,
//      1 => 2,
//      2 => 3,
//    )
var_export($a2); echo "\n";
// =>
//    array (
//      0 => 4,
//      1 => 5,
//      2 => 6,
//    )
var_export($result); echo "\n";
// =>
//    array (
//      0 => 1,
//      1 => 2,
//      2 => 3,
//      3 => 4,
//      4 => 5,
//      5 => 6,
//    )
配列のキーが数字以外の場合は、それぞれの配列のキーを変更せずに上書きでマージしていくので、要素が追加されるとは限らない。
-> 連想配列をマージ
array_merge | PHP Manual
http://www.php.net/manual/ja/function.array-merge.php
Python
2013/11/04
# 先頭を削除。削除した要素を返す
lst.pop(0)
# 先頭に追加
lst.insert(0, obj)
# 最後を削除。削除した要素を返す
lst.pop()
# 最後に追加
lst.append(obj)
これらはリスト自身を変更する破壊的なメソッドである。
pop は引数を指定すると、そのインデックスの要素を要素を取得して削除する。引数を省略すると最後の要素を取得して削除する。
# indexの要素を取得して、配列からは削除して詰める
arr.pop(index)
insert は指定のインデックスの前に要素を挿入する。
# indexの前にobjを挿入
arr.insert(index, obj)
複数の要素をリストで指定して最後にまとめて追加するには extend が使える。これも破壊的なメソッドである。
lst.extend(lst2)
タプルはイミュータブルなので、これらに相当するメソッドはない。
Ruby
2013/11/05
# 先頭を削除。削除した要素を返す
arr.shift
# 先頭に追加
arr.unshift(obj)
# 最後を削除。削除した要素を返す
arr.pop
# 最後に追加
arr.push(obj1)
これらは配列自身を変更する破壊的なメソッドである。
shift, pop は配列に要素が1つもない場合は、 nil を返す。
unshift, push は配列自身を返す。
push は、以下のように複数の要素を追加することもできる。
arr.push(obj1, obj2, obj3)
Array#<< を使うこともできる。このメソッドは引数1つしか使えないが、配列自身を返すので、連続して書くことができる。
arr << obj1 << obj2 << obj3
配列を連結させるには、次のメソッドも使える。
Array#concat(other_array)
これは破壊的メソッドである。これに対応する非破壊的メソッドは Array#+ 。
例
arr1 + arr2
Perl
2013/12/14
# 先頭を削除。削除した要素を返す
shift(@arr);
# 先頭に追加
unshift(@arr, $obj);
# 最後を削除。削除した要素を返す
pop(@arr);
# 最後に追加
push(@arr, $obj);
これらは配列自身を変更する破壊的な関数である。
shift や pop は配列に要素が1つもない場合は undef を返す。ただし、配列の要素として undef を含めることもできるため、
shift や pop が undef を返した場合に、先頭または最後の要素が undef だったのか、要素が1つもなかったのかの区別はできない。
shift や pop は引数を指定しないと、mainモジュールの中では @ARGV を対象とし、サブルーチンの中では @_ を対象とする。
unshift や push は2つ目の引数に配列を渡すことができ、その場合はその配列の要素をすべて追加する。
例
push(@arr1, @arr2);
JavaScript
2014/01/10
# 先頭を削除。削除した要素を返す
arr.shift();
# 先頭に追加
arr.unshift(obj);
# 最後を削除。削除した要素を返す
arr.pop();
# 最後に追加
arr.push(obj);
push は複数の引数を渡すこともできる。
var arr1 = [1, 2, 3];
arr1.push(4, 5, 6);
console.log(arr1); // => [1, 2, 3, 4, 5, 6]
配列を連結して新しい配列を生成するには以下のようにする。
例
var arr1 = [1, 2, 3];
var arr2 = [1, 2, 3];
var new_arr = arr1.concat(arr2)
concat は非破壊的なメソッドなので、arr1 や arr2 自身は変更されない。
リストの先頭または最後の要素を削除したり、先頭または最後に要素を追加するには (shift, unshift, pop, push) | リスト(配列) | プログラミング言語の比較 | hydrocul のメモ
