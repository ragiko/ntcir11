
コンピューターへの応用[編集]
情報理論[編集]
二進対数は、二進法と密接に関係しているため、計算機科学や情報理論でしばしば使われる。この文脈において、lg n とよく書かれる[1]。同じ関数の別の表記としてときどき(特にドイツ語で)使われるものとして ld n があり、これはラテン語の logarithmus duālis から来ている[2]。ただし ISO 31-11(英語版)では、lg (n) は log10 n と見なされるので、lb (n) と表記すべきだと規定されている。正の整数 n の2進数における桁の数(ビットのこと)は 1 + lb n の整数部分であり、以下の床関数で表される。
情報理論では、自己情報量(英語版)と情報量の定義は二進対数を含んでいる。これは情報量の単位であるビットあるいはシャノンが、同一確率の2つの事象の一方の発生から得られる情報量を表すためである。
計算複雑性[編集]
二進対数は、アルゴリズム解析で頻出する。1より大きな数 n を2で繰り返し割っていき、その値が1以下になるようにするのに必要な繰り返しの数は lb n の整数部分として求められる。この考えは、多くのアルゴリズムとデータ構造の分析で使用される。例えば、二分検索では、解決されるべき問題の大きさは操作の繰り返しごとに半分になる。ゆえに、大きさ1の問題を得るには大まかに lb n 回の繰り返しが必要となり、あとは簡単に定数時間で終了する。同様に、n 個の要素からなる完全平衡二分探索木は、lb n + 1 の高さをもつ。
しかし、アルゴリズムの実行時間は通常、定数部分を無視して、ランダウの記号で表記される。k が1より大きい数を取る時、log2 n = (1/logk 2)logk n であるので、O(log2 n) の実行時間をもつアルゴリズムは、例えば、O(log13 n) の時間で実行できるともいえる。ゆえに、O(log n) や O(n log n) といった式の対数の底は重要ではない。ただし、他の文脈では対数の底を指定することが必要な場合もある。例えば O(2lb n) は O(2ln n) とは同じ時間では終わらない、前者は O(n) と同じで、後者は O(n0.6931...) と同じだからである。
n lb n の実行時間をもつアルゴリズムは、しばしば線形対数と呼ばれる。O(lb n) や O(n lb n) の実行時間をもつアルゴリズムの例として以下があげられる。
平均時間のクイックソート
2分探索木
マージソート
モンジュ配列(英語版)の計算
電卓の使用法[編集]
log2のボタンを持たない電卓でlog2(n)を計算する簡単な方法は、関数電卓で最も見受けられる自然対数"ln"と常用対数"log"のボタンを使う方法である。この方法に対する特別な底の変換の公式は以下のようになる。
log2(n) = ln(n)/ln(2) = log(n)/log(2)
なので、
log2(n) = loge(n)×1.442695... = log10(n)×3.321928...
となる。これは、loge(n) + log10(n)が0.6%以内の差でlog2(n)と一致するという興味深い結果を与える。実際のところ、loge(n) + log10(n)は、e1/(1+log10e) = 101/(1 + loge10)≈ 2.00813 59293 46243 95422 87563 25191  (有効数字32桁まで)を底とするlog2.0081359...(n)である。
アルゴリズム[編集]
整数[編集]
整数の定義域や値域において、二進対数は端数処理で切り上げたり切り下げたり計算する事ができる。これらの整数の二進対数における2つの数式は次の公式と関連がある。
[3]
定義は、とすることで拡張できる。この関数はx, nlz(x)で表される32ビットの無署名の二進数である先頭の0の個数(英語版)と関連している。
[3]
整数の二進対数は、入力操作において最も有名な1ビットを意味する0を基調とした表記として、解釈することができる。初期設定の発見法(英語版)の記事は、整数の二進対数についてのアルゴリズムや技術的なサポート、応用面についてより詳細な情報を含んでいる。
実数[編集]
一般の正の実数に対して、二進対数は2つの手順で計算できる。
整数部分  を計算する。
小数部分を計算する。
整数部分の計算は簡単である。任意の x > 0 に対して、2n ≤ x < 2n+1となるような、あるいは同じことだが、1 ≤ 2−nx < 2 となるような、ただ1つの整数 n が存在する、。このとき、対数の整数部分は単純に n であり、小数部分はlb(2−nx)である。言い換えると
結果の小数部分はであり、初等的な掛け算と割り算のみを使って再帰的に計算できる。小数部分の計算方法は以下の手順になる。
まず、実数から始める。ならば、小数部分は0となって、その時点で終了である。
でなければ、を2乗することを結果が  になるまで繰り返す。2乗した回数を  とする。すなわち、 であって、は  となるように選ばれている。
両辺の対数をとり、いくつかの演算を施す。
は再び区間  にある実数であることに注意する。
手順1に戻り、の二進対数を、同じ手法で繰り返し計算する。
この結果は、以下の式で説明される。ただし、 はアルゴリズムの i 番目の繰り返しにおいて2乗を行った回数である。
手順1において小数部分が0であることが分かった場合、これはあるところで終了する「有限」列である。そうでなければ、 だから各項がその前の項よりも真に小さいため、比較判定法によって収束する無限級数である。実用的な使用においては、この無限級数は近似値になるように切り捨てられなければならない。級数のi番目の項より後ろを切り捨てられたならば、最終結果における誤差はより小さい値となる。
幸運な事に、実際は演算や無限級数の切り捨てを全くせずに、計算をして誤差の幅を知る事ができる。1.65の二進対数を小数点以下4桁まで計算したいとしよう。以下の手順を、4回繰り返せば良い。
実数を2乗する。
もし2乗した値が2以上であれば、2で割って1と書く。そうでなければ0と書く。
書いた数は2進法で書かれた対数である。これは1と2の間にあるどんな数で始めてもうまくいく。したがって
1.65を2乗すると2.72となる。これは2より大きいので、半分にして1.36を得、小数点1桁目は1と書く。
1.36を2乗すると1.85となる。これは2より小さいので、半分にせず、小数点2桁目は0と書く。
1.85を2乗すると3.43となる。これは2より大きいので、半分にして1.72を得、小数点3桁目は1と書く。
1.72を2乗すると2.95となる。これは2より大きいので、小数点4桁目は1と書く(4桁目で計算終了なので、2.95を半分にする必要はない)
1011まで書くと、1.65の二進対数を二進法で表した数字は0.1011(分数として表記すると13/16)になり、誤差は1/16より小さくなる。1/32のくらいまで計算した時は、27/32であり誤差は1/32より小さくなる。一般に、0.5 の 1+N 乗より小さい誤差を得るためには、N回2乗することと高々N回半分にする事が必要である。
関連項目[編集]
常用対数
自然対数
二進法
2の冪
2の自然対数
脚注[編集]
二進対数 - Wikipedia
