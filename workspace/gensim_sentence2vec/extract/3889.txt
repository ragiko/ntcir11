Hough変換は、画像から直線や円を検出する技法としてよく知られていますが、実用化には多くの問題点もあります。本稿では、最初に一般的なHough変換の基本プログラムを紹介し、次に交通標識認識への応用に特化したプログラムについて述べます。
はじめに
Hough変換は、画像から直線や円を検出する技法として知られています。通常の直交座標上の画像を、極座標の二次元空間(直線検出の場合)に変換したり、三次元の空間(円検出の場合)に変換したりして、そこで最も頻度の高い位置を求め、それを逆変換して、直線や円を検出します。
Hough変換は数学的に興味深く、プログラムの対象として面白いため、多くの論文が見られますが、実用化には多くの問題点もあります。
ここでは最初に、一般的なHough変換の基本プログラムを紹介し、次に交通標識認識への応用に特化したプログラムについて述べます。
基本図形認識版アプレットを見る
交通標識認識版アプレットを見る
対象読者
画像から直線や円を検出する方法に興味を持ち、その一つであるHough変換の仕組みを学びたい人。
必要な環境
J2SE 5.0を使っていますが、J2SE 1.4.2でも大丈夫です。円のためのHough変換にはかなりの時間がかかりますので、CPUパワーの大きいことが望まれます。添付のアプレットを実行する場合、CPUにより数分かかることがあります。あらかじめご承知置きください。
Hough変換とは
Hough変換は、1962年にP.V.C.Houghによって米国特許が取られている古い技法で、直線の検出や円の検出に用いられます。直線の検出の場合、元になる直角座標上の点(x, y)を角度θと距離ρの極座標二次元空間に変換し、角度θと距離ρごとに、その個数をメモリ配列上に加算して行きます(Accumulator CellやVoting Cellなどと呼ばれることがあります)。個数が最大になった組み合わせ(角度θと距離ρの)を元の直角座標に戻したものが、最も直線らしい点の集まりとなります。個数を下げてゆくと、次の候補が順次得られます。角度θと距離ρを細かく分けると、精度が上がりますが、計算時間が長くなり、必要なメモリ容量も増えるのが欠点です。円の検出の場合には、元になる直角座標上の点(x, y)を、円の中心点(centerX, centerY)と半径radiusの三次元空間に変換し、同様の処理を行います。
Hough変換の問題点と解決方法
計算時間が長いこと、大きなメモリ容量が必要なことは、最近の環境では、あまり支障がなくなっています。しかし、次のような根本的な問題があります。
ノイズが邪魔になる
Hough変換による直線検出の原理は、仮想した一本の直線上に載る点の数を数え、数が多ければ直線と見なしますので、点がランダムに多数あると、直線が多数検出されます。逆に、点が一列に並んだ立派な直線であっても、直線が短くて、構成する点の数が少ないと、直線と見なされません。したがって、Hough変換による直線の検出は、ノイズを十分に除去しておく必要があります。
Hough変換による画像からの直線や円の検出:CodeZine
