
ボールは、p <= 0 の位置で地面に当たった後、跳ね返ります。この時点では、位置と速度を以下のように更新することで、跳ね返りをモデル化できます。位置を 0 にリセットボールが地面に衝突する直前に、速度を負の値にリセット跳ね返りの直後に、速度を下げる分布係数 (-0.8) と新しい速度を乗算
跳ねるボールのモデル化以下の手順では、連続時間で跳ねるボールをモデル化するワークフローについて説明します。完成したモデルを見るには、sf_bounce を開きます。タスク 1: 跳ねるボール チャートを連続時間で更新する設定空の Stateflow チャートを作成し、プロパティ ダイアログ ボックスを開きます。手順の詳細は、 を参照してください。更新方法を [連続] に設定します。タスク 2: 跳ねるボールのゼロクロッシング検出を有効にするかどうかの判定この例では、ゼロクロッシング検出を有効 (既定) にして、Simulink® モデルが p <= 0 でボールが地面に当たる時点を正確に判別できるようにします。こうしないと Simulink モデルで物理的な動作を正確にシミュレーションできない可能性があります。たとえば、ボールが地面よりも下の位置に表示される可能性が考えられます。タスク 3: 位置と速度に対応する連続時間変数の定義位置 (position) に対応する p、速度 (velocity) に対応する v という 2 つの連続時間変数を定義します。変数ごとに、以下の手順に従います。Stateflow エディターで、[チャート] 、 [他の要素を追加] 、 [ローカル データ] を選択します。ローカル データの名前を入力します。更新方法を [連続] に設定します。その他のプロパティは既定値のままで、[OK] をクリックします。
連続状態を Simulink モデルに提示するために、2 つの出力値 p_out と v_out を定義します。変数ごとに、以下の手順に従います。Stateflow エディターで [チャート] 、 [入力と出力を追加] 、 [Simulink へのデータ出力] を選択します。出力データの名前を入力します。その他のプロパティは既定値のままで、[OK] をクリックします。チャートには、以下のデータ (モデル エクスプローラーでの表示) を含める必要があります。
タスク 4: 跳ねるボール チャート用のソルバーの選択上記の例では、連続状態を含む Simulink モデルで使用される既定値の可変ステップ ソルバーである ode45 (Dormand-Prince) を使用できます。タスク 5: 自由落下するボールのダイナミクスの追加デフォルト遷移が設定された Falling という名前のステートを追加します。デフォルト遷移では、初期位置を 10 メートル、初期速度を 15 メートル/秒に設定します。
以下のように、位置と速度の微係数を定義する during アクションを Falling ステートに追加します。
重力 (-g) が原因で、位置の微分は速度、速度の微分は加速度に該当します。タスク 6: Simulink モデルへのボール位置と速度の提示during アクションでは、以下のように、位置を出力値 p_out、速度を出力値 v_out に代入します。
タスク 7: 跳ねるボール チャートのセマンティクスの検証Stateflow チャートでの連続時間モデルの設計の注意事項 で定義された要件に対して、セマンティクスをチェックします。このチャートは設計仕様を満たしています。during アクションで値を微係数 p_dot と v_dot に代入遷移アクションでローカル変数 p と v に書き込みデフォルト遷移でローカル変数を初期化イベント、内部遷移、イベントベースの時相論理、および変化検出演算子を含まないタスク 8: 跳ねるボール チャートのシミュレーション各出力値をスコープに接続します。
チャートのシミュレーションを実行して、スコープの出力値を表示します。
ボールが地面よりも下の位置 (p = 0 よりも下の位置) に現れているように見えることに注意してください。これは、チャートに跳ね返りのチェックが含まれていないことが原因です。タスク 9: 跳ね返りのチェック自己ループ遷移をステート Falling に追加します。
跳ねるボールの連続時間でのモデル化 - MATLAB & Simulink - MathWorks 日本
