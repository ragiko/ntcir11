Python (Scipy) による神経活動データ解析入門・その1 | .mat ファイルの読み込みからデータのプロットまで
科学, 研究
前提として、Python, iPython, NumPy, SciPy, Matplotlib はインストール済み、Neurotycho のデータはダウンロード済みであるとする。
SciPyの起動
まずはシェルプロンプトから
% ipython -pylab
で iPython(Python の対話的シェル)を起動。"-pylab" を付けることで、MATLAB 風のデータプロットのコマンドをサポートするパッケージ(Matplotlib) を組み込んだモードになる。
立ち上がった iPython のプロンプトから
In [*]: from numpy import *
In [*]: from scipy import *
で NumPy, SciPy のモジュールをすべてインポート。これでひと通りの機能が使えるようになる。
データの読み込み
MATLAB形式のデータ(.mat)を読み込むには scipy.io.loadmat() を使う。まずこれをインポートする。
In [*]: from scipy.io import loadmat
Neurotycho > download > sleep task では ECoG データを4つのファイルに分割して公開しているが、まず最初のデータファイル(ECoG_100604-1_32.mat) を読み込んでみる。
In [*]: dataset = loadmat( 'ECoG_1006040-1_32.mat' )
とし、データファイルの内容を辞書オブジェクト(=連想配列) dataset にコピーする。
データの確認
まずおもむろに
In [*]: dataset
とすると、辞書オブジェクト dataset の概要が表示され、このデータが以下の4つの要素を持つことが分かる:
ラベル 'X': int16型の配列オブジェクト
ラベル '__globals__': 空のリスト
ラベル '__header__': ファイル情報を記述した文字列
ラベル '__version__': バージョン数を記述した文字列
これらのうち、'X' とラベルされた最初の要素がECoGのデータ本体であると思われる。この要素のみを取り出してみる。
In [*]: ecog_data = dataset['X']
以下、この配列 dataset の情報を得るためのメソッドをいくつか紹介していく。まず、配列の次元を知るには dim メソッドを使う。
In [*]: ecog_data.dim
Out[*]: 2
となり、2次元配列であることが分かる。各次元の大きさを知るには shape メソッドを使う。
In [*]: ecog_data.shape
Out[*]: (32, 2062570)
となり、データファイルの名前や、データに付属している ReadMe.txt の内容から推測すると、第1次元が ECoG のチャンネル、第2次元がデータ点に対応しているらしいと分かる。すなわち、ecog_data[n] を参照すればn番目のチャンネルのデータが取り出せることになる(ただし 0 <= n <= 31 に注意)。
データのプロット
データを入手してまず最初にすべきことは、それを目で見て確認すること。そのためにデータをプロットしてグラフにする。最も単純な方法は
In [*]: plot( ecog_data[0] )
とすれば、配列 ecog_data[0] の要素をそのままプロットできる。だがこれだと、横軸が配列の要素番号となってしまい、時間との対応がつかない。また縦軸の単位もわからない。
Neurotycho > download の記述に、ECoG データの単位はマイクロボルト(uV)、サンプリング周波数は 1kHz だとあるので、まず、縦軸をミリボルト単位でプロットするため、データの単位を変更して新しい配列 ecog_mV に移す。
In [*]: ecog_mV = ecog_data[0] / 1000.0
横軸に関しては、秒単位でプロットするため、以下のようにして横軸のグリッドを表す配列 n_sec を生成する。
In [*]: n_sec = arange( 0, ecog_data[0].shape[0] )
In [*]: n_sec = n_sec / 1000.0
やっていることは、まず 0 から ecog_data[0] の要素数まで、1づつ増える整数の配列を生成し、それをサンプリング周波数で割っている。この配列 n_sec と先程の単位変更したデータ ecog_mV を使うと、
In [*]: plot( n_sec, ecog_mV )
として、横軸が時間(sec)、縦軸が ECoG 信号(mV)のグラフが描ける。軸にラベルを付けるには
In [*]: xlabel( 'Time (sec)' )
In [*]: ylabel( 'ECoG signal (mV)' )
でそれぞれ横軸と縦軸にラベルが付けられる。結果が以下のグラフ。
ReadMe.txt に、測定開始後631秒の時点で麻酔剤を注入したとあるが、その100秒後あたりから ECoG 信号の振幅が増大していることが分かる。また、それ以前・以後の時間帯では信号の強度は概ね定常であることも分かる。
Permalink | コメント(0) | トラックバック(0) | 13:57  
SONY ウォークマン NW-E025F 液晶画面が表示されなくなったときの対処法
同じ症状で困ってる人がいるかもしれないのでメモ。
本体裏のRESETボタンをクリップの先などで長押し(1秒以上)すると、"ACCESS..."の表示の後に通常の表示に戻った。
データはそのまま残っていたが、試してみる人は念のため充電を十分しておいたほうがいいかも。
なぜいきなりこんな症状が出たかはまったく謎。
すわソニータイマー発動か、と思ったがとりあえず直ってよかった。
Permalink | コメント(107) | トラックバック(0) | 15:59  
Multitaper method の直観的な説明・その3
科学, 研究
前回の続き。
有限長のデータを使う限り、スペクトルの「漏れ」は避けられず、その漏れ方は窓関数の関数形によって決まるということを見た。
これを踏まえ multitaper method (MTM) では、漏れに対する許容値をあらかじめパラメータとして与えた上で、「その許容値の範囲内で漏れが最小になるような窓関数を構成する」ことでスペクトル推定の精度を上げるというアプローチをとる。
データ長 N の時系列データ  を考えよう(簡単のためサンプリング間隔は1とする)。これをそのまま離散フーリエ変換すると、周波数解像度は  となる。言い換えれば、周波数領域では  Hz ごとにデータ点が存在する。
スペクトル漏れに対する許容値 W を、この解像度を単位として指定することにする。つまり、漏れの許容値を  と指定したら、それは周波数領域において、あるデータ点で表わされるスペクトルが隣のデータ点に漏れることは許容する(がそれ以上の漏れは許さない)ということで、 ならさらにその隣に漏れてもよいとする、ということ。
さてここで、仮に許容値 W を完璧に実現するような窓関数が存在するとしよう。そのような窓関数のスペクトル分布は、周波数 f が  の範囲にあるときのみパワーを持ち、それ以外では 0 になっているはずだ。有限長の窓関数でそのようなスペクトル分布にできるだけ近い分布を持つものを求めるために、窓関数を N 次元のベクトル  で表わし、この窓関数の周波数範囲  でのパワー
を最大化することで  を決めることを考える。
窓関数の規格化を制約条件として Lagrange の未定乗数法を使うと、
の解が求める窓関数となる。これは手計算で簡単に
となることが示せるが、ここで として行列 A を定義すると、この式は  という行列 A に関する固有値問題の解が、求める窓関数であることを表していることがわかる。
長くなったので続きは次回。
Permalink | コメント(0) | トラックバック(2) | 23:04  
Ubuntu8.10 で vim7.2 (+ vimgdb patch) をビルド
コンピュータ
Clewn というプロジェクトで vim と gdb を統合した vimgdb というのを作っていると知り、さっそく導入してみた。
デバッグだけに使うなら Clewn というアプリをインストールすればいいだけなのだが、普段使う vim に gdb を統合しようとすると、vim のソースに vimgdb のパッチをあててコンパイルする必要がある。ちょっと引っかかったところがあったので、備忘録としてメモしておく。			Ubuntu8.10 に入ってる vim は version 7.1 だが、どうせだから最新版の version 7.2 を使おう、ということで本家から tarball を落としてきた。さっそく展開して、vimgdb のパッチを当てて*1、とりあえず configure してみた*2。が、"terminal library が見つからない、ncursesとか…" みたいなことを言われて止まってしまう。
仰せのとおりに libncurses5-dev を入れてから仕切り直し。今度は configure、make、make install とエラーなしで進んだが、なぜか gvim ができてない。XもGTKも開発用ライブラリは入れてあるはずなんだが…。configure のログファイルを調べると、どうもXのライブラリが見つからないせいらしい。入ってるはずなんだが、と思いつつさらに詳しく調べると、Intrinsic.h というヘッダが見つからないせいでコケてるようだ。確かにそんなファイルはどこにもない。
どのライブラリに入ってるんだ、とgoogle先生に聞いてみると、すぐ答えてくれた。libxt-dev に入ってるようだ。てことでこれも入れて、今度はつつがなくインストール終了。
vimgdb についてはまたいずれ。
Permalink | コメント(0) | トラックバック(0) | 00:20  
Out of the loop, into the blank
