>ループや指標付けの箇所でメモリが​足りないとのエラーが発生します
>過去の質問ではPCのメモリとは別にLabVIEW上で制限があるとのことなのですが・・
>最低でも指標にして800000点、出来れば14000000点(出来るだけ細かく)の波形データを処理さ​せたいのですが、
>上手く捌く方法は無いでしょうか?(バイナリファイルを上手く使えば・・?
>当方はLabVIEW2009(32bit版),メモリ4GBのPCを使っております
14,000,000点は、確かに多いですね。
これだけの要素数になると、配列のワイヤの引き回しにも、結構注意が必要になります。
(自分では、その大きさの配列を1つしか扱っていないようで、内部では同時にもっと多くのメモリが使われています)
ちなみに、14,000,000点のデータを
・何個くらい用いていますか?(1個?10個くらい?)
・常に、14,000,000点を一括して扱う必要がありますか?
後者の質問は、もし常に14,000,000点を一括して保持する必要がなければ、もっと小さなサイズに分けて
こまめに処理していけますし、一部をファイルに落としてやるといったことも可能とは思います。
(ケース・バイ・ケースなので、処理例は示せませんが、、、)
14,000,000点一括で扱うとすると、やはりメモリとの戦いになります。
「PCのメモリとは別にLabVIEW上で制限」というよりも、その時点その時点で
「どれだけ連続したメモリを確保できるか」にかかっています。
14,000,000点のDouble配列には、ざっくり112MBの「連続したメモリ」が必要ですが、仮にPCに4GB
搭載してあっても、空きメモリの合計が112MB以上あったとしても、「連続したメモリ」が112MBなければ、
その時点で「メモリ不足」で終わってしまいます。
(このとき、OSが、112MBの連続したメモリを作り出すために、メモリの一部をディスクにページアウト
できれば、処理続行できるかも知れませんが、相当重くなりそう)
また、大きな配列を作るときは、「配列が継ぎ足されるやり方」は極力避ける必要があります。
先日書いたviは、サンプルとしてCase文の中で配列の継ぎ足しをしていますが、これほどの大きな
配列を扱うような場合では、この方法は「その都度その都度、新しいメモリを確保しようとする」ために
処理が破たんすることがあります。
ところで、14,000,000点の配列がそもそも作れるか、まずはベンチマーク的に状況を確認したいですが、
添付の「101123-sample1.png」のような処理は、問題なく通りますか?
これは、For文で14,000,000点のDouble配列を1つ作り、波形にして波形グラフに表示させています。
For文に入ったところで、112MBの連続したメモリが確保できないと、メモリ不足になります。
(多分、この程度なら問題なく通って瞬時に終わると思いますが)
また、「101123-sample2.vi」のほうには、14,000,000点の配列を作る3通りのやり方を示しています。
1番目は「Forに指標付け」 で、これは初めからサイズが分かっているため、一度そのサイズを確保
できれば、あとは新たにメモリを確保しなくてよいので効率的です。が、指標付けしているために、
Forの中のCaseで場合分けして「継ぎ足したり、継ぎ足さなかったり」はできません。
ちなみに、「Whileに指標付け」は、似ていますが、最終的に何回まわるか分からないため
(配列サイズが予想できないため)、あまり効率は良くなくて、2番目(悪い例)に近いようです。
2番目は「シフトレジスタを使って毎回継ぎ足し」ですが、これは一番分かりやすい反面、一番おすすめできません。
なぜなら、配列を継ぎ足すたびに、より大きなメモリを再確保する、ということを繰り返すためです。
配列サイズが小さいときは問題ありません。何万、何百万という要素を使うときはやめた方が良いです。
3番目は、継ぎ足すたびに配列を大きくする(メモリの再確保をする)ことを避けるため、一定の大きさの
ブロックを作り、「配列置換」で要素を入れていきます。配列置換は配列サイズが変わらないので、
メモリの再確保が起こりません。で、ブロックいっぱいに入れてしまったら、その時だけサイズを大きくします。
このときはメモリの再確保が必要ですが、その頻度は下がります。ループを抜けたら、ブロックの大きさを
データの数に切り揃えます。
このviを実行すると、1番目⇒3番目⇒2番目 の順に実行が終わりますが、場合によっては、2番目は
なかなか終わらずに、挙動不審になるかも知れません。(LabVIEW強制終了が必要になるかも)
・・・今回の問題は、「指標付けのところでエラーになる」ということですので、配列継ぎ足し、というよりは
純粋に連続したメモリが確保できない、ということかも知れませんが(大きな配列が多いとか)、
あるいはWhileで指標付けしているため、何度も再確保が起こっていたり、とかかもしれません。
これほどの大きさの配列の場合は、ワイヤリングも結構技巧が必要になりますし、可能ならば
・あまり大きくないうちに処理してファイルに落とす(全部一括でなくてもよい場合)
・巨大な配列のまま表示しようとしない(表示には、さらに多くのデータ領域が必要らしい)
なども考えてよいかも知れません。このくらいしか書けませんが。。。
配列のワイヤを分岐すると、処理によっては、内部でデータがコピーされて倍になることもあったり・・・
しきい値ピーク検出とケースストラクチャについて - Discussion Forums
