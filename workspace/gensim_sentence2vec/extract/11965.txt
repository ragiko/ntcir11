ソフトウェアテスト(software test)は、コンピュータのプログラムを実行し、正しく動作するか、目標とした品質に到達しているか、意図しない動作をしないかどうかを確認する作業のことである。ソフトウェアテストは、プログラム中の仕様にない振舞又は欠陥(バグ)をできる限り多く発見することを目標する場合がある。欠陥を発見することを目標とする作業をデバッグという。目標とした品質には、規定した試験項目にすべて合格することもある。例えば、OS, プログラミング言語では、仕様を満たしているかどうかの適合試験を規定している。ソフトウェアテストに成功するとは、規定した試験項目にすべて合格するか、規定した品質目標に到達しているか、欠陥を発見することである。ソフトウェアテストでは、欠陥が存在することを示すことはできるが、欠陥が存在しないことは証明できない。ソフトウェアに仕様にない振舞がないことを保証する作業を証明といい、証明用のシステム、証明しやすい言語も多数存在している。
試験の種類[編集]
性能試験と機能試験[編集]
機能試験・性能試験の指標と分類にISO/IEC 9126(ISO 9126)の枠組みを利用することがある。
機能試験(function test)[編集]
機能試験は、規定した機能を果たすかどうかを試す。 関数であれば、規定した引数を与えると、想定した戻り値を返すブラックボックス試験が機能試験に相当し、単体試験の一部である。 適合試験、単体試験は、機能試験を主とするが、性能試験を含むことがある。
性能試験(performance test)[編集]
性能試験は、ソフトウェアシステムの性能を測り、必要な性能が出ることを確かめる試験である。入力をどれだけ受付けるか、どれだけの出力が可能か。通信経路数・通信速度、処理件数などプログラム単体では問題が発生しなくても、通信、データベース、入出力(I/O)、同時に起動するソフトウェアなどの高負荷、長時間使用などの条件下では性能が低下することがある。性能を確認する試験は、システムの性能に影響を与えないように測定する必要があるためそのため、OSやミドルウェアなどでは性能を測定する効率的な計測方法を提供していることもある。過負荷に対する性能試験をストレステストという。
ストレステスト[編集]
ストレステストは、ソフトウェアシステムに対して高い負荷を与え、処理の低下・抜け、データの破壊、発熱など致命的な問題が、どういう条件で発生するかを試験する。ストレステストを行うことで、高い負荷が加わっている状況でしか発生しない不具合や、発生確率の低い欠陥、著しい性能の低下を発見することがある。性能試験の一部として実施し、対応可能な付加の仕様を確かめることがある。
検証試験と妥当性確認試験[編集]
仕様通りに動いているか、試験仕様に基づいて確認する試験を検証試験(verification test)、最終利用者の意図通りに動いているかどうかを確認する試験を妥当性確認試験(validation test)という。
検証試験(verification test)[編集]
決めた仕様に合致しているかどうかを試す試験。プログラミング言語、OS、通信規約、データベースなどの仕様に合致しているかどうかを試す試験を適合試験ということがある。
適合試験(conformance test)[編集]
OS, プログラミング言語、通信プロトコル、データベースなどソフトウェアを動かすための基本的な道具が、仕様に適合しているかどうかを確認する検証試験(verification test)。OSの国際規格の一つであるPOSIXでは、 NIST が適合試験のソースコードを公開している。[1] 自動車用OSの国際規格OSEKでは、MODISTARC(Methods and tools for the validation of OSEK/VDX based distributed architectures)がある。 TOPPERS OSでは、TTSP(TOPPERS Test Suite Package)というテスト環境を提供し適合テスト等を実施しやすくしている。[2] OS、言語、ネットワーク、データベースの適合試験を実施せずに、応用ソフトの試験を実施すると、OS、言語、ネットワーク、データベースの仕様の変化に対応できていないことがある。
妥当性確認試験(validation test)[編集]
最終利用者が意図している動作をするかどうかを試験することを妥当性確認試験という。 性能試験、システム試験、受入試験の一部として実施することがある。
上から(top down)と下から(bottom up)[編集]
下降試験(top down test)[編集]
単体テストおよび結合テストにおける手法の一つ。単体テストが完了したモジュールのうち、上位モジュールから順に結合させてテストを行なう。この手法の利点は、仕様的な振る舞いを決定する上位モジュールを早期に検証することによって、機能漏れ、仕様の認識違いなどの致命的な不具合を、開発の早い段階で発見できることにある。一方で、数の多い下位モジュールの検証が先送りされるため、開発と平行してテストを進めにくいという欠点もある。
トップダウンテストを行う際には「スタブ」を用意しなければならない。
上昇試験(bottom up test)[編集]
単体テストおよび結合テストにおける手法の一つ。トップダウンテストとは逆に、単体テストが完了した下位モジュールから順に結合させてテストを行なう。この手法の利点は、数が多く独立性の高い下位モジュールから順に検証することで、開発とテストを平行して実施できることにある。一方で、システムの根幹となる上位モジュールで不具合が発見された場合、テストが完了したはずの下位モジュールも影響を受けるという欠点も持っている。単体試験を行う場合に、他の関数等を呼び出している関数を試験する場合に、呼出のない関数を試験してから、呼出をしている試験を行う場合にボトムアップテストになっている。
ホワイトボックステストとブラックボックステスト[編集]
プログラムの内部構造に注目したテストをホワイトボックステスト(white box test)、プログラムの入力と出力に注目したテストをブラックボックステスト(black box test)という。
白箱試験(white box test)[編集]
白箱試験(white box test) は、プログラムの構造に着目したソフトウェアテストのことである。着目する構造には命令や分岐などがあり、注目した構造に対してどれだけの割合の部分を実行できたかを網羅率で表す。
1: int abs(int x){
2:   if(x<0){
3:     x=-x;
4:   }
5:   return x;
6: }
命令網羅(C0)[編集]
命令網羅基準を用いてテストを行う場合は、すべての命令を実行すればよい。上記のabs関数では、x = -1 を用いてテストすれば命令網羅基準に従ってテストできたことになる。
分岐網羅(C1)[編集]
判定条件網羅とも。分岐網羅基準を用いてテストを行う場合は、すべての分岐において、すべての分岐の方向を実行すればよい。上記のabs関数では、x=-1、x=0を用いてそれぞれテストすれば、分岐網羅基準にしたがってテストできたことになる。
条件網羅(C2)[編集]
条件網羅基準を用いてテストを行う場合は、複数条件で起こりうる真・偽と分岐の組み合わせ経路を実行すればよい。
黒箱試験(black box test)[編集]
黒箱試験(black box test) は、プログラムの入出力だけに注目し仕様通りにプログラムが動作するか(もしくは仕様通りに動作しないか)をテストする。プログラムの入力が単一の値である場合は同値分割や限界値分析を、プログラムの入力が複数あり相互に影響を与えるような場合はディシジョンテーブルや原因結果グラフなどを用いて入力を決定する。大域変数の読み書き、通信、割り込みなどが処理中にある場合には、それらも入出力の一つとして扱う。
同値分割[編集]
入力を同じように扱えるグループに値を分けたものを同値クラスと呼び、それぞれの代表的な値を用いてテストを行う。 有効な同値クラスを、有効同値クラス、無効(エラー)となる同値クラスを無効同値クラスと呼ぶ。
限界値分析(境界値分析)[編集]
入力を同じように扱えるグループに値を分け、その境界となる値を用いてテストを行う。プログラムのエラーは分岐の境界で発生する場合が多いため、限界値分析に基づいたテストを行うことで、同値分割に基づいたテストよりも多くの欠陥を発見することができる。
同値分割と限界値分析の適用例[編集]
例えば、次のようなプログラムがあったとする。
入力: 時刻 (0:00-23:59)
出力: 10:00≦入力≦20:00であれば通常料金、それ以外であれば割増料金
通常料金の同値クラスは10:00以上20:00以下。
割増料金の同値クラスは0:00以上10:00未満と20:00を超え23:59以下。
無効同値クラスは0:00未満と23:59より大きい場合となる。
0:00               10:00          20:00               23:59 
ーーー−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
無効同値    同値クラス     同値クラス     同値クラス    無効同値
クラス      (割増料金)         (通常料金)      (割増料金)    クラス 
(エラー)  <−−−−−−−−−−−−有効同値クラス−−−−−−−−−−> (エラー)    
:端を含む
:端を含まない
同値分割ではそれぞれの範囲から代表的な値を入力として選びテストを行う。
入力例)-1:00、8:00、12:00、22:00、25:00
限界値分析では、入力の範囲を想定される出力ごとに分割し、それぞれの範囲の境界を入力として選びテストを行う。
入力例)-0:01、0:00、9:59、10:00、20:00、20:01、23:59、24:00
ディシジョンテーブル[編集]
ディシジョンテーブル(決定表)とは、入力が複数のパラメータから構成されている場合に、 入力と出力の関係を表形式で表したものである。 表の各列がテストケースを表している。
ソフトウェアテスト - Wikipedia
