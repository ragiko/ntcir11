「ここから始めるオブジェクト指向」最新記事一覧 - ITmedia Keywords 「ここから始めるオブジェクト指向」最新記事一覧 - ITmedia Keywords
オブジェクト指向について知るため
いろんな用語が出てきて一気には覚えきれないな
つまり1つひとつのオブジェクトは独立して存在し、それぞれ固有の役割・責務を持っています。それらは孤立した存在ではなく、互いにメッセージを通じて協調動作を行いながら、全体として1つの仕事を行っている姿がオブジェクト指向の基本的世界観です。
カプセル化
オブジェクトは外部からのメッセージを受け取るためのインターフェイスを公開しています。メッセージを受け取ると、それに対応する振る舞いを実行するのですが、外部からは、公開されているインターフェイス以外にオブジェクトの状態に直接アクセスする方法はありません。これは、オブジェクトが、「固有の状態」と「振る舞い」をカプセル化して隠ぺいしているという特徴に起因しています。そして、公開されているインターフェイス以外にオブジェクトの状態に直接アクセスできないことを「情報隠ぺい」と呼んでいます(図1)。
つまり、オブジェクトが持っている固有データは、外部から直接参照することはできず、メッセージによってのみ取得することができるのです。
概念の内包と外延
上述したように、クラスの定義の仕方は2通りあります。1つは、オブジェクトの集合というとらえ方で、これを「外延(extension)」と呼びます。もう1つは、オブジェクトの抽象概念というとらえ方で、これを「内包(intension)」と呼びます(図7)。
クラスをオブジェクトの集合と考える場合、集合の表現方法は2通りあります。
従業員=｛ある会社で働いている人｝
従業員=｛Aさん、Bさん、Cさん｝
1のように一般的に定義する表現方法が「内包」で、2のように具体例を列挙する表現方法が「外延」です。
クラス階層
【クラスを分類する】
クラスは、その意味や属性、操作の差異に注目して分類することができます。分類されたクラスを元のクラスのサブクラス、元のクラスをスーパークラスと呼びます
【is-aの関係】
クラスとサブクラスの関係をis-a関係と呼ぶことがあります。その理由は、サブクラスはスーパークラスの一種なので「サブクラス is-a スーパークラス」という表現方法が自然にできるからです。「A is-a B」かつ「B is-a C」ならば「A is-a C」なので、is-a関係は推移律が成立します。またis-a関係は階層構造を持つことができます。
【クラス階層の例】
例えば「乗り物」クラスの分類を考えてみましょう。「乗り物」クラスは、「車」「飛行機」「船」というサブクラスに分類できます。「車is-a乗り物」、つまり車は乗り物の一種です。飛行機、船も同様です。「車」クラスはさらに、「乗用車」「バス」「トラック」というサブクラスに分類できます。「乗用車is-a車」、つまり乗用車は車の一種です。バス、トラックも同様です(図1)。
【サブクラスと部分集合】
クラスは集合と考えることができる、と前回解説しましたが、サブクラスは部分集合と考えることができます。例えば、車クラスを次のように乗用車10台、バス10台、トラック10台からなるオブジェクトの集合と考えます。
車=｛乗用車1、……、乗用車10、バス1、……、バス10、トラック1、……、トラック10｝。
ここで乗用車n、バスn、トラックnは、駐車場に駐車しているというような具体的な車を示します。この集合を次の3つの部分集合に分割します。
乗用車 ｛乗用車1、……、乗用車10｝バス ｛バス1、……、バス10｝トラック ｛トラック1、……、トラック10｝
以上はそれぞれ、車クラスのサブクラスです。集合論で使用する包含関係「⊃」で表すと、
車⊃乗用車車⊃バス車⊃トラック
となります。このようにクラスとサブクラスの関係は、集合と部分集合としてとらえることができます(図2)。
複合オブジェクト
【部分と全体】
あるオブジェクトが、その部品となるオブジェクトで全体を構成しているとき、そのようなオブジェクトを複合オブジェクトと呼びます。
【分類と分解】
複雑なものを理解するためには、分類して整理する方法と、単純なものに分解する方法があります。サブクラスという概念は、クラスを分類して整理する手法です。一方、複合オブジェクトという概念は、複雑なオブジェクトを単純なオブジェクトに分解する手法と考えられます。分類はクラスという抽象概念を対象にしていますが、分解はクラスではなく具体的なオブジェクトを対象としているという違いもあります。
【part-ofの関係】
複合オブジェクトとそれを構成する部品オブジェクトとの関係をpart-of関係と呼ぶことがあります。部分は全体の一部なので「部分はpart-of全体」という表現方法が自然にできるからです。
「Aはpart-of B」かつ「Bはpart-of C」ならば「A はpart-of C」なので、part-of関係は推移律が成立します。またis-a関係と同様、part-of関係も階層構造を持つことができます。この関係はhas-a関係と呼ぶこともあります。この場合、part-of関係と主語が反対になり「全体has-a部分」と表現することができます。全体が部分を保有しているという意味です。
【複合オブジェクトの例】
例えば、車はボディ、シャーシ、エンジンなどさまざまな部品で構成されています。さらに、ボディは運転装置、内装、照明などで構成されています。つまり、車というオブジェクトは複合オブジェクトであり、車を構成する部品自体も、より小さな部品で構成される複合オブジェクトであると考えることができます(図3)。
ポリモフィズム
【ポリモフィズムとは】
polymorphismという単語はpoly+morph+ismに分解できます。polyは多くの、morphは形、形態です。つまり多くの形態という意味で、多態性または多相性と訳されています。いずれにしてもあまりイメージがわいてきませんね。ポリモフィズムとは、同じ名前の操作が多くの形を取る、異なる振る舞いをする、ということを意味します。
【ポリモフィズムの例】
例えば会社で働いている人を考えます。「仕事をする」「働く」といってもその内容は職種により異なります。プログラマはプログラミングを行い、営業担当は営業活動を行い、事務職は事務作業を行います。
「従業員」というクラスを分類すると、「プログラマ」「営業担当」「事務職」というサブクラスに分類することができます。各サブクラスは「働く」という同じ名前の操作を持っていますが、その振る舞いはそれぞれのサブシステムに個別に定義されていて異なります。これがポリモフィズムです。
今回はUMLで最も基本的なクラス図について説明をします。クラス図は抽象的なものなので、補助的に具体的なオブジェクト図を描いてクラス図の意味を確認することが大切です。
UMLに関する一般的な知識
【UMLとは】
UMLとは、Unified Modeling Languageの略で、統一モデリング言語と訳されています。「統一」+「モデリング」+「言語」と3つのキーワードがあります。
1990年代前半、さまざまなオブジェクト指向の開発方法論(Methodology)が提唱され、普及の阻害要因になっていました。Rational社のBoochが統一を仕掛けたのですが、開発方法論、特に開発プロセスの統一は難しく、表記法のみ統一したものがUMLです。つまりオブジェクト指向による「モデリング」のための表記法を「統一」ものがUMLです。
自然言語では、単語を文法にのっとって構成することで文章を作成しますが、UMLでは、モデル要素をルールに従って組み合わせることで、クラス図やシーケンス図などのダイアグラムを作り出します。
サブクラスからスーパークラスに、より一般化することを汎化(generalization)、逆にスーパークラスからサブクラスに、より特殊化することを特化(specialization)と呼びます。スーパークラスを親、サブクラスを子、3階層以上の場合はそれぞれ祖先、子孫と呼ぶこともあります。
【弁別子】
ところで、あるスーパークラスに2つのサブクラスがあったとします。このとき図3のように2つの描き方ができますが、これらの意味の違いはどこにあると思いますか?
クラスをサブクラスに分類する方法は何通りも考えることができます。例えば「人」というクラスは性別により男性/女性、年齢により大人/子ども、あるいは職業により分類することができます。この分類の基準あるいは特化の条件を弁別子と呼びます。
次の2つの図(図4)を比べてください。クラス「人」の3つのサブクラスはすべて特化の基準が異なっています。このような場合は左のように汎化関係を別々にします。右のような描き方は通常しません。
【完全/不完全】
弁別子で分類したとき、すべてのサブクラスが挙げられている場合は「完全」、すべてでない場合は「不完全」と呼びます。『世界がもし100人の村だったら』(池田 香代子再話 C.ダグラス・ラミス対訳、マガジンハウス)という本に従うと、人を性別という弁別子で分類すると女性52人、男性48人で52+48=100なので「男性」と「女性」で完全です。住んでいる地域で分類するとアジア61人+アフリカ13人=74人なのでこれら2つのサブクラスだけでは不完全です(図5)。
【継承】
汎化関係によりサブクラスはスーパークラスの属性、操作、関連を継承します。親から子だけでなく、その子孫すべてに継承できるのです。例えば図7のようにPCをデスクトップ型とノート型に分類します。
【多重継承】
分類というのは意外と難しいものです。例えば名刺を整理して管理するために、仕事関係、友人関係、コミュニティ関係……とグループに分類します。友人のAさんと仕事関係ができたとき、関係者の名刺はまとめておきたいので仕事関係に移します。今度は友人に連絡しようとして友人の名刺の箱を見たとき、Aさんの名刺を移動したことを失念してしまう可能性があります。「友人かつ仕事関係」というグループを追加しなければなりません。これが多重継承の考え方です。仕事関係、友人関係、コミュニティ関係……といったグループは完全に分かれている(disjoint)のではなく、重なり合っている(overlapping)ということです。
例えば「FAX」というクラスと「プリンタ」というクラスを作ると「FAXプリンタ」というオブジェクトはどちらのクラスのインスタンスと考えればよいでしょうか。クラスを集合と考えると「FAX」という集合と「プリンタ」という集合は重なり合っています(図8)。
クラス図で表現すると、「FAXプリンタ」というクラスは「FAX」クラスと「プリンタ」クラスの両方から多重継承することになります(図9)。
意味的には多重継承が考えられるのですが、モデルが複雑になり混乱をまねくことがあります。また実装言語ではサポートされていないものが多いようで、特に必要のない限り使用しない方が安全です。
【コンポジション】
UMLでは強い集約関係をコンポジションと呼び、全体側を黒塗りのひし形で表現します。部分側のインスタンスの存在は全体側に依存し、部分側のみで存在することはできません(図12)。
【集約とコンポジション】
PCは本体、ディスプレイとキーボードから成ります。xx社製xxモデルというデスクトップPCを購入すると、これらの3つの部品で1つのセットになっています。これら3つの部品はそれぞれ独立してほかのPCに流用することができます。本体が壊れてもディスプレイを取り外して使用できます。
ノートPCは本体、ディスプレイとキーボードが一体構造となっていて、このようなことはできません。本体が壊れたからといってディスプレイを取り外して使用することは通常できません。このような強い集約関係がコンポジションです(図13)。
相互作用図
【自律分散協調動作】
オブジェクトは1つ1つは自律していますが、それらが「メッセージを通して、協調しながら全体として1つの仕事をする」というのがオブジェクト指向の自律分散協調動作の考え方です。人間をオブジェクトと考えると、会話がメッセージということになります。
【相互作用図】
相互作用図はオブジェクトとオブジェクトとのメッセージによる協調動作を表現します。UMLではシーケンス図とコラボレーション図の2つのダイアグラムが定義されています。
【コラボレーション図】
相互作用図を描くときは1つのシナリオを想定します。
コラボレーション図を描くにはまずシナリオに参加するオブジェクトを抽出します。弁当、冷蔵庫、卵などもオブジェクトですが、ここでは単純化して「自分」「母」「妹」の3つのオブジェクトを対象としてモデルを考えます。次にこれらのオブジェクト間でどのようにメッセージを送ってシナリオを完成させるかを書き込んでいきます。メッセージを送る相手との間をリンクでつなぎ、その近くにメッセージと矢印を記述します。メッセージで渡すパラメータは()で記述します。シナリオに従って個条書きにすると次のようになります(図4)。なお、オブジェクトは下線を引いて表記します。
「自分」から「母」に「弁当を頼む(卵焼き)」というメッセージを送ります
「母」から「妹」に「買い物を頼む(卵)」というメッセージを送ります
「妹」は自分自身に「買い物をする(卵)」というメッセージを送ります
「妹」はメッセージ2の依頼により、買ってきた卵を「母」に渡します
「母」はメッセージ1の依頼を達成するため、自身に「弁当を作る(卵焼き)」というメッセージを送り、完成したら弁当を「自分」に渡します
こうして母と妹の協力により、自分は弁当を受け取ることができるわけです。
【シーケンス図】
シーケンス図もコラボレーション図と意味内容は同じです。ただし、コラボレーション図はメッセージの順番を重視しませんが、シーケンス図はメッセージの順番を時系列で表現する点でコラボレーション図と違いがあります。
シーケンス図は、オブジェクトを上に並べ、その下に生存線と呼ばれる点線を引きます。これはオブジェクトが存在する時間を表します。メッセージはこの生存線の間に、シナリオの時間の流れに沿って上から順に並べていきます(図5)。2つの相互作用図(図4と図5)を比べると、意味内容は同じであることが分かるでしょう。
【メッセージの同期、非同期】
メッセージを送信した後、受け取り側でその処理が終了してリターンが返されるまで次に進めないメッセージを同期型と呼びます。一方、メッセージを送信してもリターンを期待せず、次に進めるメッセージを非同期型と呼びます。リターンは煩雑さを避けるため、記述しないのが普通です。
例えば前述のシナリオの例では、卵を買ってきてもらわないと卵焼きは作れません。しかし、例えばシナリオを少し変更して、すでに冷蔵庫に卵があったとしましょう。また、お母さんは忙しいので、妹に観葉植物の水やりを頼んだとします。この場合、水やりの作業は弁当を作る作業と関係ないので、頼んだ時点ですぐに次の作業を行うことができます。つまり、「買い物を頼む()」が同期型、「水やりを頼む()」が非同期型です(図7)。
【責務と操作】
自律分散協調動作を行うための前提は、各オブジェクトが自分自身の責務あるいは役割を持っていることです。その責務を果たすための操作を呼び出すのがメッセージです。
上のシナリオの例では、母には「弁当を作る()」、妹には「買い物をする()」や「水をやる()」という責務があると考えられます。「弁当を頼む()」や「買い物を頼む()」というメッセージは、それぞれ「弁当を作る()」、「買い物をする()」という責務を果たすための操作を呼び出していることになります(図8)。
このように、メッセージは結局、受け側の操作を呼び出していることになるので、先ほどのシーケンス図をそのように書き直すと、図9のようになります。図9の生存線上の長方形は、呼び出された操作がアクティブな時間を表すもので、活性化区間または制御フォーカスと呼びます。
今回は「振る舞いをUMLで表現する」の第2回として、UMLのもう1つの動的モデルであるステートチャート図について説明します。ステートチャート図はある特定のオブジェクトに注目して、そのライフサイクルをモデリングするものです。
オブジェクトの状態
次はステートチャート図の説明に入りますが、その前にオブジェクトの状態について考えてみましょう。オブジェクトの状態は変化します。その状態は属性の値または他オブジェクトとのリンクで表現することができます。
図7は、米びつの在庫量を属性で表現した例です。2合入っている状態から1合取り出すと1合入っている状態になります。そこからさらに1合取り出すと空の状態となり、そこに2合追加すると2合入っている状態に戻ります。これらの状態はオブジェクトの属性の値で表現することができます。
ステートチャート図
ステートチャート図は、ある1つのオブジェクトに注目してその状態の変化をモデリングします。オブジェクトの生成から消滅までのライフサイクルを表現することもできます。
図9をUMLのステートチャート図で表現したものを図10に示します。オブジェクトの状態は角丸四角で表し、中に状態名を記入します。初期状態は黒丸で示します。ある状態から別の状態への状態遷移は矢印で関係付けます。状態遷移を引き起こすイベントを矢印の横に記述します。
今回はアクティビティ図について説明します。相互作用図やステートチャート図を描くにはオブジェクトが必要ですが、アクティビティ図を描くのにクラスやオブジェクトは不要です。
アクティビティ図
アクティビティ図は処理の流れを表現するのに使用し、フローチャート図と似ています。お母さんが弁当を作成する手順は大きくは、「(1)材料を準備する」「(2)弁当を作る」という2つのステップからなります。アクティビティ図で表現すると図1のようになります。黒丸で表された開始点からスタートし、(1)、(2)のアクティビティを順番に実行して終了します。アクティビティは何かの処理を行っている状態です。処理が終了すると次のアクティビティに遷移します。
並行処理
アクティビティ図がフローチャートと異なる特徴は、並行処理が記述できることです。「(1)材料を準備する」には次の2つの作業が含まれます。
a ご飯を準備する
b 卵焼きを準備する
この2つは並行処理が可能です。実際は1人で行うので同時並行ではないですが、どちらを先に行っても構いません。並行処理を表す「同期バー」を用いて図1を図2のように表現することができます。
サブアクティビティ
アクティビティは非アトミックです。アトミック(原子的)とはそれ以上分解できないことです。アクティビティの粒度は大きくすることも小さくすることもできます。つまりアクティビティはより小さなアクティビティに分解可能です。
図2の3つのアクティビティを分解して、それぞれをアクティビティ図で表現することができます(図3)。
レーン(lane)とは一般的に通路、車線のことです。UMLでは、水泳のコースとイメージが似ているのでswimlaneと呼ばれます。レーンを用いてアクティビティ図でワークフローを記述することができます。
ここまで例として挙げてきたアクティビティ図を、レーンを用いて記述してみましょう。Aさん、お母さん、妹をレーンで区分けしたアクティビティ図を図6に示します。3人の役割を明確に表現することができます。
「ここから始めるオブジェクト指向」 - what can i do for you まずLv.100
