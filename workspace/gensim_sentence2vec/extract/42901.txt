
当たり判定の実装
なんとなく弾が出せるようになったところで,少しゲーム的な要素を加えていきましょう。まず,立方体に当たり判定をつけてみます。具体的には,
弾を発射する  立方体に当たる  立方体が消える
といった処理を加えます。
物理運動をする物体の衝突が発生すると,まず,「OnCollisionEnter()」という関数が呼び出されます。パラメータには,ぶつかった相手のオブジェクト情報が入っています。
ここでは,弾が当たる相手であるCube2の挙動を記入したtestScriptに追記していきます。
function OnCollisionEnter(collision : Collision)
{
if (collision.gameObject.name == "bullet(Clone)"){
Destroy(gameObject);
}
}
オブジェクト名を取得するには,「gameObject.name」を使用します。これが弾のオブジェクト名と同じであったら,自分を消去(Destroy())する処理になります。弾は,インスタンスで生成されているため,後ろに「(Clone)」が加わりますので注意してください(インスタンスのオブジェクト名は,実行中にHierarchyビューを見れば分かります)。
実行の様子:当たり判定で消去
弾だけ残るのもどうかと思いますので,弾のほうも消してやりましょう。判定部に,
Destroy(collision.gameObject.gameObject);
を追加します。これは,パラメータで渡されたオブジェクトの本体を指定して消去していることになります。
実行の様子:当たり判定で弾も消去
さて,これらの処理をUnity Editor上で実行していた人は,右図のようにHierarchyビューにどんどんインスタンスが溜まっていくのを見て不安になっていたかもしれません。作ったインスタンスは,いらなくなったらさっさと消去するようにしましょう。
こういった場合,一定時間が経過したら消去するとか,なにかにぶつかったら消去するというのが一般的です。
今回は,下に消去判定用の平面を置き,そこにぶつかったら弾が消えるようにしてみます。
まず,平面を作ります。［GameObject］-［Create Other］-[Plane]を選び,できたオブジェクトは「Plane2」という名前にしておいてください。
板がはっきり見えるのもナンですので,透明体ぽい素材に変えておきましょう。デフォルト素材では,パーティクル用のものがよさそうです。
本来の使い方とはまったく違うとは思いますが,なんとなくいい感じにはなります。
スクリプトですが,testScriptに追記します。先ほどの当たり判定条件にこの平面を加えると,判定用平面まで消えてしまいますので,別の判定部を作ります。
以下のものを,衝突判定関数内に入れておきましょう。判定相手の名前を「Plane2」にしているだけで,とくに難しくはありません。
if(collision.gameObject.name == "Plane2"){
Destroy(gameObject);
}
まとめると,ここまでのtestScriptは,以下のようになります。
function Update () {
transform.Rotate(0,1,0);
}
function OnCollisionEnter(collision : Collision)
{
if (collision.gameObject.name == "bullet(Clone)"){
Destroy(gameObject);
Destroy(collision.gameObject.gameObject);
}
if(collision.gameObject.name == "Plane2"){
Destroy(gameObject);
}
}
通常のプレイヤー視点からは見えない,ステージ外での処理ですので,たぶん,下に飛び降りないと違いが分からないと思いますが,これでちゃんと弾が消えるようになりました。
実行の様子:弾のインスタンスを消去
爆発処理:パーティクルを使う
さて,弾も立方体もパッと消えてしまうのではちょっと情緒がないと考える人は多いでしょう。普通のゲームなら爆発して消えるような処理が行われるはすです。ということで,爆発させて見ましょう。
爆発などの表現には,一般的にパーティクルが用いられます。Unityでは,パーティクルのシステムと基本的な素材が標準で用意されており,簡単に利用できます。とくに効果を確認するだけなら,物凄く簡単です。以下のムービーで確認してみてください。
まず,上のメニューから［Assets］-［Import Package］-［Particles］をすべて読み込みます。
Projectビューで,［Standard Assets］-［Particles］の下を見ると,たくさんのファイルが追加されていることが確認できると思います。先ほどのムービーのように,内容は簡単に確認できますのでどんなものがあるか一度見ておいてください。
一般的に,爆発効果などはインスタンスで扱われますのでプレファブが必要なのですが,ここで読み込んだ素材はすでにプレファブの形になっていますので,必要な場所でインスタンス化してやればすぐに使えます。
先ほどと同様,testScriptに処理を加えます。まず,先頭に,
var projectile : GameObject;
の行を追加してください。
続いて,衝突判定部に処理を加えます。
var clone : GameObject = 
Instantiate(projectile, transform.position, transform.rotation) as GameObject;
yield WaitForSeconds(2);
Destroy(clone);
4Gamer.net — 【完全図解】超初心者でも大丈夫。話題のゲームエンジン「Unity」での3Dゲーム作成入門
