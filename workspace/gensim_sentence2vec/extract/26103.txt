
文字列を加工するなどの目的で、文字列の内容を解析したいような場合がある。この際、一般的には正規表現を利用するが(参考「TIPS:正規表現を使って部分文字列を取得するには?」「TIPS:正規表現を使って文字列から部分文字列を取り除くには?」)、もちろん1文字ずつ解析して処理することもできる(正規表現の方がコードがシンプルになるので便利だが、処理速度が遅くなる場合がある。筆者はコードはかっこ悪くても処理速度の速い「1文字ずつの解析処理」を好んでよく用いる)。本稿ではこの1文字ずつの解析処理の方法を紹介する。
なお、最近ではWindows Vistaの登場などにより、(エンド・ユーザーによって)Unicodeのサロゲート文字が入力される可能性があり、それが文字列解析の処理で問題となる場合もある。サロゲート文字(もしくはサロゲート・ペア文字)とは、通常「1文字=2bytes」のところが、「1文字=4bytes」となることがある文字だ。そこで本稿では、サロゲート文字も考慮した文字列解析処理について説明する。
文字列解析処理
(サロゲート文字を考慮しながら)文字列を1文字ずつ処理するには、TextElementEnumeratorオブジェクト(System.Globalization名前空間のTextElementEnumeratorクラスのオブジェクト)を使用する。
TextElementEnumeratorオブジェクトは、処理したい文字列をパラメータに指定して、StringInfoクラス(System.Globalization名前空間)の静的メソッドであるGetTextElementEnumeratorメソッドを呼び出せば取得できる。
実際にTextElementEnumeratorオブジェクトを使って1文字ずつ処理するには、まずMoveNextメソッド(パラメータなし)を呼び出して次の1文字を処理対象とし、Currentプロパティからその文字を取得する(Object型であるが、実際の内容は1文字の文字列)。注意点としては、MoveNextメソッドを呼び出して初めて最初の1文字が取得できることだ(MoveNextメソッドを呼び出さずに、Currentプロパティを使うことはできない)。
次の画面は、文字列を1文字ずつ処理するWindowsアプリケーションのサンプル・プログラムである。
文字列を1文字ずつ解析するには?(サロゲート文字対応)［C#、VB］ − @IT
