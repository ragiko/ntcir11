
6-1FileMakerのデータモデル
6-2コンテキストが絡むデータベース
6-3カレンダーを作る
6-4コメントチェーンのデータベース化
6-1FileMakerのデータモデル
FileMaker 7以降、データベースの中に複数のテーブルを持てるようになり、リレーショナルデータベースの機能を持つことができるようになりましたが、他のRDBシステムと同様に考えられる面もある一方で違うところもあります。FileMaker特有の概念を実際の動作とあわせて解説しましょう。
FileMakerにおけるテーブル
FileMakerは当初、1つのファイルが1つのデータベースでそこには1つのテーブルだけがありました。これは概念的には分かりやすいものの複雑なシステムを組むことはかえって難しくなり、Ver.6まではリレーションの機能があるものの、独特なノウハウをマスターしないとシステム構築はできないほどでした。もちろん、FileMaker
7以降の改良により、独特なノウハウが必要な環境から一般的なデータベースに近くなったのはよく知られるところです。
しかしながら、従来の考え方、機能は、当然ながら互換性を維持するために残されています。データベースの定義のダイアログボックスには昔からフィールド定義をそこで行っていましたが、従来は「テーブルの定義」という操作はなかったため、FileMakerになってその機能を加える必要が出てきました。そして、データベースの定義のダイアログボックスでその作業が行えるようになったのです。リレーションシップはむしろ以前のテーブル間結合とは大きく違うので、操作の互換性は取られていないのですが、逆にレイアウト機能のように見かけはあまり変わっていない機能もあります。
従来の機能との親和性や互換性を保ってのアップデートを行うというのは、それなりインストルベースのアプリケーションでは当然のことではあります。特に、業務ユーザが多いFileMakerでは「変わらない」ことが大きな要求にもなってしまいます。しかしながら、マルチテーブル化は激しい変化であることは言うまでもありません。これまでのFileMaker開発者は少なからず面食らったことでしょう。もちろん、発売後何年も経過した執筆時点でも、まだまだ「FM7アレルギー」を訴える人もいます。
移行をすすめる上でおそらく従来の利用者に対する配慮は最大限にされたことと想像します。そのため、名称を同じものにも関わらず、概念に変化が出てくるものが発生しました。それが小さなことならさておき、「テーブル」という考え方そのものがむしろFileMaker
7では変化したと考えるべきでしょう。
「テーブル」が意味するものとは?
データベースの定義ダイアログボックスには、「テーブル」というタブがあり、そこにテーブルが一覧されています。これはまぎれもなくテーブルですが、FileMakerでのテーブルにはいろいろな概念のものが含まれています。たとえば、明示的、あるいは暗黙的に、以下のものをテーブルと呼んでいます。
「テーブル」タブで定義されている1項目
表形式に記録されている一連のデータ
リレーションシップで定義されている別のテーブル
値一覧のもとになるもの etc…
従来はある程度それを抽象的に、ある意味では混同して考えていてもあまり支障は出ませんでしたが、FileMaker
7以降は概念を別々に分ける必要があると考えます。
その根本的な考えは、テーブルの定義と、実データを伴ったテーブルを、別々のものとして考えるということです。この章では、以下のような定義で、それぞれの対応を取ることにします。
名称意味
ここで、英語版のFileMakerは、前者をTable、後者をTable Occurrenceと呼んでいます。「Table Occurrence」は、Tableが何度でも登場するという意味合いもあるのですが、むしろ「テーブルを実現化したもの」のような意味もあるでしょう。そして、略してTOと呼ぶこともあります。
しかし日本語版のFileMakerは、TableもTOもどちらも「テーブル」と呼びます。想像するに、ローカライズを行う段階で、「テーブルオカーレンス」と言っても通じにくいだろう…といったような議論があったのかと思いますし、一方で同じ名前にするのはどうだろうかという議論もあったかと思われます。経緯はともかく、現状のFileMaker
8でも、どちらも同じ「テーブル」として参照し、区別していません。
英語版でTableとTOのうち、前者が「Table」と言っているのは、従来のVer.6までがすでに「テーブルの定義」のことを「テーブル」と呼んでいた名残ではないかと思われます。従来まではテーブルの定義がある意味での設計のすべてだった訳ですから、テーブル定義がまさにテーブルという存在においての重要なものだったわけです。
しかしながら、あえて言えば、TableとTOとして参照するよりも、「テーブル定義」と「テーブル」として参照する方が素直ではないかと筆者は考えます。Ver.6までとの互換性や親和性は、もはやマルチテーブル化ではむしろ足かせにかるとも言えます。以下、日本語版にならってTOという言葉は使いません。テーブルには「定義」と「データをともなった実体」があって、それぞれ「テーブル定義」と「テーブル」と呼べばいいでしょう。つまり、今までの考えに「定義」ということを分離したにすぎない訳です。
レイアウトとテーブルの関連性
ここからは、前記のように「テーブル定義」と「テーブル」として参照します。第2章でも説明をしたように、テーブル、つまりリレーションシップの定義で登場する1つのボックスを、レイアウトが利用します。つまり、レイアウトは、どのテーブルを使うのかということを指定する必要がある訳です。
レイアウトを作成するときには、使用するテーブルを指定しますし、後から「レイアウトの設定」のダイアログボックスを呼び出して変更することもできます。
実際のテーブル定義、そしてリレーションシップのグラフでのテーブル、さらにレイアウトは、いずれもFileMakerを操作して作るものです。つまり、データベース上に定義されたものです。
FileMakerで「コンテキスト」というちょっと分かりづらい用語が使われます。計算式を設定するときに、ポップアップメニューでコンテキストを選択するような場面で出てきます。この「コンテキスト」はきわめて概念的な用語ではありますが、いちばん近い日本語は「状況」と思っていいでしょう。状況と言っても、実際のデータに絡んで結果的にそうなっている状況ということです。定義と実際は違うと言えば違います。たとえば、伝票と明細は確かにリレーションシップが定義されていますが、もし、テーブルに全くデータがないだとか、あるいは明細テーブルに一切レコードがないというようなときには、実際に関連づけられたレコードは存在しないことになります。この場合は「コンテキストは存在しない」と言ってもいいでしょう。ただこの言い方はFileMaker内部の動作定義とはやや異なります。コンテキストは、「実際のデータの状況」という意味合いでまずは漠然と理解していただいて、データベースの動作を見てみましょう。
テーブル定義に対応する実在のデータとして実データがあります。テーブルは、実データの内容をもとにしたレイアウトなどで使えるデータが群ですが、検索により絞り込みが行われてすべてのレコードがそこにあるかどうかは分かりません。つまり、テーブルという存在に対するコンテキストとして、その時々でかわるデータがあるわけです。さらに、テーブルはレイアウトで表示しますが、ここではすべてのフィールドがあるわけではありません。配置したフィールドだけが表示され、場合によっては異なるテーブルのフィールドが表示されます。また書式設定もされています。ここでも、レイアウトは定義されるものですが、実際にウインドウに表示するときにはデータによってその表示結果は異なります。つまり、コンテキストに応じてレイアウトがウインドウに表示される結果が決められるわけです。ここでは、実際のデータが絡むという意味での「コンテキスト」を考えることにします。
その状況を図示しました。「テーブル」「テーブル定義」「レイアウト」はFileMakerの中で明示的に作ることができるものです。「テーブル」は、リレーションシップでのボックスの1つとして作ることができます。
これに対するデータの存在を下の段に対応させます。テーブルの定義に従って、「実データ」が存在します。これがデータベースのストレージ部分と言えるでしょう。そして、テーブルという存在が、レコードのセットを定義します。すべてのレコードかもしれませんが、絞り込まれているかもしれません。そして、あるフィールドでソートされている可能性もあります。さらに、テーブルを利用してレイアウトが表示されますが、レイアウトでは、フィールドが選択されつつ、どのように配置されるかといった点が定義されています。こうしたデータの流れがあって、ウインドウに実際に表示されるというわけです。状況を作り出すものとしての「コンテキスト」は、テーブルとレイアウトの実データから派生した局面であると考えれば良いでしょう。
テスト用データベースの設計内容
では、実際にFileMakerを動かしてみて、テーブルとレイアウトの関係を確かめてみましょう。そのためのデータベース「テーブルコンテキスト.fp7」を作成します。同名のテーブルが自動的に定義されますが、これは使わないで、他に「マスター」「詳細」というテーブルを定義します。名前が示す通り、マスターと詳細テーブルが1対多の関係を持つということを想定していますが、これはリレーションについて検討するときに改めて説明しましょう。
「マスター」テーブルのidフィールドは、1から順番に数値が自動的に入力されるようになっています。ここでは、レコードとして入力されたデータの振る舞いを見たいのですが、あえて他にはフィールドは定義しないで利用することにしました。gNumMasterはグローバルフィールドとしました。グローバルフィールドの振る舞いもあとから検討します。
「詳細」テーブルの「id」フィールドは、1001から順番に数値が自動的に入力されるようにしました。「マスターid」フィールドは、「マスター」テーブルとのリレーションを取るための外部キーフィールドです。gNumDetailはグローバルフィールドです。
「リレーションシップ」のタブには自動的に3つのテーブルが見えているはずですので、とりあえず、「マスター」のidと「詳細」の「マスターid」をドラッグして結んでおきます。
第6章:リレーションからコンテキストへ
