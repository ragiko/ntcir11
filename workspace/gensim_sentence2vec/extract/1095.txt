
変換子スタックの管理
正しい順序の選択
複数の変換子を使う例
多段もちあげ
合成するモナドの数が増えると、モナド変換子のスタックを上手く管理すること
がますます重要になります。
正しい順序の選択
いったん、必要となるモナドの機能を決めたら、正しい順序でモナド変換子を
適用して、望む結果を得るようにしなければなりません。たとえば、
MonadError のインスタンスであるモナドと、
MonadState のインスタンスであるモナドを合成したいということ
は判っていても、StateT を Error モナドに適用
すべきでしょうか、ErrorT を State を適用
すべきなのでしょうか。
この決定は、合成したモナドにいったいどのようなセマンティクスを求めている
のかに依存します。StateT を Error モナドに適用
すれば、s -> Error e (a,s) という型の
状態変換子関数が得られます。ErrorT を State 
モナドに適用すれば、s -> (Error e a,s)
という型の状態変換子関数が得られます。どちらの順を選ぶかは、計算中の
エラーの役割によります。エラーが状態が作れないことを表すのなら、
StateT を Error に適用することになるでしょう。
エラーが値が作れないことを表し、状態はちゃんと作れるということを表す
というなら、ErrorT を State に適用することに
なるでしょう。
正しい順番を選択するには、それぞれのモナド変換子によってもたらされる変換
を理解していなければなりません。また、その変換が合成されたモナドの
セマンティクスにどのように影響するかを理解している必要があります。
複数の変換子を使う例
以下の例は複数のモナド変換子を使う例です。このコードでは、
StateT モナド変換子を List モナドと共に用い、
状態のある非決定性計算を行うための合成モナドを生成します。
しかしながら、ここでは、WriterT モナド変換子を追加して
計算中にログ取りを実行します。このモナドを適用する問題は、
有名な N-queen 問題です。これは、N 個のクィーンをチェス盤に互いに
きき筋にないように置くというものです。
最初に決めることは、どのような順でモナド変換子を適用するかということです。
StateT s (WriterT w []) は
s -> [((a,s),w)] のような型をもたらします。
WriterT w (StateT s []) は
s -> [((a,w),s)] のような型をもたらします。
このふたつの場合では順序による違いはほとんどありません。それで、
ここでは独断で、2つめの順序を選ぶことにします。
ここで合成するモナドは MonadState および
MonadWriter の両方のインスタンスです。それゆえ、
ここでのモナド計算中に、get、put 
それに tell をまぜて使えます。
example25.hs
で使えるコード
-- 問題を記述している型
data NQueensProblem = NQP {board::Board,
ranks::[Rank],   files::[File],
asc::[Diagonal], desc::[Diagonal]}
-- 初期状態は空の盤。すべての横筋、縦筋、斜め筋が空
initialState = let fileA = map (\r->Pos A r) [1..8]
rank8 = map (\f->Pos f 8) [A .. H]
rank1 = map (\f->Pos f 1) [A .. H]
asc   = map Ascending (nub (fileA ++ rank1))
desc  = map Descending (nub (fileA ++ rank8))
in NQP (Board []) [1..8] [A .. H] asc desc
-- この問題用の合成モナドの型
type NDS a = WriterT [String] (StateT NQueensProblem []) a
-- 最初の解を得る。初期問題状態でソルバ計算を評価して、
-- 結果のリストから最初の解、あるいは、解がなければ Nothing を返す
getSolution :: NDS a -> NQueensProblem -> Maybe (a,[String])
getSolution c i = listToMaybe (evalStateT (runWriterT c) i)
-- 盤の指定された位置にクィーンを置く
addQueen :: Position -> NDS ()
addQueen p = do (Board b)  NDS Bool
inDiags p = do let (a,d) = getDiags p
as  do putStr $ show b    -- show the solution
putStr $ unlines l -- show the log
Nothing    -> putStrLn "No solution"
このプログラムは前のカロタンパズルを解く例と似た方法をつかっています。
しかし、この例では、guard 関数を使って一貫性を検証していま
せん。代りに、許されるクィーンの位置に対応するブランチを生成するだけです。
ここでは、ログ機能を使って、各ステップ毎に、可能性のある選択の数と
クィーンを置いた場所を記録します。
多段もちあげ
複数のモナド変換子を使う上でまだ微妙な問題が残っています。前の例では
全ての計算が合成されたモナドで行われていたのに気付きましたか。
それらはひとつのモナドの機能しか使っていないにもかかわらずです。
合成されたモナドの定義に不必要に結びつけられたこれらの関数のコードは
再利用性を著しく低下させます。
ここが、MonadTrans クラスの lift 関数が
使える場所です。lift 関数によって、わかりやすいく、
モジュラリティ、再利用性のある方法でコードを書くことができます。
必要に応じて計算を合成されたモナドにもちあげましょう。
次のような脆いコードを書くかわりに、
Managing the transformer stack
