C 言語プログラミングにおいて、配列はデータの集まりを管理するときにかかせない道具です。本章では、配列と同様、データの集まりを管理するときにはかかせない道具である構造体について説明します。
簡単なスケジュール管理をおこなうプログラムを作成してみましょう。簡単のために、管理する項目は以下の2つだけとします。
また管理する最大の予定数は100とします。
開始時間(年、月、日)表題
2 つしか項目がないといっても、実際には開始時間は年・月・日・時の4つの要素に分かれますし、表題についてもさまざまなパターンが考えられます。また、機能としては以下を実現することにします。
キーボードから新しい予定を入力できること入力した予定を古い順に並べて表示できること
このような機能を実現するには、管理する項目をひとまとまりにしておく必要があります。
今まで学んだ内容を振り返ると、これは配列をつかって実現できそうです。たとえば開始時間はすべて整数になるため、4つの要素(年、月、日、時)を持つ配列で表せます。これが予定の個数分必要になるため、予定の最大件数である 100 件分必要になります。つまり 100 x 4 の2次元配列が必要になります。次に、表題は文字列で表現することにします。文字列の最大長を 100 文字とすると、100 x 100 の2次元配列が必要になります。以上の配列を C 言語のプログラムで表現すると以下のようになります。
このように2種類の配列を用いれば、必要なデータを扱うことができます。しかしこれでは以下の 2 つの理由で、プログラムを書くのが大変になってしまいます。
複数の配列をまとめて扱わなければならない。このため、プログラム中で一部の配列だけ処理し、残りの配列の処理を忘れるという間違いをおかしやすい。将来必要なデータの種類が追加で増えた場合、新たな配列が追加になる。その際、何箇所ものプログラムの修正が必要になる可能性がある。
1 つの配列にすべてのデータをまとめられれば、プログラム中の処理の記述はかなり簡潔になりますが、配列には同じデータ型の値しか保存できません。たとえば、数値である開始時間と、文字列である表題を同じ配列に保存できません。このため、配列を用いている限り、上のような問題が避けられません。
このような複数のデータ型で構成されるデータを、容易に扱う方法はないのでしょうか? たとえば現実世界であれば、1つの予定を1枚のカードにまとめて記述することができます。 1枚のカードに「開始時間」と「表題」の2つの項目を作り、1つの予定についての情報は1枚のカードにまとめて書いてしまうことができます。
こうすれば、分割すると不自然な情報(開始時間と表題)が1枚のカードにおさまるため、管理がとても容易です。先程の 2 つの配列で別々に管理するやり方は、現実世界で考えると、
開始時間カードと表題カードを別々に作り、互いに関連性を失わないように管理する、という少々非現実的な手法だということが分かります。

