# Copyright (c) 1991-2000 Kyoto University
# All rights reserved
#
# Julius 設定ファイル サンプル for rev.3.1
#
# 1) 重要: 相対パスは,*このファイルを起点に*指定してください.
# 2) 空行および # から行末まではコメントとみなします.
#    `#'をコマンドに含めたい場合は '\#' としてください.
# 3) 1行の長さは 512 バイト以内に収めてください.
# 4) 各オプションの書式は,コマンドラインで与える場合と同一です.
# 5) このファイル内の各値は Julius のデフォルト値です.
#
######################################################################
#### ファイル指定
######################################################################
##
## 単語2-gram,3-gramファイル
##
# ARPA標準形式
#-nlr /cdrom/lang_m/4.wit.arpa		# 2-gram
#-nrl /cdrom/lang_m/rev-4-8.wit.arpa	# 逆向き 3-gram
# もしくは
# mkbingramで作成したバイナリ形式のとき
-d ../lang_m/20k/bingram_for_julius/75.20k.1-1.10p.wit.bingram.gz
##
## 音響HMM定義ファイル
##
-h ../phone_m/model/PTM/gid/tri/hmmdefs,tmix.gz	# HTK形式
## triphoneモデルの場合,さらに
##     論理的に出現しうる triphone -> 定義されている triphone
## の対応を指定した「HMMListファイル」が必要です.
-hlist ../phone_m/parms/logicalTri.added
##
## 単語辞書ファイル
##
-v ../lang_m/20k/20k.htkdic			# HTK形式
######################################################################
#### 言語モデル詳細設定
######################################################################
##
## 言語重みと挿入ペナルティ
##
## 例えば, "-lmp 8.0 7.0" のとき,言語確率の対数尤度 'log p(w)' は
## (log p(w)) * 8.0 + 7.0' として適用されます.
##
##デフォルト値
##monophone向け
#-lmp 5.0 -1.0		# 第1パス(2-gram)
#-lmp2 6.0 0.0		# 第2パス(3-gram)
##triphone向け
#-lmp 8.0 -2.0
#-lmp2 8.0 -2.0
##triphone向け(v2.1設定):単語間triphoneを第1パスで扱わない場合
#-lmp 9.0 8.0
#-lmp2 11.0 -2.0
##
## 文頭単語の名前 (単語辞書では無音の読みを付与する)
## 
#-silhead ''
##
## 文末単語の名前 (同上)
##
#-silhead ''
######################################################################
#### 音響モデル詳細設定
######################################################################
##
## Julius が triphone/monophone の自動判別に失敗する場合,
## 以下を試してみてください.
##
#-no_ccd		# 音素環境依存性を(強制的に)考慮しない
#-force_ccd		#	 〃	  (強制的に)考慮する
##
## 特徴パラメータの型チェックをスキップしたい場合は,
## 以下を試してみてください.
##
#-notypecheck
######################################################################
#### 探索パラメータ
######################################################################
#-b 400			# 第1パスのビーム幅(ノード数) monophone
#-b 800			# 第1パスのビーム幅(ノード数) triphone,PTM
#-b 1000		# 第1パスのビーム幅(ノード数) triphone,PTM,engine=v2.1
#-b2 30			# 第2パスの仮説数ビームの幅(仮説数)
#-s 500			# 第2パスの最大スタック数 (仮説数)
#-m 2000		# 第2パスの仮説オーバフローのしきい値
#-lookuprange 5		# 第2パスで単語展開時のトレリス制約緩和幅(フレーム数)
#-n 1			# 第2パスで見つける文の数(文数)
#-n 10			#   ('standard' 設定時のデフォルト)
#-output 1		# 第2パスで見つかった文のうち出力する数 (文数)
### "./configure --enable-lowmem" 時に有効
#-iwcache 10		# 単語間言語確率キャッシュの大きさ比率
# (100でオプションなしと同等)
### "./configure --enable-lowmem2" 時に有効
#-sepnum 150		# 第1パスで単語木から独立させる高頻度語の数(単語数)
######################################################################
#### Gaussian Pruning パラメータ(tied-mixture, PTMでのみ有効)
######################################################################
## コードブックあたり計算するガウス分布計算数(上位N個)
## 以下のデフォルト値は IPA99 の PTM モデル(1コードブックあたり64混合)
## に合わせた値
#-tmix 2
## Gaussian pruning 法の選択
## 高速版ではbeam,それ以外ではsafeがデフォルトです
#-gprune safe		# safe pruning 上位N個が確実に求まる.正確.
#-gprune heuristic	# heuristic pruning
#-gprune beam		# beam pruning 次元ごとに足切り.高速.
######################################################################
#### 音声入力ソース
######################################################################
## どれかを選んでください(デフォルト:mfcfile)
#-input mfcfile		# HTK形式のパラメータファイル(MFCC) 
#-input rawfile		# 音声波形データファイル(フォーマット自動判別)
# 形式:WAV(16kHz,16bit) または
#	RAW(16kHz,16bit(signed short),mono,big-endian) 
#	libsndfile付きでコンパイルした場合は
#	AIFF,AU もOK
#-input mic		# マイクから直接入力
#-input netaudio -NA host:0    # host上のDatLink(NetAudio)から入力
#-lv 3000		# 切出レベルのしきい値 (0-32767)
#-nostrip		# 無効な入力部の除去をOFFにする
# (default: 無効な入力部分は除去される)
######################################################################
#### Forced alignment
######################################################################
#-walign		# 認識結果の単語ごとのアラインメント結果を出力
#-palign		# 認識結果の音素ごとのアラインメント結果を出力
######################################################################
#### 出力スタイル
######################################################################
#-progout		# 第1パスで解析途中から漸次的に結果を出力
# オフライン認識には不向き
#-quiet			# 第1パス・第2パスの認識結果のみ出力
#-demo			# "-progout -quiet" と同じ
#-debug			# 探索中の内部状態を出力させる(デバッグ用)
#-separatescore		# 言語スコアと音響スコアを分けて出力する
######################################################################
#### その他
######################################################################
#-help			# ヘルプを出力して終了(jconf内では無効)
#-version		# バージョン情報を出力して終了(jconf内では無効)
#-C jconffile		# 他の jconf ファイルを挿入
################################################################# end of file

