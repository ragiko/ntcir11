
2次への拡張
Gurobi Optimizerの混合整数機能は、2次の制約と2次の目的関数でも使えますが、以下の説明は線形に限定します。2次に関しては、説明に多少の補足を加えることによって適用が可能です。
2. 計算方法の概要
MILP問題は、分枝限定法(Branch-and-Bound)と実数(連続変数)の線形計画法を使って解くのが一般的であり、Gurobi Optimizerもこの方法を採用しています。最適化には最小化と最大化がありますが、以下は最小化を中心に述べます。最大化の場合は、下限を上限に読み替えるなど、言葉の置き換えだけですべての内容が適用できます。
まず、制約から整数制約だけを除いて線形計画問題を解きます。これを元の問題のLP緩和問題と呼びます。ここで得られた解、緩和解の全ての変数値が偶然整数なら、幸運にもこの解は元の問題の解ですので、計算はここで終わりです。しかしこのようなことは非常にまれで、多くの場合、元の問題の整数変数の値は、端数のある実数です。次に、整数であるべきなのに実数の値を持つ変数を一つ選びます。例として、その変数を χ 、緩和解での値を 5.7 とします。この χ を χ ≦ 5.0 と χ ≧ 6.0 の二つの場合に分け、計算を進めます。ここで元の問題を P0 、分割されてできた二つの問題を P1 (χ ≦ 5.0)、 P2 (χ ≧ 6.0)で表わします。χは分枝変数と呼び、この分枝点で、 P1 、 P2 二つのサブ問題が生成されます。もしも P1 、 P2 それぞれの最適解が得られれば、これら二つの最適解のうちのより良いものが元の問題 P0 の最適解ですので、 P0 は、より限定され P1 と P2 に置き換えることができます。この方法をさらに P1 と P2 にも適用して分枝変数を選択し、この操作を繰り返すと、最適解の探索手順は探索木(search tree)を形成します。ここで Pn をノード、特に P0 を「ルート ノード」と呼びます。各ノードには下位のノードが属しており、最適解であることが分かるノードに達する、またはすべてのノードを調べ終わるかのいずれかになると、元のMILP問題が解けます。
「探索済」ノード
英語の単語fathomedを「探索済み」と訳しました。厳密には意味が異なりますが、MILPの計算方法を理解するにはこれが良い訳であると考え、この訳を採用しました。あるノードで整数条件を含む全ての制約を満足し、そのノード内で目的関数値が最小の解が見つかったら、より下の階層のノードが残っていても、下のノードを含めてこのノードをこれ以上探索する必要はありません。従って、「探索済」の印をつけて他のノードに移ります。
「今のところ最良」ノード
英語ではincumbentという単語が使われますが、適当な日本語訳が見つからないため、「今のところ最良」と訳します。整数条件を満足する解が初めて得られたら、「今のところ最良」ですから、このノードに「今のところ最良」の印を付け、目的関数値を「今のところ最良の目的関数値」として保存します。二つ目以後の整数解が得られたら、保存してある「今のところ最良の目的関数値」より良い目的関数値が得られた場合だけ、「今のところ最良」ノードの印を付け替え、「今のところ最良の目的関数値」を入れ替えます。
LP緩和問題が実行不可能なノード
緩和して実行不可能なら当然、緩和前の問題でも実行不可能ですので、このノードをこれ以上調べる必要はありません。
LP緩和解の目的関数値が「今のところ最良の目的関数値」より悪いノード
例え整数解があっても、目的関数値が改善される可能性がないので、このノードをこれ以上調べる必要はありません。
上界 / 下界とギャップ
分枝限定法の途中では、目的関数値の上界と下界があります。上界、下界とは、まだ見つかっていない最適解の目的関数値が存在する領域の上限と下限で、最適化分野では上界、下界という用語を使います。最小化問題では、「今のところ最良」な目的関数値解より大きい目的関数を求めても最小化は進みません。従って、「今のところ最良な目的関数値」が上界です。この上界は、「今のところ最良な解」が更新されるたびに小さくなり、下界に近づきます。
整数条件を緩和したLP緩和問題の最適値は、制約を緩和しているため、元の問題の最適値以下です。そこでこれを下界として採用します。最初の下界は、ルート ノード P0 での緩和解の目的関数値です。 P1 と P2 の緩和解が得られた時点では、二つの新しい緩和解のうち小さい目的関数値が新しい下界です。 P1 と P2 は P0 より制約が厳しい(一つの変数の値の範囲が狭められている)ため、緩和解の目的関数値は P0 より悪い(大きい)または等しいので、計算が進むと下界は大きくなって、上階に近づきます。
上界と下界の差をギャップと呼び、これが0となったら、厳密な最適解が得られたと判断できます。しかし規模が大きい問題で、実用的な時間内にギャップ=0の解を求めるのはほとんど不可能ですので、許容できるギャップ値を事前に与え、上階と下界がこの範囲内に入った時点で、許容可能な最適解が得られたとみなします。ギャップの許容値はGurobi Optimizerでは、相対値( (上界−下界)/上界 )と絶対値( 上界−下界 )の両方を与えることができ、どちらかが許容値以下に達した時点で、許容可能な最適解が得られたと判断します。
Gurobiにおける整数問題の解法 | 株式会社オクトーバー・スカイ
