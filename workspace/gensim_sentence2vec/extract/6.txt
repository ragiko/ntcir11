
特に一番初めにDudleyが発明したボコーダ(VOCODER)という単語は、覚えておく必要
があります。ボコーダとは、VOICE CODERの略で、現在音声の分析合成を表す専門用
語となっています。
Dudleyが発明したボコーダは、次の図のようにピッチとスペクトルのパラメータを用いて
います。また、ピッチは音源情報として合成するときに有声・無声判定を行います。スペ
クトルは帯域通過フィルタを用いてスペクトル振幅を、帯域毎にわけて合成を行っていま
した。
では、STRAIGHTではどの様なパラメータが使われているか見ていきましょう。
7-3 高品質ボコーダ: STRAIGHT
STRAIGHT(Speech Transformation and Representation
using Adaptive 
Interpolation of weiGHTed spectrogram:
重みつけスペクトルの適応的補
間を用いた音声の変換・表現法の略)は、河原先生が発明された分析合成
法で、低量子化ビット数でありながら高品質の音声を合成する方法として大変
注目されています。
まずSTRAIGHTの構造を見てみましょう。
図の様にSTRAIGHTは4つの部分にわけることが出来ます。
ピッチ抽出 TEMPO 
スペクトル包絡抽出 STRAIGHT-core
音源生成部 SPIKES 
最小位相合成フィルタ 
1. 分析部
音声が入ってくると、「TEMPO」によりピッチが抽出されます。また
「STRAIGHT-core」部によってスペクトルの包絡パラメータが求められます。
これらのパラメータを
使って、「声質変換」や「話速変換」といった処理が行な
われます。
2. 合成部
「SPIKES」では、合成音声の音源としてパルス波形を作成します。このとき、パルスの
位相はランダムになるよう合成されます。位相がそろうと特殊な音色になります。位相を
ランダムにするとより自然な音源を合成することが出来るのです。スペクトル包絡情報
の位相が最小になるように音声が合成されます。
今回は特にピッチ抽出法であるTEMPOについて詳しく見ていきます。
7-4 ピッチ抽出部 TEMPO
1.ピッチ抽出の難しさ
声質変換や話速変換において、音声の自然性を損なわずに変換を行なうには
ピッチの細かい時間変動を正確にパラメータとして抽出する必要があります。
前回の「音声1」で音声生成過程のうち、音源情報として声門の振動数をピッチと
定義しました。(ピッチは、また、基本周波数とも呼ばれます。)
ピッチは、音源情報を調べると分かりますが、完全に周期的な波ではありません。
一回毎に「周期」も「波形」も「振幅」も、変化しています。この一回毎のゆらぎが、
実は人間の声の自然性と深く関係しているのです。つまり、一回毎の基本周波数
を正確にパラメータとして抽出できれば、その音声を高品質に符号化することが
可能になります。STRAIGHTではTEMPOの部分で正確に基本周波数を抽出して
います。
比較のために、TEMPO(高品質なピッチ抽出法)を紹介する前にDudleyの
VOCODERで使われていたピッチ抽出方法を見てみましょう。
2.Dudley VOCODERのピッチ抽出法
統計的に,男性の基本周波数の平均値は125Hz(標準偏差は20.5Hz),女性は男
性のほぼ2倍の周波数であることが知られています。DudleyのVOCODERでは、ス
ペクトル振幅の70Hz-300Hzの帯域(-30dBの傾斜)で求めた高調波のうち、最低の
周波数を基本周波数と決めました。
この方法では、入力信号の最低周波数を基本周波数と見なすので、雑音に弱く,
ピッチを正確に抽出できません.キュロキュロと音がひっくり返ったり,ブーンブーンと響いたり
と,低品質な合成音でした。機械で合成したとすぐに分かる低品質な音声は、ボコータ
゛ボイスと呼ばれました。
3.TEMPOによるピッチ抽出
ではSTRAIGHTのTEMPOによるピッチ抽出法を見てみましょう。
TEMPOとは、Time-domain Excitation extraction based on Minimum Purterbation
Operation(最小摂動操作に基づいた時間領域での励起抽出法)の略称です。
TEMPOは下の図にあるように全体で3つの処理部に分けられます。
帯域通過フィルタ群による周波数帯域別のチャネル分割 
「基本波らしさ」パラメータを用いたチャネル選択 
選択チャネルでの瞬時周波数から、基本周波数を求める計算 
それぞれの処理部を次に紹介します。
7-5
帯域通過フィルタ群によるチャネル分割
DudleyのVOCODERでは, 1つの帯域通過フィルタを用いて、基本周波数の抽出
を行っていました。STRAIGHTは、図に見られるように複数の帯域通過フィルタ
を用いて帯域毎のチャネル信号に分割します。
音源情報は最も低い周波数である基本周波数の他に、基本周波数の整数倍の
周波数で調波成分が出現します。(図参照 ) 
STERAIGHTでは、帯域通過フィルタの中に1つだけ入ることの出来る成分
は基本波だけであるようにフィルタが設計されています。1つのフィルタに複数の
調波が入ると、後で述べる「基本波らしさ」パラメータが小さくなります。
帯域フィルタ群は、一番低い成分(例えば40Hz)を基にして、隣接するフィルタは
周波数特性を約6%づつ順次拡大して800Hzまでの52個作成します。上の図では、
横軸が対数表示のため、中心周波数を見ると各フィルタは等間隔に並んでいます。
また、帯域幅も約6%毎に拡大していきます。上図のような対数軸上でみると
フィルタの大きさは一定に見えます。
帯域通過フィルタは、高域側の遮断特性を急峻にして帯域内の高次高調波を
十分減衰させます(30-40dB)。逆に低い周波数側では減衰をゆるやかにして
数分の1の周波数でもあまり減衰させません(20dBどまり)。この特性は、人間の
耳の基底膜上の周波数分解特性に似ています。
7-6 「基本波らしさ」
では帯域チャネル分割された信号から、基本周波数を求めるのに用いられる「基本波
らしさ」についてみていきます。
1. 瞬時周波数と瞬時振幅
ピッチ抽出の難しさの項で述べたように、抽出に用いられるパラメータは細かい時間
変動を正確に記述するものでなくてはいけません。今、音声信号をAM変調(振幅
が時間で変化)とPM変調(周波数が時間で変化)を受けてゆらぐ基本波と高調波を足し合
わせた波として下記の式s(t)で表します。
s(t)の式はちょっと難しいですが、次のポイントを理解して下さい。s(t)では、ふつうの
信号の形、sin(wt+a)のwtの部分が積分形になっています。ふつうの信号ではwが
ある周波数(定数)ですが、時間で変化する変数, 瞬時周波数w(t)として表現されている
のです。
式のk=1は基本波を表します。k=1のときの瞬時周波数が基本周波数となります。
瞬時周波数を求めるためには、解析信号の位相を求めるために、信号s(t)のヒルベルト
変換H[s(t)]を計算する必要があります。ヒルベルト変換は、cos信号をsin信号に変換
する、つまり信号の位相角を90度回転させる性質があります。これより信号を実軸に
とり、信号のヒルベルト変換を虚軸にとると、s(t)-H[s(t)]平面ができます。この平面
上での信号の位相の時間変動(平面上での位相角の回転速度)が瞬時周波数となり
ます。
STRAIGHTのデモビデオに、この回転速度を見せるシーンがあります。動画でないのが
残念です。
「基本波らしさ」を表すパラメータの2つめとして瞬時振幅があります。これはs(t)の
式の下に定義されている様に、解析信号の絶対振幅値です。瞬時振幅は上のデモ
の図では、円の半径を表します。
2. 「基本波らしさ」
帯域通過フィルタは、チャネルの一つに、基本周波数の調波1つだけが入る様にフィルタ
が設計されています。1つのフィルタに1つの調波が含まれるとき、AM変調やFM変調はあ
まり起こりません。複数の調波が入ると、成分間の干渉によってAM変調やFM変調が起こ
ります。つまり、瞬時周波数や瞬時振幅の変動が激しくなります。
そこで、「基本波らしさ」を瞬時周波数と瞬時振幅の時間微分を用いて定義します。
瞬時周波数や瞬時振幅の変動が大きくなれば、「基本波らしさ」が低下します。
基本周波数を求めるためには、瞬時周波数や瞬時振幅の変動が小さいチャネルを選び、
そのチャネルの瞬時周波数を求めます。求めた瞬時周波数は、ある2つの帯域チャネル
にはさまれた値になります。それぞれのチャネルで求められた瞬時周波数を、それぞれの
チャンネルのフィルタの中心周波数からの距離に基づいて重みつけして加重平均を求めて
基本周波数の推定値とします。
上のデモでは、3つの円が描かれています。これは3つの帯域チャネルを表しています。
動画でないので分かりませんが、一番左の大きな円のものは円の大きさも回転速度も
あまり変わりません。真ん中と右の円は円の大きさである瞬時振幅の時間変動が激しく
なっています。つまり変動が少ない一番左のチャネルが基本周波数を表すチャネルと
なります。
課題
自分の声を録音してSTRAIGHTで声を変えて遊んでみましょう。
下記の順に沿って音を合成してください。
準備:STRAIGHT MATLABコードのダウンロード
FTP用アプリケーションの準備
DOS/Vの人=FFFTPをVECTORからダウンロードしましょう。 
MACの人=Fetchを使いましょう。
STRAIGHTファイルのダウンロード
mediaにlogin
cd ~eli/straight/STRAIGHTV23r1 に移動
全てのファイルをダウンロード
(注:自分のPC側にディレクトリを作成しておくこと
ファイルが多数あるので混乱します      )
準備:自分の声を録音する
DOS/Vの人=MATLABで音ファイルを作成
MATLABを起動
fs=11025; % sampling rateの設定
y=wavrecord(3*fs,fs,1); % 3秒収録
wavplay(y,fs); %チェック
wavwrite(y,fs,'voice.wav'); % .wav音ファイルを作成
MACの人=MATLABで音ファイルを作成
「内蔵マイク」に入力デバイスを切り替える
MATLABを起動
[y,fs]=recordsound(3); % 3秒収録
soundsc(y,fs);% 音をチェック
wavwrite(y,fs,'voice.wav'); % .wav音ファイルを作成
(注:サンプリングレートは44100Hzになります)
STRAIGHTを起動
MATLABを起動
パスブラウザでSTRAIGHTのディレクトリに移動
「straight」と入力
initializeを押した後、読み込みボタンで「voice.wav」を指定
次の声を作ってください。この声のパラメータ(F0)(Frequency Axis)
(Temporal Axis)をメイルで山本まで送ってください.
自分と違う性別(大人)の声
子供の声
しゃがれ声
ある特定の人(?)の声
(ex.タレント、怪獣、何でも。
ただし河原・山本の知っている範囲で。)
参考文献
MATLAB Getting Started with MATLAB
STRAIGHT各種文献 (河原先生所蔵)
http://www.hip.atr.co.jp/~kawahara/straightexample-j.html(合成音例)
音声2
