法線のスムージング
各頂点の法線をポリゴンの法線にすると角ばったシェーディングになってしまうため、スムージング処理を行います。まずは単純に平均化した法線を頂点の法線ベクトルにしてみます。
平均化する対象は、頂点を共有するすべてのポリゴンの法線、かつ法線ベクトル間の角度が一定以下もの。(角度はメタセコイアにスムージング角度を使用、facetチャンク)
法線のスムージング(単純平均)の結果
やはり単純な平均化ではダメなようです。直線的な陰影になるはずだけどジグザグに。
原因究明と対策方法を考えます。
法線のスムージング(単純平均)の問題
陰影がジグザグになってしまう原因は、曲面を三角形ポリゴンで作成する際の分割方向の違いでした。図のように本来同じ方向になるべき法線が、ポリゴンの分割方向によって異なる向きになってしまいます。
法線のスムージング(重み付き平均)
単純な平均ではダメだったので、重み付きの平均に変更します。重みとして考えられる値は、ポリゴンの角度、面積など。とりあえず2つとも重みとして計算してみる。そのまま掛けると単位が異なるため、基準となるポリゴンの角度と面積で割った比率を重みとします。(図省略)
いい感じです。
もっと複雑なスムージングとして、周囲のポリゴンから曲線(スプライン曲線など)を求めて法線を求めるという方法を思いつきましたが、面倒なので却下。重み付き平均で十分。うまくいかない形状があったらその時考えます。
ポリゴンの角度と面積の計算
// 三角形ポリゴンの角度を求める
// ベクトルp1-p0とp2-p0の角度
float TriangleAngle(XMVECTOR p0, XMVECTOR p1, XMVECTOR p2)
{
XMVECTOR v10 = XMVector3Normalize( XMVectorSubtract(p1,p0) );
XMVECTOR v20 = XMVector3Normalize( XMVectorSubtract(p2,p0) );
// 内積 v10・v20 = |v10||v20|cosθ
// 正規化しているので|v10| = |v20| = 1
XMVECTOR cs = XMVector3Dot(v10,v20);//cosθ
return XMScalarACos( XMVectorGetX(cs) );//θ:2つのベクトルの角度
}
// 三角形の面積を求める
float TriangleArea(XMVECTOR p0, XMVECTOR p1, XMVECTOR p2)
{
XMVECTOR v10 = XMVectorSubtract(p1, p0);
XMVECTOR v20 = XMVectorSubtract(p2, p0);
XMVECTOR cross = XMVector3Cross(v10, v20);
// 外積の長さ=v10とv20で作られる平行四辺形の面積 
// 半分にすると三角形の面積
return XMVectorGetX( XMVector3Length(cross) )*0.5f;
}
法線ベクトルの生成とスムージング | ZeroGram
