
距離ベクトル・ルーティング (Distance vector routing)
距離ベクトル・アルゴリズムは、動的ルーティング・プロトコルの一例です。 このアルゴリズムを使用する場合、ネットワーク内の各装置は自動的に IP
ルーティング・テーブルを作成して保守できます。
距離ベクトル・ルーティングの背後にある原理は単純です。インターネット ワーク内の各ルーターは、すべての既知宛先へのそこからの距離 またはコス
ト を保持します。この値は、パスの全体的な望ましさを表します。大きい値 が関連付けられたパスよりも、小さいコスト値が関連付けられたパスのほう
が使用するのに魅力あるパスとなります。最小コストで表されたパスは、宛 先へ到達するための優先パスになります。
この情報は距離ベクトル・テーブル 内に保持されます。このテーブルは各近 隣ルーターに定期的に公示されます。各ルーターはこの公示を処理ネット ワーク上の最善のパスを判別します。
距離ベクトル・アルゴリズムの主な利点は、基本的にインプリメントとデ バッグが簡単なことです。これは冗長度の制限された小さなネットワークで は非常に役立ちます。しかし、このタイプのプロトコルには、以下のような
いくつかの欠点があります。
障害状態時に、ネットワーク内の各装置が正確なルーティング・テーブル を生成する時間の長さは、収束時間 と呼ばれます。距離ベクトル・アルゴ リズムを使用する巨大で複雑なインターネットワークでは、この時間は超 過する可能性があります。ルーティング・テーブルの収束中は、ネット
ワークは矛盾したルーティング動作をしやすくなります。このことはルー ティング・ループや他のタイプの不安定なパケット転送を引き起こす可能 性があります。
収束時間を削減するため、単一の経路に含まれるホップの最大数に制限が 設けられることがあります。距離ベクトル・ネットワークではこの制限を 超える有効パスは使用できません。
距離ベクトル・ルーティング・テーブルは、近隣装置に定期的に伝送され ます。これは、テーブルの内容が変更されていなくても送信されます。こ のために、能力が限られた環境ではかなりの期間使用率の高まった状態が
続く可能性があります。
収束や不安定性の露出を減らすために、基本の距離ベクトル・アルゴリズム の拡張が開発されてきました。
RIP と BGP は、よく知られた距離ベクトル・ルーティング・プロトコルの 2 つの例です。
リンク状態ルーティング
近年のネットワークのサイズと複雑さの増大のため、より堅固なルーティン グ・アルゴリズムの開発が必要になりました。このアルゴリズムは、距離ベ
クトル・プロトコルで観察された欠点に対処しています。 
このアルゴリズムはリンク状態 の原理を使用してネットワーク・トポロジー を決定します。リンク状態とは、ルーターのインターフェース
( たとえば、IP アドレス、サブネット・マスク、ネットワークのタイプ) と、近隣ルーターと のその関係の説明です。このリンク状態の集合は、リンク状態データベース
を構成します。 
リンク状態アルゴリズムが、ネットワーク・トポロジーを決定するために使用するプロセスは簡潔です。
各ルーターは、直接接続されたネットワーク上の他のすべてのルーティン
グ装置を識別します。 
各ルーターは、すべての直接接続されたネットワークのリンクと各リンク に関連したコストのリストを公示します。これは、ネットワーク内の他の
ルーターとのリンク状態公示 (LSA) の交換を通して実行されます。 
各ルーターはこれらの公示を使用して、現行ネットワーク・トポロジーに
ついての詳細を示すデータベースを作成します。各ルーターのトポロ ジー・データベースは同一です。 
各ルーターはトポロジー・データベース内の情報を使用して、各宛先ネッ
トワークへの最も望ましい経路を計算します。この情報が IP ルーティン グ・テーブルの更新に使用されます。 
Shortest-Path First (SPF)アルゴリズム
SPF アルゴリズムは、トポロジー・データベース内の情報の処理に使用され ます。これは、ネットワークのツリー表記を提供します。SPF
アルゴリズム を実行している装置がツリーのルートになります。このアルゴリズムの出力 は、各宛先ネットワークへの最短パスのリストになります。図60
は、ルー ター A で実行された最短パス・アルゴリズムの例です。 
各ルーターは同じ LSA のセットを処理しているため、各ルーターは同一のリ ンク状態データベースを作成しています。ただし、各装置はネットワーク・
トポロジー内の異なる場所を使用しているので、SPF アルゴリズムを適用す ると各ルーターごとに異なるツリーが生成されます。
OSPF プロトコルは、リンク状態ルーティング・プロトコルのよく知られた
例です。

