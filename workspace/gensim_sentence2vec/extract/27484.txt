 図中のグレーの矢印はリクエストおよびレスポンスの流れを示す。性能検証は、図中の項番の順で1項目ずつ実施する。性能要件が満たされていない場合は、要件が満たされるまで要因の見極めと対処を繰り返す。要件を満たしたら、次の性能要件を検証する。
では、マシンサイジングによって必要なリソースが確保されている場合に、性能要件を満たしていないときの対処方法について説明しよう。
実行CPU時間を満たさない場合、次の対処を実施する。
業務アプリケーションの処理ロジックが冗長でないかを見直す
上記で解決しない時には、CPUのサイジングを再検討し、マシン台数の増設を検討する
アプリケーションサーバ内部の保留時間を満たさない場合、次の対処を実施する。
業務アプリケーションのI/O処理やSQL文の発行に関する処理を見直す
上記で解決しないときには高性能なディスクに切り替えて、ディスクI/Oを強化したり、DBサーバの負荷を減らすためDBサーバを増強したりすることを検討する
レスポンス時間を満たさない場合、次の対処を実施する。
業務アプリケーションのデータ転送に関する処理を見直す
上記で解決しない時にはネットワーク機器を増強するなどの物理的な対策を検討する
ここで、それぞれの対処方法の「1」に該当する業務アプリケーションの見直しについて簡単に説明しておこう。まず、それぞれ問題となる処理のロジックを見直す。ただし、やみくもにロジックを見直すのでは、見直し範囲が広くなり、効率も良くない。そこでロジックを見直す際には、併せてアプリケーションサーバのログやトレース情報も参照するとよい。
場合によっては、アプリケーションサーバのログとDBサーバのログといったように複数のログの突き合わせもしてみる。これらの情報を使用すれば、見直し対象となる処理の中で実行時間の長い個所を調査できるため、問題となるロジックを絞り込めるはずだ。
なお、日立のCosminexusを使用している場合は、「性能解析トレース機能」を使用するとよい。この機能は、リクエストごとに一意のIDを割り振り、アプリケーションサーバ内での処理ポイントでトレース情報を出力するので、利用者は問題があるリクエストと処理を調査しやすくなる。特にデータベースとして、Oracleや日立のHiRDBを利用している場合、性能解析トレース機能ではコネクションIDも労として出力する。
これらによって、WebサーバからDBサーバまでの処理シーケンスを容易に把握できる。問題が見つかったら、コーディングを修正しよう。
以上が、単体性能の検証の流れだ。なお、単体性能を大まかに検証したいなら、最初にレスポンス時間を検証する方法もある。レスポンス時間に問題があると思われる場合は、問題の個所を絞り込むため、実行CPU時間などの細かい単位で問題がないかをみていこう。
問題点をすべて解決できたら、処理時間に関する検証は完了だ。
次に、メモリに関する性能要件を、処理時間とは別に検証する。単体性能でのメモリに関する検証では、Java VMのGCログから1トランザクション当たりで消費するJavaヒープ量を確認する。確認の結果、要件を満たさない場合は、インスタンスの情報が多過ぎることなどが考えられる。
対処方法はまず、処理時間の場合と同様に、業務アプリケーションを見直すことだ。なお、日立のCosminexusを使用している場合、メモリ使用量の確認には「クラス別統計機能」を使用するとよい。この機能では、クラスのインスタンスのメモリ使用量を、クラスの参照関係とあわせて出力できるため、メモリ不足の原因となるクラスを絞り込める。業務アプリケーションの見直しで問題を解決できない場合は、メモリのサイズを再検討しよう。
処理時間およびメモリに関する性能要件をすべて満たしたら、単体性能の検証は完了だ。多重性能の検証に移ろう。
Java Review:Webシステムの性能要件を検証する「手順と実践」 (1/2) - ITmedia エンタープライズ
