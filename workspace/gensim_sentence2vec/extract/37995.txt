
構文解析の基礎 
top-down parserとbottom-up parser 
これまで、式のインタプリターでは構文解析にtopdown parserを使って解説し
た。top down parserは再帰的下方構文解析の代表的な手法であり、次に何が
来るのかを推定しながら構文解析を進めていく方法である。比較的構成がわか
りやすく、人手で書いていく場合などには適した方法とされている。
このほかにも構文解析には、 上方構文解析法
(bottom-up parser、上昇型ともいう)
という方法がある。この方法は人手で直接実現するには向かない方法で
あるが、理論的に構成されており、構文解析のプログラムを自動的に生成する
ためには重要な方法になっている。今回は、この下向き構文解析法についてみ
ていく。
簡単に説明するためにいつもの式の構文解析を考えてみる。文法は以下のもの
を考える。F,T,Eは非終端記号であり、idは変数のようなシンボルを仮定する。
上向き構文解析と還元 
構文解析の重要な役割は、入力がこの文法にあっているかどうかを認識するこ
とである。下方構文解析では、まず、Eであることを仮定して解析をはじめ、
それぞれの非終端記号に対応する関数を呼び出し、最終的に必要な終端記号列
になっているかを認識する方法であった。つまり、構文木という観点からみれ
ば、構文木の根から葉に向かって解析を進めていく。(ここで、この文法は左
再帰で書いてあるため、そのままではtop-down parserができないことは以前
に説明したとおり)
これに対し、上方構文解析では葉すなわち終端記号から、根すなわち非終端記
号へ向かって文法を適用して、最終的にEになっているかを認識する。例えば,
a+c*dを考えてみる。これをtokenの列にしてみると、

