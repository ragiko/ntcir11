ここでは、デバッガをを呼び出す二つの方法を使用して説明します。ここでの説明はデバッグをする上で必要最低限の情報です。詳細は、ドキュメントを参照してください。
コード領域で、デバッグコマンドを選択
デバッグ開始位置にself halt.を挿入し、処理を中断させ、デバッグ
実行やインスペクトの代わりに、デバッグしながら実行するメニューがあります。一般的に、このメニューは、ワークスペースから実行されます。しかし、システムブラウザのコード領域でも、同様にデバッグが可能です(しかし、self が存在する場合にはそのオブジェクトが必要なため、メソッド内でのデバッグ実行は出来ない場合があります)。
self halt.は、一連の処理がこの式に遭遇すると、デバッガーを開き、処理を中断します。以前のVisualWorksでは、メソッド内に挿入して、デバッグするために使用していました。しかし、ソースコードに直接記述するため、不要になった際に削除し忘れたり、削除時に、誤って他のコード(その一部)まで削除し、バグになる場合がありました。近年導入したプローブを使用することによって、これを回避できます。これは、ソースにマークするだけで同様の機能が可能となり、ソースコード自体を触る必要がなくなっています。
しかし、不要になったわけではありません。プローブはマークをつけるだけなので、ソースコードには残りません。ですから、意図的にソースコード(.stファイルやパーセル)に中断を挿入したい場合には、使用されています。
もうひとつとしては、ワークスペースでの処理の中断です。ワークスペースでは、プローブが使用できません。右クリックメニューのデバッグという方法もありますが、コードが長い場合や、ループ内などの場合、最初からデバッグするのは困難です。ですから、コード中に入れることにより、その場所からデバッグが開始できます。
初心者であれば、デバッグすることによって、複雑な式がどのような順番で実行されていくのかを簡単に確認でき、ソースコードの理解に一役買うと思います。
ここでは、この二つに方法に関して、確認します。
Cincom Smalltalk - VisualWorks トピック
