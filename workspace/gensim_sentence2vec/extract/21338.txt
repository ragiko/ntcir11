HOME
※近日中に修正予定
Nakloidが歌声を出力するまで
基本的な考え方
Nakloidは背景で説明したとおり,TD-PSOLA法を中心に据えています.ここで重要なのが,TD-PSOLA法の中間生成物である単位波形.Nakloidでは単位波形を編集したり,うまく並び替えたりして,歌声DBに登録された音声波形を歌声へと変えています.いわば「単位波形指向合成」.これにより歌声DBに登録された音声波形の特徴をできる限り残したまま,自然な歌声合成を行うことを目標とします.副次的な効果として,時間領域でのみ波形編集を行うことにより他の歌声合成システムより軽量・高速に歌声合成を行えちゃったりもします.
「単位波形指向合成」を行うため,他の合成システムと違い(?),楽譜情報からまず曲全体のF0リストを生成します.そこから出力用のピッチマークリストを生成,単位波形を並べているのです.これにより音符と音符のオーバーラップ部分の位相が揃うので,後述の歌声特性付与と合わせて,なめらかなF0変化を実現しています.ただしこれはNakloid初期バージョンでは実装されていない機能なので,最新のサンプルで確認してみて下さい.
音高変換
音高変換(基本周波数の変更)こそTD-PSOLA法の真骨頂.周波数領域で波形を編集したものよりも高品質(≒自然で歪みのない)な合成音声を出力することができます.ただTD-PSOLA法も万能ではなく,基本周波数を一定以上下げると音質の悪化が耳につくようになります.歌声合成は話声合成よりも基本周波数の変化が大きいため,対策を考えてやる必要があります.
望月氏の論文や田中氏の論文では周波数領域で単位波形の低域スペクトルを補正していますが,コードを書くのがメドいもとい時間領域のみの編集でなんとかするため,Nakloidでは窓関数を拡張する(基本周期の2倍長以上の長さで単位波形を切り出す)方法を採用しています.ただしTD-PSOLA法は単位波形をインパルス応答波形として用いているため,何も考えず窓関数を拡張すると悲惨なことに.そこで直感的にうまくいきそうな,Sinc関数類似でうまくTD-PSOLA法に適合する関数はないかなーと探していると,画像の拡大縮小で用いられるLanczos関数を発見.以下はTD-PSOLA法で通常用いられるHann窓と,Nakloidの採用したLanczos窓の比較です.Nakloidではa=3のLanczos窓を採用しています.
……と,上手くいっていそうなことを書きましたが,効果は気休め程度.研究室時代,15名ほどで行ったブラインドテストでは,平均値こそ確かに既存手法を上回っているものの,統計的に有意かと言われれば…….まぁ,暇な人は比較実験してみて下さい.
それと地味に重要なのが,単位波形を再配置する際の時間軸の調整.ただ間隔を調整するだけでは子音・母音や声量・声質の変化する位置も移動してしまうので,Nakloidは単位波形を補完するTDI-PSOLA法を採用しています.考案者の論文はフランス語だったりするので,知りたい方は後発のこの論文あたりをどうぞ.
音長変換
次は発音時間の変更について.問題になるのは,歌声DBに登録された波形よりも長い時間の発声が必要になった場合(音声DBに十分長い時間の音声を登録しておけばいいのでは?という話でもありますが).Nakloidでは音声波形が自分自身にフェードし続けることで無限の発声時間を実現しています.これは有名な技術ですが,名称がわからなかったのでとりあえず「自己フェード」と呼んでいます.誰か正しい呼び方を教えて下さい.
この手法の欠点は,フェード元とフェード先で位相が揃うとは限らないことにより,フェードの中間部分で音声が二重に聴こえてしまう点.そこでNakloidでは「単位波形指向合成」の理念に則り,単位波形毎に自己フェードを施して位相を揃えています.例えば
a,b,c,d,e,f,g,h,i,j
という順番で単位波形があったとして,これを伸ばすと
a,b,c,d,e,f,(0.8g+0.2b),(0.6h+0.4c),(0.4i+0.6d),(0.2j+0.8e),f,(0.8g+0.2b),(0.6h+0.4c),(0.4i+0.6d),(0.2j+0.8e),f,...
となります.なおNakloidでは2つの単位波形を合成する際にRMS(二乗平均平方根)レベルを揃えてやることでノーマライズしています.
歌声特性付与
背景のページでも紹介しましたが,歌声特有の性質として基本周波数の変化と"Singers' formant"と呼ばれる周波数領域の特徴があります.Nakloidの場合,元となる音声波形は「歌声」としてDBに登録されたものなので,"Singers' formant"は最初から反映されているものとして考慮していません.したがって基本周波数の変化を,特にオーバーシュート,プレパレーション,ビブラートを歌声特性として合成音声に付与しています.
合成の流れ
音符情報を取得
音符情報から曲全体のF0配列を作成
F0配列にオーバーシュート・プレパレーションを付与
歌声DBから歌詞と一致する発音の音声波形を取得
音声波形の音高を音符情報に合わせて変換
音声波形の音長を音符情報に合わせて変換
歌声DBの情報から合成音声の出力位置を決定・重畳加算
1.へ戻る
その他
Nakloidの主な特徴は以上です.実は,他にもいくつかの技術をNakloidに実装する予定だったのですが,大学卒業に伴い時間切れに.詳しくは今後の展開まで.
Nakloidの仕組み  acknak/Nakloid Wiki  GitHub
