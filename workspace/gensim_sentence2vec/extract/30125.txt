Now that you know how to harvest the textual content of a web page automatically with Python, and have begun to use strings, lists and dictionaries for text processing, there are many other things that you can do with the text besides counting frequencies. What we're going to do next is develop the ability to display keywords in context (often abbreviated as KWIC). Given a text and a keyword, your program will list every occurrence of the keyword in the text, showing it in the context of a fixed number of words on either side. As before, we will wrap the output so that it can be viewed in Firefox and added easily to Zotero. We will also use the output of our KWIC routine as the basis for a number of automatically generated Google searches.
前章では、ウェブページのテキスト部分からPythonを使って自動的に有益な情報を収集する方法について学び、テキスト処理のために文字列やリスト、辞書などを使い始めたわけだが、頻度数調査以外にもテキストを使ってできることは他にもたくさんある。以下、本章では、文脈付き索引 keyword in context(しばしばKWICと略称される)を表示する能力を身につける。テキストとキーワードが与えられたら、あなたの作ったプログラムはそのキーワードのすべての用例をテキストの中からリストアップし、その前後を決まった数の単語ではさんだ文脈の中で表示する。これまでと同様、出力を〔HTMLで〕ラップするので、Firefoxで表示することができるし、Zoteroに追加するのも簡単である。また、KWICルーチンでの出力結果を、自動生成された数多くのGoogle検索の土台としても用いる。
As you work with digital representations, you will come to see that many of them have a hierarchical, or tree-like structure. This is also true of many elements of natural language, particularly at the level of phrases and sentences. People who study the statistical properties of language have found, however, that there is much to be learned by studying linear sequences of linguistic units. These are known as bigrams (2 units), trigrams (3 units), or more generally as n-grams. In any given text, different n-grams will occur with different frequencies. Since natural languages have a certain amount of built-in redundancy, even very large samples of text in a particular language will exhibit a distribution of different frequencies for different n-grams. We will unpack this idea as we go, but for now, we note that in English texts, q is almost always followed by u. In a sense that can be made mathematically precise, if you know that the current character is q, you can predict that the next one will be u with a high degree of certainty. Another way of saying this is that the bigram qu occurs much more frequently in English than qa, qb, and so on.
ディジタルで表現されたものを扱っていると、その多くが階層的、あるいはツリー状の構造を持っていることがわかるようになる。これは、自然言語の多くの要素、特に句や文のレベルにおいても同様である。しかしながら、言語の統計的な特性について研究している人であれば、各言語単位の線的な並びを研究することからも多くのことが学べることを知っている。バイグラム(2つの言語単位の並び)やトライグラム(3つの言語単位の並び)、あるいはより一般化したNグラムとして知られているものがある。あるテキストが与えられると、異なったNグラムが異なった頻度で現れる。各自然言語にはある一定量の固有の重複性があるので、ある言語で書かれたテキストについて非常に大規模なサンプルがあれば、異なったNグラムの異なった頻度の分布が出てくるのである。以下、この考え方について徐々に説明していきたいと思うが、しかし差し当たり、英語のテキストではほとんどの場合qの後にはuが続くと言える。数学的に厳密な言い方をすれば、現在の文字がqである場合、次の文字が高い確率でuであることを予想することができる、ということである。別の言い方をすれば、英語においては、quというバイグラムは、qaやqbなどよりも高い頻度で現れる、ということである。
Suppose you have a string like 'it was the best of times it was the worst of times it was the age of wisdom it was the age of foolishness'. You already know how to turn a string into a list using the split operation. In Python, you can retrieve a subsequence of a list by using what is called a slice, represented as two indexes separated by a colon. If the first index is empty, it is assumed to be the beginning of the list. If the second index is empty, it is assumed to be the end. Study the following examples.
8. Keyword in Context (KWIC) 文脈付き索引(KWIC) - The Programming Historian 1st ed. 日本語訳
