正規表現(せいきひょうげん、英: regular expression)とは、文字列の集合を一つの文字列で表現する方法の一つである。正則表現(せいそくひょうげん)とも呼ばれ、形式言語理論の分野では比較的こちらの訳語の方が使われる。まれに正規式と呼ばれることもある。
もともと正規表現は形式言語理論において正規言語を表すための手段として導入された。形式言語理論では、形式言語が正規言語であることと正規表現によって表せることは同値である。
その後正規表現はテキストエディタ、ワードプロセッサをはじめとするアプリケーションソフトでパターンマッチ文字列を表すために使用されるようになり、表せるパターンの種類を増やすために本来の正規表現にはないさまざまな記法が新たに付け加えられた。このような拡張された正規表現には正規言語ではない文字列も表せるものも多く、ゆえに正規表現という名前は実態に即していない面もあるが、伝統的に正規表現と呼ばれ続けている。
この記事では主にこのような正規表現を用いたパターンマッチについて説明している。以下、誤解のない限り、アプリケーションソフトやプログラミングにおいて正規表現を用いた文字列のパターンマッチを行う機能のことを、単に正規表現という。
ほとんどのプログラミング言語では、構文またはライブラリによって正規表現を使うことができるようになっている。構文やライブラリに正規表現を備えたプログラミング言語やユーティリティとして、grep、AWK、sed、Perl、Tcl などがある。
また、プログラミング言語の開発などに用いる lex も正規表現を使う。
それぞれの言語やアプリケーションで細部の仕様が異なっているが、POSIX により標準規格も定められそれに準拠するものも増えてきてはいる。
基本的な概念[編集]
しばしばパターンと呼ばれる正規表現は、文字列群を表現する表現法である。通常、全ての要素を列挙することなく文字列群を簡潔に表現するのに用いられる。例えば、「Handel」、「Hendel」、「Haendel」 という三つの文字列を含む集合は 「H(e|ae?)ndel」 というパターンで表現できる(あるいは、パターンは個々の三つの文字列にマッチすると言われる)。ほとんどの形式では、もし特定の集合にマッチする何らかの正規表現が存在すれば、無限の数のそのような表現がある。ほとんどの形式では正規表現を構築するのに次の演算子を提供している。
選言
縦棒は選択肢を区切る。例えば「gray|grey」は「gray」または「grey」にマッチし、これは普通 「gr(a|e)y」 に短縮される。
グループ分け
丸括弧はスコープと演算子の優先順位を定義するのに用いられる。例えば、「gr(a|e)y」 では 「(a|e)」 の部分で 「a」 または 「e」 を示し、全体で 「gray」 または 「grey」 にマッチする。
量化
文字やグループの後ろの量化子は、直前の表現が何回現れることが許されるかを指定する。非常によく使われる量化子は 「?」 と 「*」 と 「+」 である。
?
疑問符は直前の表現が0個か1個あることを示す。例えば、「colou?r」 は 「color」 と 「colour」 にマッチする。
*
アスタリスクは直前の表現が0個以上あることを示す。例えば、「go*gle」 は 「ggle」、「gogle」、「google」 などにマッチする。
+
プラス符号は直前の表現が1個以上あることを示す。例えば、「go+gle」 は 「gogle」 や 「google」 などにマッチするが、「ggle」 にはマッチしない。
これらの構文は任意の複雑な表現を形成するために組み合わされて使用される。
歴史[編集]
正規表現の起源は、いずれも理論計算機科学の一分野であるオートマトン理論や形式言語理論にみることができる。これらは計算のモデル化(オートマトン)や形式言語の分類方法などを扱う学術分野である。数学者のスティーヴン・クリーネは1950年代に正規集合と呼ばれる独自の数学的表記法を用い、これらの分野のモデルを記述した。ケン・トンプソンはテキストファイル中のパターンにマッチさせる手段として、この表記法をエディタQEDに導入した。彼はこの機能を UNIX のエディタ ed にも追加し、後に一般的な検索ツールであるgrepの正規表現へと受け継がれていった(grepは ed エディタの正規表現検索コマンド g/re/p から派生した単語である。re は正規表現(regular expression)の頭文字。)。これ以降、トンプソンの正規表現の適用にならい、多くのUNIX系のツールがこの方法を採用した(例えば expr、awk、Emacs、vi、lex、Perl など)。
Perl と Tcl の正規表現はヘンリー・スペンサーによって書かれたものから派生している(Perlは後にスペンサーの正規表現を拡張し、多くの機能を追加した)。フィリップ・ヘーゼルは Perl の正規表現とほぼ互換のものを実装する試みとしてPerl Compatible Regular Expressions(PCRE)を開発した。これはPHPや Apache などといった新しいツールで使用されている。Perl 6では、正規表現の機能を改善してその適用範囲や能力を高め、Parsing Expression Grammar を定義できるようにする努力がなされた。この結果として、Perl 6 文法の定義だけでなくプログラマのツールとしても使用できる、Perl 6 rules と呼ばれる小言語が生み出された。これらの規則は正規表現の機能のすべてを保持しながら、副規則を通して再帰下降構文解析のバッカス・ナウア記法の定義を行うことができる。
構造化情報標準における、文書やデータベースのモデル化に対する正規表現の使用は重要である。これは1960年代に始まり、ISO SGMLのような産業標準が確立された1980年代に拡大した。構造規定言語の標準の中核は正規表現である。より単純かつ明白な例としては、DTD要素グループの構文において正規表現が使われている。
構文[編集]
標準[編集]
The nice thing about standards is that you have so many to choose from. --Andrew S. Tanenbaum
Unixの標準であるPOSIXでは、"Simple Regular Expressions"・"Basic Regular Expression (BRE)"・"Extended Regular Expression (ERE)"の3種類の記法が示されている。このうち、Simple Regular Expressionsはhistoricalやlegacyと書かれており、backward compatibilityを提供するものとされ、標準の将来の版では"may be withdrawn"と注意されている。
Simple Regular Expressions[編集]
Simple Regular Expressionsの仕様は<regexp.h>のマニュアルページとして示されている。[1]
Basic Regular Expression[編集]
ほとんどの正規表現を利用する UNIXのユーティリティ(grepやsed)のデフォルトはこれである。[2]
この文法では、ほとんどの文字はリテラル(機能を意味せず書かれたそのまま)に扱われる。つまり、ある文字はその文字にのみマッチする。例えば、"a" は a にマッチし、"(bc" は (bc にマッチするなど。例外はメタ文字と呼ばれる。
正規表現 - Wikipedia
