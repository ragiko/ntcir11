
テクスチャマッピングの世界に「Ptex」と呼ばれる新たな手法が登場して,注目を集め始めている。先頃行われたCEDEC 2014でも,NVIDIAの竹重雅也氏が「リアルタイムレンダリングにおけるPtex手法について」と題した講演を行い,この新しい手法の利点と課題を説明した。そこで本稿では,竹重氏による講演の概要をレポートしたい。
テクスチャマッピング技術が抱える問題とは?
CGの世界に限ったことではないが,長らく使われてきた手法が必ずしも良いものだとは限らない。優れた方法が別にあると分かっていたとしても,ハードウェア性能の限界などによって「その手法しか選べない」ということはままある。そして,テクスチャマッピング技術にもそうした傾向は見られる。
その代表例がテクスチャ圧縮手法だ。
たとえば,DirectXの標準テクスチャ圧縮技術である「DXTC」は,今は亡きS3が1998年リリースのGPU「Savage 3D」で採用した「S3TC」がベースとなっている。実のところDXTCでは,テクスチャ圧縮による画質劣化がかなり大きい。しかし,固定された圧縮率が期待できることや,テクスチャマップにアクセスするときのアドレス計算が軽量かつ容易であることから,長らく標準的に使われている。
しかし,旧ATI Technologiesがハイトマップ圧縮に適した圧縮手法「ATI1N」と,法線マップ圧縮に向いた圧縮手法「3Dc」を開発し,それらが「BC4」「BC5」(※BCはBlock Compressionの略)としてDirectXに採用されたのを切っ掛けとして,DirectX 11ではその改良版となる「BC6」「BC7」という高品位の圧縮手法が採用されることになった。
このテクスチャマッピング技術では,もうひとつ解決すべき重大なテーマが残されている。それは「テクスチャマップを3Dモデルへ貼り付ける工程」そのものだ。
問題の1つは,複雑な形状をした3Dモデルに対して,テクスチャをきれいに貼り付けることが難しくなってきたことである。凹凸の少ないつるっとした人形——たとえばドラえもんやアンパンマン——の表面に,シール(テクスチャ)をきれいに貼り付けるのはそれほど難しくないだろう。だが,ゴジラの背びれにシールを貼るのはとても難しそうだ。テクスチャマッピングで生じている問題も,これと似たようなものとイメージすれば理解しやすい。
テクスチャマッピングには,「テクスチャUVの割り当て」という工程がある。これは,3Dモデル上の各ポリゴンが,テクスチャマップのどこに対応するかを示したUVマップの作成に相当するものだ。ところが,昨今の超多ポリゴンモデルに対しては,これを高品位に実現するのがなかなか難しいのである。
そしてもう1つの問題は,テクスチャメモリの利用効率だ。
3Dモデルの一部に貼り付けるテクスチャならばともかく,3Dモデル全体に貼り付ける「スキン」的なテクスチャをテクスチャメモリ上に配置すると,そのテクスチャ用に割り当てられたにも関わらず,実際にはデータが置かれない未使用領域が大量に出てきてしまう。再びシールに例えると,複雑な形状をした大きなシールでは,シール本体よりもその枠部分に使う領域が多くなってしまうようなものだ。
従来のテクスチャリング手法である皮剥ぎ(Pelting)法では,メモリ利用効率が悪いことを説明したスライド。スライド右のテクスチャ画像で,「Waste」と書かれている部分がメモリを無駄に使っている部分だ
竹重氏によれば,テクスチャメモリ領域の約30%が,こうした未使用領域として無駄になってしまっているとのこと。これは相当にもったいない話だ。平均的なゲームでは,グラフィックスレンダリングに使用されるメモリ領域の60%がテクスチャ用途ということなので,グラフィックスメモリの18%(=60%×30%)が無駄になっている計算になる。
そんな状況を改善すべく,CG映画スタジオのWalt Disney Animation Studiosが2008年に発表したのが,講演のテーマである「Per-Face Texturing」(以下,Ptex法)という手法だ。
Ptex法とはなにか?
小さな四辺形でテクスチャを管理,貼り付け
Ptex法では,まず,ポリゴンで作成された3Dモデルをクワッド(四辺形=2ポリゴン)単位で管理する。そして,クワッドを最小単位とした小さなテクスチャマップ(以下,単位テクスチャ)をモデルに貼り付けるという仕組みになっているという。
シールでたとえるならば,3Dモデルを大きなシールで無理矢理包み込むのではなく,シールのほうを小さく切り刻んでから,モザイクアートのような感じで3Dモデルにちびちび貼っていく手法といったところか。
Ptex法におけるテクスチャの貼り方をイメージしたスライド。三角のポリゴンではなく,四角のクワッド(Quad)単位でテクスチャを貼り付ける
この手法を採用するPtex法ならば,複雑なUVマップをほぼ作らなくていい。シンプルなUVマップで済む,とも言える。なぜなら,小さな四辺形の単位テクスチャを3Dモデルを構成しているポリゴンに対して貼り付ければいいだけだからだ。これがPtexの利点のひとつである。
また,Ptex法では単位テクスチャが四辺形になるので,テクスチャメモリ上にタイルのように配置できるため,メモリ領域を無駄にすることはほぼ起こりえない。このメモリ使用効率の良さが,Ptex法が有するもう1つの利点というわけだ。
Ptex法の特徴を示したスライド。複雑なUVマップが不要でメモリも無駄にならない
ここまで読むと,「Ptex法万歳!」「これで行こうよ」と誰もが思うところだが,そうもいかない。現行のGPUはPtex法に対応していないのだ。
複数のテクスチャにまたがるテクスチャフィルタリングがPtex法の難題
Ptex法にはいくつか課題がある。テクスチャマップ全体を小さな四辺形の単位テクスチャで管理しているため,単位テクスチャの境界をまたぐようなテクスチャアクセスではテクスチャサンプリングが複雑になってしまうと竹重氏は述べていた。
テクスチャマッピングでは,テクスチャ上の画素(テクセル)を1つ読み出してそのまま貼り付ける,という機会は稀だ。たとえば,貼り付け対象3Dモデルが遠方にあるときは,相対的にテクスチャを小さく貼り付けなくてはならない。そうなると,1ピクセルが複数のテクセルにまたがることになる。
「1テクセル読み出し・1テクセル貼り付け」のことをポイントサンプルと呼ぶが,その描画結果は「拡大/縮小されたドット絵」みたいになってしまう。そこで,一般的なテクスチャマッピングでは,読み込み対象テクセルだけでなくその周辺のテクセルも読み込んだうえで,特殊な重み付けをした平均値の計算などによってテクセルのカラーを決定する。これが「テクスチャフィルタリング」の処理だ。
ところがPtex法では,周囲のテクスチャにアクセスするのが難しいという問題がある。なぜなら,単位テクスチャはメモリ上に不連続で格納されてしまう可能性があるので,テクスチャマッピングの対象となる単位テクスチャ(以下,対象テクスチャ)の隣に貼り付けるべき単位テクスチャが,メモリのどこに格納されているかが分からないのだ。これではテクスチャフィルタリングが行えず,クアッドの境界ではテクスチャに継ぎ目が見えてしまう。
Ptex法では,単位テクスチャがメモリ上で不連続に格納されてしまうので,単位テクスチャをまたいだテクスチャフィルタリングをどう行うかが問題になる
テクスチャマッピングに変革をもたらす「Ptex法」とは? 無駄なメモリ消費を減らす技術の正体に迫る - 4Gamer.net
