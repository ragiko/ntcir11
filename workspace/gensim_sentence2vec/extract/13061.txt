
フォーマルメソッド(=形式手法)は、数学的に厳密に意味付けられた言語(「形式仕様記述言語」と呼ぶ)を用いて情報システム(ソフトウェア、ハードウェア等)の要求や設計等を記述し、情報システムがユーザの要求等を満たしているかなど論理的に推論するための仕組みを提供する手法である。
フォーマルメソッドは、基礎とする数学理論などによって異なる多数の手法の総称であり、100以上の異なる手法[1]が提案されており、それぞれ記述する対象範囲や検証目的等の適性に違いがある。比較的、実践でよく利用されるフォーマルメソッドには、Bメソッド、Event-B、VDM++、SPIN、NuSMV、Zなどの例がある。また、ProVerifのように、プロトコル検証など特定の目的に対応した専門家向けのフォーマルメソッドなどにも有用なものがある。フォーマルメソッドは、鉄道分野、航空分野、金融・セキュリティ分野など、セーフティクリティカル・システムやミッションクリティカル・システムなどにおいて、欧米を中心に実システムに対する適用事例が増えている[2]。
フォーマルメソッドと対比される従来のソフトウェア・テストは、ソフトウェアの品質[3](安全性、信頼性、セキュリティ等)を高めるため、不具合(バグ)を発見する目的で利用されるが、不具合が存在しないことを通常示すことができないという問題がある。特に、並列動作するソフトウェアや組込みシステム等において、並列動作のタイミングに関わる処理は再現性が無いため、いくらテスト件数を増やしても、すべてのケースを網羅することは保証できない。また、従来のテストでは、実行されなければいけない処理をテスト・ケースとして与えて動作確認をすることには向くが、テストケースだけで、安全性やセキュリティなどに関する望ましくない事が起きないことを示すことは困難である。
フォーマルメソッドでは、ソフトウェアがある性質を満たしていることを論理的に検証するため、一定の不具合が存在しないことを保証できる。そのような点で、完全な網羅性を持たない従来のテストの問題点を解決することができる。ソフトウェア・テストと補完的に利用することが期待される。ただし、フォーマルメソッドを大規模なシステムに適用する場合などにおいて、コストが増大することもあるため、現実には、ソフトウェア・テストと部分的に使い分けるなど併用されることが想定される。
下図は、従来の開発プロセスにおける成果物とフォーマルメソッドの関係を示したものである。
図 1:形式手法の位置付け(設計検証の場合)
形式検証は、検証の基準(検証性質)と検証の対象(設計仕様)の両方について形式仕様言語を用いて記述し、それらをツールに入力することにより検証対象が、検証基準を満たしていることを検証する。
図 2:フォーマルメソッドの具体的イメージ(モデル検査SPINの場合)
より具体的には、上図のとおり、日本語やダイアグラム等で書かれた要求仕様と設計仕様から、それぞれ形式仕様言語を用いて、検証性質と設計モデルをテキストベースで記述する。その両方をモデル検査ツールの入力とし、ツールの自動検査機能を用いて、検証性質が満たされるか、反例が存在するか確認することができる。
開発プロセスにおいて、形式仕様記述をどの範囲、どの程度(詳細度)まで行い、形式検証をどの程度(検証項目のうち検証する比率)まで実施するか検討すること(「フォーマルメソッドの適用レベル」と呼ぶ)は、非常に重要である。それは、適用レベルによって、開発コストや得られる効果は大きく異なるためである。それは適用対象に応じて判断することが重要である。適用レベルは、大まかに以下のように分けられる。
表 1:形式手法の適用レベル
形式手法とは?｜ディペンダブル・システムのための形式手法の実践ポータル
