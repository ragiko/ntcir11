
golang の fmt.Fprintf/Sprintf には、 フォーマット文字列の解釈を最適化することで、 速くする余地があると推測されます。 その推測が正しいか、お手軽な実験を行ってみました。
この記事は Go Advent Calendar 2014 の6日目の記事です。
fmt.Fprintf および Sprint は、実行時にフォーマット文字列を毎回解析するという性質上、パフォーマンスに余計なオーバーヘッドが発生すると言えます。よって、その解析処理をコンパイル時に行えば、大幅にパフォーマンスが改善することは、C言語において kazuho さん(h2oプロジェクト)の h2o/qprintf が証明しています。
今回は qprintf にインスパイアされて、同様のことを golang で行ったらどの程度速くできるのかを、簡単な実験(koron/qfmt)で確認してみました。
方式の説明
C言語用であるqprintf ではフォーマット文字列の解析処理を、コンパイル時(直前)にソースを書き換えることで実現しています。それに対してgolangのqfmtでは、関数が一級オブジェクトであることを利用して、初回の実行時にフォーマット文字列の解釈結果を出力関数(列)として記憶(キャッシュ)し、次回以降はそのキャッシュした関数を用いることで高速化を図ります。
一例を示しましょう。 "PREFIX %s SUFFIX" というフォーマット文字列を解釈するとしましょう。qfmt ではこの文字列を3つの部分に分解し、それぞれ以下のように関数に変換し、関数列を生成します。
固定文字列 "PREFIX " を出力する関数
第1引数を文字列として出力する関数
固定文字列 " SUFFIX" を出力する関数
出力時にはこの関数列を順番に実行することで、意図した文字列が出力されます。
実験の準備
実験の準備として koron/qfmt を手元に clone し、v0.1 タグを checkout します。
fmt (Fprintf/Sprintf) の速度向上実験 &mdash; KaoriYa
