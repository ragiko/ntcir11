 既定ページングは短時間で簡単に実装できますが、必要な大きさの結果セットだけを取得したい場合はカスタムページングが不可欠です。私は2006年3月に、カスタムページングを利用して大量の結果セットを効率的にページングする方法についての記事を本サイト(4GuysFromRolla.com)にいくつか投稿しましたが、そこでは、ObjectDataSourceとSQL Server 2005の新しいROW_NUMBER()キーワードを使ってGridViewでカスタムページングを行いました。ROW_NUMBER()という新しいキーワードは、行番号で並べられたデータの特定のサブセットを効率的に取得するものです。3月の投稿の後、多くの読者から、ROW_NUMBER()のないSQL Server 2000でこのような効率的なカスタムページングを実装する方法について問い合わせがありました。
本サイト(4GuysFromRolla.com)に以前に投稿された「Paging through Records using a Stored Procedure」(Daniel Anderson著)は、既定ページングの実装をはるかにしのぐ1つの方法を示しています。しかし、パフォーマンスという点では改善の余地があります。本稿では、Danielのストアドプロシージャに手を加えて、さらに効率的な方法を示します。本稿の最後に示すストアドプロシージャは、典型的なASPアプリケーションや、ASP.NET 1.xのDataGridによるカスタムページングで使用できます。また、ObjectDataSourceで使用してASP.NET 2.0アプリケーションのGridViewでカスタムページングを実現することもできます。詳細については、以下を参照してください。
Danielの方法
「Paging through Records using a Stored Procedure」の中で、Daniel Andersonは、sp_PagedResultsという名前のストアドプロシージャを作成しました。これは、2つの整数型の入力パラメータ(@Pageおよび@RecsPerPage)を受け取り、基になるデータベーステーブルから、指定ページのデータに属するレコードを返します。例えば、1ページが10レコードの場合に2ページ目のデータを表示するときは、ストアドプロシージャsp_PagedRecordsを呼び出して@Pageと@RecsPerPageにそれぞれ2と10の値を渡します。
テーブルの一意キー(ID)が連番になっていて、番号に抜けがない場合、このようなテーブルからページ単位でデータを取得するのは簡単です。単純なWHERE句を指定すればよいのです。例えば、次のようなデータのテーブルがあるものとします。
SQL Server 2000で大量の結果セットを効率的にページングする方法 - インターネットコム
