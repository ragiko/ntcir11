
条件によって表示結果を分岐させたい
あるセルに入力された値によって、計算の方法を変更したり、
表示する値を変化させたりしたいケースはよく発生すると思います。
そこでここでは「特定のセルの表示内容をあるセルの値によって、関数で
変化させる」をテーマにします。
特定条件で表示結果を分岐させる(IF関数)
条件分岐処理の基本です。
「もし、〜だったら、Xという処理、そうでなければYという処理」
IF関数
条件の書き方
複数条件で分岐
定量的に増減する数値で分岐(CHOOSE関数)
定量的に増減する数値範囲での条件分岐。
「1の時はX、2の時はY、3の時はZ・・・・」
CHOOSE関数
CHOOSE関数の使いどころ
実用上は?
特定の値に対応した値を表示【1】(INDEX関数)
リストから「n番目」の値を表示させる。
「1の時はリストの1番目、2の時はリストの2番目・・・」
INDEX関数
シートにリストを作成して使う
特定の値に対応した値を表示【2】(VLOOKUP関数)
リストから検索して該当するものがあったら対応した値を表示する。
「得意先コードを入力したら得意先名を表示する」
「品名を入力したらその金額を表示する」
VLOOKUP関数
シートに複数列のリストを作成して使う
特定条件で表示結果を分岐させる(IF関数)
IF関数
IF関数の基本の書き方は次のようになります。
=IF(条件,真,偽)
また、引数にはそれずれ次のようなものを記述します。
条件
この部分には分岐するための条件を記述します。
引数「条件」は必ずTRUE(真)、FALSE(偽)の値が返らなくてはなりません。
数値*1の場合には
意図した処理ができない場合があります。
また、この部分に文字列が返るような場合には
引数に不正な値が与えられたという意味で#VALUE!エラーになります。
真
引数「条件」がTRUE(真)である場合の処理を記述します。
偽
引数「条件」がFALSE(偽)である場合の処理を記述します。
引数「条件」はExcelのヘルプでは「論理式」と表現されています。「Xという命題は正しいか、正しくないか」という「論理」を計算する数式を「論理式」と呼ぶからです。論理式は、それが正しい場合はTRUE、正しくない場合はFALSEという2種類の値を返します。論理式から導かれるこの2種類の値を「論理値」と呼びます。
関数ヘルプ
IF関数(HINT)
*1
例外として数値が返る数式を論理式の代用として使用する場合があります。
PAGETOP
条件の書き方
IF関数の引数「条件」には一般的に次のようなものを条件式として使用します。
比較式
比較演算子によって左辺と右辺の値を比較します。
比較式がTRUEになるのは・・FALSEになるのは・・
A=BAとBが等しいAとBが等しくない
A<>BAとBが等しくないAとBが等しい
A<=BAがB以下AがBより大きい
A=>BAがB以上AがBより小さい
A<BAがBより小さいAがB以上
A>BAがBより大きいAがB以下
情報関数
IS関数と呼ばれる情報関数は、引数として与えられた検査対象の種類を判断します。検査対象が条件を満たしている場合にTRUEを返します。
情報関数がTRUEになるのは・・FALSEになるのは・・
ISBLANK検査対象が空白検査対象が空白以外 
ISERR検査対象が(#N/Aを除く)エラー検査対象が(#N/Aを除く)エラーでない 
ISERROR検査対象がエラー検査対象がエラーでない 
ISEVEN検査対象が偶数検査対象が奇数 
ISLOGICAL検査対象が論理値検査対象が論理値以外 
ISNA検査対象が#N/Aエラー検査対象が#N/Aエラー以外 
ISNONTEXT検査対象が文字列以外検査対象が文字列 
ISNUMBER検査対象が数値検査対象が数値以外 
ISODD検査対象が奇数検査対象が偶数 
ISREF検査対象がセル参照検査対象がセル参照でない 
ISTEXT検査対象が文字列検査対象が文字列以外 
これら比較演算や情報関数を利用して条件分岐を行います。
また、ほかのワークシート関数と組み合わせて使用することでより複雑な条件分岐を行うことができます。
PAGETOP
複数条件で分岐
IF関数単独では分岐はひとつしかできませんが、IF関数の中にIF関数を入れ込んだり
(入れ子=「ネストする」と表現します)、
AND関数やOR関数を組み合わせた数式を条件として与えることで複数条件を考慮した分岐処理が可能です。
「条件Aがn1のとき処理X1、n2のとき処理X2、n3のとき処理X3、それ以外のとき処理X4」 
=IF(A=n1,X1,IF(A=n2,X2,IF(A=n3,X3,X4))) 
条件に3っつ以上の分岐が発生するときはIF関数の中にIF関数が入る形(入れ子=ネスト)
にすることで処理します。
関数の引数として他の関数を使用することを入れ子にする(ネストする)といいますが、
入れ子は(どの関数であっても)7レベルまで可能です
ネストレベル(HINT)。
(それを超える場合はエラーになるので別の方法をとる必要があります)
【例】A1が0なら×、1なら、2なら、それ以外は
=IF(A1=0,"×",IF(A1=1,"",IF(A1=2,"","")))
ただし、次のような例は少し気をつける必要があります。
【例】A1が0以上の時×、1以上の時、2以上の時、それ以外は
【誤】=IF(A1>=0,"×",IF(A1>=1,"",IF(A1>=2,"","")))
この例では0以上の数値を入力した場合、全て×が表示されてしまい、
所期の分岐をしてくれません。この例では下記のように書くべきです。
【正】=IF(A1>=2,"",IF(A1>=1,"",IF(A1>=0,"×","")))
分岐条件の数値範囲がダブるような場合には範囲が狭いほうを先に分岐させなければなりません。
関数ヘルプ
ネストレベル(HINT)
「A 、 B 、 C が全て n であれば処理 X、そうでなければ処理 Y」
=IF(AND(A=n,B=n,C=n),X,Y)
複数の条件を全て満たすときと、そうでない場合を分岐させたいときは
AND関数で複数条件を判断します。
AND関数はAND(引数1,引数2,...)で、
引数が全てTRUEならばTRUEを、ひとつでもFALSEがあればFALSEを返します。
【例】「C3もC4もC5も0より小さければ0、そうでなければ1」
=IF(AND(C3
AND関数の引数を全て満たしたときにTRUEの処理「0」、
ひとつでも満たせないものがあればFALSEの処理「1」を返します。
関数ヘルプ
AND関数(HINT)
「AまたはBがn1であれば処理X、そうでなければ処理Y」
「AまたはB」という論理判断はOR関数を使用します。
=IF(OR(A=X,B=X),Y,Z)
OR(引数1,引数2,...)
OR関数の引数には通常、論理値(TRUEまたはFALSE)のかえる数式を用います。
引数がひとつでもTRUEならばTRUEを、全てFALSEの時のみFALSEを返します。
【例】D1=B1-A1-C1だが、A1かB1どちらかが空白か0の時D1は空白とする
=IF(OR(A1=0,B1=0),"",B1-A1-C1)
関数ヘルプ
OR関数(HINT)
「Aがn1以上n2未満のとき処理X、それ以外のとき処理Y」 
この命題をそのままIF関数に当てはめて
【誤】 =IF(n1<=A<n2,X,Y)
このように数式を書くとエラーにはなりませんが残念ながら思うとおりの動作はしてくれません。
試しにどこかのセルへ「=2<=A1<5」と入力してみてA1のセルの値を変化させてみても
「FALSE」しか返って来ません。
数学的には間違った書き方ではありませんが、Excelは範囲条件式が正しく判断できません。
「A1>=2」が正しいか、「A1<5」が正しいか、をそれぞれ判断させてやる必要があります。
エクセルでは「ある範囲の値かどうか」をひとつの論理式では表せないことは覚えましょう
【正】 =IF(AND(A>=n1,A<n2),X,Y)
AND関数は引数を全て満足する場合TRUEを返します。
下記数式例では、「セルA1が2以上」がTRUEで、なおかつ「セルA1が5未満」がTRUEのとき、
AND関数でTRUEが返り、IF関数での「真」の場合の処理をします。
【例】
=IF(AND(A1>=2,A1<5),"","×")
関数ヘルプ
AND関数(HINT)
「AがnかつBがnのとき処理X、AがnまたはBがnのとき処理Y、それ以外は処理Z」 
=IF(AND(A=n,B=n),X,IF(OR(A=n,B=n),Y,Z))
命題通りの条件判断は、上記のようになります。
ここで、ANDとORの順番を逆にして、
【誤】 =IF(IF(OR(A=n,B=n),Y,AND(A=n,B=n),X,Z))
としてしまうと、「AがnかつBがnのとき」も処理Yを実行してしまうので注意が必要です。
OR関数は「引数のどれか、または全てがTRUEのとき」TRUEを返すので、
「AがnかつBがnのとき」もOR関数の条件判断でTRUEと判断されてしまいます。
条件判断を複数重ねていくときは「条件が狭いものを先に記述していく」事が必要になります。
また、発想を変えて、
=IF(AND(A=n,B=n),X,IF(AND(A<>n,B<>n),Z,Y))
「AがnかつBがnのとき」「Aがnでなく、かつBもnでないとき」のどちらにも当てはまらない場合が
「AがnまたはBがnのとき」であると読み替える事ができるので
このような書き方をすることができます。
関数ヘルプ
AND関数(HINT)
OR関数(HINT)
参考
AND関数、OR関数を使わなくても、論理式の乗算、加算で同じ結果を得ることができます。
【AND条件の場合】
=IF(AND(A=n,B=n,C=n),X,Y)
これは次のように書き換えることができます。
=IF((A=n)*(B=n)*(C=n),X,Y)
「(A=n)*(B=n)*(C=n)」の部分で「論理値の乗算」を行っています。
「(A=n)」「(B=n)」「(C=n)」のそれぞれの式で「TRUE」「FALSE」の結果が返りますが、
すべてが条件を満たす(TRUE)なら、
(A=n)*(B=n)*(C=n)・・・・・TRUE*TRUE*TRUE=TRUE
また、ひとつでも条件を満たさないものがあると、例えばCがn以外であった場合、
(A=n)*(B=n)*(C=n)・・・・・TRUE*TRUE*FALSE=FALSE
となり、(A=n)*(B=n)*(C=n)は偽となります。
つまり、AND(A=n,B=n,C=n)と書いた場合と結果が同じになります。
【OR条件の場合】
=IF(OR(A=n,B=n,C=n),X,Y)
OR関数でも次のような式で同様の結果が得られます。
=IF((A=n)+(B=n)+(C=n),X,Y)
「(A=n)+(B=n)+(C=n)」の部分で「論理値の加算」を行っています。
「(A=n)」「(B=n)」「(C=n)」のそれぞれの式で「TRUE」「FALSE」の結果が返りますが、
全てが条件を満たさない(FALSE)の時だけ、つまりA、B、Cが全てnでない時には
(A=n)+(B=n)+(C=n)・・・・・FALSE+FALSE+FALSE=FALSE
また、ひとつでも条件を満たすものがあると、例えばCがnであった場合、
(A=n)+(B=n)+(C=n)・・・・・FALSE+FALSE+TRUE=TRUE
となり、(A=n)+(B=n)+(C=n)は偽となります。
つまり、OR(A=n,B=n,C=n)と書いた場合と結果が同じになります。
論理値の足し算は、TRUEにいくつTRUEやFALSEを足してもTRUEです。
関数ヘルプ
AND関数(HINT)
OR関数(HINT)
論理値の演算(HINT)
PAGETOP
定量的に増減する数値で分岐(CHOOSE関数)
CHOOSE関数
あるセルに返っている正の数値をもとに、別のセルに表示される値を分岐させたい、
という場合にはIF関数よりも便利な場合があります。
=CHOOSE(インデックス,値1,値2,・・・)
それぞれの引数は次のように指定します。
インデックス
数値を指定します。1〜29の範囲で指定することができます。
引数リスト(値1,値2,・・・)
インデックスに連動して行いたい処理を指定します。
インデックスが1の時は値1、2の時は値2・・・のように対応します。
数値・文字列に限らず、セル参照・関数での処理も許容します。
関数ヘルプ
CHOOSE関数(HINT)
PAGETOP
CHOOSE関数の使いどころ
CHOOSE関数には次のような特性があります。引数インデックスの制限です。
インデックスが数値以外の場合、エラー値#VALUE!が返る
インデックスが1より小さいか、引数リストの個数よりも多い場合、エラー値#VALUE!が返る
インデックスに少数を含む数値が与えられた場合は整数部分だけが評価される
これらの点を踏まえて数式立てすれば、簡易な表示切替ができます。
【例】セルA1の値によってB1の表示を切り替える
A1の値が 1以上 2未満  "A"
A1の値が 2以上 3未満  "B"
A1の値が 3以上 4未満  "C"
【IF関数の場合】
=IF(AND(A1=>1,A1<2),"A",IF(A1<3,"B","C"))
【CHOOSE関数の場合】
=CHOOSE(A1,"A","B","C")
上記の例は(A1に1以上4未満の数値が必ず入力されると言う前提においてですが)、
IF関数よりも少しすっきりした書き方になります。
PAGETOP
実用上は?
インデックスが数値ない、または、引数リストを超える数値や0をインデックスに与えた場合にエラーになる点が気になるところなので、実用上は次のような数式設計になるでしょう。
【例】セルA1の値によってB1の表示を切り替える
A1の値が 1以上 2未満  "A"
A1の値が 2以上 3未満  "B"
A1の値が 3以上 4未満  "C"
A1の値が 1未満     ""
A1の値が 4以上     ""
=CHOOSE(MAX(0,MIN(A1,4))+1,"","A","B","C","")
MIN(A1,4)
A1の値と、数値4を比較して小さい数値を返します。
A1に4以上の数値・文字列が入力されても最大値を4にします。
(文字列はどんな数値よりも大きいと判断される)
この点、MIN関数は最大値を設定しつつ、
イレギュラーな文字列入力も排除してくれる大変便利な関数といえます。
MAX(0,MIN(A1,4))
MIN(A1,4)の値と、数値0を比較して大きい数値を返します。
A1に0未満の数値が入力されても最小値を0にしてしまいます。
A1に0以上1未満の数値の場合はA1の数値が返りますが、
最終的には整数部分だけが問題になるので結果は0と同じです。
この部分での計算値は0以上 4以下となります。
MAX(0,MIN(A1,4))+1
引数リストは1から始まらなければいけないので0以上 4以下の数値に1を加算します。
結果的に1以上 5以下の数値がインデックスとして返ります。
応用で次のような計算もできます。
【例】「セルA1の個数によって単価を変更する計算」
A1の値が   1個以上  50個まで  @1,000円
A1の値が  51個以上 100個まで  @ 975円
A1の値が 101個以上 150個まで  @ 950円
A1の値が 151個以上        @ 900円
=CHOOSE(MIN(ROUNDUP(MAX(0,A1)/50,0)+1,5),"",1000,975,950,900,"")
関数ヘルプ
CHOOSE関数(HINT)
MIN関数(HINT)
MAX関数(HINT)
ROUNDUP関数(HINT)
PAGETOP
特定の値に対応した値を表示【1】(INDEX関数)
前掲のCHOOSE関数は整数値をもとに表示を切り替えたりする場合には
便利ですが、リストを関数の中へ引数として入力せねばならず、
また、分岐処理も29件までと限られています。また、実用的に10件以上の
リストを関数内に入力したものを管理するのは大変です。
次のような場合にはINDEX関数の使用をお勧めします。
表示分岐の基準が数値で、正の整数である(1、2、3、4・・・)
分岐条件が8件を超える
INDEX関数
INDEX関数は数値を元にリストから値を特定する「検索関数」に属する関数です。
INDEX(検索範囲,行番号[,列番号])
検索範囲
リストを作成したセル範囲を指定します。
行番号
リストから値を特定するための行番号を指定します。
[,列番号]
リストが複数列で構成されている場合は列番号も指定します。
リストが一列しかない場合は省略可能です。
引数[行番号]はワークシートの行番号ではなくて、
引数[検索範囲]のリストの「何番目か」を表す数値を指定します。
引数[列番号]についても同様です。
PAGETOP
シートにリストを作成して使う
INDEX関数はリストをシートに作成してそれを利用するのが一般的です。
リストの作成例
次の例はセルA1へ入力された数値によってセルB1に表示する内容を
C列のリストから決定します。
ABC
14サツマイモ 大根 
2 にんじん 
3 ジャガイモ 
4 サツマイモ 
5 紫いも 
6 長芋 
7 サツマイモ 
8 たまねぎ 
9 レンコン 
10 ごぼう 
セルB1へ入力する数式例
=INDEX(C1:C10,A1)
関数で利用するためにワークシートへ書き出したリストをテーブルと表現することもあります。
ワークシートへリストを書き出すことで次のような点が便利になります。
表示すべき内容が変更になった時に変更しやすい。
関数を良く分かっていない人であっても、
シート入力ができる程度のスキルで表示内容のメンテナンスができます。
つまり、他人に表示リストの管理まで任せることができます。
表示すべき内容が変更になった時に数式の差し替えをしなくても良い。
同じリストを参照するINDEX関数が複数のセルに入力されている場合には、
リストの内容だけ編集すれば変更を反映することができます。
これらに対し、複数のセルで関数の中で直接表示内容を指定している場合には、
表示内容が変わると数式を全てコピー貼り付けしたり、
置換を使って全ての数式の内容を変更する必要があります。
=IF(A1=1,"大根",IF(A1=2,"にんじん"・・・・
のような数式の書き方を否定するわけではありませんが、
「他人がメンテナンスを行う」「変更の余地を残す」場合には
リストを参照するような数式は活用すべきです。
関数ヘルプ
INDEX関数(HINT)
PAGETOP
特定の値に対応した値を表示【2】(VLOOKUP関数)
次のような場合は前掲INDEX関数は向いていません。
表示切替の元となる数値が1から始まらない
表示切替の元となる数値が連続していない
表示切替の元となる値が数値ではない
INDEX関数*1よりもVLOOKUP関数のほうが適しています。
*1
ここではあくまで単独使用を想定してこのように表現しています。
ほかの関数と組み合わせることによりINDEX関数でVLOOKUP関数と同様の検索を行
うことができますが、その説明は別の機会とします。
VLOOKUP関数
リストから値を検索してそれに対応する値を参照する検索関数のひとつです。
一般にはセルの表示を切り替えるというよりもワークシートに入力されているリストから
データを特定するための関数として認識されています。
VLOOKUP関数の書式は次のとおりです。
VLOOKUP(検索値,リスト,列番号[,検索方法])
引数にはそれずれ次のようなものを記述します。
検索値
リストから検索する値を指定します。
リスト
検索の対象となるリストを指定します。2列以上のセル範囲を指定することが多いでしょう。
列番号
リストから検索値が見つかった場合に参照の対象とするリストの列番号を指定します。リストの何列目かであって、ワークシートの列番号は関係がないことに注意してください。
[,検索方法]
FALSEの場合は検索値との完全一致指定。見つからない場合は#N/Aを返します。
TRUE(または省略)の場合は検索値が見つからない場合に、
検索値未満で最も大きい値を検索対象とします。
VLOOKUP関数の検索値には数値のほかに文字列も指定できるため、非常に広範な使い方のできる関数です。
PAGETOP
シートに複数列のリストを作成して使う
VLOOKUP関数は引数[検索値]に指定された値を
引数[リスト]に指定された範囲の一番左側の列(先頭列)を対象に検索します。
検索値が見つかった場合は
[リスト]における検索値と同じ行
[リスト]における引数[列番号]で指定された列
この行と列がクロスした部分のセルを参照します。
見つからなかった場合の処理は引数[検索方法]で指定した処理に従います。
逆に言えば、次のような条件を満たせば既存のリストをVLOOKUP関数で活用できます。
検索する値とそれに対応する値が必ず同じ行にある
検索する列が表示したい値の列よりも必ず左側にある
関数ヘルプ
VLOOKUP関数(HINT)
PAGETOP
VLOOKUP関数の使用例
顧客コードを入力して顧客名を表示する
使用例1
次の例はC列からA1に入力された数値を検索し、
検索値が見つかった場合はD列の対応する値をB1に表示します。
ABCD
121100Eファイナンス11000A商店
2 11200B商事
3 11250C商会
4 20200株式会社D
5 21100Eファイナンス
6 33100スタジオF
7 33800G洋行
8 44650社団法人H
9 51220有限会社 I
10 66000K貿易
セルB1へ入力する数式例
=VLOOKUP(A1,C1:D10,2,FALSE)
[検索方法]にFALSEを指定して完全に一致するデータのみを表示するようにしています。
そのため、A1が未入力であったり、検索値が見つからない場合はエラー値
#N/A (該当なし[NoAnswer]が表示されます。
下記はエラー #N/A に対策した式。
=IF(ISNA(VLOOKUP(A1,C1:D10,2,FALSE)),"",VLOOKUP(A1,C1:D10,2,FALSE))
数量によって単価を変化させる
卸関係の料金計算で、数量が多い時は単価を安く提供する場合があります。
そのような計算の時にVLOOKUP関数の[検索方法]にTRUEを指定した
「未満値検索(近似値検索)」を利用する方法があります。
使用例2 
次の例はD2:H7に作成された料金表からA2に入力された数値を検索し、
H列の対応する料金をB2に表示します。
ABCDEFGH
1重量従量金額料金料金表Kg当料金
2659360450Kg以上10Kg未満100
310〃20〃98
420〃60〃95
560〃100〃93
6100〃200〃90
7200〃85
セルB2へ入力する数式例 
=VLOOKUP(A2,D2:H7,5,TRUE)
この数式で実際に検索されるのはD列のみで、計算上はF列の数値は無視されます。
TRUE検索の場合はD列にA2と合致する値があればその行の値を、合致する値がなければ
A2の値を超えない最大値の行の値を返します。
関数ヘルプ
VLOOKUP関数(HINT)
ISNA関数(HINT)
PAGETOP
≪前のページへ   
困ったときのお部屋目次へ  
次のページへ≫
条件分岐
