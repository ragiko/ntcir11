
学習内容とねらい
本章では、今まで、単一のフォームを前提としてきましたが、ここで複数のフォームを使う場合を考えてみたいと思います。
この章での課題は、一見無駄のような気がします。私も実際、課題をやりながら変数の宣言などにてこずりながら、意味がないように思っていました。しかし,処理を別けることによって多くのメリットがある場合もあるのです。
今回は、処理を分けてCGを描く小さなプログラムを作りますが、もっと大きなプログラムを作成するときは処理を分割することが重要となってきます。まず、プログラムを拡張するときなど、再利用できるプログラムがあるときは見つけやすくなります。また、保守性にも効果を発揮し、不具合を対処する場合は早期発見が可能となります。
処理を分割するとこのように効率性が上がり、利点が多くなります。複数のユニットへの処理の分割の必要性が、この章で理解するのは少し難しいかもしれません。
私の体験談
この章の課題は、指示どおりにこなしていくと、余り難しいと感じないと思います。ただ、CGを描くために多少計算をしないといけないのがつらいところ・・・。
あとは、プロジェクト全体で使う関数の宣言の仕方を確実に覚えることが重要な点だと思います!
第8章 複数のフォームを持つプログラム 
−処理の分割−
総目次へ  第7章目次へ  前節へ  次節へ 
第8章の構成 
8-1 プロジェクトマネージャーによるユニット・プロジェクト名の確認 
8-2 ユニットの追加・削除
8-3 他のフォームにあるコンポーネントの参照
8-4 CG描画ソフトの作成(1)-複数フォームの用意-
8-5 CG描画ソフトの作成(2)-処理の分割-
8-6 CG描画ソフトの作成(3)-toolsユニットへの追加-
8-7 CG描画ソフトの作成(4)-ユニットの受け渡し-
総目次へ  第7章目次へ  前節へ  次節へ 
第8章 複数のフォームを持つプログラム −処理の分割−
