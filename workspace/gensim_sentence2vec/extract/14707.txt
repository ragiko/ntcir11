セルオートマトンのルール「StarWars」のアルゴリズム解説
開発
昔に書いた記事「セルオートマトンを用いたシューティングゲーム」が最近になってちょっと注目されてたので、需要があるかなと思ってこのゲームで使われた「StarWars」というルールの解説をしてみます。
コンウェイのライフゲームくらいなら作れるという人向け。
Generations(世代)ルールについて			正確な名前は知らないんですが、Generations というセルオートマトンのルールがあります*1。簡単に言えば「世代があるルール」ですね。
このルールは外部総和型と呼ばれる分類で、ライフゲームやStarWarsもこの分類に入ります。なので、ライフゲームのアルゴリズムがわかればStarWarsの理解も簡単です。
このGenerationsルールは「あるセルが死を宣告されてから何ステップか耐えてから完全に死ぬ」という残酷なルール。死ぬまでに猶予が与えられるわけです。ただし、その間は生きることしかできません。
StarWarsだと状態数が4個あり、死を告げられてから3ステップで完全に死にます。死の状態を加えるので死ぬまでの時間+1が状態数です。
コンウェイのライフゲームだと各セルごとに状態数は生か死の2個しかなく、一瞬で死ぬわけですからこの状態数があまり注目されません。
通常、ライフゲームなどの状態数が2個の外部総和型二次元ルールを文字にすると「23/3」と表記します。生のセルの周囲8セルの生の総和が2と3なら生き延び、死のセルの周囲8セルの生の総和が3なら生まれ、それ以外なら死である、という意味です。
Generationsルールでは、これに状態数を付け加えて「23/3/2」と表記します。ライフゲームは状態数が2個なので「/2」を付け加えました。StarWarsなら状態数は4なので「234/2/4」となります。
詳しい解説
Generationルールの表記ルールを「S/B/C」とすると以下のようになります。
定義
S, B はそれぞれ 0..8 の数値が重複せず入るリストである
C は 2 以上の数である
セルの状態は 0..C-1 とする *2
あるセルの近傍8セルのうち、状態が C-1 であるセルの数を SUM とする
あるセルが状態 0 の場合
そのセルの SUM が B に含まれていれば、そのセルの次の時刻の状態は C-1 である
そうでなければ、変化なし
あるセルが状態 C-1 の場合
そのセルの SUM が S に含まれていれば、そのセルの次の時刻の状態は C-1 である
そうでなければ、そのセルの次の時刻の状態は C-2 である
あるセルが状態 1..C-2 の場合
そのセルの次の時刻の状態は、現在の状態-1 である
以上を全セルに対して行い、次のステップの状態を算出すると1ステップが終了します。
StarWarsの場合は「345/2/4」なので、関数型っぽく書くと
あるセルの次の時刻の状態は
そのセルの状態が
0 なら
SUM が 2 だと
C-1 になる
そうでなければ
0 のまま
C-1 なら
SUM が 3, 4, 5 のいずれかだと
C-1 のまま
そうでなければ
C-2 になる
それ以外 (1..C-2) なら
現在の状態 - 1 になる
となります。
Generationsのほかのルール
StarWars の他にも Generations にはたくさんの面白いルールが存在します。体験したい場合は http://psoup.math.wisc.edu/mcell/download.html で Windows 用のクライアントがダウンロードできます。
他のプラットフォーム向けにも http://psoup.math.wisc.edu/mcell/mjcell/mjcell.html で JavaApplet版がダウンロードできるようになっています。
ぜひ!
ツイートする
Permalink | コメント(0) | トラックバック(0) | 09:44   
セルオートマトンのルール「StarWars」のアルゴリズム解説 - Tosikの雑記
