単体テストと結合テストとは?
単体テストと結合テストの区別は、「どのような単位でテストするか?」というテスト粒度によるといえます。ただし、何を「単体(1つの単位)」とするかは、システム特性やテスト方針によりさまざまなので、一概に「単体テストはこのように実施すべし」とくくって定義できるものでもないでしょう。
例えば、「内部構造的な1つのまとまり(モジュール)」を単体と定義するのであれば、モジュールごとのテストが単体テストになるし、モジュールをつなぎ合わせて複数のモジュールにまたがって実現する連係処理をテストするのが結合テストになります。また、「画面」を単体と定義して、画面ごとの入力と出力を確認するのを単体テスト、パソコンにソフトウェアをインストールするときのように、連続して次々と進んでいく画面の連係動作を確認するのを結合テストと呼ぶこともできます。
そのため、単に「単体テスト」、「結合テスト」と表現したときのあいまいさをなくすために、多くの場合は「結合テスト」と独自の名称を設けたり、「結合テストフェーズ1」や「結合テストフェーズ2」のように、段階を分け細分化しています。
開発ベンダから提示されるスケジュール表に「単体テスト」や「結合テスト」のようなタスク名称が含まれていたら、そのプロジェクトでどのようなテストを予定しているのかを確認することをお勧めします。
【単体テスト(Unit Test)】 プログラムを構成する部品ごとに動作を確認するためのテスト。入出力を伴う処理であれば、「このような入力があるはずだ」というテストデータを基にして、「その場合はこのような処理・出力になるはずだ」という予想結果と対比させて検証(突き合わせ)を行っていく。
前の説明のように、何を「単体」と定義するかによって実施方法は異なるが、単体テストの場合、テスト用ソフトウェアによって自動化可能な部分が多い。自動とはいっても、テストデータとテスト結果(予想)をあらかじめ用意・確認しておくのは人間の役割。しかしながら、準備さえしておけば何度でも1クリックでテストを実施できるため、毎回人手でテストデータを入力して検証するのに比べて作業効率は高い。現在では、テスト用ソフトウェアを極力活用するのが主流になっている。
【結合テスト(Integration Test)】 部品間の接続(インターフェイス)を確認するためのテスト。例えば、画面からの入力内容を取得する「画面モジュール」と入力データをデータベースに保存する「データベースモジュール」があったとしよう。単体テストで、両方のモジュールが期待した通りに動作することは分かった。そこで、いざ接続して動作確認をしてみようとすると「年数の項目は整数で入力してください」というエラーメッセージが表示された。「何でだろう?」と検査してみると、画面では1年に満たない端数月は小数で入力するようになっていたが、データベースには整数しか保存できないようになっていた。
このように、「どのようなデータが入力されるのか」などの前提事項の認識がそろっていない(もしくは、技術者が仕様書から異なる解釈をしてしまう)ことは比較的よく起こる。
そこで、こうした面も含めて、連係するモジュールを接続(結合)して、水の流れのようにスムーズに処理が進んでいくことを確認するのである。
システムテストと運用テスト
単体テストと結合テストとを実施の順に並べていくと、(1)単体テスト>(2)結合テスト>(3)システムテスト>(4)運用テスト、といった流れとなるのが一般的です。
工程としてシステムテスト/運用テストまでたどり着けば、完成までいよいよあと一息というところになります。これらについても、具体的にどのようなテストを想定しているのか、開発ベンダに確認しておきましょう。
ここまでのキーワード
【システムテスト】 文字通り、システム全般に関するテストを指す。設計・製造という技術的工程に入る前の要件定義工程で具体化した「どの業務のために(または誰のために)、どのような実現内容が必要か」という実現要求内容(あるべき姿)に対応付けて全体の機能を確認していく。冒頭の会話で、赤井君が「操作トレーニングを兼ねて、実際の利用部門の代表者に手伝わせたい」といっていた通り、システムテストにおいては利用部門(ユーザー)が参加する場面を積極的に作り、実際の業務フローとの整合は取れているか、また既存のデータや帳票との連携に問題はないかなどを中心に入念な検証を行っていきたいところである。
システムテストまで進んでから仕様の確認・調整が発生するダメージは大きいが、業務との不整合を抱えたままで本番稼働を開始して、後々業務に混乱をきたした場合のダメージはもっと大きい。今どき、どの部門も本来業務で忙しいことが多いとは思うが、頼み込んででもテストに参加してもらうようにしよう。
【運用テスト】 システムテストを、さらに実際の利用場面に近づけて実施するテストと考えるとよいだろうか。実際の業務では、開発システムだけですべてが完結するばかりではなく、業務完了までの間には開発システムによって自動化される部分と、電話やFAXでの連絡や社内的な上司の承認または他システムを使用した操作など、システム以外の行動とが合わせて1つの業務を完了させることが多いのではないだろうか。
そこで、そのような実際の運用をシミュレーションしながら行っていくようなテストを実施しておこうというのが運用テストの趣旨となる。また、こうした利用部門のシミュレーションとは別に、システムのバックアップやリカバリー(バックアップからの復旧)方法の確認、利用部門と運用部門(システム部門など)の連係など幅広く確認しておくことも大切なことといえる。
システムテストや運用テストは、「総合テスト」のように表現されることも多い。
負荷テストとセキュリティテスト
さて、ここまでの各テストの実行により、期待した機能を網羅したシステムを手に入れることはできそうです。そこで、最後にシステムの特性に応じたテストを実施することになります。
今回、青木室長と赤井君が立ち上げようとしているシステムは「インターネットショップ」ですから、世界中のどこから、誰が、いつ利用するものなのか全く制約がありません。もしかすると、やがてこのインターネットショップがテレビのニュースで紹介され、その翌日に普段では考えられないほど大勢の人が一挙にインターネットショップにアクセスしてくるかもしれません。また、そのニュースを目にした悪者が個人情報を盗もうと、あの手この手でインターネットショップに対して攻撃を仕掛けてくるかもしれません。
そのような場合に遭遇したとしても、インターネットショップが予期せぬダウンや異常動作に至らないかどうかをあらかじめ確認しておくことは大切です。そのような場面に対応したテストとして、「負荷テスト」や「セキュリティテスト」と呼ばれるテストを実施しておくのです。
【負荷テスト】  通常、テスト工程は数人のエンジニアが各テスト項目を実施・検証する。ところが、一般ユーザー向けの大規模なインターネット・サイトともなると、場合によっては一気に数千人、数万人のユーザーがサイトにアクセスしてくることがある。そのような場合でも、システム自体がダウンせずに正しく動作を継続できるかどうかをテストの目的とするもので、開発したプログラム処理だけでなく、ネットワークやハードウェア全般にわたってテストを行うことになる。
現実と同じ頭数のテスト担当者を用意することはできないことが多いから、負荷テスト用ソフトウェアを使用してシミュレーションすることになる。負荷テスト用ソフトウェアには多くの種類があり、対象システムに合わせて選択していくことが可能である。
例えば、単に1秒間に大量のサイト・アクセスをするだけの機能のものから、画面からの入力内容の組み合わせをいろいろと変えて、あたかも複数のユーザーがアクセスしてきた状況をシミュレートして再現するような高機能なものもある。
【セキュリティテスト】  一般ユーザー向けのインターネット・サイトの場合は、世界のどこかにいる悪者から技術的な攻撃にさらされる危険に常時直面しているといえる。かつては、そのような攻撃ができるのは高度な技術を有する一部の者に限られていたが、今では、そうした悪意の者がいわば「攻撃用ソフトウェア」のようなものを開発・公開しているために、技術レベルの低い者でも容易に攻撃ができる状況にある。
セキュリティテストでは、システムがそのような攻撃を受けた際にダメージを負うような脆弱(ぜいじゃく)性を残していないかを確認することを目的とするテストである。脆弱性を招く原因となるサーバ設定やプログラム内容は公知となっているものが多く、そうした基本的な知識を持って、適切に作業が行われていれば(現時点で判明している脆弱性を利用した)問題は発生しにくい。
残念なことに、技術力不足や一時的のつもりであった暫定設定の残存などにより、セキュリティ・リスクが残っていることが十分あり得るので、どこまで厳密に実施するかの程度はともかく、セキュリティテスト自体はぜひとも実施しておきたい。
負荷テスト同様、セキュリティテストについても各種テスト用ソフトウェアが存在するものの高価なものが多い。
しかし、情報漏えいなどのセキュリティ事故が発生した際の信頼失墜は、場合によっては企業の存続にかかわることでもあるから、他社のこととして全く無視することはできないであろう。最近では、高度な技術を持つ技術者が実際のサイト攻撃者の手口をまねてサイトにアクセスし、脆弱性を診断するようなサービスも多くなっている。費用対効果を検討しながら、まずは現状把握から始めてみるのはいかがだろうか。
キーワードでわかるシステム開発の流れ:第9回 テストで重要なのは見極めること (2/3) - ITmedia エンタープライズ
