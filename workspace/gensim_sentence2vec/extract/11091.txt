 本連載ではツールやフレームワークの機能を最大限利用しつつ、保守、開発効率を意識したWebフォームアプリケーションを開発する方法を学んでいきます。第3回の今回は、エラー処理について学んでいきましょう。
エラーの種類 さて、単純にエラー処理と言っても、その種類によって対応方法が違ってきます。本記事では、エラーを次のように分類することとします。業務エラー 単体入力エラー  突合せエラー システムエラー それでは、それぞれのエラーについて詳しく説明していきましょう。業務エラー アプリケーション側で想定可能で、発生しても以後の処理に復帰できるようなエラーを、「業務エラー」と呼ぶこととします。業務エラーはさらにそのチェック方法によって、単体入力エラー、突合せエラーに分けることができます。[1] 単体入力エラー ユーザーがフォームに入力した値のみでチェックが可能なエラーを単体入力エラーと呼ぶこととします。例えば、必須項目が入力されていない、数字を入力すべき項目に数字以外が入力された、などです。 また、複数の項目を組み合わせてチェックするものについても、単体入力エラーに分類します。例えば、日付の前後関係が間違っている、ある項目を入力したときに必須となる項目が入力されていない、などです。[2] 突合せエラー 単体入力エラーではチェックできない、外部のデータと突き合わせる必要があるチェックについてのエラーを、突合せエラーと呼ぶこととします。例えば、入力した値が既に登録されている、マスターテーブルに存在しないコードが入力された、などです。 外部のデータはデータベースに限らず、他のWebサービス呼び出しや、ファイルアクセスなども含みます。システムエラー アプリケーション側で想定しておらず、発生したときには以後の処理には復帰できない致命的なエラーを、システムエラーと呼ぶこととします。例えば、データベースサーバーが応答しなかった、バグによる不正な動作、ハードウェアエラーなど、あらゆる想定外のエラーが含まれます。エラー処理の流れ エラーの種類が分かったところで、まずエラー処理の大まかな流れを理解しておきましょう。次の図を見てください。
基本的な決まり事を一言でいうと次のようになります。単体入力エラーチェックから順に行い、エラーを検出したらそこで処理を終了させる これはエラーがなかった時のみ次の段階に進むことで、値の妥当性を確保しつつ処理を進めていくためです。この決まり事を無視すると、処理に必要な値が入っているか、数値を期待している項目に数値以外が入っていないか、などのチェックを業務ロジックの中でも行わなくてはならず、無駄に複雑になってしまい、バグを生む温床になりますし、保守も大変です。 よく「出せるエラーは一度に全部出してほしい」という要望を受けることがあります。例えば、数字のみで構成されるコード値に対して、①妥当なコードかどうか、②マスターに存在するコードか、という2つのチェックを両方行いその結果を表示する、などです。 こういった要望についてですが、私は可能なら避けるべきと考えます。 なぜなら、「①妥当なコードか?」というのは単体入力チェックの範疇ですが、「②マスターに存在するコードか?」というのは突合せチェックの範疇であり、前述のとおり②を行うためには①のチェックをパスしているか判断する必要があるため、余計に複雑になってしまうためです。 また「名称表示ボタンをクリックしたら、入力したコードがマスターテーブルに存在するかチェックして、名称を表示したい」というような要望もたまにあります。 こういったケースでは「入力されたコードがマスターテーブルに必ず存在する」と想定してしまいがちですが、決してそんなことはありません。登録ボタンなどの「確定」系のボタンでも、同じようにマスターテーブルの存在チェックを行うようにしましょう。

