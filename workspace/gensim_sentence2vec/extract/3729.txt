 
EPL 言語の概要
複合イベント プロセッサ モジュールは、イベント表現、処理モデル、プログラミング インタフェース、および言語仕様という機能コンポーネントに分けることができます。
イベントは JavaBeans 規則に準拠する POJO として表現されます。イベント プロパティは POJO の getter メソッドを通じて公開されます。可能な場合は、EPL 文の実行結果も POJO として返されます。ただし、イベント ストリームが結合された場合など、型のないイベントが返される場合があります。この場合、Map コレクション インタフェースのインスタンスが返されます。
EPL 処理モデルは連続的です。文の制約を満たす着信イベントを受信すると結果がすぐに出力されます。出力時には、出力枠に入れられる新しいイベントの「挿入イベント」、および出力枠から出される古いイベントの「削除イベント」という 2 種類のイベントが生成されます。これらのいずれかまたは両方のイベントが発生すると、リスナにアタッチおよび通知されます。
着信イベントは、スライド枠またはバッチ枠で処理されます。スライド枠では、1 件の増分データに対して徐々に枠が変化してイベントが処理されます。これに対し、バッチ枠では別個のデータ チャンクに対して枠が変化してイベントが処理されます。枠のサイズは、保持されるイベントの最大数またはイベントが保持される最大時間によって定義されます。 
EPL プログラミング インタフェースでは、文を個別にコンパイルするか、URL を通じて一括でロードできます。文の繰り返し、取得、開始、および停止が可能です。リスナは文にアタッチされ、挿入イベントまたは削除イベントあるいはその両方が発生した場合に通知されます。
イベント処理言語は SELECT、FROM、WHERE、GROUP BY、HAVING および ORDER BY 句を使用する SQL に似た言語です。ストリームはデータ ソースとしてのテーブルに相当し、イベントはデータの基本単位としての行に相当します。イベントはデータで構成されるため、結合による相関、サブクエリによるフィルタ処理、グループ化による集約などの SQL の概念が効果的に利用されます。INSERT INTO 句は、下流処理が行われるイベントを他のストリームに転送する手段として作り直されています。JDBC を通じてアクセス可能な外部データは、ストリーム データで照会および結合されます。SQL には含まれない、イベント処理に固有の言語構造を提供する RETAIN、MATCHING、OUTPUT 句などの追加の句も使用できます。  
RETAIN 句は、本質的にはストリーム データに対する仮想枠を定義することで、クエリが実行されるデータ量に制約を付与します。データの範囲がテーブルで制限されるリレーショナル データベース システムとは異なり、イベント処理システムではクエリのデータをより動的に制限する代替手段が提供されます。
MATCHING 句は固有のパターンに一致するイベントのシーケンスを検出します。AND、OR、FOLLOWED BY などの時相演算子や論理演算子を使用することで、任意の複雑な式を通じてイベントの発生またはイベントの欠落の両方を検出できます。
OUTPUT 句は下流プロセッサの過負荷を回避するために文の実行結果を抑制します。結果的に生成された最初または最後のイベントの全体または一部が、時間ベースまたは行ベースのバッチで渡されます。
最後の節では、実際的なシナリオのもとで言語機能を例示するいくつかの使用例を示します。
イベント表現
イベント オブジェクト
イベントは、過去に発生したアクションまたは状態変更の不変レコードです。イベント オブジェクトの状態情報はイベント プロパティで取得されます。イベントは、POJO または java.util.Map を拡張する com.bea.wlevs.cep.event.MapEventObject のいずれかで表現されます。 
イベント処理言語 (EPL) の概要
