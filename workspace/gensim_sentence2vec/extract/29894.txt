現状分析の手順現状分析の手順は以前の記事で書きました。それを少し引用します。——————————————————————————問題解決の7ステップ問題解決他のための7ステップはまず大きく2つのステップに分けられます。 問題認識ステージ 課題対策ステージの2つ。さらに問題認識には2つのステップがあって 問題設定ステップ 問題把握ステップにわかれます。また、課題対策は5つのステップにわかれます。 課題設定ステップ 課題解決ステップ 総合評価ステップ 解決実行ステップ 結果評価ステップこれらを順番にやっていくことで問題が解決できるわけです。——————————————————————————今週は、問題解決の7ステップのうち、問題認識ステップについて焦点を当てます。上記の問題認識ステージでも書きましたが ・事実に焦点を当てる ・細心に分析するを徹底する必要があります。発生事実と非発生事実ここでいう「事実」とは、 ・起きていること ・起きていないことの2つを考える必要があります。つまり、 起きている原因を想定する その想定を裏付ける事実を集めるという事をやって原因が正しいかどうかを確認する必要があるのですが、人間は(多分みんな一緒だと思いますが、少なくとも私は)自分に都合のいい(仮説を証明しやすい)事実だけを集めてしまいます。そうすると、「だから、オレの考えは正しいんだ」と思ってしまって、実は他にある問題を誘発している根本原因を見落としてしまいがちになります。ですの、想定した原因や相矛盾するような事実も積極的に集めないと根本原因に辿りつけないのが普通です。例えば、製品A,B,Cを作っているとして、製品Aの電源基板が故障したとき、「だから電源基板を作っている協力会社の不良流出だ」と決めつけてしまうと、製品Bも同じメーカが作っているにもかかわらず問題が起きていないという事実から目をそらしてしまうことになるわけです。だから、類似の問題が他の所ではどうなのかを検証する必要があるわけ。ここにMECEという考え方が出てきます。「製品Aの電源基板が故障した」という事実に対して、「製品Bの電源基板は故障していない」という 起きていない事実を集めて、すべての情報を「もれなく、ダブりなく」集めることが必要なんですね。同じ事は時系列についても言えます。「今日問題が起きた」という発生事実に対して、「昨日までは起きてなかった」という非発生事実を探すわけです。そうすると、その2つの事実の違いと2つの発生地点の環境の違いを考えれば、起きている原因にたどり着きやすいんです。2つの事実を整理する以前の記事でも書いたように、速やかに、MECEに情報を集める事ができたら、ここから違いを考えます。この時に使う手法が  ・特性要因  ・変化点の2つ。特性要因図は「フィッシュボーンチャート(魚の骨)」として有名ですね。 問題が起きた製品と問題が起きなかった製品の違いに着目する 昨日と今日の違いに着目すると問題の根本原因にたどり着きやすいです。製品であれば、私がよく使うのはこのフィッシュボーンチャート。業務のプロセスであれば、TOCの現状問題構造ツリーをよく使います。TOC手法に関して書きだすとすごく長くなるので、参考図書と私がこれを気に入っている点を上げておいて、今日は終わりにしたいと思います。アマゾンで見るゴールドラット博士の論理思考プロセス—TOCで最強の会社を創り出せ!楽天で見る
をどうぞ。どちらも私は名作だと思ってます。良いことが重なると悪いことが起きるこの思考プロセスで目からウロコが落ちたのは、 ・問題は単独では発生しない ・問題は2つの原因を持っているというところ。これからすっかりTOCの信者になりました。問題は単独では発生しない問題はある問題を発生させるような行為によって引き起こされます。しかしながら、通常、その行為は、何か「良い結果を得ようとして行った」行為です。もともと悪意を持って何かをする場合は別物ですが、基本はその会社の同僚や製品に良い影響を出そうとして何かをするわけです。それによって問題が引き起こされるというのは、その行為自体に問題があるわけではなく、その行為を引き起こす何かのトリガがあります。このトリガは仕事をしている人たちの何らかの共通認識であったり、会社組織としての要求であったりするわけです。つまり、その根本的な原因になっている「もの」は、その他の同様の行為を引き起こしている事になります。それによって、ひとつの原因から複数の現象が発生し、その複数の現象がまた別の現象を引き起こして、、、、と繰り返されて、目に見える問題として発生することになるので、異なる現象の問題が同時多発的に発生することになります。…文章で説明するとわかりにくいですね。ぜひ一度、現状問題構造ツリーのサンプルを見てみてください。非常に簡単なサンプルがこちらにあります。問題は2つの原因を持っているこのTOCを学ぶ前までは、すごく単純に 原因  問題のような図式で考えてました。つまり、ある問題にはたった一つの原因がある。プログラムにバグを引き起こすのは、		unsigned int		c;と宣言するところを		int		c;と書いてしまった。という単純な構造。ところが、多くの業務をする上でのプロセスというのは、非常に複雑なので、このプログラムのような単純な要因になるものではありません。その時に、 ある事象とある行為が重なると問題が起きる ある行為とある行為が重なると問題が起きるという考え方が、TOCにはあります。例えば、「出張報告書の提出が遅い」という問題は、  出張中に緊急案件メールが処理されていない  出張報告書の提出は優先順位が高くないという2つの問題があるために、出張後の出社時には、メール処理を優先してしまって出張報告書が送れるという悪い現象が起きるわけですね。この場合、出張報告書を翌日提出を義務付ける指示を上司が出したとしても、「じゃぁ、今のプロジェクトに関する緊急案件は放置していいんですね?」といわれると上司としては黙らざるを得ません。逆に緊急案件のメールがないとすれば、出張報告書を書く余裕があり、報告書の翌日提出も可能なわけです。しかし、出張中はあまり頻繁にメールは見ませんので、溜まったメールの中に緊急案件がないというのは誰も言えないわけですよね。※それで、どちらも対策できずに普通は、「頑張ろうね」みたいにお茶を濁すことになる…。つまり、2つの原因が同時に起きなければ、問題の現象は起きないという構造になります。実際の会社の業務プロセスでは、これが3つ4つと要因が重なったり、同時に起きなくても個別の要因で問題が起きたり、色々なケースやパターンが発生して非常に複雑なわけです。これを単純化して「見える化」できるのが、この現状問題構造ツリー(略してCRTといいます)です。これは非常に強力なツリーなので、もしまだ使いこなせないかたは、講習会に参加するなど練習の場を踏むといいと思います。オススメ。
問題認識の手法4—現状分析2: サラヒン 〜 サラリーマンの仕事のヒント
