プラグイン編を(ひとまず)終了して、
つぎはテスト編。
まずはテスト駆動開発についてのお勉強から。
gihyo.jp「［動画で解説］和田卓人のテスト駆動開発講座」
うーん、すごいボリューム。
まけない。。
第2回「テスト駆動開発」とは何か?
テスト駆動開発の3ステップ
ステップ1:これから書く機能に対するテストを1つ書き,テストが失敗することを確認する(レッド)
ステップ2:ステップ1のテストを通す最低限のコードを実装する(グリーン)
ステップ3:リファクタリングを行う(リファクタリング)
第3回「テスト」という言葉について
「テスト」の区分
Developer Test:開発者が行う。開発促進・設計を目的としたテスト。
Customer Test:クライアントが行う。進捗管理・要件確認を目的としたテスト。
QA Test:品質保証チーム(開発者自身の場合もあり)が行う。品質管理を目的としたテスト。
テスト駆動開発のテストとは、このうちのDeveloper Test。
第4回 ナントカテスト
テストっていろいろあるけど、そういう区分の視点についての話。
前回の3分類は、「目的別」の分類。
受け入れテスト:クライアントの要望を満たしてるかどうか。Customer Test
単体/ユニットテスト:開発の動作確認。Developer Test
結合/機能テスト:機能単位での動作確認。Developer Test
結合/機能テストなんかはCustomer Testっぽい気もするけど、
その機能が動いたうえでクライアントの要望を満たせるかどうかが
Customer Testなので違うそうな(もちろん公式な定義はないけど)
QAは全然別視点で、非機能要件を確認するテスト。
他2つが「したい」なのに対し、「であるべき」「でないべき」っていうテスト。
第5回 進捗管理としてのテスト
今回はウォーターフォール型じゃなくて繰り返し型の開発を対象としてますよって話。
第6回 「写経」でTDDの手順や書き方を学ぶ
最初は手順をそのまま写経して覚えるとよい。
お手本によさそうなのが以下2つ。
Kent Beck「テスト駆動開発入門」
WEB+DB PRESS Vol.35「実演!テスト駆動開発」
WEB+DB PRESS 総集編、やっぱり買おっかなー。。
第7回 「経験者」からTDDのリズムを学ぶ
写経のほかにいい方法は、
セミナー
レビュー
ペアプログラミング
動画
なにがいいかっていうと、TDDのリズムを感じられるところ。
これがなかなか大事らしい。
ペアプログラミングとかしてみたいなー。。
第8回 テスト駆動開発の「サイクル」
テスト駆動開発のリズムとサイクル。今回はサイクルについて。
プログラムを1行も書いてない段階で、
End-Endの受け入れテストを書く(ブラックボックステスト)。
当然この時点ではテストが通らずRedになるけど、それでオッケー。
第9回 テスト駆動開発の「サイクル」
サイクルの話つづき。
受け入れテストを書いたら、つぎはそれを通すためにどうするか考える。
こんな機能を実装しないとっていうToDoを洗い出してテストリストを作成。
つぎにそのリストに対するテストコードを書く。
大きな項目から徐々に粒度を小さくしていく。
第10回 テストの最小単位は不安
実際じぶんでテストを書くときにどれくらいの粒度で書けばいいのか。
「不安」を最小単位にして、自信/経験のあるところは大きく、ないところは細かくテストを書く。
「学習テスト」っていう考え方もいいな。
これからコードを書く際に,自分が使おうと思っている技術,たとえば未経験のライブラリの使い方に対して不安がある場合に,それをテストの形で書いて技術検証することを「学習テスト」と呼びます。
テストコードとして検証して、リファクタリングしたコードを実コードに還元する。
こんな習慣がつくとすごいいいですな。。
ちょうど半分きたのでいったん今日はここまで。
写経はちょっと後回しにして、とりあえずTDDの実演動画みてみるかなー
テスト駆動開発について勉強した。① - NOT SO BAD
