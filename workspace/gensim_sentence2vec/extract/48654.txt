皆さんは、大部分の開発者がコード品質を気にするようになる以前のことを覚えていますか。当時は、巧妙に配置されたmain() メソッドはアジャイルであり、またテスト用に充分とも思われていました。その頃から、だいぶ時間が経ちました。私は、今や自動テストが品質重視のコード開発における必須の一面となっていることは素晴らしいと思っています。ただし私が素晴らしいと思っているのは、それだけではありません。今やJava™開発者には、コード・メトリックスや静的分析その他、コード品質を測るためのツールが山のようにあります。さらに、リファクタリングさえも、一連のパターンの中にカテゴリー分けできるのです。
こうした新しいツールによって、コード品質を確保することが以前よりもずっと容易になりました。しかし私達は、こうしたツールの使い方を知っている必要があります。このシリーズでは、コード品質確保のための詳細に焦点を当てることにします。こうした詳細は、必ずしも明快ではない場合が多いようです。また、様々なツールや手法を紹介する他、次のような点についても説明するつもりです。最も品質に影響を与えるコード部分の定義方法と、そうした部分の計測方法品質保証の目標を設定するための方法と、それに従って開発計画を立てるための方法自分の必要に合ったコード品質ツールや手法を決定するための方法コード品質確保を、開発作業の一部として『初期段階で、頻繁に』苦労なく効果的に行えるようにするための、ベスト・プラクティスの実装方法(そしてお粗末なプラクティスを排除するための方法)今回はまず、最も一般的であり、また開発者が品質確保のためのツールキットに簡単に追加できるものとして、テスト・カバレッジの測定について取り上げることにします。偽の金塊にご注意夜のうちにビルドが終わり、皆が冷水器のそばで談笑しています。開発者も、彼らの監督者も、幾つかのクラスが非常によくテストされており、テスト・カバレッジが90%台にも達していることを知ると、NFL(National Football League)よろしく肩をたたき合っています。チームのメンバーは、誰も自信満々です。欠陥が遠い昔の思い出となり、weakやinferiorの責任となるにつれ、「考えずにリファクタリングしてしまえ」という声が遠くまで聞こえるようになります。しかし、小さな声で、それに反論する声が聞こえてきます。『紳士淑女の皆さん! カバレッジ・レポートに騙されてはいけません!』私を悪く取らないでください。テスト・カバレッジ・ツールを使うことは、何も悪いことではありません。ユニット・テストに追加すべきものとして、テスト・カバレッジ・ツールは偉大なものです。しかし重要なことは、それを手に入れた後で、どのように情報を組み立てるか、なのです。ところが一部の開発チームは、そこで最初の誤りをおかしてしまうのです。カバレッジ率が高いということは、単に大量のコードが実行された、ということにすぎません。コードが『充分に』実行されたことにはならないのです。皆さんがコード品質に注目するのであれば、テスト・カバレッジ・ツールがどのように動作するのか、逆にうまく動作しないのはどういう場合かを、よく理解する必要があります。そうすれば、単にカバレッジ率が高いことに満足することなく、こうしたツールを利用して貴重な情報を入手できるはずです。
上に戻るカバレッジの測定一般的に言ってテスト・カバレッジ・ツールは、既存のユニット・テスト・プロセスの中に容易に追加することができ、結果も手軽に利用できます。入手可能なツールの1つを単純にダウンロードし、AntやMavenのビルド・スクリプトを少し修正すれば、皆さんの同僚が冷水器のそばで話題にできるような、『テスト・カバレッジ・レポート』という新種のレポートが手に入るのです。fooやbarなどのパッケージが、非常に『高い』カバレッジを示すのを見ると心が安らぎます。そして、少なくともコードの一部は「バグ無し」だと保証されていると信じてしまい、安心したくなるものです。しかし、それは大きな間違いなのです。カバレッジの測定方法には様々なタイプがありますが、大部分のツールは、『ライン・カバレッジ』(『ステートメント・カバレッジ』とも言われます)に焦点を当てています。また、一部のツールは『分岐カバレッジ』もレポートします。テスト・カバレッジの測定は、テスト・ハーネスを使ってコード・ベースを実行し、データ(テスト・プロセスが、そのライフタイム中に「触ったことのある」コードに対応するデータ)をキャプチャーすることによって行われます。その後で、こうしたデータが合成され、カバレッジ・レポートが作成されます。Javaの場合では、テスト・ハーネスは普通JUnitであり、一般的なカバレッジ・ツールとしては、CoberturaやEmma、Cloverなど、幾つかがあります。『ライン・カバレッジ』は単純に、ある特定なコード・ラインが実行されたことを示します。あるメソッドの長さが10ラインであり、そのうちの8ラインがテスト実行で実行されたとすると、そのメソッドのライン・カバレッジは80%ということになります。このプロセスは、アグリゲート・レベルでも行われます。あるクラスが100ラインから成り、そのうち45ラインが実行されたとすると、このクラスのライン・カバレッジは45%です。同様に、コード・ベースが、コメントではない10,000ラインから成り、ある特定なテスト実行で3,500ラインが実行されたとすると、そのコード・ベースのライン・カバレッジは35%ということになります。『分岐カバレッジ』をレポートするツールは、判断ポイント(論理的なANDやORを含む条件ブロックなど)のカバレッジを測ろうとします。ライン・カバレッジの場合と同じく、あるメソッドに2つの分岐があり、テストで両方がカバーされたとすると、そのメソッドの分岐カバレッジは100%である、と言うことができます。問題は、こうした測定が、どの程度有用なのか、という点です。つまり、こうした情報は容易に入手できますが、それをどのように組み立てるべきかの判断は皆さん次第なのです。この先の幾つかの例を見ると、私の言う要点が明確になるでしょう。
コード品質を追求する: カバレッジ・レポートに騙されないために
