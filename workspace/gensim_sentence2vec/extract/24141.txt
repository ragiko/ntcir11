Conventionally and generally, a plurality of computers access a database provided in a server.According to the inventions, generally-called full-fledged 菟arallel DB editusing computers permanently holding duplicate DBs is presented.Computers exchange edit information on the duplicate DBs, and the duplicate DBs of the computers synchronize with one another.Each of all the relevant PCs takes out the local-edit records in the other PCs in a unique order (such as the order of arrival at the server) and updates the local original DB thereof.The edit information including the same contents is processed in the same order with the same logic, and then the local original DBs are updated.Therefore, the resultant local original DBs of the PCs also synchronize with one another.The synchronization is established not along with real time axis but along the common time axis which is the order of edit records.As a result, 都ubstantially on-line operationin which edit records are frequently taken in and updated and 都ubstantially off-line operationinvolving long update cycles can be mixedly carried out.
データベースの編集方法であって、 A how to edit the database,  （Ａ）データベースの全部または一部分の複製を保持し、 Holds a copy of all or part of the (A) database,  （Ｂ）該複製に対して行った編集の編集記録を他の装置に送信する工程と、 A step of transmitting to another device to edit records edits made to (B) said plurality Ltd.,  （Ｃ）該複製に対する編集記録を他の装置から受信する工程と、 A step of receiving from another device a change log for (C) made plurality,  （Ｄ）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録を用いてデータベースの該複製を更新する、一連の手順を実行する工程、 The order specified in (D) change log, or in the order specified externally step extracts the change log to update the plurality made database with a knitting collecting recording, executes the series of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベースの編集装置であって、 An editing apparatus for the database,  （Ａ）データベースの全部または一部分の複製を保持する手段と、 Means for holding a copy of all or part of the (A) database,  （Ｂ）該複製に対して行った編集の編集記録を他の装置に送信する手段と、 Means for transmitting to another device to edit records edits made to (B) said plurality Ltd.,  （Ｃ）該複製に対する編集記録を他の装置から受信する手段と、 Means for receiving from another device a change log for (C) made plurality,  （Ｄ）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録を用いてデータベースの該複製を更新する、一連の手順を実行する手段、 The order specified in (D) change log, or in the order given from an external means to remove the change log to update the plurality made database with a knitting collecting recording, executes the series of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベースの編集方法であって、 A how to edit the database,  データベースの編集方法であって、 A how to edit the database,  （Ａ）データベースの全部または一部分の複製を保持し、 Holds a copy of all or part of the (A) database,  （Ｂ）該複製に対して行った編集の編集記録を他の装置に送信する工程と、 A step of transmitting to another device to edit records edits made to (B) said plurality Ltd.,  （Ｃ）該複製に対する編集記録を他の装置から受信する工程と、 A step of receiving from another device a change log for (C) made plurality,  （Ｄ１）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録の有効性の判定を行い、有効と判定された該編集記録を用いてデータベースの該複製を更新する、一連の手順を実行する工程、 The order specified in (D1) change log, or in the order specified from the outside, take out the change log, make a determination of the effectiveness of knitting collecting records of the database using a knitting collecting records that have been determined as valid process to run to update the plurality made a series of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベースの編集方法であって、 A how to edit the database,  （Ａ）データベースの全部または一部分の複製を保持し、 Holds a copy of all or part of the (A) database,  （Ｂ１）該複製に対して行った編集の編集記録に、この編集に影響を与える情報の範囲を示した「不変確認範囲」を対応させ、該編集記録を他の装置に送信する工程と、 A step to correspond to the change log of the editing made to (B1) plurality Ltd., showed a range of information that affect this edit "invariant confirmation Range" is transmitted to another apparatus knitting collecting records,  （Ｃ１）該複製に対する編集記録と、該編集記録に対応する不変確認範囲を、他の装置から受信する工程と、 A step of receiving from another device, editing and recording on (C1) plurality made invariant confirmation range corresponding to the knitting collector recording,  （Ｄ２）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録に対応した「不変確認範囲」を用いて該編集記録の有効性の判定を行い、有効と判定された該編集記録を用いてデータベースの該複製を更新する、一連の手順を実行する工程、 The order specified in (D2) change log, or in the order specified from the outside, take out the change log, make a determination of the effectiveness of knitting collecting recorded using corresponding to knitting collecting scoring "invariant confirmation Range" a step of executing update the plurality of database made using a knitting collecting records that have been determined as valid, the sequence of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベースの編集方法であって、 A how to edit the database,  （Ａ）データベースの全部または一部分の複製を保持し、 Holds a copy of all or part of the (A) database,  （Ｂ２）該複製に対して行った編集の編集記録に、該複製に指定されたバージョンを対応させ、該編集記録を他の装置に送信する工程と、 Editing recording editing made to (B2) manufactured by plurality, a step to correspond to the specified version of the plurality Ltd., transmitted to another apparatus knitting collecting records,  （Ｃ２）該複製に対する編集記録と、該記録に対応するバージョンを、他の装置から受信する工程と、 Comprising the steps of: receiving from other devices, editing and recording on (C2) plurality made, the version that corresponds to the 該記 recording,  （Ｄ３）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録に対応したバージョンを用いて該編集記録の有効性の判定を行い、有効と判定された該編集記録を用いてデータベースの該複製を更新しバージョンを更新する、一連の手順を実行する工程、 The order specified in (D3) change log, or in the order specified from the outside, take out the change log, a determination is made of the effectiveness of knitting collecting recorded using a version corresponding to the knitting collector recording, determination effective process to run to update the version to update the plurality of database made using knitting record collection that is, a series of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベースの編集方法であって、 A how to edit the database,  （Ａ）データベースの全部または一部分の複製を保持し、 Holds a copy of all or part of the (A) database,  （Ｂ３）該複製に対して行った編集の編集記録に、該複製の一部の情報又は情報の組み合わせに指定されているバージョンを対応させ、該編集記録を他の装置に送信する工程と、 Editing recording editing made to (B3) said plurality manufactured, a process is allowed to correspond the version specified in the combination of the information or the information of a portion of said plurality Ltd., transmitted to another apparatus knitting collecting records,  （Ｃ２）該複製に対する編集記録と、該記録に対応するバージョンを、他の装置から受信する工程と、 Comprising the steps of: receiving from other devices, editing and recording on (C2) plurality made, the version that corresponds to the 該記 recording,  （Ｄ３）編集記録に指定されている順番、又は外部から指定された順番で、編集記録を取り出し、該編集記録に対応したバージョンを用いて該編集記録の有効性の判定を行い、有効と判定された該編集記録を用いてデータベースの該複製を更新しバージョンを更新する、一連の手順を実行する工程、 The order specified in (D3) change log, or in the order specified from the outside, take out the change log, a determination is made of the effectiveness of knitting collecting recorded using a version corresponding to the knitting collector recording, determination effective process to run to update the version to update the plurality of database made using knitting record collection that is, a series of steps,  を有する事を特徴とする方法。 Method characterized in that it has a. 
データベース並行編集方式 Database concurrent editing system  本発明はデータベース（以下「ＤＢ」）に対する並行編集（以下「並行ＤＢ編集」）を実現するものである。 The present invention is to realize ("Concurrent DB Edit" hereinafter) concurrent edits to the database ("DB" hereinafter).  ＤＢの代表的な運用形態として以下が挙げられる。 Include the following operational form typical of DB.  「単独ＤＢアクセス」 "Single DB access"  ひとつの計算機のみでＤＢを操作する運用。 Operation to manipulate the DB with only one computer. ＤＢに対する編集が行えるのはこの計算機のみであるので、アクセスの競合防止は容易であるが、複数の計算機がＤＢにアクセスする運用には適さない。 The can perform edits to the DB, so that only the computer, preventing contention of the access is easy, but it is not suitable for operating a plurality of computers to access the DB.  「サーバーＤＢアクセス」 "Server DB access"  サーバー計算機（以下「サーバー」）がＤＢを管理し、端末計算機（以下「ＰＣ」）はサーバーにアクセスしサーバーの処理を通じてＤＢにアクセスする運用。 To manage the DB ("server" below) server computer, operation to access the DB through the processing of server to access the terminal server computer ("PC" below). ＤＢに直接アクセスするのはひとつのＰＣのみであるので、アクセスの競合防止は容易で、ベシミステックロックカーソル（非特許文献１）やトランザクションのロック（非特許文献２）が用いられている。 The direct access to DB is because there is only PC one contention preventing access is easy, lock transaction besylate miss Tech lock or cursor (Non-Patent Document 1) (Non-Patent Document 2) is used.  筆者が指揮し開発したシステム「パワーアップ新聞販売」では閲覧のみに対して並行アクセスを許可している。 It has allowed concurrent access to only browsing system, which was developed author conducted in "Power-up newspaper sales". しかし、編集前には「編集権」を取得する事とし、同時にはひとつのＰＣしか編集出来ない様にしている。 However, with that you get a "editorial control" in the edit before, at the same time has to like you can not only edit one PC. これもロックである。 This is also a lock.  しかし、サーバーとの通信が不可能な状況ではデータへのアクセスは出来ないし、ロックの取得や返却も出来ない。 However, it is not possible to access to the data in the context of communication with the server is not possible, or it can also return and obtain a lock. 移動体では通信不可能なケースが頻発するので、ＤＢ操作には大きな制限となる。 Case impossible because the communication is frequently a mobile, it is a big limit to the DB operation. 災害時の救援、医療、金融などいわゆるミッションクリティカルな業務では通信不可能な状況下でも業務遂行が求められるが、これに応える事は出来ない。 Relief in the event of a disaster, is required to carry out business even in situations that can not communicate in the so-called business mission-critical medical care, and finance, but it is not possible to respond to this. 例え通信が確保出来ても、劣悪な通信環境では再送などによりサーバーの応答が極端に長くなり、実用とならない場合もある。 Communication also can be secured example, the response of the server is extremely long due to retransmission in poor communication environment, there may not be a practical use.  作業用の複製を作成して処理を行うキャシュの技術で、処理や通信の効率化を図る試みも行われている。 Attempts in the art of cache for processing by creating a duplicate of the work, improve the efficiency of communication and processing is also performed. マイクロソフトのADO.NETは、ＰＣに当面の作業に必要なデータをサーバーからコピーし、サーバーとの接続を切断してから編集作業を行う。 ADO.NET Microsoft, perform editing copy from the server data required to complete the task at hand, and then disconnect from the server to the PC. 編集後に改めてサーバーと接続し編集内容をサーバーに送る。 Is sent to the server your edits is connected to the server again after editing. もし編集対象の情報が既に他の端末計算機から変更されていれば、後からの（この）編集を無効にする。 Information for editing if they have changed from a terminal other computers already if you want to disable the later (this) edit. 。 . 「ロックが結果として失敗した場合にはその編集を無効とする」と考えれば、編集ロックの一種とも言える。 If you think the "null and void the edit if the lock fails as a result", it can be said also as a kind of edit lock. これは「オプティミスティック同時実行制御」（非特許文献３および非特許文献４）と呼ばれている。 This is referred to as "optimistic concurrency control" (non-patent literature and 4 Non-Patent Document 3). しかし、時として以下に示す不都合が生じる事がある。 However, there is a disadvantage that described below sometimes occur.  （１）編集毎にコピーを作成するので、そのコピー処理と通信がオーバーヘッドとなる。 It will create a copy (1) editing each communicate with the copy processing is overhead. （非特許文献１のp19）これを少なくするには、コピーの範囲を制限する必要があるが、これにはアプリケーションが対象とする情報の構造を熟知する必要がある。 To reduce this (p19 in Non-Patent Document 1), it is necessary to limit the scope of the copy, it is necessary to be familiar with the structure of the information that the application is intended for this.  （２）キャシュの情報がいつまで有効かの推定が困難である。 Estimated time to information (2) cache is valid is difficult. コピー能率優先でキャシュ量を少なくするほど、次の編集では使えない可能性が高い。 Enough to reduce the amount of cash in the copy efficiency priority, possibility which can not be used in the next edit is high. 「オプティミスティック同時実行制御」では、一カ所でも変更されていれば無効となるので、キャシュ量を大きくするのも問題である。 In the "optimistic concurrency control", since the invalid one place even if they have changed, to increase the amount of cash it is also a problem.  （３）あるＰＣが過去に操作（入力、修正、削除）した情報が他のＰＣの操作により変更（削除、再修正、再入力）された事を検出するのは困難である。 (3) to detect that the (Delete, re-fix, re-enter) has been changed by the operation of the PC of other information (input, modify, and delete) PC that has operated in the past, it is difficult. この問題は「サーバーＤＢアクセス」にも「キャシュ」にも共通する問題である。 This problem is a problem common to "Server DB access" but also the "cache." このＰＣによる編集の有効無効の判定結果は、アップ時に判明するが、それ以前に入力され一度は有効と判定された情報が変更されたのを迅速に把握するのは困難である。 The determination result of the effective invalidation of editing by the PC, turn out up time, once to quickly grasp information determined as valid the address is changed, it is difficult inputted previously.  その他の調査結果を以下に示す。 I is shown in the following findings of the other. 非特許文献５は、ファイルのキャシュに関する発明で、編集の衝突（本願での競合）を検出した場合は単純に編集を拒否（非特許文献５の７頁の右下から１０行目）し記録を作成する。 Non-Patent Document 5, and recorded (line 10 from the bottom right of the page 7 of Non-Patent Document 5) refused to simply edit it If your invention relates to cache the file, it is detected (contention on the present application) collision of editing I want to create. 特許文献１は、サーバーがＤＢ編集の衝突を検出すると、正しく更新されたサーバーのＤＢを送り込む（「解決手段」および３６段）。 When the server detects a collision of DB editing, Patent Document 1, (36 stage "Solving means") feeding the DB server of the updated correctly. 特許文献２では更新時刻が後の更新を有効とし、特許文献１では更新時刻が先の更新を有効としている。 Update time is in effect the update of your Patent Document 2, the update time is associated with an update of the destination in Patent Document 1. いずれも、上記の問題を解決するものでは無い。 Both, not intended to solve the above problem.  特許文献３はデータベースの同期を起動する条件に関する発明であり、同期の方法については「更新情報を互いに通知し合って同期」と言う一般的な同期の概念を示しているにすぎない。 This is the invention relates to a condition that invokes the database synchronization, Patent Document 3 merely illustrates the concept of the general synchronization to say "sync with each other to notice each other updated information" for information on how to sync.  特許文献４は、編集の競合が起きた際に「全ての更新データを保持する」ことを目的とした発明である。 Patent Document 4 is an invention that aims to "hold all updated data" that when the editing conflict occurs. 競合が無いときにのみ原本を更新するのであり、本発明とは目的も内容も異なる。 It is of updating the original only when there is no conflict, the contents and purpose are different from the present invention. 特許文献５、特許文献６、特許文献７、特特許文献８、特許文献９についても調査したが、いずれも本発明とは異なる。 Was investigated Patent Document 5, Patent Document 6, Patent Document 7, Patent Document JP-8, also Patent Document 9, both different from the present invention.  特開平９－９１１８４号広報 Publication No. 9-91184 JP  特開２００４－１３８６７号広報 Patent Publication No. 2004-13867  特開２００４－８６８００号広報 Patent Publication No. 2004-86800  特開２００６－２８４９９８号広報 Patent Publication No. 2006-284998  特開平１１－１６１５３５号公報 11-161535 JP  特表２００５－５０３６０６号公報 2005-503606 JP table  特表２００５－５０８０５０号公報 2005-508050 JP table  特開平８－１６４４７号公報 8-16447 JP  特表２０００－５０１５３２号公報 2000-501532 JP table  William R. Vaughn, 株トップスタジオ訳、伊藤由紀子監修、Windows （登録商標）データベースプログラミング ADO.NET専修講座 VB.NET 編、2003年８月４日初版発行、翔泳社 超図解ＳＱＬハンドブック、Ｃ＆Ｒ研究所、２００５年８月１２日初版発行 「ADO.NET におけるデータ同時実行制御の概要」、2007年１月、MSDNサブスクリプションライブラリー（msdn subscriptions Library）、ディスクファイル（URL:ms-help://MS.MSDNQTR.v80.ja/MS.MSDN.v80/MS.VisualStudio.v80.ja/dv_raddata/html/d5293098-4a88-4110-abd2-34d9e6661664.htm） 「チュートリアル : 同時実行例外の処理」、2007年１月、MSDNサブスクリプションライブラリー（msdn subscriptions Library）、ディスクファイル（URL: ms-help://MS.MSDNQTR.v80.ja/MS.MSDN.v80/MS.VisualStudio.v80.ja/dv_raddata/html/73ee9759-0a90-48a9-bf7b-9d6fc17bff93.htm） 「世界規模分散ファイルシステムSKINNY 」、情報処理学会研究報告, 95-OS-70, (学術刊行物 情処研報 Vol. 95, No.79 ISSN 0919-6072 William R. Vaughn, share top studio reason, Yukiko Ito supervision, Windows (registered trademark) database programming ADO.NET vocational course VB.NET Edition, August 4 edition issued in 2003, Shoeisha ultra-illustrated handbook SQL, C & R Research , "Introduction to Data Concurrency in ADO.NET" August 12 First edition issued in 2005, in January 2007, MSDN subscription library (msdn subscriptions Library), disk file (URL: ms-help :/ / MS .MSDNQTR.v80.ja/MS.MSDN.v80/MS.VisualStudio.v80.ja/dv_raddata/html/d5293098-4a88-4110-abd2-34d9e6661664.htm) "Tutorial: Handling a Concurrency Exception", 2007 1 month, MSDN subscription library (msdn subscriptions Library), disk file (URL: ms-help :/ / MS.MSDNQTR.v80.ja/MS.MSDN.v80/MS.VisualStudio.v80.ja/dv_raddata/html / 73ee9759-0a90-48a9-bf7b-9d6fc17bff93.htm) "world-scale distributed file system SKINNY", Technical Report of IPSJ, 95-OS-70, (academic publications IPSJ SIG Report Vol. 95, No.79 ISSN 0919 -6072  本格的な並行ＤＢアクセスを明らかにし、キャシュを前提とした従来の並行ＤＢ編集の問題を解決する。 To clarify the concurrent DB access full-fledged, to solve the problem of parallel editing DB of conventional assumes cache.  本発明を以下の例を用いて説明する。 Will be described with reference to the following examples of the present invention.  （１）  準備複数のＰＣに、原本ＤＢ（以下「グローバル原本ＤＢ」）の初期状態の複製ＤＢ（以下「ローカル原本ＤＢ」）を置く。 To PC (1) prepare multiple, I put a copy of the initial DB state ("local original DB" or less) original DB ("global original DB" below). このローカル原本ＤＢには初期のバージョン、つまり更新の順番を識別する順序数、を設定する事が出来る。 The initial version, that can be used to set the order number, which identifies the order of the updates to this local original DB. バージョンを用いて編集の有効性を判定が可能である。 Determination is possible the effectiveness of the editing using the version.  （２）ローカル編集各ＰＣはそのローカル原本ＤＢに対するローカルな編集を行う。 (2) local editing each PC to edit a local for the local original DB. この編集の前にローカル原本ＤＢの作業用の複製を作成し、編集はこの複製に対して行う。 Create a copy of the work of local original DB before this edit, to do for this replication Edit. また、編集時にはその編集内容を記録した「編集記録」を作成する。 In addition, I want to create recording the edits the "Edit record" when editing. この編集記録には少なくとも「編集内容」が記録されるが、これに加え「編集バージョン」などを記録しても良い。 "Compilation" is recorded at least in the editing recording, but it may be recorded and "Edit Version" is added thereto.  「編集内容」はどの情報をどの様に変更したか、どの情報を追加したか、どの情報を削除したか、などの一般的な編集内容である。 It is edits general you would change like any information which, did then add any information, such as, or delete the information which is "Edit content". 「編集バージョン」は編集対象のローカル原本ＤＢのバージョン、厳密に言えば、編集対象の作業ＤＢの複製元となったローカル原本ＤＢのバージョン、である。 Version of the original local DB for editing, to be exact, "Edit Version" is a version of the original local DB which became the source of the work DB for editing.  （３）サーバーへの編集記録の送信各ＰＣは「編集記録」をサーバーに送信する。 Submit each PC editing of records to (3) server to send to the server the "Edit record". 「編集記録」と「編集バージョン」を分けて記録している場合には、「編集記録」との対応を明示して「編集バージョン」も送信する。 If it is recorded separately from the "Edit record" to "Edit Version", also send a "Edit Version" to express the correspondence between "change log". なお、「編集記録」の中に「編集バージョン」を記録する運用が、簡単で現実的と思われる。 In addition, I suspect operation to record the "Edit Version" is a simple and realistic in the "Edit record".  （４）サーバーによる編集記録の受信サーバーは、ＰＣから到着した編集記録を、その到着の順番と共に記録しておく。 Receiving server editing recording by (4) server, keep a record with the order of its arrival, the change log that arrived from your PC.  （５）サーバーからの編集記録の受信ＰＣはサーバーに対して、未受信の編集記録の送信を要求し、これらの編集記録、その（サーバーへの到着の）順番を受信する。 To the server, to request transmission of editing records not received, edit these records, reception of PC editing records (5) server receives the order (of arrival to the server). 編集記録に編集バージョンが指定されていれば、これも受信する。 Edited version if specified in the edit recording, which also received.  （６）ローカル原本ＤＢの更新ＰＣは指定された順番で編集記録を取り出し、その有効性を判定し、その内容に基づき、「ローカル原本ＤＢ」の更新を試みる。 Update PC (6) local original DB removed editing recorded in the order specified, determines its effectiveness, based on its contents, to attempt to update the "local original DB." バージョンが設定されている場合はローカル原本ＤＢのバージョンを更新する。 to update the version of the original local DB if the version is set.  全てのＰＣの初期のローカル原本ＤＢが同じで、各ＰＣにおけるローカルな編集の編集記録を、サーバーへの到着順で取り出し、ローカル原本ＤＢを更新する。 Local original DB early PC's all the same, and the product was taken out of the order of arrival to the server, edit the record of editing in each local PC, to update the original local DB. 同じ内容の編集情報を、同じ順番で、同じロジックで処理して、ローカル原本ＤＢを更新するので、結果として得られる各ＰＣのローカル原本ＤＢも同じになる。 In the same order, the editing information of the same content, can be treated with the same logic, so to update the local original DB, it becomes same local original DB for each PC that result. サーバーでグローバル原本ＤＢを更新しなくても各ＰＣのローカル原本ＤＢが同期するのはこの仕掛けによる。 Original local DB of each PC is to be synchronized without updating the global original DB on the server by this mechanism.  ここで、各ＰＣで作成した編集記録にユニークな順番を付けるのがポイントである。 It is a point here but to give the order to edit unique record that you created in each PC. ここではサーバーにアップした順番を用いているが、この順番を変更する事も、他の方法で順番を付けても良い。 Is used and the order in which it up to the server here, changing this order may also attach the order in other ways. サーバーにアップされた順番を独自の判断基準（例えば操作者の優先権など）で変更してもかまわない。 It may be changed (such as priority of the operator, for example) criteria of its own order in which they are up to the server. 全ての関係するＰＣで取り出しローカル原本ＤＢを更新する順番が同じであれば良い。 May order you want to update the original local DB is taken out on a PC If all relationships are the same.  編集記録の順番を付ける他の方法として、例えば、サーバーや特定のＰＣが編集記録の順番（または時間）を決定し（編集記録を作成または保持するＰＣに）通知し、編集記録を作成又は保持するＰＣはこの順番を編集記録に記入し、編集記録を互いに通知し合う方法でも良い。 Another way to put the order of the change log, for example, (the PC you want to keep creating or editing records) PC or a specific server determines the (time) or the order of the edit record is notified, making or maintaining a change log PC that may be how to fill in the edit record this order, to inform each other on each other to edit recording. 全ての関係するＰＣで取り出しローカル原本ＤＢを更新する順番が同じであれば良い。 May order you want to update the original local DB is taken out on a PC If all relationships are the same.  各ＰＣはそれぞれの都合の良い時に複製ＤＢの更新を行うので、実時間で見ると、各ＰＣのローカル原本ＤＢとの更新の進みは様々であるが、特定の編集記録で更新された後のローカル原本ＤＢの状態は同じである。 Since updating the replicated DB when it is convenient for each, when viewed in real time proceeds updates the local original DB of each PC is varied, each PC is after being updated in the editing recording certain state of local original DB is the same. つまり、編集記録の順番を共通の時間軸とし各ＰＣのローカル原本ＤＢが同期する。 In other words, local original DB of each PC to synchronize the time axis of the common order of the edit record.  なお、「有効性の判定基準」と「ローカル原本ＤＢの更新処理方法」は、関係する全てのＰＣで同一である必要がある。 Note that the "update processing using a local original DB" and "criterion validity", must be the same PC for all involved. しかし、同じであればその処理に制限は無い。 However, not limited to that process, if the same. 同じ基準で、編集記録毎にその全部又は一部が有効または無効と判定されて、同じにローカル原本ＤＢを更新していれば、編集記録の順番を共通の時間軸とし各ＰＣのローカル原本ＤＢが同期する。 On the same basis, in whole or in part is determined to be enabled or disabled to edit record each, if you update the local original DB the same, local original DB of each PC to the time axis of the common order of the edit record But I want to synchronize.  あるＰＣに注目した一連の動作例を説明する。 I will explain an example of the operation of the series focused on a PC. このＰＣがサーバーから最新の編集記録を受信し、ローカル原本ＤＢを更新したとする。 To receive the latest edit records from the server, this PC has updated the original local DB. そしてこのＰＣがこのローカル原本ＤＢに対して編集を行い、その編集記録をアップする。 And this PC is to edit for this local original DB, I will up the edit record. なお、この編集の間に、別の計算機から編集記録がサーバーにアップされた可能性がある。 Incidentally, there is a possibility that during the editing, editing recording is up to the server from another computer.  先の編集記録のアップの後で、それまでの（未受信の）編集記録をサーバーから受信し、編集記録を指定された順番で取り出し、ローカル原本ＤＢの更新を試みる。 Removed in order after the up editing recording destination, received from the server so far (unreceived) editing records, a specified editing recording and attempt to update the local original DB. この過程でいくつかの編集は有効と判定されローカル原本ＤＢが更新される。 Local original DB is updated is determined to be valid some editing in this process.  最後に先程アップした編集記録を取り出し、その不変確認範囲を調査し有効性の判定を行う。 Remove the change log that was previously up to the end, it is determined efficacy studies the invariant confirmation area. もし無効と判定されたなら、このＰＣの操作者は、無効となった事実とその理由を確認し、必要が有れば（最新の情報に対して）再度の編集を試みる。 If you are determined to be invalid, then check the reasons and the fact that it was invalid, (for the latest information) operator of this PC attempts to edit again if necessary. 無効になった元の入力の記録があれば、その内容を再び入力するのは容易である。 If there is a record of the original input that is disabled, to re-enter its contents it is easy.  ＰＣの操作者にとって、「自分の入力した情報が有効となったか否か」「どの様な状況で無効となったか」を正確に知るこが必要である。 Fox to know exactly for the operator of the PC, "the information you entered your whether or not enabled" to "or is disabled because of a situation such as what" is necessary. 並行ＤＢアクセスにおいてオフライン編集した場合は、編集が有効であるか否かは即時ではなく、次の同期の時に判明するので、これらの情報は極めて重要である。 If the offline editing in parallel DB access, rather than the immediate editing whether is valid, because it turns out at the next synchronization, this information is extremely important. 情報が無効となった場合でも、全ての編集記録がＰＣに有り、その有効性の判定やローカル原本ＤＢの更新の様子も全てこのＰＣ内部で見ることが出来るので、再度入力する事も、入力を放棄するも、その状況から判断する事が出来る。 even if the information is no longer valid, it is possible there to a PC to edit all records, you see in this inside your PC all the state of the update of the local original DB determination and effectiveness, that you re-enter, or input to give up as well, it is possible to judge from the situation.  本発明の基本となる要点を箇条書きすると以下である。 It is below and itemized the main points underlying the present invention.  （更新１）各ＰＣは未受信の編集記録を順番に受信する。 (Update 1) each PC to receive in order to edit records not received.  （更新２）受信した編集記録を指定の順番で用いて、ローカル原本ＤＢの更新を行う。 By using in the order given editing records (update 2) received, and updates the local original DB.  （編集１）各ＰＣはローカル原本ＤＢに対する更新を行い、この編集記録をサーバーにアップする。 (EDIT 1) Each PC performs the update to the local original DB, I up to the server edit this record.  （前提１）各ＰＣの初期のローカル原本ＤＢの内容は同じ。 Contents of the local original DB early (assuming 1) each PC is the same.  （前提２）各ＰＣでローカル原本ＤＢの更新に用いる編集記録の内容が同じ。 The contents of the edit record to be used to update the local DB in the original (assuming 2) each PC is the same.  （前提３）各ＰＣでローカル原本ＤＢの更新に用いる編集記録の順番が同じ。 Order of the edit record to be used to update the original local DB in (assuming 3) each PC is the same.  （前提４）各ＰＣでローカル原本ＤＢの更新に用いるロジックが同じ。 Logic used to update the local DB in the original (assuming 4) each PC is the same.  以上の説明ではグローバル原本ＤＢの更新については説明していない。 Have not been described for updating the global original DB in the above description. 実はグローバル原本ＤＢはローカル原本ＤＢの初期値としてのみ存在するとしても問題は無い。 In fact there is no problem global original DB even exist only as the initial value of the local original DB. ＰＣのプログラムで初期値のＤＢが作成出来るなら、サーバーが初期値を持つ必要も無い。 DB of the initial value if the program can create the PC, there is no need to have an initial value by the server. 各ＰＣのローカル原本ＤＢは互いに同期するので、仮想の（実在しない）グローバル原本ＤＢと同期していると言うことが出来る。 It is possible to tell the local original DB of each PC is synchronized with each other, and are synchronized in a virtual (non-existent) global original DB. もちろん、以上の手順に加えて、実際にグローバル原本ＤＢが有り、編集情報で更新しても良い。 Of course, in addition to the above procedures, there is a global original DB Indeed, it may be updated in the editing information. 万が一、あるＰＣのローカル原本ＤＢが破損した場合には、グローバル原本ＤＢをコピーしても良いし、他のＰＣのローカル原本ＤＢをコピーしても良い。 If the local original DB by any chance, there PC is damaged, it is possible to copy the original global DB, or may be a local copy original DB other PC. 初期のグローバル原本ＤＢとそれまでの全ての編集記録から最新のローカル原本ＤＢを再作成する事も可能である。 The opportunity to re-create the original local DB latest from editing record of all previous global and original DB early is also possible.  （ほぼオンライン運用） (Online operation almost)  本発明では、編集記録の有効性の判定基準やローカル原本ＤＢの更新手順を特に規定するものではないが、一般に、古い情報に基づく編集を無効と判定するのは常識的と考えられる。 It is believed that the present invention is not particularly specified the updating procedure for the local original DB and criteria of the validity of the change log, in general, to determine invalid editing based on old information and common sense. 従って、編集を行うＰＣが、その編集が無効と判定される可能性を出来るだけ少なくするには、編集の直前に最新の編集記録まで受信してローカル原本ＤＢを更新し、この最新のローカル原本ＤＢに対して編集を行い、編集後は速やかに編集記録をアップすると良い。 Therefore, to reduce PC to be edited is only possible could be judged invalid edit them, and updates the local original DB by receiving to edit recording the latest just before editing, local text of this latest Make edits to the DB, it is preferable to edit up the record immediately after editing. 頻繁に更新を行えば、ローカル原本ＤＢは常に最新の状態に保たれるので、「ほぼオンライン運用」と言う事が出来る。 By performing frequent updates, local original DB is kept up to date at all times, it is possible to say "online operation almost".  （ほぼオフライン運用） (Off-line operation almost)  しかし、編集の競合が稀な情報を扱う場合には、（更新１）および（更新２）によるローカル原本ＤＢの更新から、（編集１）による編集のアップまでの時間を長くしても、編集が無効となる可能性は少ない。 However, if the editing conflicts to handle rare information (update 1) and from the update of the local original DB by (update 2), even if a longer time to up the editing (EDIT 1), Edit potential invalid less. 例えば、会社の組織ごとに支払伝票を入力するケースでは、レコードを修正するのは入力ミスや処理ミスを発見した場合であり、修正するとしてもレコードを入力した計算機で行う事が多い。 For example, in the case to enter a payment voucher for each organization of the company, to correct the record it is the case you have found the mishandling or typographical errors, be performed by the computer in which you enter the record even if correct in many cases. この様なケースでは、更新から編集アップまでの期間を極端に長くした「ほぼオフライン運用」で問題は無い。 In cases like this, there is no problem "off-line operation almost" you have extremely long time to edit up from the update. たとえインターネット接続が出来ない状況でも支払伝票をゆっくり入力し、決算や検査の近くなってからまとめてアップすれば良い。 Enter the voucher slowly even in a situation that can not be Internet connection example, may be up together from getting close to the inspection and closing.  （改良－１）編集記録の内容の拡大「編集内容」には、先に説明した一般的な編集内容や「編集バージョン」に加え、あとで詳しく説明する「バージョン設定範囲」や「不変確認範囲」を編集内容に含めることが出来る。 Expansion of the contents of (improved -1) change log in the "compilation", was added and edits typical as described above in the "Edit Version" will be described in detail later and "Version range" and "unchanged confirm Range it is possible to include in the edits ". ＤＢの部分（複数可）にバージョンを設定する場合には、どの部分のバージョンを扱っているかを示す必要が有り、これを示すのが「バージョン設定範囲」である。 In setting the version portion of the DB (s), it is necessary to indicate whether dealing with version of any part, and indicate this is a "Version range."  編集内容に、一般的な編集内容に加え、編集バージョン、バージョン設定範囲、不変確認範囲、を記録するとこれらの情報の扱いが単純になるが、必ずしも編集内容に記録する必要は無い。 To edit content, in addition to edits general, the handling of information of these will be simple When you record edit version, version setting range, a constant check range, but, there is no need to record the edits necessarily. 分けて記録してもこれらの対応が他の計算機で把握できれば良い。 May be grasped a computer other correspondence these be recorded separately.  （改良－２）不変確認範囲の導入「不変確認範囲」は、この編集に影響を与える範囲であり、この範囲の情報の値が変更されることは、この編集が無意味になる事を示している。 Introduction of (improved -2) invariant check range "immutable confirmation range" is a range that affect this edit, that the value of the information in this range is changed, indicates that this edit is meaningless are. 「不変確認範囲」はＤＢが扱う情報、特にその編集する対象の情報の特性に応じて様々な指定が可能であるが、編集対象の情報を「不変確認範囲」に入れるのは自然である。 "Immutable confirmation range" is a can specify various according to the characteristics of the Information handled by DB, for which you want to edit that in particular, put the "immutable check range" information to edit it is natural. リレーショナルＤＢ（以下「ＲＤＢ」）の場合には、編集対象のテーブル、編集対象と論理的に関連しているテーブル群、そのなかの一部のレコード、またはＤＢ全体などが想定される。 In the case of, is assumed and the entire DB table group that is logically related tables to be edited, and edited, or record, of some of among the relational DB ("RDB" below).  （改良－３）編集記録とその順番の操作サーバーに記録する編集記録とその順番は、必ずしもＰＣがアップしたままの内容と順番である必要は無い。 The order and edit records that recorded in the operation of the server and their order (improvement -3) edit record, does not need to be in the order and content of the PC still has up necessarily. 編集記録とその順番が全てのＰＣで同じであれば、これらの編集記録を適用したローカル原本ＤＢは編集記録の順番を共通の時間軸として同期する。 And their order, edit record is the same in every PC, local original DB applying the edit these records to synchronize as a common time axis the order of the edit record.  サーバー又は、管理業務を担当するＰＣが編集記録の内容を分析し、エラーとなって無効とされる部分や、冗長な（結局は何もしないのと同じ）部分を削除しても良い。 Or server, it is also possible to delete parts or the PC in charge of the administrative work to analyze the contents of the edit record, is as invalid with an error, the part (same as not do anything after all) redundant. エラーの編集記録や冗長な編集記録を削除し、結果としてその編集記録が削除されても問題は無い。 There is no problem to remove the redundant recording and editing editing error logging, edit the record is deleted as a result. 編集記録の順番を変更しても、全てのＰＣでの（ローカル原本ＤＢの更新）処理に用いる順番が同じなら、編集記録の順番を共通の時間軸として各ＰＣのローカル原本ＤＢが同期する。 If you change the order of the change log, the order used in the processing (update of local original DB) of the PC of all things being equal, local original DB of each PC to synchronize as a common time axis the order of the edit record.  （改良－４）バージョン設定範囲の導入バージョンを付与し編集を管理する単位は実際のＤＢである必要は無い。 Need not be a DB the actual unit that manages the editing gives the introduction of version (improved -4) version setting range. 情報修正の影響が密接に関係している部分を特定して「バージョン設定範囲」とし、これ毎にバージョンを設定すれば、その範囲に関する編集とバージョンの推移を管理するのが容易になる。 The term "Version range" to identify portions influence of information correction is closely related to, setting the version thereto each, it becomes easier to manage the transition of the versions and editing on the range.  バージョン設定範囲の設定はＤＢが扱う情報の構造や内容に依存するので、これらの知識無くして決定する事は出来ないが、ＲＤＢの場合にはレコード、テーブル、テーブルと論理的に関連しているテーブル群、そのなかの特定のレコード群、ＤＢ全体などが想定される。 Version setting range is dependent on the structure and contents of the information handled by DB, it is not possible to determine by eliminating these knowledge, but they are logically related records, tables, Tables and in the case of RDB table group, record group specific Among them, such as Whole DB is assumed.  ＤＢをバージョン設定範囲と読み替える事により、本明細書で説明した手順をそのまま適用する事が出来る。 It can be applied as a procedure by which it read as versioning range DB, as described herein. なお、複数のバージョン設定範囲に対する編集の記録が、ひとつの編集記録の中に一緒に記載されていても問題は無い。 Incidentally, there is no problem for recording editing versioning multiple ranges, also be described together in the editing one record. バージョン設定範囲毎に「編集内容」「編集バージョン」「不変確認範囲」などが記載されていれば良い。 "Edit content", "edit version" and "immutable confirmation range" may if it is in the version set for each range.  医療の個人情報を例に説明する。 I will be described as an example of personal medical information. 医療情報のＤＢで、個人の医療記録の固まりをバージョン設定範囲の設定として設定する。 The DB of medical information, is set as the setting of the range version of the mass of individual medical records. テーブルの１行又は数行が個人の情報なら、これに対してバージョンを設定する。 If several lines of personal information or row in the table, then set the version for this. ＤＢには、多数の個人情報があり、それぞれにバージョンを設定する。 The DB, the various personal information, I set the version for each. 編集記録には、個人に対応する「編集内容」「編集バージョン」「不変確認範囲」のセットが単数または複数存在する。 The edit record, set corresponding to the individual "Edit content", "edit version" and "immutable confirmation range" there is more than one or singular. 「不変確認範囲」はこの個人記録全体でも、修正した情報（ＲＤＢならレコード）に限定しても、修正内容に応じて適切に設定すれば良い。 Even in this whole personal records, and be limited to information that is modified (record if RDB), may be set appropriately depending on your modifications "immutable confirmation range". 個人情報毎にテーブルを構成していれば、テーブル毎にバージョンが設定される。 As long constitute a table of personal information for each version is set in each table.  医療情報だけでなく、社会保証や銀行口座やローンなどの情報を個人毎に管理する事にも利用出来る。 You can also use it to manage in each individual information as well as medical information, such as a loan or bank account and social security. 複数の部署で編集すると思われる犯罪者情報の管理にも使える。 Can also be used in the management of criminal information that appears to be edited in multiple departments. さらには、住民みずから一部のデータの編集が可能な「発展した形態の住民基本台帳の管理」など、個人対応の情報を扱う場合にも便利である。 In addition, it is also useful if you are working, such as "management of Basic Resident Register forms of development" that you can edit the data of some residents themselves, the information of personal correspondence. 「（改良－８）ローカル原本ＤＢの守備範囲の限定」で説明する様に、ＰＣ毎にその権限で読み込める範囲の個人情報についてのローカル原本ＤＢを作成する事として、権限の範囲内の情報のみがこのＰＣに送られるなら、権限外の情報がハッキングされる恐れも無い。 As described in "limitation of the scope of (improved -8) local original DB", as that you create a local original DB of personal information in a range that can be read by the authority in each PC, only information within the scope of authority there is no possibility that but if this is sent to the PC, information outside one's authority is hacking.  なお、特定のＰＣ（の操作者）にとってはサーバーに集められた編集記録の多くは必要無い場合は、ローカル原本ＤＢがグローバル原本ＤＢの一部のみと同期していれば十分である。 Incidentally, if not required, it is sufficient local original DB if synchronization with only a part of the global original DB many editing records collected in the server for (operator of) PC specific. これに対応するには、ＰＣで全ての編集記録を受信した後で、不要な編集記録をスキップするのがひとつの方法である。 To accommodate this, it is one way after receiving editing records all PC, is to skip the unnecessary change log. サーバー側でＰＣ毎に必要な編集記録を抜いて送ると通信量が少なくなる。 Traffic is reduced by sending by far the editing record necessary to each PC on the server side. 不必要な編集記録が混ざっていてもＰＣ側の処理で除外すれば問題は無い。 There is no problem if you exclude processing on the PC unnecessary editing record even though mixed. 編集情報に記録されたバージョン設定範囲を元にして、サーバーの管理する編集記録を分類しておくとＰＣに送るべき編集記録を迅速に判定する事が出来る。 It is possible to determine quickly the change log to be sent to the PC based on the version range which is recorded in the editing information, it may be useful to classify the change log to manage the server.  （改良－５）バージョン付与のタイミングＤＢ原本（グローバル原本ＤＢ又はローカル原本ＤＢ）の全体又はやバージョン設定範囲に対してバージョンが付与されるが、その付与方法は、扱う情報の特性や運用の都合に応じて選択する事が出来る。 Version is given to the version and range or the entire (local or global original DB original DB) DB original timing of (improved -5) version grant, but the grant process, convenience and operational characteristics of information dealing it is possible to choose according to.  実際にローカル原本ＤＢの内容が更新された場合にバージョンを更新しても良いし、有効な更新の有無に関係なく、変更記録で原本ＤＢの変更を試みる毎にバージョンを更新しても良い。 It is also possible to update the version if the contents of the local original DB is actually updated, and with or without a valid updates, may update the version for each attempt to change the original DB change recording.  （改良－６）編集のサーバー受け付け時刻をバージョンとする発展サーバーが編集を受け付けた時刻をバージョンとして利用しても良い。 It may be used as a version the time development server that version time reception server (IMPROVED -6) editing received editing. 本明細書で説明したバージョンはこの受け付け時刻と読み替える事になる。 Version described herein so that it read as the reception time. 先に、バージョンは一連の順番を識別するための順序数と説明したが、時刻も順序を表すので何ら問題は無い。 Previously, it was explained that the order number for identifying the order of the series version, but no problem at all times and may be representative of the order.  （改良－７）サーバーへの同期アクセス時刻をバージョンとする発展ＰＣが、サーバーにアクセスし、未受信の編集記録の有無を確認した時刻を（サーバーなどから）取得し、その時刻をバージョンとする方法も可能である。 Access the server, (from such as a server) to get the time confirmed the presence or absence of editing records not received, the development PC to the version synchronized access time to the (improved -7) server, a version that time method is also possible. この確認毎に、未受信の編集記録が無くてもローカル原本ＤＢの新たなこの時刻をバージョンとして設定する。 This confirmation each, I set as a new version this time of local original DB even if there is no record of editing not received. 未受信の編集記録が有れば、これらを受信しこれらを用いてローカル原本ＤＢを更新し、そしてこの時刻をローカル原本ＤＢのバージョンとして設定する。 If there is a change log of non-reception, is set as a local version of the original DB this time and it updates the original local DB using these received them. より同期アクセスがより新しいローカル原本ＤＢに対する編集が優先されるので、一つのＤＢを競争で操作する関係者にとって理解しやすくまた納得出来るルールである。 Synchronous access takes precedence editing for a new more local original DB more, it is a rule that can be convinced also easy to understand for stakeholders to operate in competition with the DB one.  （改良－８）ローカル原本ＤＢの守備範囲の限定ローカル原本ＤＢが、（仮想の又は実在する）グローバル原本ＤＢの全体と同期すると仮定すると、説明は簡単である。 Assuming limited local DB of original scope of (improved -8) local original DB wants to synchronize with the entire (real or virtual) of global original DB, explanation is simple. しかし、ローカル原本ＤＢが扱う範囲はグローバル原本ＤＢ一部分とした方が、実用的である。 However, the range handled by the local DB is original when it is implemented as a global original DB part, it is practical. 医療情報に限らず、一般にＤＢ全体は巨大であるが、前記「（改良－４）バージョン設定範囲の導入」で説明した様に、個々の個人情報毎の集合体である。 Not limited to the medical information, DB whole is large in general, as described in "Introduction of (-4 modified) version range" above, it is a collection of personal information for each individual. 患者自身の計算機のローカル原本ＤＢはこの患者の情報のみが有れば良いし、医師の計算機のローカル原本ＤＢは受け持ちの患者の情報のみがあれば良い。 May, if there is only information of the patient original local DB of computer the patient's own, or may, if there is only information of patients charge to local original DB Calculator doctor. つまり、ローカル原本ＤＢは、グローバル原本ＤＢ全体と同期している必要は無く、その必要な一部分と同期していれば十分である。 That is, there is no need to be synchronized with the global original DB entire original local DB is sufficient if the synchronization with the required part. これにより、ローカル原本ＤＢのサイズは小さくなり、その同期（内容を最新に保つ）操作は軽快になる。 As a result, the size of the local original DB is small, the operation (keep up to date with the content) is to light the synchronization.  （改良－９）編集記録の順番付与のバリエーション順番を管理するサーバー（又はＰＣ）を置く。 Put (PC) or server to manage the variation of the order granting the order of (improved -9) edit record. 編集記録を作成したＰＣはこのサーバーに順番を問い合わせ、指定された順番を編集記録に書き込む。 PC that created the edit record queries the order on this server, I write to edit the record the order in which they are specified. 編集記録自体はＰＣの間で直接送信したとしても、ここに書かれている順番はユニーク（一意）である。 The order in which even sent directly between the PC, is written here unique editing record itself is a (unique). 順番の替わりに時間を編集記録に記入して、順番として用いても良い。 Fill the editing recording time instead of sequentially, may be used as the order. なお、ＰＣ毎の時間のずれが生じる事を考え、特定のＰＣが時間を管理するなどの工夫が必要である。 In addition, it is necessary to devise the idea that the time lag of each PC occurs, PC specific, such as time management.  （改良－１０）編集の一時的な禁止ＤＢのデータ構造自体を変更するなど、他の計算機と並行して編集を行う事が出来ない場合には、他の編集を一時的に禁止すると都合が良い。 If it is not possible such as changing the data structure itself of prohibition DB temporary (improvement -10) editing, and editing in parallel with other computers, it is convenient if you temporarily disable other edits good. 以下では説明のため、ある編集（Ｘ）について、この編集との並行編集を禁止する状況を想定する。 For illustration, editing is about (X), it is assumed a situation that prohibits concurrent editing with the editing in the following. つまりＸの編集開始からＸの編集が完了してサーバーにアップされるまでの期間を、他のＰＣの「編集禁止期間」とする。 This means that I will of PC and other "Edit prohibition period", the time to be up to the X server editing is complete from start editing of X. Ｘのサーバーへのアップの後で、この編集記録（Ｘ）記録を取り込んだ後のローカル原本ＤＢに対する並行ＤＢ編集から禁止が解除される。 After up to the server X, prohibition is released from parallel DB edits to the original local DB of after taking the (X) record edit this record.  ひとつの方法は、サーバーがこの禁止区間にアップされた編集を無効とする方法である。 One method is a method of disabling the edit the server has been up to this prohibition interval. Ｘの編集を生かし、かつ矛盾を起こさない確実な方法である。 It is a sure way that does not cause a contradiction and, taking advantage of the editing of X. しかし、この無効とされた編集を作成した側の労力は無駄になる。 However, the effort of the side that created the editing that is invalid is wasted.  禁止区間であることを伝えるのが、もうひとつの方法である。 It's telling that it is a prohibited zone, it is a method of another. 編集Ｘを行うＰＣから他のＰＣに直接伝えても良いし、編集Ｘを行うＰＣから、サーバーに伝えて、サーバーから各ＰＣに伝えても良い。 May be directly transmitted to the PC from another PC for editing X and from a PC to edit X, it is transmitted to the server, it may be transmitted to the PC from the server.  編集Ｘを行うＰＣは、編集Ｘを行う前に最新の編集記録をサーバーに要求する時点で、他のＰＣの編集禁止をサーバーに伝えておく。 At the time of request to the server to edit the latest record before editing X, PC for editing X It should be communicated to the server edit the ban on another PC. 最新の編集記録をサーバーに要求したＰＣに対し、サーバーから編集禁止を通知しても、未受信の編集記録の問い合わせなどに対する応答と一緒に通知しても良い。 To the PC with a request to the server to edit record of latest, even if notified of the edit ban from the server, it may be notified along with the response to the query, such as editing records not received.   「サーバーから編集禁止が通知された場合」には、このＰＣはローカル原本ＤＢの更新を行っても、編集は行わない。 The "if not editable is notified from the server", even after the update of the original local DB, the PC will not be edited. そして、改めて、最新の編集記録をサーバーに要求し、それに対して編集記録Ｘまでが送られ、これと同時に編集禁止解除が通知される。 And, again, it asks the server to edit the latest record, edit to record X is sent to it, edit uninhibited be notified at the same time. このＰＣは編集記録Ｘでローカル原本ＤＢを更新した後、これに対する編集を開始する。 After you have updated the original local DB in the edit record X, this PC to start the editing for this.  ＜出願時の請求項との対応＞ <Correspondence between claims filed>  本明細書の並行編集とは、（実在の又は仮想の）グローバル原本ＤＢ（直感的にはＤＢ原本）の情報の全部または一部の複製を、ＰＣの内部にローカル原本ＤＢ（直感的には「複製ＤＢ」）として保持し、これに対して編集を行う事である。 Concurrent editing of this specification, (real or virtual) global original DB (the original intuitive DB) in the interior of the PC original local DB (intuitive a copy of all or part of the information, the It is to be retained as "Duplicate DB"), and edits thereto. 各ＰＣが保持する複製ＤＢに対する編集情報を、ＰＣが相互に交換してそれぞれの複製ＤＢを更新する。 I will update the DB replication of each PC is to replace each other, and edit information for replication DB each PC holds. なぜ各ＰＣの複製ＤＢが同期するかと言うと、各ＰＣが同じ編集情報を同じ順番で用いてそれぞれの複製ＤＢを更新するからである。 The reason DB replication of each PC is for synchronization and thus to update the DB replication of each of the PC used in the same order the same edit information. これを表現したのが請求項１である。 The expressed it is claim 1. 請求項２は請求項１を装置で表現したものである。 Claim 2 is a representation in a device according to claim 1.  請求項１の工程Ｄに編集記録の有効性を確認する手順を加えたのが請求項３である。 The added procedure to verify the validity of the change log to Step D of claim 1 is according to claim 3. 請求項４は編集に影響を与える「不変確認範囲」の概念を請求項３追加し、これを用いて、編集記録の有効性確認を行う事を示したものである。 Claim 4 shows that the three additional claims concepts affect editing "invariant confirmation Range", using this to carry out the validation of the change log. 請求項５は複製ＤＢのバージョンの概念を請求項３追加し、これを用いて、編集記録の有効性確認を行う事を示したものである。 Claim 5 shows that the three additional claims concept version replication DB, using this to carry out the validation of the change log. 請求項６はバージョンが複製ＤＢの一部の情報又は情報の組み合わせに指定されている場合のものである。 Claim 6 are those for which the version is specified in the combination of information or the information of a part of the replication DB.  請求項７は請求項５をベースに、有効性が否定されても複製ＤＢのバージョンの更新を行う事を追加したものである。 Claim 7 are those based on claim 5, was added to make the update version of the DB replication efficacy be denied. 請求項８は請求項５をベースに、アップされた編集記録にサーバーがアップ日時を記入するし、ＰＣはこれを複製ＤＢのバージョンとする方法である。 Based on the claim 5, the server will fill in the date and time up to the Edit record that has been up and claim 8 is a method of the version of the replication DB this PC. 請求項９は請求項５をベースに、ＰＣがサーバーにアクセスした時間を（サーバーから貰い）複製ＤＢのバージョンとする方法である。 Claim 9 is a method based on claim 5, and versions of the replication DB (gotten from the server) the time at which the PC is accessing the server.  サーバーＤＢアクセスでは、サーバーとの通信が不可能な状況ではデータへのアクセスは出来ないも問題があった。 The server DB access, there is a problem that can not be access to the data in situations of communication with the server is not possible. 移動体では通信不可能なケースが頻発しＤＢ操作に大きな制限となる。 It is a big restriction in the DB operation case impossible communication is frequent in the mobile. 災害時の救援、医療、金融などいわゆるミッションクリティカルな業務では通信不可能な状況下でも業務遂行が求められるが、これに応える事は出来ない。 Relief in the event of a disaster, is required to carry out business even in situations that can not communicate in the so-called business mission-critical medical care, and finance, but it is not possible to respond to this.  この問題を解決するのが並行ＤＢ編集であるが、キャシュの技術をベースにした方法にはいくつかの問題が指摘されていた。 Is a parallel DB editing is to solve this problem, some problems have been pointed out in the way which is based on technology cache.  本願では、仮想の又は実在のグローバル原本ＤＢ、と同期したローカル原本ＤＢを作成し、永続的なキャシュとして用いる。 In the present application, create a local original DB synchronized with global original DB, real or virtual, is used as a persistent cache. そして、ローカル原本ＤＢに対する編集を行う直前など、必要な時にローカル原本ＤＢをグローバル原本ＤＢと同期する。 And, such as immediately before edits to local original DB, to synchronize with global original DB the original local DB when needed. これにより、編集毎にコピーを作成する従来の方法のオーバーヘッドやキャシュ有効性の判定などの問題が解決される。 Thus, problems such as the determination of the effectiveness of cache overhead and the conventional method to create a copy of each editing is solved.  また、あるＰＣが過去に操作した情報が他のＰＣの操作により変更された事を検出するのは、従来の方法では困難であったが、この本格的な「並行ＤＢアクセス編集」で容易に検出する事が可能になった。 Also, detecting that the information has been operated in the past there PC is changed by the operation of the other PC, it was difficult with the conventional method, and easy full-fledged "The parallel DB Access Editing" It is now possible to detect. 情報の編集状況を操作者が精査した上で、適切な対応を取ることが出来る。 It is possible on an operator reviewing the editing status of the information and take appropriate action. 無効になったデータを再入力する事も、一部修正して再入力することも、最新のデータを修正する事も、無効とされたことを受け入れることも可能である。 Having to re-enter data that are no longer valid, or you can re-enter with some modification, or you can modify the latest data, or you can accept that it is invalid it is also possible.  さらに、ローカル原本ＤＢが保持し同期する対象はグローバル原本ＤＢの全体である必要は無く、その計算機に必要な一部の情報のみで良い。 Furthermore, not necessarily the entire global original DB subject to synchronize local original DB holds, it may be only partial information required for the calculator. 例えば、医療情報なら患者の計算機のローカル原本ＤＢはこの患者個人の医療情報のみを保持し、医者の計算機のローカル原本ＤＢには担当患者の医療情報のみを保持する。 For example, if you hold the only medical information of this individual patient, local original DB calculator patient to hold the only medical information of patients responsible for local original DB Calculator doctor if medical information. これにより、従来の方法で問題であったキャシュの適正量の問題も解決される。 Thus, the problem of proper amounts of cache was a problem in the conventional method is also solved.  「編集記録の有効性の判定」と「ローカル原本ＤＢの更新」などの処理をサーバーで無くＰＣで行う事の長所として、以下が挙げられる。 Advantages of doing a PC instead of server processing such as "Update Local original DB" and "determination of the validity of the change log" include the following.  （１）必要な編集記録とその順番を取り込んでしまえば、サーバーとの通信が不要なので、その後の利用者の操作に対応するレスポンスが早くなる。 Once capture the order (1) the required editing record, communication with the server is not required, the response corresponding to the user's operation of the subsequent faster.  （２）ローカル原本ＤＢを更新する処理がこのＰＣで行われるので、特定の編集から影響を受ける情報（レコード）の範囲をきめ細かく調査する事ができる。 Process of updating (2) local original DB is is performed in the PC, it is possible to investigate the fine-grained range information affected by the editing of a particular (record). また、操作者の要求に応じてより詳しい情報を表示する事が出来る。 Further, it is possible to display more detailed information at the request of the operator.  （３）一般に、個々の計算機の計算能力は余っている事が多く、処理負荷が集中するサーバーに処理を置くよりも処理が高速になる。 That (3) In general, computing power of computer individual is left over in many cases, processing is faster than put the processing on the server processing load is concentrated. 上記（１）との相乗効果で利用者の操作に対応するレスポンスが早くなる。 Response corresponding to the operation of the user in synergy with the above (1) is faster.  また、ローカル原本ＤＢの更新の間隔を調整する事により、「ほぼオンライン運用」から「ほぼオンライン運用」まで、自由に選択出来る。 In addition, by adjusting the spacing of the original update of local DB, until "online operation almost" from "online operation almost" can be selected freely. 編集アクセスの多い情報を扱う場合は頻繁にローカル原本ＤＢの更新を行う「ほぼオンライン運用」を行えば良いし、支払伝票の入力の様に、修正が無いか修正があってもデータを入力した計算機で行う事が多い場合には、ローカル原本ＤＢの更新の間隔を極端に延ばした「ほぼオフライン運用」で問題は無い。 It may be performed "online operation nearly" for updating of local original DB frequently when dealing with information many editing access, and like the input of payment voucher, you have entered the data even if there is a fix or no fix If it is carried out in the computer, the more there is no problem "off-line operation almost," which stretched the distance between the extreme update of local original DB. 決算や検査が近くなってから編集をアップしても問題は無い。 There is no problem even if the edit up inspection and closing is from getting near.  複数のＰＣがそれぞれの事情に応じて「ほぼオンライン運用」か「ほぼオンライン運用」が選択でき、両者が混在して運用出来るのも都合が良い。 "Online operation almost" or "nearly online operation" can be selected more than one PC in accordance with the circumstances of each, you can operate two are mixed also convenient.  一般的な計算機の構成 Configuration of a computer general  ＰＣとサーバーの関係 Relationship and server PC  ローカル原本ＤＢに対して行った編集の記録をサーバーにアップする工程 Step up to the server record of edits made to the original local DB  編集記録をサーバーから受信する工程 Step of receiving from the server a change log  編集記録でローカル原本ＤＢを更新する工程 Process to update the original local DB in the edit record  単純化した実施例 Implementation simplified example  0100    計算機 0100 computer  0102    通信装置 0102 communication device  0103    演算装置 0103 processing unit  0104    主記憶装置 0104 main storage  0105    主記憶装置内のＤＢ（データベース） DB of 0105 main storage device (database)  0106    二次記憶装置 0106 secondary storage device  0107    入出力装置 0107 I / O device  0108    表示装置 0108 display device  0109    バス 0109 bus  0110    通信網 0110 communication network  0111    二次記憶装置内のＤＢ（データベース） DB 0111 of the secondary storage device (database)  0201      ＰＣ 0201 PC  0202      インターネットなどの通信網 Communication network such as the Internet 0202  0203      サーバー 0203 server  0204      （ＰＣの）記憶装置 0204 storage device (the PC)  0205      （サーバーの）記憶装置 0205 storage device (on the server)  0206      ローカル原本ＤＢ 0206 original local DB  0207      グローバル初期原本ＤＢ 0207 global initial original DB  0208      編集記録 Edit Record 0208  0209      作業ＤＢ 0209 work DB  0210      編集記録ｎ 0210 edit record n  0210      編集記録ｎ＋１ 0210 edit record n +1  0211      編集記録ｍ Edit Record 0211 m  0213      編集手段 0213 editing means  0214      更新手段 0214 update means  0215      送信手段 0215 transmission means  0216      受信手段 0216 receiving means  0217      送受信管理手段 0217 send and receive management means  0218      編集記録１ 0218 edit record 1  0219      編集記録ｍ Edit Record 0219 m  0220      送信手段 0220 transmission means  0221      受信手段 0221 receiving means  0222      送受信管理手段 0222 send and receive management means  0301      編集記録（のメモリエリア）を確保 Ensure (memory area) 0301 edit record  0302      ローカル原本ＤＢ内の編集対象情報を特定 Identify edit information of 0302 local original DB in  0303      この情報が属するバージョン設定範囲を特定し編集記録に記入 Fill in the edit record to identify the version setting range that this information belongs to 0303  0304      このバージョン設定範囲のバージョンを取得し編集記録に記入 Fill in the edit record to get the version of the version setting range this 0304  0305      編集対象の情報に対応する不変確認範囲を特定し編集記録に記入 Fill in the edit record to identify the immutable confirmation range corresponding to the information of 0305 edited  0306      編集対象の情報を特定する情報、編集の中身を編集記録に記入 Fill in the edit record information that identifies the information in 0306 edited, the contents of the edit  0307      ローカル原本ＤＢに上記編集を適用した作業ＤＢを作成 Create a work DB applying the above edit to 0307 local original DB  0308      サーバーに編集記録を送る I will send the record to edit 0308 server  0401      サーバーに前回の最終編集記録を通知 Notify last edited the previous record in 0401 server  0402      サーバーから前回より後の編集記録のリストを受信 Receive a list of editing record after the last time from 0402 server  0403      編集記録を受信 Receive the 0403 edit record  0404      受信した編集記録を未処理編集記録リストにいれる I put in outstanding record edit list editing records that received 0404  0405      編集禁止中を問い合わせる I query the 0405 ban during editing  0501      未処理の編集記録リストから編集記録を取り出し Remove the edit record edit record from the list of 0501 outstanding  0502      この編集記録の不変確認範囲と編集バージョンにより、現在のローカル原本ＤＢに対して有効かを判定 The edit version unchanged confirmation range of editing this 0502 recording, to determine whether valid for local original DB current  0503      ローカル原本ＤＢを更新 Updated the 0503 original local DB  0504      ローカル原本ＤＢのバージョンを更新 The updated version of the 0504 original local DB  0602    ＰＣ－Ａ 0602 PC-A  0603    ＰＣ－Ｂ 0603 PC-B  0604    初期ＤＢ 0604 initial DB  0605    （ＰＣ－Ａの）ローカル原本ＤＢ更新 Update DB original local (of PC-A) 0605  0606    （ＰＣ－Ｂの）ローカル原本ＤＢ更新 Update DB original local (of PC-B) 0606  0608    （ＰＣ－Ａの）レコードＺの複製 Replication of record Z (of PC-A) 0608  0609    （ＰＣ－Ｂの）レコードＺの複製 Replication of record Z (of PC-B) 0609  0610    （ＰＣ－Ａによる）グローバル初期原本ＤＢの取得 (According to PC-A) 0610 acquisition of global initial original DB  0611    （ＰＣ－Ｂによる）グローバル初期原本ＤＢの取得 (According to PC-B) 0611 acquisition of global initial original DB  0612    （ＰＣ－Ａによる）同期 Sync (by PC-A) 0612  0613    （ＰＣ－Ａの操作者による）編集 Editing (by the operator of PC-A) 0613  0614    （ＰＣ－Ａによる）編集の送信。 (According to PC-A) 0614 transmission of editing. つまり編集のアップ。 That is up for editing.  0616    （ＰＣ－Ａへの）確認（通知）と（ＰＣ－Ａによる）同期。 Sync (by PC-A) (to PC-A) 0616 and confirmation (notification). なお、同期とは新たな編集とその順番の取得であり、他の記号の説明においても同じである。 It should be noted that the acquisition of the order with the new editing and synchronization, which is the same also in the description of the other symbols.  0617    （ＰＣ－Ｂによる）同期 Sync (by PC-B) 0617  0618    （ＰＣ－Ｂの操作者による）編集 Editing (by the operator of PC-B) 0618  0619    （ＰＣ－Ｂによる）編集の送信。 (According to PC-B) 0619 transmission of editing. つまり編集のアップ。 That is up for editing.  0621    （ＰＣ－Ｂへの）確認（通知）と（ＰＣ－Ｂによる）同期。 Sync (by PC-B) (to the PC-B) 0621 confirmed with (notification).  0622    （ＰＣ－Ｂによる）同期 Sync (by PC-B) 0622  0623    （ＰＣ－Ｂの編集に基づくＰＣ－ＡのレコードＺの複製の）修正 Modification (of replication of Z record of PC-A based on the editing of PC-B) 0623  本発明の方法は計算機のプログラムとして実現出来る。 The method of the present invention can be implemented as a program of the computer. 図１に典型的な計算機0101の構成を示す。 I shows the configuration of the computer 0101 typical in Figure 1. 演算装置0103、主記憶装置0104、二次記憶装置0106、入出力装置0107、表示装置0108がバス0109で接続されている。 0106 arithmetic unit 0103, 0104 main storage device, a secondary storage device, input / output device 0107, display device 0108 is connected via a bus 0109. 他の計算機とデータを交換する場合は通信装置0102を介して通信網0101に接続する。 Is connected to the communication network 0101 via a communication device 0102 for exchanging data with other computers. 各請求項で言及している「データベース」が、二次記憶装置0106内のＤＢ0111又は主記憶操作0104の内部のＤＢ0105である。 It is mentioned in the claims "database" is the DB0105 inside the main memory 0104 or DB0111 operation of secondary storage device in 0106.  プログラムは二次記憶装置0106に記録され、起動されると主記憶操作0104に展開され、プログラムに指定された手順で演算装置0103が動作する。 0103 arithmetic unit operates in the steps are deployed in the main memory 0104 operation program is recorded in the secondary storage device 0106, is started, as specified in the program. この結果として計算機は、プログラム開発者が意図した動作を実現する手段の集合体に再構成される。 Computer is re-configured to a collection of means for realizing the program behavior developer intended as a result.  プログラムによるＤＢの操作は、ＤＢの全体または一部を主記憶操作0104に展開してから行うのが一般的である。 Operation of the DB by program is generally performed after expanded in the main memory 0104 operation or part of a DB. 二次記憶装置0106内のＤＢ0111の全部又は一部を主記憶操作0104に展開したＤＢ0105を操作し、その編集結果を二次記憶装置0106内のＤＢ0111に書き込む。 Operate the DB0105 was deployed in the main memory 0104 operate all or part of DB0111 of the secondary storage device 0106 in writing to DB0111 of the secondary storage device 0106 in the editing result. しかし通常は、ＤＢは二次記憶装置0106内に有るとし、主記憶操作0104に展開したＤＢ0105と区別せず議論するので、図２では単に、記憶装置0204, 0205の中のＤＢとして表示する。 However, usually, it is to be in a secondary storage device 0106 in the DB, it is discussed without distinguishing DB0105 that was expanded in the main memory operation 0104, only in FIG 2, will be displayed as a DB in the 0204, 0205 storage.  サーバー0203に編集記録0218, 0219を置き、ＰＣ0201がこの編集記録を受信し、ＰＣのローカル原本ＤＢ0206を更新するケースを図２で説明する。 Described in Figure 2 in the case when it is put the 0218, 0219 edit recorded in the server 0203, PC0201 receives the edit this record, update the original local DB0206 on the PC. ＰＣ0201がインターネットなどの通信網0202を介して、サーバー0203と接続している。 PC0201 through the communication network 0202, such as the Internet, I have connected to the server 0203. 一般にＰＣは複数存在するが、図２では１台のみを示している。 PC is more than one, but in general, I shows only one in Figure 2.  ＰＣ0201には記憶装置0204が有り、ローカル原本ＤＢ0206が記録されている。 There is a storage device 0204 to PC0201, local original DB0206 is recorded. ローカル原本ＤＢ0206の初期値は、サーバー0203の記憶装置0205のグローバル初期原本ＤＢ0207をコピーしたものである。 The initial value of the local original DB0206 is one in which you copied the original global initial DB0207 of storage server 0205 of 0203. 操作者の指示を受けて編集手段0213が編集を行うが、この時にはローカル原本ＤＢ0206を直接編集する事はせず、編集結果を作業ＤＢ0209とする。 Editing means 0213 is to edit in response to the instructions of the operator, but it is not possible to directly edit the original local DB0206, and DB0209 and work your edits at this time. 同時に編集記録0208を作成する。 I want to create an edit record 0208 at the same time. この編集記録には、編集バージョンつまり、ローカル原本ＤＢに設定されているバージョンが記録される。 The change log, that editing version, the version is set to the local original DB is recorded.  編集記録0208は送信手段0215により通信網0202を介してサーバー0203に送られる。 Change log 0208 is sent to the server 0203 via a communications network 0202 by the transmission unit 0215. サーバー0203は受信手段0221により受信し、編集記録１0218, 編集記録ｍ0219の列に加えられる。 Server 0203 and received by the receiving means 0221, I applied to the column 10218 edit record, edit record of m0219. 編集記録には編集バージョンなどが記録されている。 And editing version is recorded in the change log. もし、編集記録とは別に編集バージョンがサーバーに送られてきた場合には、サーバーは両者の対応を記録する。 If, when editing version has been sent to the server separately from the change log, the server records the correspondence between the two.  ＰＣ0201がローカル原本ＤＢ0206の更新試みる場合は、まずサーバーに未受信の編集記録の送信を要求する。 If the PC0201 tries update of local original DB0206, to request transmission of editing records not received the server first. ＰＣ0201がそれまでに受信した編集記録の最後のバージョンを通知すると、送受信管理手段がそれ以降の編集記録を選別し、送信手段0220によりサーバーから送る。 If you notice the last version of editing records PC0201 it has received so far, send and receive management means screened edit record later, to send from the server by the 0220 transmission means. ＰＣの送信の受信の協調作業は送受信管理手段0217により行われ、サーバーの送信の受信の協調作業は送受信管理手段0222により行われる。 Collaborative work of receiving the transmission of PC is carried out by 0217 means sending and receiving management, collaborative work of receiving the transmission of the server is carried out by sending and receiving control means 0222.  ＰＣ0201が受信手段0216により受信した編集記録ｎ0210, 編集記録ｎ＋１2011, 編集記録ｍ0212は記憶装置0204に記録される。 n0210 edit record, edit record n +12011, edit record m0212 that PC0201 is received by the receiving means 0216 is recorded in the storage device 0204. 更新手段0214がこれらを順番に取り出して、有効性を判定してローカル原本ＤＢ0206を更新し、そのバージョンを更新する。 Updating means 0214 is taken out each of these in turn, updates the original local DB0206 and to determine the effectiveness, and then update that version.  図３に、ＰＣが保持するローカル原本ＤＢに対して行った編集の記録（つまり「編集記録」）をサーバーにアップする工程を示す。 Figure 3 shows the process for up to server record of edits made to the local original DB the PC to hold (or "Edit Record") a. まず「編集記録（のメモリエリア）を確保」0301する。 I 0301 "ensure (memory area) Edit Record" first. 「ローカル原本ＤＢ内の編集対象情報を特定」0302し、「この情報が属するバージョン設定範囲を特定し編集記録に記入する」0303。 The 0302 "identifies the edited information in the local DB in the original", "filling out the change log to identify the version setting range that this information belongs to" 0303. さらに、「このバージョン設定範囲のバージョンを取得し編集記録に記入」0304し、「編集対象の情報に対応する不変確認範囲を特定し編集記録に記入」0305し、「編集対象の情報を特定する情報、編集の中身を編集記録に記入する」0306。 Further, the 0304 "fill in the change log to obtain the version of this version range" to 0305 "fill in the change log to identify invariant confirmation range corresponding to the information to be edited", and identifies the information in "edited Fill to edit recorded content information, and editing "0306. そして「ローカル原本ＤＢに、上記編集を適用した作業ＤＢを作成」0307し、「サーバーに編集記録を送る」0308。 "And the local original DB, and create a working DB applying the above-mentioned editing" to 0307, "to send a record to edit server" 0308.  図４に、ローカル原本ＤＢに対する編集記録と、これらに指定された順序を、サーバーから受信する工程を示す。 Figure 4, I show a step of receiving from the server, editing and recording on the original local DB, the order specified thereto. まず「サーバーに前回の最終編集記録を通知」0401し、「サーバーから前回より後の編集記録のリストを受信」0402する。 The 0401 "notification the final edit the previous record to the server" First, the 0402 "receives a list of editing record after the last time from the server". このリストに従って、「編集記録を受信」0403し、「受信した編集記録を未処理編集記録リストにいれる」0404。 According to this list, 0403 "received the Edit Record", "to put in a outstanding record edit list editing records received" 0404. 最後に「編集禁止中を問い合わせる」0405。 "Query the editing being prohibited" by 0405 at the end. 編集禁止中でも、図５のサーバーから受信した編集記録でローカル原本ＤＢを更新する手段0214は起動するが、編集手段0213（および図３の手順）によるローカル原本ＤＢ0206に対する編集とサーバーへの編集記録の送信は行わない。 Even editing being prohibited, means 0214 to update the local original DB in the edit record that is received from the server in Figure 5 boots, but the change log to the server and editing for local original DB0206 (Tasks of Figure 3) and editing means 0213 It will not be sent.  図５に、サーバーから受信した編集記録でローカル原本ＤＢを更新する更新手段0214の処理工程を示す。 Figure 5 shows the processing steps of the update unit 0214 to update the local original DB in the editing recording that is received from the server. 「未処理の編集記録リスト（編集記録ｎ0210, 編集記録ｎ＋１2011, 編集記録ｍ0212のリスト）から編集記録を取り出し」0501、「この編集記録の不変確認範囲と編集バージョンにより、現在のローカル原本ＤＢに対して有効かを判定」0502し、有効ならば「ローカル原本ＤＢを更新」0503し、「ローカル原本ＤＢのバージョンを更新」0504する。 "Remove the recording from editing (edit list n0210 record, edit record n +12011, editing record m0212) edit record list outstanding" 0501, by edited version unchanged confirmation of this range "Edit record, for local original DB current it is determined that "0502 is valid Te, update" 0503 "Local original DB, to update" the 0504 version of "local original DB and if valid. これを未処理の編集記録リストの全ての編集記録に対して行う。 Is performed on edit record of all of the editing record list of untreated this.  編集記録に、サーバーがこの編集記録を受け付けた時間がその編集バージョンとして記録されていれば、これを更新されたローカル原本ＤＢのバージョンとする。 Editing recording time the server has accepted the change log, if it is recorded as the editing version to the version of the local original DB who renew it. サーバーに未受信の編集記録の有無を問い合わせた日時をバージョンとする場合は、図４の工程でサーバーから時間を取得し、図５の工程の最後（終了の直前）でその時間をローカル原本ＤＢのバージョンとして設定する。 Acquires time from the server in the step of FIG 4, in the case of a version of the date and time that queries whether the change log unreceived to the server, the local original DB that time (before the closing) end of the process of Figure 5 I set as the version of.  ある実施例におけるバージョンの変化を図６で説明する。 I will now be described with reference to FIG 6 changes in the version in one embodiment. 図６のＤＢはＲＤＢで、バージョン設定範囲をＤＢ全体、バージョンは整数、不変確認範囲は編集したレコードのみとしている。 DB in Figure 6 in the RDB, DB-wide setting range version, the version integer, immutable confirmation range is the only record that you edit. また、レコード毎にこのレコードを編集した時点の編集バージョンを「レコードバージョン」として記録し、これを用いて編集の有効性を確認している。 Also, recorded as "Record Version" edit version at the time of editing the record per record, it has been confirmed the validity of the editing by using this.  ＰＣ－Ａ0602とＰＣ－Ｂ0603はそれぞれグローバル初期原本ＤＢ0604を取得0610, 0611し、それぞれのローカル原本ＤＢ0605, 0606としている。 PC-B0603 and PC-A0602 and 0610, 0611 get a global initial original DB0604 respectively, and the DB0605, 0606 local original of each. サーバーのグローバル初期原本ＤＢ0604をコピーしているので、どちらもベースバージョンは０である。 Since copying the original global initial DB0604 of server, both of which are zero-based version. その後、サーバー0601に編集１から編集６がアップされているが、これはＰＣ－Ａ0602、ＰＣ－Ｂ0603以外のＰＣ－がアップした編集である。 Then, edit 6 is up from one edit to server 0601, but this is the editing of PC-A0602, PC-B0603 other than PC-was up. 図２では、ＰＣ－Ａ0602はもう一度サーバーにアクセスしその時の最新の編集しその順番を取得している0612。 In Figure 2, 0612 that are getting the order to edit the latest when the PC-A0602 to access the server again. このとき、編集１を取り込むので、ローカル原本ＤＢ0605のバージョンは１になる。 At this time, since capture editing one version of the original local DB0605 is 1.  さて、ＰＣ－Ａ0602の操作者が、ローカル原本ＤＢ0605内のレコードＺの複製0608を編集したとする0613。 Well, 0613 to the operator of the PC-A0602 is, and edited a copy of the 0608 record Z of local original DB0605 inside. この時、ローカル原本ＤＢ0605のベースバージョンが1なので、編集された「レコードＺの複製0608」のレコードバージョンが１にセットされる。 At this time, the base version of the original local DB0605 is 1, so record version of "replication of the 0608 record Z" that has been edited is set to 1. この編集結果がサーバーにアップされ0614、編集７として記録される。 Are recorded 0614, as 7 edit this edit is up to the server. この直後に、ＰＣ－Ａ0602は、（既に取得してある）編集１より後にアップされた、編集２から編集６を取得し、さらにＰＣ－Ａ0602先のアップ0614が編集７となった事を確認する。 Immediately after this, it is up after 1 Editors (Aru already acquired), to get the edit 6-2 editing, PC-A0602 is, check that it was up 0614 of PC-A0602 destination and edit seven further to. あらかじめ指定された「編集の有効性の判定」に基づき編集７までを順番に調査し、ローカル原本ＤＢ0605を更新する。 To investigate in order to edit 7: Based on the "determination of the effectiveness of editing" that is specified in advance, and updates the local original DB0605. ここでは、編集７が有効と判定されたとし、ローカル原本ＤＢ0605のベースバージョンが７になる。 Here, it is assumed that it is determined edited 7 is enabled, based versions of the local original DB0605 becomes 7.  一方、ＰＣ－Ｂ0603はサーバー0601から、編集１から（この同期0617時点での最新の）編集６を取得し0617、ローカル原本ＤＢ0606を更新してベースバージョンを６とする。 On the other hand, from the server 0601, PC-B0603 is a 6 base version to update 0617, the original local DB0606 to get the 6 edit (the latest at this point in time synchronization 0617) from the Edit 1. その後ＰＣ－Ｂ0603の操作者が、「レコードＺの複製0609」を編集した0618とする。 Operator of PC-B0603 is a 0618 you have edited the "replication of the 0609 record Z" then. この時、「レコードＺの複製0609」のレコードバージョンが６になり、編集としてサーバーにアップされ0619、編集８として記録される。 At this time, the record version of "replication of the 0609 record Z" is 6, and recorded 0619, as editing 8 is up to the server as editing.  その後別のＰＣから編集９がアップされた後、ＰＣ－Ａ0602がサーバー0601にアクセスし、（既に取得してある）編集７より後にアップされた編集８と編集９を取得する0622。 0622 after the edit 9 is up from another PC then, PC-A0602 to access the server 0601, to get the editing and 9 edit 8, which is up after the 7 edit (Aru already obtained). そしてローカル原本ＤＢ0608に編集８と編集９を順番に適用し、「編集の有効性の判定」を行い、ローカル原本ＤＢ0608を更新する。 And applied in order to edit and edit 8 9 to local original DB0608, to conduct a "determination of the effectiveness of the editing," and you update the original local DB0608. ここでローカル原本ＤＢ0608に編集９が反映されるので、製ＤＢ0608のベースバージョンが９になる。 Edit 9 is reflected in the local original DB0608 here, base version of DB0608 is made to 9. この時点で、先にＰＣ－Ｂ0603が編集したレコードＺの複製0609の内容がＰＣ－Ａ0602のローカル原本ＤＢ0605で有効になり、先にＰＣ－Ａ0602が編集したレコードＺの複製0608内容が無効になった事が（ＰＣ－Ａ0602で）判明する。 At this point, the 0608 content replication of the record Z the contents of the replica 0609 of record Z, PC-B0603 has edited earlier is enabled on the local original DB0605 of PC-A0602, PC-A0602 has edited the previously disabled It has turn out to (in the PC-A0602).  サーバーにデータベースが置かれ、複数の計算機がアクセスする運用が一般的に行われているが、サーバーにアクセス出来ないと編集が出来ないなどの問題もある。 The database is located on a server, operating the plurality of computers to access is performed in general, there is a problem, such can not be edited and can not access the server. 本発明は計算機が永続的に複製ＤＢを保持する、いわば本格的な「並行ＤＢ編集」を提案しており、サーバーとの接続が不可能なケースが頻発する移動体や、災害時の救援、医療、金融などいわゆるミッションクリティカルな業務に用いる事が出来る。 The present invention has proposed computer holds a replica DB permanent, full-scale, so to speak, the "Concurrent DB Edit", and mobile cases connection to the server is not possible to frequent, relief at the time of the disaster, it is possible to use the so-called business mission-critical medical care, and finance. 
Patent WO2009147847A1 - Database parallel editing method - Google Patents
