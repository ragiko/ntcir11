[DDD]ドメイン駆動設計・基盤編・モデル駆動設計
MODEL-DRIVEN DESIGN
コードはドメインモデルの生き写し
どういうこと?
ユビキタス言語を実現するには、コードにおいてもドメインモデルが正確に表現されていなければなりません。
ドメインモデルとコードとが常にお互いを反映するように保つことで、ドメインモデルの変更がそのままコードの実装を促し、逆に実装の中で得られた新たなドメイン知識が即座にドメインモデルに反映されるようになります。
どうして?
ドメインモデルがコードに反映されていない場合、以下のような不都合が発生します。
モデル価値の下落
コードがドメインモデルに紐づいていないならば、そのモデルにほとんど価値がなくなります。
開発者が、実装のために新しい抽象を考え出すと、モデル作成時に噛み砕いたドメインの知識がコードから失われます。そうなれば、モデルに組み込まれた洞察が、維持され、再発見されることはほぼなくなります。
そもそも、モデルを反映していなければ、出来上がったソフトウェアが正確にユーザ要求を満たしていない可能性が大きくなります。
モデルとコードの相乗効果の途絶 
コードとドメインモデルの間に亀裂が生じていると、それぞれの作業で得られる洞察が互いに活かされることがなくなります。
最初に作られるモデルは浅いモデルであり、まだ本質を捉えきれていません。重大な発見はいつでも、コードを実装するために努力する際に現れるからです。コードとモデルは互いにフィードバックすることによる相乗効果があって、ようやく本質に到達するのです。
どうすれば?
ドメインモデルを正確に実装へ
実装には、ドメインモデルとの紐づけが明らかになるように、ドメインモデルを文字通り忠実に反映します。
実装時は、モデルについて再検討し、より自然にソフトウェアが実装されるように、モデルの方も修正します。モデルが、後にドメインに対するより深い洞察得たら、実装に直ちに反映させます。強固なユビキタス言語を支えることに加えて、ドメインと実装両方の目的に使える単一のモデルを要求します。
用語はドメインモデルから引き出す
実装で使用する「用語法」と「責務の割り当て」を、モデルから引き出すようにします。
コードはモデルの表現となるため、コードに対する変更はモデルに対する変更になります。その影響は、プロジェクトの他の活動全体へと適宜伝わっていかなければなりません。
オブジェクト指向を使用
実装を寸分の狂いもなくモデルに結びつけるには、オブジェクト指向プログラミングのようなモデリングパラダイムをサポートするツールと言語が必要です。
骨格を見せる
モデリングがうまくいって、モデルに、ユーザとドメインエキスパートの基本的関心事を反映できたとします。
さらに、このモデルを正確に設計・実装できると、この設計の「骨格」を、より明確にユーザにさらけ出すことができます。つまり、ユーザにとって、自分から導出されたモデルが透けて見える、ということです。モデルが明らかになれば、ユーザはソフトウェアの潜在能力を引き出すことができますし、使い方も予測できるようになります。
これもモデリングが重要な理由の一つです。
ドメイン駆動設計・基盤編・モデル駆動設計 - Strategic Choice
