認識したい1つの文字を一定の大きさ(日本語の場合一般に正方形)に変換します。この処理は文字の変形(縦長、横長など)を吸収することと、一定の大きさにすることによって、後の処理を簡単にする目的で行います。
図6は正規化処理を説明したものです。
図6--正規化処理
初期のころの文字認識は、正規化された状態の文字パターンを、同じ形態で、あらかじめ登録されている標準パターンと図7に示すような単純な「重ね合せ」法によって比較をして、答を出していました。
しかし、この方法だと、「文字の傾き」や「字体」、「かすれ、つぶれ」などの変動を吸収するのが難しく、決まった字形の少数の文字以外では高い認識精度を得ることは困難でした。
その後、文字の形をそのまま比較して認識する方法から、いろいろな変動を吸収して、正確に文字を認識することができる方式(一旦、文字の「特徴」に変換する方式)がとられるようになって来ました。
図-7-----「D」と「A」を「重ね合せ」により一致度を調べている例
(完全に一致した場合に認識されたことになる)
図8は最近広く使用されている、文字の方向成分を利用した特徴の概念を示したものです。
すなわち、(i)で正規化された文字を図9のような上下、左右、斜め方向の4つの成分に分解して、メモリー量や処理時間を考えて、4つの成分を7×7程度までに圧縮したものを個々の文字の特徴として抽出します。
この時点で、1つの文字は(7×7)×4=196個の特徴値に変換されたことになります。(図8)
図8--特徴抽出
図94つの方向(1〜4の方向に近い線分に分解する)
文字認識を行うためには、(ii)で説明した「特徴」を使って、認識したい文字をすべて、あらかじめ登録しておくことが必要です。これを「標準パターン」と呼んでいます。
「標準パターン」は、いろいろな字体(明朝体、ゴシック体、教科書体など)や「かすれ」、「つぶれ」文字の認識を安定して行うために、いろいろな状態で印字された文字を平均化して作られています。
その上で認識したい文字を(i)、(ii)を経て処理された「特徴」に変換して、どの文字(標準パターン)に近いかの計算を行うわけです。
図10ユークリッド距離(D)
2次元パターン間の距離(似ている度合い)を計算する方法はいくつかありますが、一般に図10に示すようなユークリッド距離という方法が用いられています。
対応する座標ごとに以下のような計算を行います。
この方式により、入力された文字の特徴とすべての標準パターンとの距離計算を図11に示すように行います。
そして、標準パターンと距離計算した結果、最も距離の小さいものが、認識結果となります。
この処理をする場合に、距離の1番小さいものだけでなく、第2〜第5位くらいまでの結果も合わせて候補文字として表示し、誤読文字の訂正に使用したり、次の知識処理で使用する方法がとられています。
図11--マッチング処理
入力パターンの「特徴」と「標準パターン」の1〜4の方向成分毎にユークリッド距離を計算し、その値が最も小さい「標準パターン」が認識結果となります。
(iii)のマッチング処理では、たとえば、「夕(漢字)」と「タ(カタカナ)」や「力(漢字)」と「カ(カタカナ)」などを認識することは困難です。人間の場合も、これらを識別するには、文字列の前後関係を見て判断しているのです。
簡単に説明しますと、このように日本語の単語情報やもう少し広い意味での言語情報を使用して、より正確な認識を行うことを「知識処理」と呼んでいます。
知識処理では認識された文字列の候補文字から、あらかじめ登録してある単語辞書と照合して誤読した部分を自動的に訂正するという方法が一般的に使用されています。
しかし、人間は多少誤読した部分があっても、その部分を「前後関係」や、「この文章はどのような状況での文章なのか」などの情報を使って推測することができますが、現状の「知識処理」は、まだこのレベルには至ってはおりません。
以上に示しました(i)〜(iv)の処理により、個々の文字認識が行われ、その結果が得られるのです。
図---12知識処理
(iii)で得られた候補文字の情報を使用して図12のように行います。 
「東」を「束」と誤認識したが、2位に「東」があったので、「東京」という単語辞書により自動訂正される。
OCR技術解説3:文字認識技術の概要(2)[第5ステップ]
