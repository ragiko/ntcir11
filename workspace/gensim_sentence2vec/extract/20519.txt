64ビットアドレス拡張(実記憶拡張)
64ビット実記憶拡張によって、数ギガバイトオーダのDBバッファを使用できます。これによって、I/Oの回数を削減し、処理時間を短縮できます。データベース処理の大幅な高速化が望めます。
階層型データベースと同等の性能を実現する技術
レコード(行)単位にデータを扱うことが可能
階層型DBでは、データの処理単位はレコードごとではなくレコードを構成する要素ごとです。リレーショナルデータベースでは、一般的には列単位でデータを操作する列インタフェースが基本ですが、列数が非常に多い表に対しては、列数に依存しない安定した性能を維持できる行インタフェースを利用できます。
繰り返し構造の利用
繰り返し列とは、1行中の一つの列に複数の値を格納できる可変要素数の配列です。これにより、非正規形のデータでも効率よく格納・管理することができます。繰り返し列を使用すれば、従属するデータ数が定まらない場合でも、より自然な構造で扱え、表数を削減して検索時の結合を回避したり、行数を削減して行単位のオーバヘッドを回避したりできます。
大量データの高速処理技術
無排他インデクス
無排他インデクスとは、インデクスに排他制御を行わないで(データページまたは行に対しては排他制御を行う)、表の検索や更新などの処理を行う方法です。無排他インデクス表を使用することで、表検索中に行の追加、更新、削除などを同時実行でき、インデクスによる排他待ちやデッドロックをなくし、性能を向上できます。また、表だけでなく、インデクスの更新、検索処理についても、実行性能を向上します。
パラレル処理技術(入出力パラレル、SQLパラレル、ソートパラレル)
XDM/RD E2では、データベース処理を並列に実行することで、処理時間の短縮を図っています。並列実行できるのは、データの入出力処理、SQL実行処理、ソート処理です。
入出力パラレル
データを大量に入力し集合処理するバッチ処理、または非定型な検索操作のSQLの実行時間は、データベースの入出力時間に左右されます。このSQLの性能を向上させるため、データベースの入力を並列に実行してSQLの処理時間を短縮できます。
横分割表、または横分割インデクスによって、RDエリアを別々のボリュームに分割格納している場合、データの入出力をRDエリア単位に並列実行し、入出力時間を短縮することができます。
SQLパラレル
一つのSQL文を複数の処理単位(サブSQL)に分割して並列実行し、SQLの処理時間を短縮します。複数表をアクセスする大量検索や、大量のデータを操作する非定型業務に有効です。
ユティリティの並列実行
一つの表を最大1024RDエリアに分割し、その分割単位にユティリティを並列に実行することができます。これにより、ユティリティの実行時間の短縮や、分割単位にメンテナンスをするなどの運用ができます。
XDM/RD E2:高速処理技術:ソフトウェア:日立
