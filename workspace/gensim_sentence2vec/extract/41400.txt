未踏プロジェクトに応募するときの書類のなかに、「テーマ提案書」と「提案テーマ詳細説明書」というのがある。
前者は応募内容についての概略を、また後者には詳細な内容を書くことになっている。
このうち書類審査で重要なのは、前者の「テーマ提案書」だそうだ。
応募を選定する PM (Project Manager) も忙しい方ばかりなので、まず概要が書かれた「テーマ提案書」に一通り目を通した後、有望そうなものをピックアップして書類審査通過通知を出す。
そのあと、面接で「提案テーマ詳細説明書」の内容についてじっくり審査する、というのが多いらしい。
もちろん PM によってやり方は違うだろうけど、多忙な PM のことを考えると、そうなんだろうと思う。
というわけで、書類審査に通るためには、詳細を書いた「提案テーマ詳細説明書」よりも、概略を書いた「テーマ提案書」のほうが大事だということがわかるだろう。
でも「テーマ提案書」の書き方って、初めての人にはわからないと思うんだよね。
研究室に配属されている学生なら、先輩や教授にお願いして教えてもらえるかもしれないけど、そうでなければ教えてくれる人なんかいないしね。
じゃあどうすればいいかってことなんだけど、選ぶ人 (PM) の立場になって考えればいいと思う。
自分が選ぶ立場になったとき、どんな提案書なら合格させるだろうか?という視点で考えてみよう。
自分なら、以下のことが簡潔かつ分かりやすく書かれているものは合格にする。
問題点とその背景 (何を解決しようとしているのか?)
具体的な解決方法 (どうやって解決しようとしているのか?)
利点や利益や効果 (どんなうれしいことがあるのか?)
作る予定のもの (期間内に作るソフトウェア/ハードウェアや行うべき作業)
これらがきちんと簡潔かつ分かりやすく書けていれば、書類審査で落ちることはあまりないそうなので、過去に書類審査で落ちた人はもう一度自分の提案書を見直してみよう。
なお「新規性」については、さほど重要視されてないと聞くので (未踏なのに!)、別に「世界を変えるような提案」である必要はない (もちろんそういう提案であればなおよい)。
・ ・ ・
以下、提案書のサンプル。
なおあくまでサンプルなので、提案内容についてはツッコミ禁止。
サンプル#1: GPGPUを利用した、データベース用ドライバの作成
(問題点とその背景)
Web アプリケーションでの代表的なボトルネックに、データベースが挙げられる。
これは、データベースは分散化が難しく一極集中になりやすいことが主要因であるが、他にも原因はある。
MySQL を使った Web アプリケーションのボトルネックを筆者が独自に調査を行ったところ、データベースからデータを取得する部分だけでなく、取得したデータを Ruby や Python のデータ (配列やハッシュテーブル) に変換する部分も、大きなボトルネックになっていることが分かった。
つまり、データベースから取得したデータを、各プログラミング言語固有の配列やハッシュテーブルに変換する部分を高速化しないと、アプリケーションの高速化は難しいことがわかる。
(具体的な解決方法)
そこで本提案では、取得したデータを変換する部分を、GPU を使って高速化する。
画像処理以外の用途で GPU を使うことは、現在では GPGPU と呼ばれている。
そして上述したデータ変換部分は、「大量のデータを扱う」「条件分岐が少ない」という特徴があるが、これは GPGPU と相性がいい。
そのため、GPGPU を使うことで大幅な高速化を達成できると予想される。
(利点や利益や効果)
本提案による手法を使うことで、データベースまわりの主要なボトルネックのひとつを解消できるため、アプリケーションの高速化が期待できる。
またサーバサイドでは GPU はほとんど活用されていないが、本手法を使えば CPU の負荷の一部を空いている GPU に分担させることができるため、CPU の負荷を下げることができる。
(作る予定のもの)
本提案が採択された場合、以下の成果物を作成する予定である。
GPGPU を使った、Ruby用 MySQL データベースドライバ
GPGPU を使った、Ruby用 PostgreSQL データベースドライバ (余力があれば)
既存のデータベースドライバと比較するためのベンチマークデータ
・・・・
おまけ。
個人的な印象だけど、ある技術を別の分野に適用してみましたという提案は、採択されやすいような気がする。
ある技術の適用範囲を広げることは、その技術の重要性を増すことになるので、その技術を好きな PM ならやっぱり採択するでしょ。
ここでは GPGPU を使ったけど、GPGPU を科学技術計算以外の用途、たとえば GPGPU を使ってデータベースエンジンが高速化しましたとか、ネットワークが高速化しましたとか、セキュリティが向上しましたとか、そういう提案であればフツーに採択されるはず。
サンプル#2: 一部のデータを事前に送信しておく動画配信システム
(問題点とその背景)
Ustreamに代表されるように、現在では誰でも気軽にライブ放送を行うことができる。
また新しいiPadのように、端末の高解像度化が進むため、高解像度の動画がますます求められる。
しかし現状では、高品質な動画の配信はネットワークの帯域を多量に消費する。
そのため高解像度なライブ放送を行うと、映像や音声が途切れることが多く、視聴時にストレスがたまる。
(具体的な解決方法)
そこで本稿では、放送に使用する動画から、事前に送信できるデータを抽出し、それをあらかじめ視聴者に送信しておくことで、ライブ放送時の動画データのサイズを減らす方法を提案する。
たとえばアニメーションは、原理的には「背景画像」に「セル画」を重ねることで映像を作り出す。
このうち、背景画像のデータをあらかじめ視聴者に配信しておけば、放送時はセル画のデータを送信するだけで済む。
視聴者側では、放送前にあらかじめ取得しておいた背景画像データと、放送時に送信されたセル画データをリアルタイムに合成することで、本来の映像を見ることができる。
(利点や利益や効果)
本提案の手法を使えば、条件付きではあるものの、ライブ放送における動画データのサイズを減らすことができる。
そのため、特にスマートフォンのようにネットワークの帯域が限られる端末でも、ストレスなく放送を楽しむことができる。
また同じ帯域を使った場合では、従来より高解像度のデータを放送できるため、新しいiPadのような高解像度な端末が将来的に広く普及すれば、より重要な技術となるであろう。
(作る予定のもの)
本提案が採択された場合、以下の成果物を作成する予定である。
視聴者に、事前に背景画像を送信する配信システム
背景画像とセル画データをリアルタイムに合成する映像システム
合成するタイミングを制御するスクリプト言語
なお作業量と期間を考慮し、動画データから背景画像を抽出するシステムは作らない。
つまり、背景画像と配信用セル画データはすでに分離されているものとする。
・・・・
おまけ。
未来を予測し、それに沿った提案をすると、PM のような人たちには喜ばれる。
たとえば、将来はディスプレイの解像度が非常に高くなるはずだ、そうなるとビットマップをもとにした動画フォーマットはサイズが膨れ上がるばかりで不利だ、だからベクター形式をもとにした動画フォーマットを考案しました、てな感じ。
今現在では利点がなくても、将来こういう状況になったらこういう利点がありますよ、という説明ができれば、採択される率は高い。
提案できるようなネタがないと嘆いている人は、まずは未来を予測することから始めてはどうでしょう。
サンプル#3: 人為的な小規模地震の影響を調べるシミュレータの開発
(問題点とその背景)
我が国は世界でも有数の、地震の多い国である。
地震は、それ自体による被害だけでなく、そこから引き起こされる火災や津波などによる被害も非常に大きい。
また近年は、各地に建設された原子力発電所の下に新しい活断層が発見されるなど、国民の不安は高まる一方である。
地震は、地球の表面を覆う十数枚のプレートが少しずつ移動することでプレートの間にひずみが発生し、たまったひずみが一度に解放されるために発生する。
ひずみは数十年かけて蓄積され、プレートが耐えきれなくなったときに地震が発生する。
(具体的な解決策)
筆者らはかねてより、小規模な地震を人為的に起こすことで、大きな地震の発生を防ぐことができないか、研究してきた。
数十年かけてプレートに蓄積されたひずみが一度に解放されるから、大地震が発生するのである。
ならば数年に一度、ひづみが小さい段階で解放してやれば、大地震の発生は防げるのではないかという研究である。
つまり、ひとつの大きな地震を、複数の小さな地震に分解するのである。
(利点や利益や効果)
たとえば震度 7 を超えるような大地震は 1 回だけでたいへんな被害をもたらす。
もしこれが 3〜4 回の震度 2 や 3 の地震に分解できれば、国内の建築物で震度 3 に耐えられないものはないであろうから、被害はほぼゼロにできる。
また地震の被害が大きいのは、それがいつ発生するのか予測できないことにも起因する。
もし人為的に地震を発生させることができれば、発生時刻が明確にわかるため、被害はより小さくできる。
つまり「予測できないなら、わざと引き起こしてしまえ!」である。
(作る予定のもの)
本提案が採択されたあかつきには、人為的地震のシミュレータを作成する予定である。
このシミュレータでは、
地中のどの箇所に、
どれだけの爆発物を仕掛けると、
どのくらいの大きさの地震が、
どの範囲に発生するか
をシミュレートするソフトウェアである。
なおシミュレーションに必要なデータは、(不完全ではあるものの) 今までの研究で蓄積したデータを使用する。
なお未踏創造事業はソフトウェアについてのプロジェクトであるため、本提案でもソフトウェアの作成を目的とし、ボーリング調査などは本期間では行わない。
・・・・
おまけ。
この例のように、コンピュータ関連ではない分野から応募する場合は、シミュレータを作ることにするのが手っ取り早い。
たとえば経済を専攻している人なら株取引のシミュレータとか、本屋さんなら本の配置を変更するとお客の流れにどう影響するかを調べるシミュレータとか、理系非モテ男子なら彼女がいる生活のシミュレータとか (そりゃラブプラスやー!)。
それから提案のインパクトを上げたいなら、得られる利益や効果を金額で表すとよい。
今回の例なら、大地震による被害は兆円になります、それを本提案ではゼロにできます、という説明ができれば、非常に効果が高い。
サンプル#4: 静的言語のノウハウを応用した、UML 用検証ツールの作成
(問題点とその背景)
ソフトウェア開発が失敗する原因の多くは、要件定義や設計など上流工程にあると言われている。
たとえば要件定義書や設計書が形式化されておらず、分かる人にしか分からないようなドキュメントになっていることなどが挙げられる。
この問題を解決するために、UML が生まれた。
UML (Unified Modeling Language) とは、上流工程のためのグラフィカルな仕様記述言語である。
図を使うので仕様を分かりやすく書け、また記法と意味が標準化されるので誰もが仕様を同じように読み書きできるものと期待された。
しかし実際には、UML を使っても上流工程はさほど改善されなかった。
確かに UML は、設計図の記法や意味を統一することはできた。
なぜなら、仕様の矛盾や要件漏れといった、上流工程における本当の問題点は何も解決できなかったためである。
(具体的な解決方法)
そこで本提案では、静的言語のノウハウを UML に応用し、設計書の矛盾点や漏れをチェックしてくれる検証用ツールを作成する。
最近の UML 作成ツールは、UML を XML で出力できるものが多い。
その XML をソースコードと見なして読み込み、静的言語と同じように検証することで、たとえば次のような間違いを検出できる。
ユースケース図に書かれてある機能が、ほかのどの図でも触れられていない。
アクティビティ図に書かれてあるアクターが、ユースケース図に存在しない。
オブジェクト図に書かれてあるクラスやメソッド名が、クラス図と違う。
(利点や利益や効果)
本提案の方法により、設計図である UML の間違いや漏れや矛盾を大幅に減少でき、その品質が向上する。
これにより、ソフトウェア開発で最も大事な上流工程を大きく改善でき、プロジェクトの成功率を高めることができる。
(予定される成果物)
本提案が採択された場合、以下の成果物を作成する予定である。
UML を表す XML ファイルを読み込んで、整合性がとれていない箇所を検出するソフトウェア
どのような整合性がチェックできるかの一覧とそのサンプル
・・・・
おまけ。
提案書では、利益や利点をなるべく大きく見せることが大事。
たとえば今回の提案では、「UMLを改善するソフトウェア」では落選の可能性が高い。
しかし、「上流工程を改善するソフトウェア」なら合格する可能性が高いので、それをアピールした内容にしている。
なお、この程度のことならすでに商用のツールが実現していると思う (多分…) ので、もしこれが採択されるとしたら、「UML だけでなくソースコードとの整合性もチェックするようにしてほしい」などという注文が PM から出されるだろう (こういう、「注文つき採択」というのはわりとある)。
サンプル#5: コミケにおけるベストな待機列の配置をリアルタイムで計算し指示を出す待機列最適化エンジンの開発
(問題点とその背景)
休日の遊園地やスポーツイベントでは、ジェットコースターのような人気スポットで「待機列」が発生する。
この待機列は、十分に広い会場であればさほど問題にはならない。
しかし狭い会場で混雑しているときに「待機列」があると、それが「列」であるがゆえに人の流れを遮断し、さらなる混雑を招き、最終的に安全上の問題につながる。
これを防ぐためには、会場スタッフが適切な指示を出し、人の流れをなるべく妨げないように待機列を形成する必要がある。
しかしそのような指示が出せるような経験豊かなスタッフは少なく、育成も困難である。
(具体的な解決方法)
そこで本提案では、コミックマーケット (以下コミケ) を題材とし、人の流れを撮影した映像をリアルタイムに解析して、最適な待機列の形成を指示するようなエンジンの作成を試みる。
具体的には、次のような待機列リアルタイム最適化エンジンを作成する。
まず会場内上空の複数箇所にカメラを設置し、人の流れを撮影する。
そして画像認識技術を使うことで、
どこのサークルの待機列が伸びているか
会場のどこが混んでおり、どこにスペースが空いているか
参加者がどこからどこに移動しようとしているか
を瞬時に把握する。
そのデータをもとに、人の流れを最もスムーズにするような待機列の配置をリアルタイムで計算して運営スタッフに指示を出す。
(利点や利益や効果)
本提案によるシステムにより、コミケに限らず遊園地やコンサートなど、人が多くかつ何らかの待機列が発生するイベント会場において、待機列によって混雑が悪化するのを避けることができるようになる。
そのため、混雑した会場での安全性の向上につながる。
・・・・
おまけ。
この提案例は、実現したときの得られる効果がわかりやすい。
しかしこの文章では、ただ単に「画像認識技術を使う」とか「リアルタイムに最適解を計算する」としか書かれておらず、具体的な方法が書かれていない。
そのため、PM によっては「実現のための具体性に乏しい」という理由で却下される可能性がある。
実現可能性が高いことを示すような説明があるといいが、提案書が長くなるので書ききれないという場合は、提案テーマ詳細説明書に書けばいいだろう。
あと「コミケなんかを題材にして大丈夫なのか? 書類審査で落ちるんじゃないか?」と心配する人もいるかもしれないが、大丈夫。
そんなことがマイナスポイントになるような未踏プロジェクトではない。
未踏プロジェクトに応募したい人のための、テーマ提案書のサンプル | 私の小岩ホッチキス
