
検証
ディスク・デフラグメント完全マスター
1.ディスク・フラグメントの基礎知識(1)
デジタルアドバンテージ
2000/10/21
ハードディスクは、Windowsシステムやアプリケーション・プログラムをインストールしたり、アプリケーションで作成した文書や画像などのファイルを格納したり、あるいは必要に応じてそれらを取り出したりするための場所である。ファイルは、ディレクトリ(フォルダ)と呼ばれる格納場所を「入れ子」状に作成して、この中に分類して格納できるようになっている。
これらのフォルダやファイルが、ハードディスク内部で物理的にどのように格納されているかをユーザーが意識することはほとんどない。それらを意識しないでファイルを操作できるように、Windows 2000がディスクの物理的なメカニズムを隠蔽してくれているからだ。実際のところ、ユーザーから見れば1つのファイルでも、ディスク内部ではそれらを細切れにした断片がバラバラに格納されている場合がある(このような断片、または断片が発生することを「フラグメント」と呼ぶ)。それがディスク内でどれだけバラバラになっていようと、ファイルが読み出されたら、Windows 2000がそれらの断片を拾い集めて1つのファイルにまとめてくれる。物理的なディスク管理の面倒な部分は、すべてWindows 2000がやってくれるというわけだ。
よろしい。Windows 2000にははりきって働いてもらおう。しかしお察しのとおり、バラバラになった断片を拾い集めるには時間がかかる。この時間は、ファイルがバラバラなほど(フラグメントが激しいほど)大きくなるはずだ。つまりフラグメントが激しくなればなるほど、ディスク・アクセスは遅くなっていくはずだ。
ところで、本来は1つであるファイルが、このようにバラバラになってしまうのはどうしてだろうか。バラバラになったファイルの断片を拾い集めるとは、具体的にはどのようなことなのか。本題のデフラグメントに話を進める前に、ハードディスクやファイル・システムのしくみと、フラグメント発生のメカニズムについて説明しておこう。
トラック、シリンダ、セクタ、クラスタ
ハードディスクの内部構造を次の図に示した。この図から分かるとおり、ハードディスク内部には、「プラッタ」と呼ばれる円盤状の金属板があり、これを一定速度で回転させながら、磁気的にデータを記録している。データを読み書きするのが「磁気ヘッド」で、アームを移動させることで、ヘッドは円盤の内側から外側まで移動できる。プラッタを回転させながら、適切な場所にアームでヘッドを移動させて、データを読み書きしていくわけだ。現在市販されている大容量ハードディスクには、通常、複数のプラッタが重なるように配置されており、各プラッタの面にそれぞれ1つのヘッドが用意されている(プラッタには両面にデータを書き込める)。
ハードディスクの構造
ハードディスクの内部には、プラッタと呼ばれる円盤状の金属板があり、これを一定速度で回転させながら、磁気ヘッドでデータを読み書きする。プラッタは、陸上競技のトラックのように、同心円状に区切られ(こちらもトラックと呼ばれる)、さらにトラックはセクタと呼ばれる小さな単位(通常は512bytes)に分けられている。ハードディスク・レベルでのデータの読み書きは、通常はこのセクタ単位で行われる。
このようにプラッタの表面は、陸上競技のトラックのように、同心円状に区切られている(こちらも同様に「トラック(track)」と呼ばれる)。このプラッタを高速に回転し、プラッタを横切るように磁気ヘッドを移動しながら、各トラック上にデータを書き込んだり、トラックからデータを読み出したりする。すでに述べたとおり、プラッタが複数存在する場合には、磁気ヘッドも複数存在することになるが、この際でも、すべての磁気ヘッドは同時に移動する。したがって各ヘッドは、いつでもそれぞれのプラッタ上の同じトラック上に位置することになる。この一連のトラックのグループは「シリンダ(cylinder)」と呼ばれる。たとえばプラッタが2枚で、それらの両面が使用可能なら、1つのシリンダは4つのトラックからなることになる。「cylinder」は「筒」という意味だが、これは各プラッタ上で、中心からの距離が同じトラックを積み重ねたものを「円柱」に見立てることから命名されている。
そしてさらに各トラックは、「セクタ」と呼ばれる領域に分割される。セクタはディスクにおける物理的な記憶域の最小単位である。1トラックあたりのセクタ数はハードディスクごとに異なるが、1セクタのサイズはたいてい512bytesである。しかし、サイズの大きなハードディスク全体をこのセクタ単位で管理するのは煩雑であるし、効率も悪いことから、通常、OSが管理するファイル・システムでは、連続するいくつかのセクタをまとめた「クラスタ(cluster)」を記憶域の最小単位として扱う。Windows 2000では、ハードディスクのフォーマット時にクラスタ・サイズを指定できるが、2Gbytes以上のハードディスクをNTFSボリュームとしてフォーマットした場合、デフォルトのクラスタ・サイズは4Kbytesになる。クラスタ・サイズを小さくすると、クラスタ・ギャップ(1クラスタのサイズに満たないデータを書き込んだときにできてしまう無駄な領域)を低減できるが、クラスタ・サイズを小さくすると、それだけ多くの管理領域が必要になり(後述するMFT)、またフラグメントも発生しやすくなるという欠点がある。したがって通常は、デフォルトのクラスタ・サイズを変更する必要はないだろう。
ファイルの読み書きとヘッド・シーク
ハードディスクの構造がおおよそ分かったところで、ファイルを読み書きする際のディスクの挙動について考えてみよう。たとえば今、OSからあるファイルの読み出し依頼を受けたとしよう。OSは、そのファイルがディスク中のどのクラスタに存在するかを知っているので、そのクラスタに対応するセクタを読み出す命令をディスクに送る。するとハードディスクは、指示されたセクタを読み出すために、そのセクタが存在するトラックの真上に磁気ヘッドを移動させる。一般にこれは「ヘッドの位置決め」と呼ばれ、これに必要な時間は「シーク時間(seek time)」と呼ばれる。そしてヘッドの位置が決まったら、ヘッドの真下にデータが記録されているセクタが回ってくるのを待つ。この待ち時間は「回転待ち時間」と呼ばれる。ただし、現在市販されている最新のハードディスクは、ディスク内部にキャッシュ・メモリを備えており、特定セクタの読み出し指示を受けると、そのセクタを含む1トラック分のデータをまとめて読み出し、キャッシュ・メモリにコピーしておくようになっている。こうして連続したセクタの読み出し要求に対しては、ディスクを読むのではなく、キャッシュ内のデータを素早く返すことができるようになる。
このとき、ファイルのすべてのデータが同一トラックのクラスタに記録されているなら、ファイルの読み出し中はヘッドを移動する必要はない。また1つのトラックに収まりきらなかったファイルでも、それらが1つのシリンダ内に収まっていれば、同様にヘッドを移動せずにデータを読み込める。
一方、1つのシリンダにも収まりきらないサイズのファイルは、複数のシリンダにまたがってデータが記録されているので、すべてを読み出すには、ヘッドを移動しなければならない。この場合でも、データが隣接するシリンダに記録されているなら、ヘッドはほんの少し横にずれるだけですむので、高速にデータを読み続けることができる。ところがデータが離れた位置にあるシリンダに分散して記録されている場合には、ヘッドの位置決めをやり直さなければならない。ヘッドの位置決めを何回も行う場合には、そのたびにヘッドのシーク時間や回転待ち時間発生することになる。つまり、クラスタ配置が分散すると、それだけファイル・アクセスは遅くなる。これを防ぐには、一連のデータ読み出しにおいて、ヘッド・シークを最小限に留めるようにクラスタを配置することだ(ハードディスクの詳細を知りたければ、Winn L. Rosch著、『Hardware Bible Fifth Edition』が参考になるだろう)。
関連リンク
Book Review:Winn L. Rosch著、『Hardware Bible Fifth Edition』(PC Insider)
INDEX
[検証] ディスク・デフラグメント完全マスター
1.ディスク・フラグメントの基礎知識(1)
コラム:NTFSではフラグメントは発生しにくい? 
2.ディスク・フラグメントの基礎知識(2)
3.Windows 2000標準のデフラグ・ツールを使う(1)
4.Windows 2000標準のデフラグ・ツールを使う(2)
5.フル機能版のDiskeeper 5.0を使う(1)
6.フル機能版のDiskeeper 5.0を使う(2)
7.検証:フラグメントはシステム・パフォーマンスにどれだけ影響を及ぼすのか?(1)
8.検証:フラグメントはシステム・パフォーマンスにどれだけ影響を及ぼすのか?(2)
検証
ディスク・デフラグメント完全マスター − @IT
