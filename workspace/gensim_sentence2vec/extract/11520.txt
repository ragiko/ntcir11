前回、要求レビュについて解説した。そこで、要求の曖昧さをチェックすることが重要だとは述べたが、「複数の解釈ができることはないか?」というレビュ項目を示しただけで、要求レビュの具体的なやり方については説明しなかった。
今回は、要求仕様の曖昧さとは何か?それをどのようにして検出すればいいのか?について考えよう。
さて日常的な意味では、曖昧さというと、「ものごとがぼんやりしていて、何であるかはっきりしない様子」のことだろう。同じように、要求が明確に定義されていない(不明性)か、複数の意味に解釈できる(多義性)とき、要求が曖昧だと考えることができるだろう。
機能要求の構造と曖昧さ
そもそも曖昧さはどのようにして発生するのだろうか?
非機能要求については、本連載でもゴール指向要求工学などで定義する手法を何回か紹介しているので、ここでは機能要求の曖昧さについて考えていくことにする。
ソフトウェアの機能要求を、図1に示すように、「ある状況の下で何かのイベントを契機として、指定された動作を実行することにより、期待する結果を関係者(アクタ)にもたらす」ことだと考えてみる。
そうすると、機能要求における曖昧さを明らかにするためには、図1に示すような要求記述の構成要素と曖昧性との関係を考える必要があることが分かる。この場合、構成要素ごとの曖昧さと構成要素間の対応関係の曖昧さがあることにも注意しよう。
アクタ(関係者)
機能を誰のために提供するのかという問いに答えることは、それほど簡単なことではない。たとえばシステム開発ベンダは、情報システム部門からシステム開発を受注するとしても、開発した情報システムを実際に活用するのは、事業部門やその事業部門がサービスを提供する消費者であったりする。このような場合には、機能を利用するアクタから要求を抽出したり、アクタの行動を直接観察することはできないかもしれない。社内システムや、パートナー企業が明確な場合には、システムの利用者の意見を要求レビュの段階で早めに聞くことで対処できる。また、消費者増が予め特定できる場合には、そのような消費者の意見をまず聞くべきである。
しかし、そうでない場合にはアクタを明確に定義することはできないために、本質的な曖昧さが残ることになる。このような場合ではあっても、システムを継続的に進化させていくことができれば、運用情報に基づいてアクタの特性を分析することで、段階的にアクタを定義しなおしていくことができる可能性はある。このような本質的に曖昧さを含む要求については、曖昧さを制御する工夫を要求の中に予め組み込む必要があるだろう。
状況
機能がどのような状況で動作するかということを網羅的に考えることも、アクタを定義することと同じように、なかなか難しいことである。開発者は、機能がどんな場面で使われるかを知らないことが多い。また知る機会も少ない。しかし、それをいいことに開発者が自分の思い込みで機能要求を定義したのでは、開発した後で、こんな機能は使えないということになって、結局、大幅な手戻りが生じることになる。
状況で動作するのか、それとも特定の状況のときだけ動作するのかということも曖昧さの原因になる。このように、ある事柄の曖昧さは、その事柄に対して複数の解釈が対応する多義性に起因する。また、異なる言葉が同じ意味を持つ同意語の問題もある。
イベント
機能が動作する契機としてのイベントは正しく定義されているだろうか?機能の動作だけが正しくても、動作して欲しいときに動かなければ意味がない。
ある状況の下で、必要なイベントを定義できるだろうか?状況とイベントの関係を問うことが大切である。
イベントの解釈は一意に決められるだろうか?適用分野の知識がないと意味を理解できないことはないか?逆に技術的な用語でイベントを定義した場合には、顧客の立場で理解できないことになるのではないか?
イベントを発生するのは、システムの内部なのかそれとも、システムの外部からイベントが到着するのか?その形式はどうなっているのか?内容はどうか?
これらの点についても多義性が発生する可能性がある。
定期的なイベントの場合もあれば、リアルタイムなイベントや必要に応じてオンデマンドに発生するイベントもある。これらのイベントの特性を抽出しておかないと、設計段階で大幅な手戻りが発生することは明らかであろう。
入力
機能に対する入力は正しく定義されているだろうか?入力はどのように状況やイベントと関係しているだろうか?想定外の入力があるかもしれない。機能に関する入力の範囲を明らかにしておく必要がある。
動作
機能の動作の定義では、状況やイベントおよび入力に基づく動作条件、動作に対する制約、動作内容を明確に定義する必要がある。
処理内容の記述では、まず入力や出力の構造とその要素の値についても多義性が生じる可能性がある。また、指示代名詞や条件節の係り受けの範囲を確認しておくことが重要だ。とくに、論理的な関係、時間的な関係、手順的な関係に対して複数の解釈ができることが多いので、十分な注意が必要である。
イベントとも関連するが、永続的な動作なのか、永続せず動作完了後は消滅する揮発的な動作なのかという区別も必要になる。
結果
結果の記述についても、範囲、内容についての曖昧さをなくす必要がある。どういう状況で、どのイベントおよび入力に対してどんな出力や結果を期待するのかを明確にする。また例外状況はどのように規定されているだろうか?もし期待に反する結果が出たときには、責任はどこにあるのか?ここでの問題は、期待と機能要求の差異である。
計算処理できることには限界がある。この問題に対処するためには、結果に関する定量的な達成条件を定義することである。もし達成条件を含めて機能要求に曖昧さがなく、それでも与えられた状況の下で期待した成果が出なかったとすれば、必要なことは結果に関する達成条件を変更することである。
アクタが想定外の結果に反応して、想定外の行動を重ねた場合にシステムは予期しない結果を生むことはないだろうか?このような状況と結果の複数の組み合わせについても、システムが予期しない結果を生まないことを確認することが大切である。
このように、機能要求をアクタ、状況、イベント、動作、結果というように構成要素に分類して理解しておくことで、これらの要素の内容を明確化できるだけでなく、相互関係を分析することができるようになり、それに基づいて機能要求の曖昧さを低減できるようになることが分かる。
要求の曖昧さの分類[1]
要求の曖昧さには、用語の曖昧さ、用語の指示・修飾関係の曖昧さ、ドメイン知識に起因する曖昧さ、要求の構成に関する曖昧さ、システム化の範囲や構成に起因する曖昧さなどがある。
第38回:要求の曖昧さ(要求工学:Requirements Engineering)
