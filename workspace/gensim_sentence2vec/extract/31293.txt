 
1.プロファイルとコンテキスト
コンテキストは、プロファイルがアクティブになるための条件付けです。タスクやシーンと違って、プロファイルから独立して作成することはできませんが、Taskerというアプリケーションを性格付ける重要な要素だと言えます。
コンテキストとして設定できる条件の内容は、デバイスの状態、位置情報、時間など多様ですが、その性質によってグループ分けされています。大別してState(ステート)コンテキストとEvent(イベント)コンテキストの二種類ですが、Application(アプリケーション)、Time(時間)、Day(日付)、Location(位置)の各コンテキストは、その使用頻度の高さや応用範囲の広さのためでしょうか、ステートやイベントとは別の扱いとなっています。
各コンテキストの詳しい内容についてはユーザーガイドを見てもらうとして、ここではステートコンテキストとイベントコンテキストの違いと使い方を見ていきましょう。
State(ステート)コンテキスト
ステート(状態)とは、デバイスやソフトウェア、各種センサーによって感知される周囲の状況などが、ある一定の時間継続する状態にあることを指し、その状態にあるときにプロファイルがアクティブになります。
ステートコンテキストによって条件付けされたプロファイルでは、条件が成立したときと、再び条件が不成立になるときの二つの時点に、実行するタスクを設定することができます。条件が成立したときに実行されるタスクをEnter(エンター)タスクといい、不成立になるときに実行されるタスクをExit(イグジット)タスクと言います。イグジットタスクを設定するかどうかは任意です。
エンタータスク内でセッティングに分類されるアクションを実行した場合、そのアクションによって行われた変更は、プロファイルが非アクティブになったときに元に戻されます。(ただし、タスク内で実行されたスクリプトによって変更が行われたり、Perform 
Taskアクションが呼び出した子タスクが設定を変更した場合、変更は復元されません。)
Event(イベント)コンテキスト
イベント(出来事)とは、デバイスやソフトウェアなどに状態の変化があった瞬間を指し、その瞬間にプロファイルがアクティブになります。イベントコンテキストによって条件付けされたプロファイルは、イベントの起きた瞬間にアクティブになり、その直後には非アクティブな状態に戻ります。
イベントコンテキストによって条件付けされたプロファイルでは、条件が成立した瞬間に実行されるタスクを二つまで設定することができます。設定された二つのタスクは同時に実行されます。
実行されたタスクには、配列変数%evtprmによってイベントコンテキストのパラメーターが渡されます。配列の各要素には、コンテキストのパラメーターが順に格納されます。
ステートコンテキストでは、エンタータスク内でセッティングアクションを使うと、変更された内容がプロファイルの非アクティブ時に復元されるという機能がありましたが、イベントコンテキストではプロファイルがアクティブな間だけ設定を変更するということができないので、セッティングアクションによって変更された内容は、プロファイルが非アクティブになった後も継続されます。
複数のコンテキスト
一つのプロファイルに対して、最大四つまでコンテキストを設定することができます。プロファイルに設定されたコンテキストが全て成立した時点でプロファイルはアクティブになります。
ただし、イベントコンテキストのように瞬間的にしか成立しないコンテキストを複数設定することはできません。
しかし、Profile Activeステートコンテキストを使うと、間接的にですが、より多くのコンテキストをプロファイルに追加することができるので、イベントコンテキストを含むプロファイルを二つ以上指定することも可能になり、この場合決してアクティブにならないプロファイルを作ってしまう可能性があります。
コンテキストのモニタリング
コンテキストの成立をTaskerが知るためには、コンテキストの内容に従ってデバイスの状態を監視(モニタリング)する必要があります。モニタリングの種類によってはGPS機能を使った位置情報の取得やWifiによるアクセスポイントの検索など、バッテリー消費を増大させる要因になるものもあり、コンテキストの設定の際にはそのコンテキストがどのようなモニタリングを必要とするのかを考える必要があります。
このような事情からTaskerでは、複数のコンテキストが設定されている場合、消費電力の小さいコンテキストが成立するまでは、より電力消費の大きいコンテキストのモニタリングは行わないことで、バッテリーの消耗を極力抑えるようになっています。
具体的には、次のような分類に基づいてモニタリングが行われます。
Proximity Sensor(接近センサー) / Gestureイベントコンテキスト / Orientationステートコンテキスト(加速度センサー) 
Location(GPS)コンテキスト 
Wifi Nearステートコンテキスト 
Location(Net)コンテキスト 
Applicationコンテキスト 
Cell Nearステートコンテキスト 
Calendar Entryステートコンテキスト 
Dayコンテキストおよび、Timeコンテキスト 
その他全て 
このリストの上に行くほどモニタリングに多くのバッテリー消費をすることになります。つまり、異なる分類のコンテキストが二つ以上設定されている場合、リストのより下にあるコンテキストが成立するまでは、より上位のコンテキストはモニタリングされません。
画面がオフのときのモニタリング
ディスプレイがオフになっている間もモニタリングは行われますが、モニタリングが必要な項目全てが一定時間ごとに一度に行われるので、モニタリングのためのデバイスの稼働時間を最小限に抑えることができます。
2.無名タスクと名前付きタスク
プロファイルによってコンテキストに関連付けられるタスクには、名前付きのものと名前の無いものがあります。名前付きタスクは、プロファイル間で共有することができる反面、異なるプロジェクト間であっても同名のタスクが同時に存在することはできません。したがって、あるプロファイルが参照している名前付きタスクと同名のタスクが含まれるプロジェクトをインポートしようとしてもエラーとなります。
このような競合の問題を避けるためには、無名タスクを使います。これは、プロファイルの作成時に名前を付けずに新規にタスクを作成したもので、そのプロファイルからのみ参照・編集ができます。
しかし、無名タスク内で複雑な処理をこなそうとすると、タスクに追加されるアクションが増え、構成が冗長になるので、無名タスクをつかう場合、必然的にシンプルな処理内容になります。
より複雑な処理をするタスクをプロファイルで実行したい場合、無名タスクからPerfom Taskアクションを使って名前付きタスクを呼び出すか、シーンを使ってイベントタスクを実行させるなどの方法が必要ですが、いずれの場合も競合の問題を避けるために、タスクまたはシーンの名前には、それが含まれるプロジェクトを表すプレフィックスを付けるなどして、競合を避ける工夫が必要になります。
3.最後に
Taskeは、Android端末の操作を自動化するためのアプリなのですが、そのためにはAndroid用アプリTaskerについてでも書いたとおり、「いつ」と「なに」を指定してやる必要があります。自動化してやる操作が「なに」で、それを実行するきっかけが「いつ」です。そしてこの「いつ」と「なに」を結びつけるのがプロファイルという訳です。プロファイルを構成する作業の大半は、きちんと条件が合うようにコンテキストを考えて、タスクが問題なく動くように頭をひねることに費やされるので、それを結び付けているだけのプロファイルについてはあまり意識を払いませんが、これがなくては肝心の自動化ができないことを考えれば、やはり取り上げないわけにはいかないような気がしてこのテーマを設けてみました。
余談ですが、プロジェクトやタスク、シーン、変数については名前の重複にとかくやかましいTaskerですが、プロファイルに関しては、同じプロジェクトの中でさえ同名の(しかも内容も全く同じ)プロファイルが普通に作れてしまいます。多分、重複しても機能上問題ないと言うことなのでしょうけど、やはり何か扱いが軽いような気がしてしまうのは私だけでしょうか。
と言うことで今回のテーマはおしまいです。
プロファイルを使う
