
1. はじめに
2. 動的なフィルタリング
3. 不正アクセス検知
4. コマンド仕様
5. 関連文書
1. はじめに
この文書では、ファイアウォール機能について、
特に、動的なフィルタリングと侵入検出の機能について、仕様と使い方を説明します。
一般に、ファイアウォールの機能にはVPNやNATが含まれることが多いようですが、
これらの機能については、既存の別の文書で扱うものとします。
2. 動的なフィルタリング
2.1. 概念
従来のフィルタは、定められた設定にしたがって、
いつも同じ動作をするという意味で「静的」だといえます。
静的なフィルタでは、通信を制御するためのドアは、常に開いているか、
常に閉じています。基本的には、ドアの開閉は設定によって決まり、
途中で開いたり閉じたりするものではありません。
これに対して、動的なフィルタでは、
通信の状態に応じてドアが開閉します。
具体的には、通信が始まったらドアを開け、
通信が終了したらドアを閉じます。通信がないときにはドアは閉まり、
必要のない限りはドアが開くことはありません。
ドアを開ける権限は、特定のホストに限定されます。
例えば、内部ネットワークのホストだけがドアを開けるようにすれば、
外部ネットワークから攻撃を受ける機会を減らすことができます。
これは、ノブのない押し戸の仕組みと似ています。
動的なフィルタでは、コネクションの最初のパケットがドアを開く契機になります。
一度ドアが開くと、
そのコネクションに属する往きと戻りのパケットが両方とも通過するようになります。
静的なフィルタでは、
往きと戻りのそれぞれの方向についてフィルタを設定する必要がありますが、
動的なフィルタでは、往きの方向のフィルタだけを書けば、
戻りのパケットも自動的に通るようになります。
動的なフィルタは、静的なフィルタよりも優先して動作します。すなわち、
特定のコネクションに対応するドアが開いた後は、
そのコネクションを静的なフィルタで制御することはできません。逆にいえば、
コネクションの最初のパケットだけは、静的なフィルタで制御できます。
詳細は、2.3.3.の絵を参照してください。
以下の説明では、静的なフィルタを単に静的フィルタと呼びます。
同様に動的なフィルタを動的フィルタと呼びます。なお、動的フィルタでは、
TCPとUDPだけを扱い、ICMPやOSPFなどのプロトコルは扱いません。
2.2. 用語
単にコネクションというときには、TCPとUDPのコネクションを指します。
端末は個々のコネクションに対してポート番号を割り当てるので、コネクションは、
2つの端末のIPアドレスとポート番号によって識別されることになります(下図)。
ポート番号                      ポート番号
端末A    60000  23    端末B    
コネクション               
IPアドレス: 192.168.0.1                           IPアドレス: 192.168.0.2
IPパケットの中には、IPアドレスとポート番号を示す部分があります。
この部分を見ると、個々のIPパケットが、
どのコネクションに属するかを知ることができます。
IPアドレスはIPヘッダの中に格納され、
ポート番号はIPヘッダの後ろのTCPヘッダやUDPヘッダの中に格納されます。
アプリケーションによっては、
複数のコネクションを使って通信を実現するものがあります。例えば、FTPは、
制御用のコネクションとデータ用のコネクションを使いわけます。
この文書では、
このような複数のコネクションをまとめてセッションと呼びます。
もちろん、SMTPやTELNETのように、
1つのコネクションしか持たないセッションも数多くあります。
FTPのセッションを観察すると、最初に制御用のコネクションが作られ、
それから、必要に応じてデータ転送用のコネクションが作られます。
一般に、複数のコネクションを持つセッションでは、
最初に制御用のコネクションを作り、
そのコネクションを使って残りのコネクションの管理をすることが多いようです。
そこで、この文書では、
最初に作られる制御用のコネクションをトリガーとよんで、特別に扱います。
1つのコネクションしか持たないセッションでは、
そのコネクション自身がトリガーになります。
(1) 最初にトリガーが作られる
ポート番号                      ポート番号
端末A    60000  トリガー  21    端末B    
(2) 必要に応じてコネクションが作られる
ポート番号                      ポート番号
端末A    60000  トリガー  21    端末B    
60001  20 
60002  20
60003  20
それから、重要な概念として、コネクションの向きがあります。
コネクションの向きは、接続の要求の向きと同じです。
たとえば、
AがBに接続要求を送信したときには、コネクションの向きは、
AからBへ向かう方向になります。
動的フィルタでは、コネクションの向きに応じて、
異なるアクセス制限を適用することができます。
2.3. どのように使用するのか
ここでは、基本的な使用方法を説明するとともに、
動的フィルタの基本的な動作を見ていきます。
2.3.1. 動的フィルタの定義
まず、動的フィルタを定義します。
動的フィルタは、簡単にいうと「通すべきコネクション」の定義といえます。
もっとも簡単な定義は、通信プロトコルだけを記述したもので、
以下のようなコマンドで設定されます。
# ip filter dynamic 1 * * ftp
このコマンドはFTPのコネクションを通すための動的フィルタを定義するものです。
コマンドの「1」は動的フィルタの識別子であり、整数を自由に設定できます。
FTPが使用するデータ転送用のコネクションについても
自動的に通過しますので、特に考える必要はありません。
通信する端末を絞りたいときには、
アスタリスク「*」の代わりにIPアドレスやネットワークを指定することもできます。
例えば、FTPを始める端末が、192.168.0.0/24に限られているのならば、
以下のように書くことができます。
# ip filter dynamic 1 192.168.0.0/24 * ftp
また、FTPを接続する先のサーバが172.16.0.1に限られているのならば、
以下のように書くことができます。
# ip filter dynamic 1 * 172.16.0.1 ftp
「ftp」のところには、FTP以外のプロトコルを指定することもできます。
例えば、以下のようなものを設定することができます。
詳しくはコマンド仕様を参照してください。
tftp (TFTP)
domain (DNS)
pop3 (POP3)
smtp (SMTP)
telnet (TELNET)
実際のところ、
この方法で設定できるアプリケーションはそれほど多くありません。
たとえば、
identやSSHは、この方法では定義できません。
そこで、他のアプリケーションを通す方法を、これから説明します。
先に具体例を書きます。以下のように2行で1つの設定になります。
# ip filter 100 pass * * tcp 10000 20000
# ip filter dynamic 1 192.168.0.1 172.16.0.1 filter 100
これは、192.168.0.1の10000番ポートから172.16.0.1の20000番ポートに対する
TCPのコネクションを定義するものです。
ポート番号                      ポート番号
端末A    10000   20000    端末B    
IPアドレス: 192.168.0.1                           IPアドレス: 172.16.0.1
ip filterコマンドをつかって、TCP/UDPの区別と、ポート番号を記述します。
また、ip filter dynamicコマンドをつかって、端末のIPアドレスを設定します。
先ほどと同じように、アスタリスク(「*」)による省略が許されます。
例えば、次の設定は、
あらゆる端末間のidentのコネクションを意味することになります。
# ip filter 100 pass * * tcp * ident
# ip filter dynamic 1 * * filter 100
2.3.2. 動的フィルタの適用
前節で動的フィルタを定義したので、実際に動作させる方法を説明します。
動的フィルタを動作させるためには、
ip INTERFACE secure filterコマンドで、
先に定義した動的フィルタの番号を指定します。例えば、
FTPに関する動的フィルタを「LAN1」インタフェースで動作させるためには、
以下のように設定します。
# ip filter dynamic 1 * * ftp
# ip lan1 secure filter out dynamic 1
ここで、「out」という引数は、
ドアがインタフェースの外に向かって開くことを意味します。
逆に、ドアをインタフェースの内に向かって開けるときには、
「out」の代わりに「in」を指定します。
そもそも、ip INTERFACE secure filterというコマンドは、
昔から存在するもので、これまでは、
静的フィルタを適用するために使われてきました。
新しいファームウェアでは、このコマンドを使って、
静的フィルタと動的フィルタの両方を適用できるようになります。
たとえば、静的フィルタの1〜3番と、動的フィルタの6〜8番を適用するには、
次のような設定になります。静的フィルタの番号と動的フィルタの番号を
「dynamic」というキーワードで区切ることになります。
ip INTERFACE secure filter in 1 2 3 dynamic 6 7 8
なお、このコマンドで、動的フィルタだけを設定したときには、
静的フィルタは何も働かず、動的フィルタのみが動作します。つまり、
パケットがまったく破棄されない状態になりますので、ご注意ください。
2.3.3. 静的フィルタと動的フィルタの関係
動的フィルタは、原則として、パケットを破棄するのではなく、
通過させるために働きます。つまり、動的フィルタだけでは、
パケットを破棄することはできません。したがって、通常の運用では、
動的フィルタを静的フィルタと組み合わせる必要があります。
基本的には、動的フィルタは静的フィルタよりも優先的に適用されます。
したがって、
動的フィルタに該当するパケットは、静的フィルタの設定にかかわらず、
通過します。逆に、動的フィルタに該当しないパケットは、
静的フィルタの設定によって通過になるか破棄になるかが決まります。
動的フィルタは最初から存在するのではなく、
トリガーのコネクションが現れたときに動的に作られます。
したがって、トリガーの最初のパケットだけは、動的フィルタではなく、
静的フィルタが適用されます。
一度、動的フィルタが作られれば、その後に続くパケットは、
動的フィルタによって通過していきます。
(1) 初期状態 (動的フィルタはない)
拒否
———— 静的フィルタ ——— 破棄
｜        受理
——————— 通過
(2) トリガーの最初のパケットが通過する
拒否
———— 静的フィルタ ——— 破棄
｜      
——————— 通過
(3) 動的フィルタが追加される
拒否    拒否
— 動的フィルタ ——— 静的フィルタ ——— 破棄
｜受理                    ｜        受理
｜                        ——————— 通過
｜
——————— 通過
(4) 引き続くパケットが通過する
拒否    拒否
— 動的フィルタ ——— 静的フィルタ ——— 破棄
｜  受理                ｜        受理
｜                      ——————— 通過
｜
——————— 通過
この動作は動的フィルタのすべてのコネクションについて通用するものです。
繰り返しになりますが、トリガーのコネクションの最初のパケットは、
静的フィルタで通す必要があります。
具体例をあげて、静的フィルタと動的フィルタの組み合わせを説明します。
ここで、例として取りあげるのは、
以下のようなネットワークであり、
非常に簡単なアクセス制御を想定しています。
プロバイダ
｜
｜PP1
ルータ   
｜LAN1
｜
172.16.1.0/28
｜            ｜            ｜
｜            ｜            ｜
ホスト  ホスト   FTPサーバ 172.16.1.2
LANにFTPサーバがあり、これを公開するほかは、
外側からのアクセスは受け付けないものとします。
また、LANから外側へのアクセスとしてHTTPを通過させるものとします。
まず、静的フィルタを設定します。とりあえず、FTPサーバは忘れて、
外側からのパケットをすべて破棄します。
# ip filter 100 reject * * * * *
# pp select 1
# ip pp secure filter in 100
内側からのアクセスとしてHTTPだけを通します。
先ほど説明したように、
トリガーのコネクションの最初のパケットだけは静的フィルタで通す必要があります。
そこで、次のように静的フィルタを設定します。
# ip filter 90 pass 172.16.1.0/28 * tcpflag=0x0002/0x0017 * www
# pp select 1
# ip pp secure filter out 90
tcpflagの部分は、
TCPのパケットのうちSYNフラグだけが立っているパケットを表します。
このフィルタによって、コネクションの最初のパケットだけを通すことができます。
※ リビジョンによっては、tcpflagを設定できないものもあります。
その場合には、次のように2行に分けることで同様の効果を得ることができます。
# ip filter 90 reject 172.16.1.0/28 * established * www
# ip filter 91 pass 172.16.1.0/28 * tcp * www
# pp select 1
# ip pp secure filter out 90 91
※ UDPの場合には、SYNのようなフラグで判断することはできないので、
プロトコルの欄は単に「udp」となります。
# ip filter 92 pass 172.16.1.0/28 * udp * domain
次にHTTPを通すための動的フィルタを追加します。
ここまでの設定と合わせると、次のようになります。
# ip filter 90 pass 172.16.1.0/28 * tcpflag=0x0002/0x0017 * www
# ip filter 100 reject * * * * *
# ip filter dynamic 1 172.16.1.0/28 * www
# pp select 1
# ip pp secure filter in 100
# ip pp secure filter out 90 dynamic 1
次に、FTPサーバを公開するためのフィルタを追加します。
まず、トリガーのコネクションの最初のパケットを通すために次の静的フィルタを
追加します。
# ip filter 80 pass * 172.16.1.0/28 tcpflag=0x0002/0x0017 * 21
# pp select 1
# ip pp secure filter in 80 100
最後に、FTPを通す動的フィルタを追加します。
全体をまとめると次のようになります。
# ip filter 80 pass * 172.16.1.0/28 tcpflag=0x0002/0x0017 * 21
# ip filter 90 pass 172.16.1.0/28 * tcpflag=0x0002/0x0017 * www
# ip filter 100 reject * * * * *
# ip filter dynamic 1 172.16.1.0/28 * www
# ip filter dynamic 2 * 172.16.1.0/28 ftp
# pp select 1
# ip pp secure filter in 80 100 dynamic 2
# ip pp secure filter out 90 dynamic 1
なお、内側のホストを信頼できる場合には、
90番のフィルタのtcpflagを単にtcpとしてもかまいません。
2.4. より進んだ設定
2.4.1. 拡張された動的フィルタの定義
2.3.1.では、FTPやTELNETのような特定のアプリケーションについては1行で設定でき、
それ以外のアプリケーションについては2行に分けて設定することを説明しました。
このうち、後者の設定方法については、もう少し拡張した使い方があるので、
それを説明しておきます。
先に説明したとおり、一般に1つのセッションは複数のコネクションを持ちます。
例えば、FTPでは、制御用のコネクションが作られた後に、
データ転送用のコネクションが作られます。したがって、
このような種類のセッションを正しく扱うためには、
トリガーの設定だけでは不十分で、
トリガー以外のコネクションを表現し、定義する必要があります。
また、一般にコネクションには向きがあるので、
向きを区別して扱う必要があります。したがって、
セッションを完全に表現するためには、
次の3つの項目が必要になることがわかります。
トリガー (セッションのきっかけとなるコネクション)
トリガー以外のコネクション(順方向)
トリガー以外のコネクション(逆方向)
ポート番号                      ポート番号
端末A    60000  トリガー  21    端末B    
60001  順方向  20 
60002  逆方向  20
[注意] くりかえしになりますが、FTPについては、
データ転送用のコネクションについて、ユーザが意識する必要はありません。
ルータは、FTPが使用するポート番号を把握し、
関係するコネクションを通過させます。
なお、1つのセッションに属するすべてのコネクションは、
同じ端末の間で接続されるものと考えます。
つまり、トリガーとそれ以外のコネクションのIPアドレスが異なることはありません。
それでは、具体的な例を使って、説明を続けます。
トリガーは、172.16.0.1の6000番ポート宛ての任意のTCP
順方向のコネクションは、7000番ポート宛ての任意のUDP
逆方向のコネクションは、8000番ポート宛ての任意のUDP
このルールに相当する設定は次のようになります。
# ip filter 10 pass * * tcp * 6000
# ip filter 11 pass * * udp * 7000
# ip filter 12 pass * * udp * 8000
# ip filter dynamic 1 * 172.16.0.1 filter 10 in 12 out 11
「in」はトリガーと逆方向のコネクションを、
「out」はトリガーと同じ方向のコネクションを設定するための
キーワードになっています。3種類のフィルタ番号には、それぞれ、
複数のフィルタ番号を列挙することもできます。
2.5. 登録されたアプリケーションの動作
2.3.1.では、動的フィルタを設定するための2通りの方法を説明しました。
1つは直接アプリケーションの名前を指定する方法(※)で、
もう1つはip filterコマンドを使って2行で設定する方法です。
この節では、前者の場合、つまり、
アプリケーションの名前を指定するときの動作を説明します。
※ この文書を書いている時点では、FTP、TFTP、HTTP、DNS、SMTP、POP3、
TELNET、NetMeetingの8つのアプリケーションを指定できます。
これらのアプリケーションのほとんどは、複数のコネクションを扱ったり、
ポート番号が変化したり、アプリケーションに固有の処理を必要とします。
したがって、ip filter dynamicコマンドにアプリケーション名を書くことで、
このような固有な処理をすることを明示的に設定します。
※ HTTP、POP3、TELNETは、現在のところ、特別な処理はありません。
また、NetMeetingはノーマルパスでないと動作しません。
なお、ip filter dynamicコマンドで、
アプリケーション名のかわりにudpとtcpという指定をすることができます。
これは、UDPとTCPの全般的なコネクションを扱うもので、
アプリケーションに固有の動作は行いません。
2.5.1. FTP
FTPではデータ転送用のコネクションのポート番号が動的に決まるので、
PORTコマンドやPASVコマンドを調べ、
対応するポート番号を自動的に開閉します。
データ転送用のコネクションは動的フィルタによって通過するので、
静的フィルタでこれらのコネクションを通す必要はありません。
FTPで必要になる静的フィルタは、
制御用のコネクションの最初のパケットを通すフィルタのみです。
[設定例]
# ip filter 10 pass * 192.168.0.0/24 tcpflag=0x0002/0x0017 * 21
# ip filter 100 reject * * * * *
# ip filter dynamic 1 * 192.168.0.0/24 ftp
# pp select 1
# ip pp secure filter in 100
# ip pp secure filter out 10 100 dynamic 1
2.5.2. TFTP
TFTPではサーバがエフェメラルポートを選んで返事をする場合があります。
したがって、サーバが送信する最初のパケットについては、
ポート番号の変化を検出する仕組みを持っています。また、TFTPでは、
データ転送の最後のパケットだけが短いという特性があるので、
それを見て、セッションの終了を判定します。
クライアント                     サーバ
セッション開始
COMMAND
4000 --------------------------> 69
ACK
4000 <-------------------------- 7000
DATA (len = 512)
4000 --------------------------> 7000
ACK
4000 <-------------------------- 7000
・
・
・
DATA (len < 512)
4000 --------------------------> 7000
ACK
4000 <-------------------------- 7000
セッション終了
2.5.3. DNS
DNSでは、問い合わせと応答がセットになっているため、
応答を見てセッションの終了を判定します。DNSのポート番号は53番です。
2.5.4. SMTP
動的フィルタとは直接は関係がありませんが、SMTPに固有な攻撃を検知します。
詳細は3. 不正アクセス検知を参照してください。
SMTPのポート番号は25番です。
2.5.5. NetMeeting
NetMeetingを通すために、H.323のメッセージをチェックし、
該当するコネクションを通過させます。
対応機種はRTX1500、RTX1100、RT107e、RT250i、RT57i、RTV700です。
ノーマルパスに設定してください。
[設定例]
# ip lan3 secure filter in 1000
# ip lan3 secure filter out 90 dynamic 1
# ip filter 90 pass-log * * tcpflag=0x0002/0x0017 * 1720
# ip filter 1000 reject * * * * *
# ip filter dynamic 1 * * netmeeting
# ip routing protocol normal
2.6. 状態の表示
動的フィルタの状態を見るためには、show ip connectionコマンドを使用します。
まず、何もコネクションが観測されていないときには、次のように表示されます。
pp1# show ip connection
PP[01][out]
inspecting no sessions
次に、セッションが1つのコネクションしか持たないときには、
次のように表示されます。
pp1# show ip connection
PP[01][out]
ID       FILTER   T P INITIATOR             D RESPONDER             S
60001    1          T 192.168.1.2:1073      > 192.168.2.2:21        E
ID、FILTERなどのバナー部分の意味は以下のようになっています。
ファイアウォール機能
