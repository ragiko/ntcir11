
python での行列・ベクトル数値計算
python で行列ベクトル演算が可能です。でも、実際に行列ベクトル計算をしようとしたとき戸惑わされました。python での行列ベクトル演算について手頃な解説がありませんでした。コード例も殆どなく、試行錯誤で使う必要がありました。回り道をしました。特に Matrix と array の使い分けに戸惑いました。結論は「慣れるまでは Matrix を使わずに array の範囲だけで使っとけ。」です。慣れた後でも Matrix を使うメリットは限られます。array だけで済ましたほうが余分なことを考えずに済みます。
このような遠回りをすることなく python での数値計算を手っ取り早く始められるようにように、この Web page を書きました。C 言語や数値計算についての素養はあるが python は使い始めの方、早急に行列 ベクトル演算を行う必要がある方を対象に、python で行列・ベクトル演算をてっとり早く使いこなすための解説を行います。
numarray と Numeric
python の線形演算モジュールには Numeric と numarray の二つが並存しています。両者の機能は殆ど同じです。numarray のほうが Numeric よりも新しいモジュールです。でも、入門的な使い方しかしないユーザーにとっては、大差ありません。どちらでも構いません。例えば Numeric では浮動小数点演算がオーバー・フローしたときなど NaN(Not a Number を意味します。) などを出力させていました。これを numarray では、例外を投げるかなど幾つかの選択をさせられるように進化させています。
新しい numarray を使えば良いとも限りません。vtk や mayavi などのモジュールが古い Numeric を使っていて、まだ新しい numarray に切り替わっていないためです。現在でも両方が並行して使われています。こちらから、どちらもダウンロードできます。
しかし直ぐにウンロードしないでください。、まだ python をインストールしていない方、まだ python を使いこんでない方は  numarray や Numeric を直接インストールするのではなく、次に述べる Enthought パッケージを使い、他の応用モジュールも含め一度に纏めてインストールすることを勧めます。
python/数値演算パッケージとインストール
python はパッケージとしても配布されています。python は多数の開発者によって多様な分野のライブラリが開発されています。多数のモジュールと共にソフト資産が蓄積され続けています。でも、この活発さは悪いことも引き起こします。多数の開発者が互いに関連し合うモジュールを独立して開発しているため、相互のモジュールがパージョンによって正常に動作する保証が取れなくなっています。そこで、それら複数のアプリケーション・モジュールの整合性を保ったパッケージとして python パッケージが作られ配布されています。
私自身は Enthought 社のパッケージを使っています。python が 2.3 の古いバージョンになってしまうのですが、次のアプリケーション群を一括してインストールできる手軽さを優先しています。
wxPython 2.4.1.2: wxWindows for Python 
PIL 1.1.4: Python Imaging Library 
VTK 4.2.2: 3D Visualization Toolkit 
MayaVi 1.3: 3D Data Visualization Tool 
Numeric 23.1: Numerical Python 
SciPy 0.3: Scientific Library for Python 
ScientificPython 2.4.5: A collection of Python modules for scientific computing 
F2PY 2.39.235_1613: A Fortran to Python interface generator 
Chaco 0.1.0: Plotting toolkit for Python 
Traits 1.0.2: Strong typing for Python 
PyCrust 0.7.2: GUI-based Python shell 
ZODB3 3.1: ZODB and ZEO Object DataBase 
Gadfly 1.0.0: An SQL Relational Database in Python 
PySQLite 0.5.0: A Python Extension for the SQLite embedded relational database 
ctypes 0.6.3: A package to create and manipulate C data types in Python 
とくに科学技術分野の数値計算で ScyPy の部分が役立ちます。下の数値計算パッケージ纏めて入手できるのはありがたいはずです。
fft
特殊関数
Matlab 互換プロットパッケージ
統計処理パッケージ
積分
常微分方程式ソルバー
Lapack 線形演算
Ehthought のパッケージが大きすぎると思う方は、こちらを使って SciPy パッケージだけをインストールすることもありだと思います。こちらから入手できる SciPy Tutrorial だけでも価値があります。python での科学技術計算が 42 page に要領よくまとめられています。
scipy の tutorial は良くできていますが、行列演算については、mat(Matrix に同じ) を中心に書いてあり惑わされました。mat や Matrix の array ラッパー・インターフェースを介さずに array のまま行列ベクトルを扱うべきです。
numarray のインストール
Enthought 社のパッケージで python をインストールすると、古い Nemeric がインストールされてしまいます。新しい numarray はインストールされません。
他の numarray を使っている python コードを使うためにも、numarray もインストールしておきましょう。こちらからダウンロードして追加インストールしましょう。Numeric と numarray の両方をインストールしても、混在して使わない限りは問題も起きないようです。
array
numarray/Numeric は array 型を使えるようにするモジュールです。python での線形演算のために tuple, list とは別に array データー型が numarray/Numeric で追加されました。numarray/Numeric では Fortran で開発された線形演算パッケージ Lapack を python に移植していますが、それは array 型のデータを対象にしています。
tuple / array / Matrix / list
python での行列ベクトル計算のためには、tuple / array / Matrix / list と良く似たデータ型の違いを理解し使い分けることが必要となります。この四つのデータ型の関係を あえて図示すると次のようになります
tuple ⊂        ⊂ list
array
Matrix
list は tuple を包含します。array は tuple と list の中間にあります。中間と言っても「少しずれた中間」です。array は行列やベクトルという巨大な数値の集まりを効率的に処理するために設けられたデータ型です。C などの配列と同様に、数値データを連続したメモリブロックに配置します。tuple や list が参照を要素とするのに対し array は数値自体を要素とするので「少しずれた中間」と表現しました。
Matrx は array を継承したラッパー・クラスです。 *, ** 演算子がオーバーロードされています。行列どうしや行列とベクタの積を * 演算子で書けるようになります。行列のマイナスも含んだ べき乗を ** 演算子で記述できるようになります。
Enthought/SciPy パッケージでは、さらに Matrix を mat でラップします。mat と Matrix との違いは良く分かりません。mat コンストラクタは Matrix コンストラクタを呼び出しています。私は Matrix と殆ど同じだと推測しています。
でも、Matrix は array に追加する形で設けられたクラスです。Lapack の移植は Matrix ではなく array に対して行われています。この結果 Matrix は lapack の線形代数や array 関数との整合性が不完全です。Matrix インスタンスに lapack 関数を働かせると array に変わったりします。Matrix は + - * ** 演算子の範囲でのみの計算に限って使うもののようです。
最初は Matrix 型の使用を避けるべきです。Python での線形代数処理の理解を混乱させるだけです。Matrix 型の使用は python での線形代数処理の全体が見渡せるようになるまで控えるべきです。Matrix 型を使うにしても、その用途を限定して使うべきです。
array 型を使う理由
array は多量の数値を扱うための型です。lapack はlist に移植することもできるとは思いますが、list は汎用的過ぎ、高速な数値計算に適しません。数値専用のコンテナ型 array を導入したほうが、数値計算プログラムを効率的に実装できます。
tuple array list データのメモリ配置
tuple,list,array の違いを、メモリに配置されているデータの視点から見てみましょう。
tuple は参照が並んだものです。tuple はメモリ内で参照ポインタを連続して配置することで実装されています。
参照参照参照参照  ・・・・・・参照参照参照参照 
その結果、tuple には何でも入れられます。参照要素を並べてあるので、実際の参照先:tuple 要素には数値や文字列など異なった型のインスタンスを混在させられます。でも新しい要素の挿入や、それを活用するソートなどができません。参照要素の書き換えは参照を入れ替えるだけであり可能ですが、python の tuple は書き換えは禁止されています。書き換え不能なのは、tuple の実装を、また python の仕様をより単純にするためです。
python での線形代数
