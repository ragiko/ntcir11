  
　しかしながら、従来の運用プロセスの作成環境では、予め定義されている運用操作部品の数が非常に多く、更に運用操作部品の他にもプロセスの開始や終了、電子メールの送受信等といった多種の部品も多く存在する。そのため、従来手法では、パレット等から多種にわたる目的の運用操作部品を迅速に探し当てるのが困難であった。なお、上述した従来手法では、キーワード入力による検索機能を用いているが、その場合であっても検索結果として得られる運用操作部品等の数が多く、そこから目的の部品を探す困難性が改善しているとはいえない。更に、入力したキーワードによっては、目的の部品が表示されない可能性があるため、適切な部品を検索するために適切なキーワードを入力しなければならない。そのため、従来手法では、運用プロセス作成者（ユーザ）の作成時間を大幅に消費してしまう問題がある。
　そこで、1つの側面では、本発明は、運用プロセスを迅速に作成するための運用プロセス作成プログラム、運用プロセス作成方法、及び情報処理装置を提供することを目的とする。
　一態様の運用プロセス作成プログラムは、複数のノードを画面上に配置して運用プロセスを作成する際、予め設定されたプロセス定義、操作対象ノードの種別、及び過去の作成履歴のうち、少なくとも１つを用いて、配置が確定されたノードに対する後続の候補ノードを推定し、推定された前記候補ノードのうち、所定数の候補ノードを所定の順序で表示する表示領域を生成し、生成された前記表示領域を前記画面の所定位置に表示させる、処理をコンピュータに実行させる。
　運用プロセスを迅速に作成することができる。
本実施形態における運用システムの一例を示す図である。 ＰＣの機能構成の一例を示す図である。 ＰＣのハードウェア構成の一例を示す図である。 本実施形態における運用プロセス作成処理の一例を示すフローチャートである。 固定的なルールに基づいて候補を推定する場合のデータの一例を示す図である。 対となる操作から候補を推定する場合のデータの一例を示す図である。 運用プロセスの作成履歴の集積処理の一例を示すフローチャートである。 運用プロセスの作成履歴のデータの一例を示す図である。 実施例１における推定処理の一例を示すフローチャートである。 実施例１における候補テーブルの一例を示す図である。 実施例２における推定処理の一例を示すフローチャートである。 実施例２における推定処理に対応するデータの一例を示す図である。 実施例３における推定処理の一例を示すフローチャートである。 実施例３における候補テーブルの一例を示す図である。 実施例４における推定処理の一例を示すフローチャートである。 実施例４における候補テーブルの一例を示す図である。 実施例５における推定処理の一例を示すフローチャートである。 実施例５における候補テーブルの一例を示す図である。 実施例６における推定処理の一例を示すフローチャートである。 実施例６における候補テーブルの一例を示す図である。 本実施形態における運用プロセス作成環境における表示画面例を示す図（その１）である。 本実施形態における運用プロセス作成環境における表示画面例を示す図（その２）である。 本実施形態における運用プロセス作成環境における表示画面例を示す図（その３）である。 
　以下、図面に基づいて実施形態を説明する。
　＜運用システム例＞
　図１は、本実施形態における運用システムの一例を示す図である。図１に示す運用システム１０は、情報処理装置の一例であるＰｅｒｓｏｎａｌ　Ｃｏｍｐｕｔｅｒ（ＰＣ）１１と、管理サーバ１２と、１又は複数の操作対象サーバ１３－１～１３－ｎ（以下、必要に応じて「操作対象サーバ１３」と総称する）とを有する。なお、図１に示す運用システム１０の例において、管理サーバ１２と操作対象サーバ１３とは、Ｌｏｃａｌ　Ａｒｅａ　Ｎｅｔｗｏｒｋ（ＬＡＮ）やインターネット等に代表される通信ネットワーク１４により接続されている。また、本実施形態においては、これに限定されるものではなく、例えばＰＣ１１と管理サーバ１２とが通信ネットワーク１４を介して接続されていてもよい。
　図１に示す運用システム１０では、一例として、データセンタ等に集約された操作対象サーバ１３に対し、本実施形態により作成された運用プロセス（運用フロー）に基づいて、それぞれの業務に係る運用作業等の自動化を実現するものである。
　図１において、ＰＣ１１は、本実施形態における運用プロセスを作成するための開発環境である。ユーザ（運用プロセス作成者）は、例えばＰＣ１１で作成した運用プロセスを管理サーバ１２へ登録することで操作対象サーバ１３等を用いた運用作業の自動化を行うことができる。
　管理サーバ１２は、運用作業を自動化する運用プロセスの実行と実行結果等の管理を行う。また、管理サーバ１２は、運用プロセスを実行させる操作対象の一例である操作対象サーバ１３の情報(例えば、ホスト名、ＩＰアドレス、パスワード等)も構成情報として管理する。また、管理サーバ１２は、上述した構成情報等に基づいて各操作対象サーバ１３に対応する運用プロセスを実行させる。更に、管理サーバ１２は、システム管理者等による実行状況の確認や、運用プロセスの起動や停止等の操作を実施するための画面出力等を行う。
　なお、管理サーバ１２は、例えばＣｏｎｆｉｇｕｒａｔｉｏｎ　Ｍａｎａｇｅｍｅｎｔ　Ｄａｔａｂａｓｅ（ＣＭＤＢ、構成管理データベース）等を用いることができる。ＣＭＤＢは、Ｉｎｆｏｒｍａｔｉｏｎ　Ｔｅｃｈｎｏｌｏｇｙ（ＩＴ）システムを構成する全てのＣｏｎｆｉｇｕｒａｔｉｏｎ　Ｉｔｅｍ（ＣＩ、構成アイテム）の情報を一元的に管理するものである。管理サーバ１２は、ＣＭＤＢを有することで、運用プロセスにおける各構成アイテム（例えば、階層構造等）を関連付けて管理することができる。なお、上述したＩＴシステムとは、例えば企業活動を実行するために構築された情報処理システムを意味するがこれに限定されるものではない。
　操作対象サーバ１３は、管理サーバ１２により指示された運用プロセスを実行する対象機器である。なお、操作対象サーバ１３は、例えば業務サーバ等の各種機器等を含む。操作対象サーバ１３と管理サーバ１２間におけるデータの送受信は、例えばＳｅｃｕｒｅ　ＳＨｅｌｌ（ＳＳＨ）や、ＨｙｐｅｒＴｅｘｔ　Ｔｒａｎｓｆｅｒ　Ｐｒｏｔｏｃｏｌ（ＨＴＴＰ）、Ｈｙｐｅｒｔｅｘｔ　Ｔｒａｎｓｆｅｒ　Ｐｒｏｔｏｃｏｌ　ｏｖｅｒ　Ｓｅｃｕｒｅ　Ｓｏｃｋｅｔ　Ｌａｙｅｒ（ＨＴＴＰＳ）等の通信によって行われる。
　なお、上述した運用システム１０において、管理サーバ１２には、複数のＰＣ１１が接続されていてもよく、これにより複数のユーザ（運用プロセス作成者）がそれぞれ作成した運用プロセスの内容を管理サーバ１２で管理することができる。また、上述した運用システム１０では、ＰＣ１１と管理サーバ１２とが別体であるが、これに限定されるものではなく、ＰＣ１１と管理サーバ１２とが一体に形成されていてもよい。したがって、情報処理装置の一例としては、ＰＣ１１であってもよく、管理サーバ１２であってもよい。更に、本実施形態における情報処理装置は、ＰＣ１１に限定されるものではなく、例えばスマートフォンやタブレット端末等のような携帯型の通信端末等であってもよい。
　＜ＰＣ１１：機能構成例＞
　次に、ＰＣ１１の機能構成例について図を用いて説明する。図２は、ＰＣの機能構成の一例を示す図である。図２に示すＰＣ１１は、入力手段２１と、出力手段２２と、記憶手段２３と、候補ノード推定手段２４と、パレット生成手段２５と、画面生成手段２６と、送受信手段２７と、制御手段２８とを有する。
　入力手段２１は、ＰＣ１１を使用する運用システム１０のユーザ（運用プロセス作成者）等からの運用プロセス作成処理に関する各種指示の開始や終了等の入力を受け付ける。なお、入力手段２１は、例えばキーボードやマウス等からなる。また、入力手段２１は、音声等による入力であってもよく、その場合には、マイク等の音声入力手段等を有する。
　出力手段２２は、入力手段２１により入力された内容や、入力内容に基づいて実行された内容等の出力を行う。なお、出力手段２２は、例えば画面表示により出力するのであればディスプレイ等の表示手段を有し、音声により出力するのであれば、スピーカ等の音声出力手段を有する。
　記憶手段２３は、本実施形態において必要となる各種情報を記憶する。具体的には、記憶手段２３には、プロセス定義情報３１と、操作対象種別情報３２と、作成履歴情報３３と、候補テーブル３４とを有する。
　プロセス定義情報３１は、例えば運用プロセスの作成中の状態に対応させて後続の候補ノードが設定された情報を含む。この情報は、予め設定される固定的なルールである。なお、候補ノードとは、例えば運用プロセスの作成時に使用される部品全体を示す。具体的には、候補ノードは、例えばシステムに対する所定の実行命令（例えば、起動、停止）に対する部品（運用操作部品）だけでなく、運用プロセスに基づいて実際に作業を行う人に対する作業指示用の部品も含まれる。更に、候補ノードには、プロセス等の開始や終了、電子メールの送受信用の部品等も含まれる。
　また、プロセス定義情報３１には、対となる操作の組み合わせ情報や、操作対象の階層構造等の情報を含めていてもよい。更に、プロセス定義情報３１には、例えば、データセンタ等の運用システム１０で行う日々の運用手順を自動化するために、システム内にすでに登録されている運用プロセス情報等を含む。
　更に、プロセス定義情報３１は、例えば運用システム１０内で使用されるワークフローツールやＩＴ運用管理ツールが有する機能を必要に応じて呼び出し、運用管理プロセスの実行を自動化するための情報を含む。また、プロセス定義情報３１は、サーバやストレージの設定、バックアップ等を対象とする各種管理ツールを用いて運用管理プロセスの実行を自動化するための情報を含む。
　操作対象種別情報３２は、すでに配置されているノード（先行ノード）等から作成中の操作対象の種別を取得するための情報を含む。
　作成履歴情報３３は、例えばユーザが過去に行った運用プロセス作成におけるデータログ及び操作ログ等の履歴情報を含む。なお、作成履歴情報３３は、複数のユーザにおける運用プロセス作成時の履歴情報が統計的に記憶されていてもよい。また、作成履歴情報３３には、例えば時間情報が含まれていてもよい。また、作成履歴情報は、所定時間内におけるノード毎の使用頻度（使用回数）情報が含まれていてもよい。
　候補テーブル３４は、本実施形態において、推定される候補ノードの情報を含む。具体的には、例えば運用プロセス作成における開発環境（エディタ）の画面上のパレットに表示される部品群である。また、候補テーブル３４には、運用操作部品だけでなく、人に対する作業指示用の部品や、プロセス等の開始や終了の部品、電子メールの送受信用の部品等のノードも含まれていてもよい。
　また、記憶手段２３は、上述した情報以外の情報を記憶してもよく、例えば本実施形態を実行するための各種設定情報等を記憶することができる。また、記憶手段２３は、記憶された各種情報を必要に応じて所定のタイミングで読み出したり、運用プロセス作成処理に関する実行結果等を書き込んだりすることができる。なお、記憶手段２３は、上述したような多種の情報の集合物であり、それらの情報を、例えばキーワード等を用いて検索し、抽出することができるように体系的に構成されているデータベースとしての機能も有していてもよい。
　候補ノード推定手段２４は、現在作成中の運用プロセスにおいて、すでに確定したノード（例えば、運用操作部品、作業指示用の部品、開始や終了の部品、電子メールの送受信用の部品等の各種部品）の後続のノードの候補を推定する。具体的には、候補ノード推定手段２４は、例えば作成中のプロセス定義、操作対象のノードの種別、及び過去の作成履歴等のうち、少なくとも１つを用いて、すでに確定したノードの後続の候補ノードを推定する。なお、候補ノード推定手段２４における候補ノードの推定例については、後述する。また、推定された候補ノードの情報は、記憶手段２３に記憶されてもよく、パレット生成手段２５に出力されてもよい。
　パレット生成手段２５は、候補ノード推定手段２４により推定された１又は複数のノードの内容を運用プロセス作成画面の所定位置に表示するためのパレットを生成する。なお、パレットとは、例えば運用プロセス作成環境のエディタ画面等に存在するものであり、所定数の候補ノードを表示する表示領域である。つまり、パレット生成手段２５は、表示領域生成手段の一例であり、本実施形態では例えばパレット以外の表示領域（例えば、別ウィンドウ画面）を生成してもよい。
　本実施形態では、ユーザがパレットに配列されている少なくとも１つの候補ノードから後続のノードを選択し、選択したノードを画面上の所定位置に配置して運用プロセスを作成する。また、上述したノードの選択や配置は、例えばユーザがマウス等の入力手段２１を用いて画面上に表示されたカーソル等を操作することで実現することができる。なお、カーソルとは、画面の表示領域に表示されるポインタの一種であり、ユーザの操作によって位置移動や位置が決定される。
　更に、パレット生成手段２５は、パレット内に表示される複数のノードの配置や表示位置、数等を調整する。これにより、本実施形態では、使用する可能性が高い候補ノードをユーザに提供することができる。
　画面生成手段２６は、本実施形態における運用プロセスを作成するための開発環境（エディタ）画面や各種設定情報の入力画面、作成後の運用プロセスの内容等を表示するための画面を生成する。なお、画面生成手段２６で生成された開発環境（エディタ）画面に表示されるノードは、画面上ではノード毎に設定されたアイコンや名称等により表されていてもよく、その他、記号や模様、マーク、文字列等により表されていてもよい。
　更に、画面生成手段２６は、パレット生成手段２５により生成された１又は複数の候補ノードが配置されたパレットの画面上の表示位置の設定を行う。ここで、画面生成手段２６は、パレットの表示位置を、例えば画面上のカーソルの位置情報又は最後に配置されたノードの位置情報に基づいて設定する。具体的には、画面生成手段２６は、ユーザが操作する画面上のカーソルの近辺にパレットの表示位置を設定する。これは、後続のノードを配置する位置は、最後に配置されたノードの近辺になる可能性が高く、ユーザが操作したカーソルの位置も、最後に配置されたノードの近辺にある可能性が高いからである。これにより、ユーザによるカーソルと、パレットと、後続ノードとのそれぞれの距離を短くすることができ、ユーザによるカーソルの移動距離及び移動時間を軽減すると共に、ユーザの操作負担も軽減することができる。
　また、画面生成手段２６は、パレット生成手段２５により生成されるパレットの表示位置を、例えばすでに画面に配置されているノードの位置情報を用いて設定することができる。この場合、画面生成手段２６は、パレット生成手段２５により生成されるパレットの表示位置を、例えば画面上にすでに配置されたノードと重ならない位置に設定される。これにより、本実施形態では、すでに画面上に配置されたノードがパレットの表示により隠れてしまうのを防止することができる。なお、パレットを表示する場合には、画面サイズ等の関係により配置されたノードが隠れてしまう場合がある。そこで、本実施形態では、例えばすでに配置したノードが複数ある場合に、配置してからの経過時間が長いものが隠れるようにパレットを表示させることが好ましい。これにより、本実施形態では、画面に配置した直後のノードがパレットにより隠れるのを防止することができ、次のノードを配置する可能性が高い領域にパレットが表示されるのを防止することができる。
　なお、パレットの表示位置については、上述した内容に限定されるものではなく、例えば、上述したカーソルの位置情報と、すでに配置されたノードの位置情報とに基づいて設定してもよい。画面生成手段２６で生成された画面は、出力手段２２のディスプレイ等に出力される。
　送受信手段２７は、本実施形態で実行される各処理に必要な情報や、運用プロセス作成処理を実現するための実行プログラム（例えば、運用プロセス作成プログラム）等を送受信することが可能な通信インターフェースである。また、送受信手段２７は、ＰＣ１１により実行された各種の実行結果等を、管理サーバ１２等の他の外部装置に送信することができる。
　制御手段２８は、ＰＣ１１の各構成全体の制御を行う。例えば、制御手段２８は、例えば、候補ノードの推定や、パレット生成、画面生成、送受信等における処理等のうち、少なくとも１つを制御する。
　＜ＰＣ１１：ハードウェア構成例＞
　次に、ＰＣ１１のハードウェア構成例について図を用いて説明する。図３は、ＰＣのハードウェア構成の一例を示す図である。図３に示すハードウェア構成例は、入力装置４１と、出力装置４２と、ドライブ装置４３と、補助記憶装置４４と、主記憶装置４５と、各種制御を行うＣｅｎｔｒａｌ　Ｐｒｏｃｅｓｓｉｎｇ　Ｕｎｉｔ（ＣＰＵ）４６と、ネットワーク接続装置４７とを有し、これらはシステムバスＢで相互に接続されている。
　入力装置４１は、例えばＰＣ１１のユーザ等が操作するキーボードやマウス等のポインティングデバイスを有しており、例えばユーザ等からのプログラムの実行等、各種操作信号を入力する。
　出力装置４２は、本実施形態における処理を行うコンピュータ本体を操作するのに必要な各種ウィンドウやデータ等を表示するディスプレイを有し、ＣＰＵ４６が実行する制御プログラムの実行経過や結果等を表示する。
　ここで、ＰＣ１１のコンピュータ本体にインストールされる実行プログラム（運用プロセス作成プログラム）は、例えば記録媒体４８等により提供される。ドライブ装置４３は、記録媒体４８に記録された実行プログラム等の各種データを読み込む。つまり、記録媒体４８は、ドライブ装置４３にセット可能であり、記録媒体４８に含まれる実行プログラムが、記録媒体４８からドライブ装置４３を介して補助記憶装置４４にインストールされる。なお、ドライブ装置４３は、セットされた記録媒体４８が書き込み可能である場合に、例えばプログラムを実行することで得られた実行結果等のデータを書き込むこともできる。
　補助記憶装置４４は、ハードディスクドライブやＳｏｌｉｄ　Ｓｔａｔｅ　Ｄｒｉｖｅ（ＳＳＤ）等のストレージ手段であり、本実施形態における実行プログラムや制御プログラム等を記憶し、必要に応じて入出力を行う。
　主記憶装置４５は、ＣＰＵ４６により補助記憶装置４４から読み出された実行プログラム等を格納する。なお、主記憶装置４５は、例えばＲｅａｄ　Ｏｎｌｙ　Ｍｅｍｏｒｙ（ＲＯＭ）やＲａｎｄｏｍ　Ａｃｃｅｓｓ　Ｍｅｍｏｒｙ（ＲＡＭ）等を含む。
　ＣＰＵ４６は、Ｏｐｅｒａｔｉｎｇ　Ｓｙｓｔｅｍ（ＯＳ）等の制御プログラム、及び主記憶装置４５に格納されている実行プログラムに基づいて、各種演算や各ハードウェア構成部とのデータの入出力等、コンピュータ全体の処理を制御することで、運用プロセス作成における各処理を実現する。なお、プログラム実行中に必要な各種情報等は、ＣＰＵ４６により補助記憶装置４４等から取得される。また、実行結果等は、ＣＰＵ４６により補助記憶装置４４等に格納される。
　ネットワーク接続装置４７は、管理サーバ１２と接続することにより、データの送受信を可能とする通信インターフェースである。また、ネットワーク接続装置４７は、管理サーバ１２と接続することにより、実行プログラムや各種データを取得したり、プログラムを実行することで得られた実行結果又は本実施形態に対応する実行プログラム自体を管理サーバ１２等に提供したりすることができる。なお、本実施形態においては、ネットワーク接続装置４７を介して操作対象サーバ１３と接続して各種データの送受信を行ってもよい。
　記録媒体４８は、上述したように実行プログラム等を格納するコンピュータで読み取り可能な記録媒体である。記録媒体４８は、例えばＵｎｉｖｅｒｓａｌ　Ｓｅｒｉａｌ　Ｂｕｓ（ＵＳＢ）メモリやＣＤ－ＲＯＭ、ＤＶＤディスク等の可搬型記録媒体であってもよく、フラッシュメモリ等の半導体メモリであってもよい。
　＜運用プロセス作成処理例＞
　ここで、本実施形態における運用プロセス作成処理例について、フローチャートを用いて説明する。図４は、本実施形態における運用プロセス作成処理の一例を示すフローチャートである。図４の例において、運用プロセス作成処理は、まず、ユーザ等の実行指示により、運用プロセス作成用画面を表示し（Ｓ０１）、表示された画面を用いてユーザにより指示されたノードの配置等により運用プロセス（運用フロー）を編集する（Ｓ０２）。
　ここで、運用プロセス作成処理は、作成中の運用プロセスから後続の候補ノードを推定する（Ｓ０３）。また、運用プロセス作成処理は、操作対象の種別から後続の候補ノードを推定する（Ｓ０４）。更に、運用プロセス作成処理は、過去の作成履歴から後続の候補ノードを推定する（Ｓ０５）。なお、本実施形態における運用プロセス作成処理は、上述したＳ０３～Ｓ０５の処理のうち、少なくとも１つの処理を行えばよく、処理の順序も図４に示す順序に限定されるものではなく、どの順序で行ってもよい。
　次に、運用プロセス作成処理は、推定された候補ノードをパレットに配置して画面に表示する（Ｓ０６）。なお、Ｓ０６の処理では、候補ノードが表示されたパレットを、上述した画面上の所定の位置に配置する。所定の位置とは、例えば上述したように、画面上に最後に配置されたノードの近辺や、ユーザが操作したカーソルの近辺、画面上にすでに配置されたノードと重ならない位置等であるが、これに限定されるものではない。
　ここで、運用プロセス作成処理は、Ｓ０６の処理により表示されたパレットに配置された候補ノードの中から、ユーザにより選択され、所定の位置に配置した候補ノードの情報を取得する（Ｓ０７）。次に、運用プロセス作成処理は、運用プロセスの作成を続けるか否かを判断し（Ｓ０８）、作成を続ける場合（Ｓ０８において、ＹＥＳ）、Ｓ０２の処理に戻る。また、運用プロセス作成処理は、Ｓ０８の処理において、作成を終了する場合（Ｓ０８において、ＮＯ）、作成した運用プロセスを保存し（Ｓ０９）、運用プロセスの作成履歴を集積して（Ｓ１０）、処理を終了する。
　＜候補ノード推定手段２４における推定処理の具体例＞
　次に、上述した候補ノード推定手段２４における推定処理の具体例について説明する。候補ノード推定手段２４では、例えばすでに確定したノード（先行ノード）の次に配置すべきノード（例えば、後続ノード等）の候補を、作成中のプロセス定義、操作対象の種別、及び過去の作成履歴のうち、少なくとも１つを用いて推定する。以下に、それぞれの具体例について説明する。
　＜（１）作成中のプロセス定義から候補を推定する場合＞
　本実施形態では、例えば作成中のプロセスに予め定義された固定的なルールから候補を推定したり、対となる操作から候補を推定したり、連続して同じ対象を操作することを考慮して候補を推定したり、操作対象の階層を考慮して候補を推定する。なお、本実施形態では、上述した候補の推定手法のうち、少なくとも１つを用いてノードの候補を推定する。以下に各推定手法について説明する。
　＜（ａ）固定的なルールから候補を推定する場合＞
　図５は、固定的なルールに基づいて候補を推定する場合のデータの一例を示す図である。なお、固定的にルールは、上述する操作対象種別情報３２に含まれる情報である。固定的なルールから候補を推定する場合には、図５に示すような運用プロセスの作成中の状態と、その後続のノードの対応関係から、配置すべき候補ノードを推定する。図５に示す固定的なルールの項目としては、例えば「作成中の状態」、「候補ノード」等があるが、これに限定されるものではない。また、作成中の状態には、すでに配置が確定した先行ノードと、先行ノードと後続ノードとを結ぶ結合線（矢印）の情報を含む。
　例えば、図５において、先行ノードとして運用操作部品ノードが配置されている場合には、候補ノードとして「Ａｃｔｉｖｉｔｙ」が推定される。なお、「Ａｃｔｉｖｉｔｙ」とは、例えば運用プロセスに基づいて実際に動作を行う運用業務を実行する人に対する作業指示を示す部品である。また、先行ノードに関する構成情報を取得している場合には、候補ノードとして関連する「運用操作部品」が推定される。
　また、異常ルートを作成中の場合には、候補ノードとして「Ｅｘｉｔ（例えば、プロセス終了）」、「Ｅｍａｉｌ（例えば、電子メール送信）」、「インシデント発行（例えば、所定の管理ツールを介して対象者に通知信号を送信）」が推定される。図５に示す異常ルート、承認ルート、及び却下ルートは、例えばノード間を結ぶ遷移矢印（結合線）の内容によって把握することができ、その遷移矢印によっても候補ノードを推定することができる。
　このように、本実施形態では、１つの作成中の状態に対して、複数の候補ノードを設定しておくことができる。なお、固定的なルールの種類や内容については、図５に限定されるものではない。
　＜（ｂ）対となる操作から候補を推定する場合＞
　図６は、対となる操作から候補を推定する場合のデータの一例を示す図である。図６に示す対となる操作のデータの項目としては、例えば「操作１」、「操作２」等があるが、これに限定されるものではない。図６の例では、ノード間で対となる操作を予め定義しておき、一方のノードが配置されたときに、他方のノードを候補ノードとして推定する。
　具体的には、図６に示すように、操作１と操作２との関係において、例えば「起動」操作の対として「停止」、「組み込み」操作の対として「切り離し」、「作成」操作の対として「削除」等がある。本実施形態では、例えば、サービスの「停止」が行った後に、バックアップ等の何らかの操作を行い、その後にサービスの「起動」を行う可能性がある。また、本実施形態では、例えば負荷分散装置等から「切り離し」、パッチの適用等の何らかの操作をした後に、再度負荷分散装置等へ「組み込み」を行う可能性がある。また、本実施形態では、例えばファイルを「作成」の場合には、その作成したファイルを後段の処理で「削除」する処理を行う可能性がある。したがって、本実施形態では、上述したような対となる操作を予め設定しておくことで、候補ノードの適切な推定を実現する。
　＜（ｃ）連続して同じ対象を操作することを考慮して候補を推定する場合＞
　また、本実施形態では、ある特定の機器に操作を行う際に、連続して複数の同じ操作を行う可能性が高い。したがって、本実施形態では、例えばすでに配置されている運用操作部品と同じ対象を操作する運用操作部品を後続に配置すべきものとしてノードを推定する。
　例えば、「サービス停止」の場合には、「サーバにパッチの適用」、「サービスの再起動」、「サービスの状態確認」等の同一対象を操作するためのノードを候補として推定する。また、同様に、例えば「ファイルの存在確認」の場合には、「ファイルの転送」、「ファイルの削除」等を候補ノードとして表示する。
　＜（ｄ）操作対象の階層を考慮して候補を推定する場合＞
　また、本実施形態では、構成アイテムの階層構造の順序で操作を実施する可能性がある。したがって、本実施形態では、この階層構造の順序に基づいて、後続に配置すべき運用操作部品を提案する。
　なお、階層構造は、例えば管理サーバ１２等が有するＣＭＤＢのＣＩ（構成アイテム）のリレーションを用いて、１対Ｎの関係から求めることができる。例えば、１対Ｎの関係は、「１個のサービス上にＮ個のアプリケーションが存在する」、「１個のサーバの上にＮ個のサービスが存在する」等の関係より、階層構造が導き出せるが、これに限定されるものではない。本実施形態では、例えば、「アプリケーション＞サービス＞サーバ」のような階層構造により、「アプリケーションの停止→サービスの停止→サーバの停止」のように運用操作部品を配置すべきと推定される。
　＜（２）操作対象の種別から候補を推定する場合＞
　また、本実施形態では、例えば操作対象の種別から次に配置すべき運用操作部品を推定することができる。具体的には、本実施形態では、すでに配置されている運用操作部品の入力パラメータの操作対象を示すもの（例えば、ｈｏｓｔｎａｍｅ，ｓｅｒｖｉｃｅ等）から候補ノードを推定することができる。また、本実施形態では、例えば運用プロセス作成時の検索部品の検索結果等から候補ノードを推定することができる。この場合には、例えば、操作対象に対応する構成情報をＣＭＤＢから検索し、操作対象がどのような種別なのかを特定し、種別が特定できたらそれに対応した運用操作部品を候補として推定する。また、本実施形態では、例えば「機器種別（サーバ、ＰＣ、ネットワーク機器）」、「ソフトウェア種別（クラスタ、アプリサーバ、仮想サーバ）」、「ファイル、ディレクトリ等」、「ＯＳの種類」等からも推定が可能である。
　＜（３）過去の作成履歴から候補を推定する場合＞
　また、本実施形態では、過去の作成履歴から候補を推定する場合に、例えば過去の運用プロセスの開発時の履歴を保存しておき、その履歴に基づいて後続の運用操作部品等のノードを推定する。なお、履歴情報には、運用操作部品の使用回数や運用操作部品ノードの前後関係、運用操作部品のセット等があるが、これに限定されるものではない。
　＜（ａ）運用操作部品の使用回数＞
　本実施形態では、例えば過去に使用頻度（使用回数）の高い運用操作部品を優先的に表示する。また、本実施形態では、「運用操作部品ノードの前後関係」の履歴情報等も用いることができる。この場合には、すでに配置されている運用操作部品の後続として、どのような運用操作部品が配置される可能性が高いかを履歴情報から求め、可能性の高いものを優先的に表示する。
　＜（ｂ）運用操作部品のセット＞
　また、本実施形態では、過去の運用プロセスの作成履歴からよく同時に利用される運用操作部品のセットを用いて候補ノードを推定する。例えば、本実施形態では、運用プロセスの作成時に既に配置している運用操作部品が所属するセットを求め、求めたセットに含まれる運用操作部品を優先的に表示する。
　なお、候補ノードを表示する場合には、例えば上述した作成中のプロセス定義の状態から推定したもの、操作対象の種別から推定したもの、過去の作成履歴から推定したものの順で表示することができるが、これに限定されるものではない。
　上述したように、本実施形態によれば、運用プロセスに配置すべき運用操作部品が容易に見つけられる。具体的には、運用プロセスの作成時に、次に配置すべき運用操作部品が自動（フィルタ機能を用いずに）で表示され、次に配置する運用操作部品効率的に見つけることができる。また、パレットがエディタ上の所定の位置にポップアップで表示されるため、運用操作部品が選択しやすい。これにより、本実施形態では、迅速に運用プロセスを作成することができる。
　＜Ｓ１０：運用プロセスの作成履歴の集積処理＞
　ここで、上述したＳ１０に示す運用プロセスの作成履歴の集積処理について、フローチャートを用いて説明する。図７は、運用プロセスの作成履歴の集積処理の一例を示すフローチャートである。図７に示す集積処理では、運用プロセス定義の保存時に操作対象の階層構造を管理サーバ（ＣＭＤＢ）から導き出す処理と運用プロセスの保存時に作成履歴を蓄積する処理を実行する。
　具体的には、図７に示す集積処理では、Ｓ２１～Ｓ３０の処理により、例えば、作成後の運用プロセスに含まれるプロセス定義の全ての運用操作部品に対する処理が完了するまで繰り返し処理が行われる。なお、図７の例では、全ての運用操作部品の処理が完了するまで繰り返し処理が行われるが、これに限定されるものではなく、他の部品（ノード）を含んでいてもよい。
　まず、集積処理は、前回の保存時の内容と比較し、新規の追加部品があるか否かを判断する（Ｓ２１）。追加部品がある場合（Ｓ２２において、ＹＥＳ）、運用操作部品の操作対象を特定し（Ｓ２３）、管理サーバ１２のＣＭＤＢ等から操作対象を抽出する（Ｓ２４）。
　次に、集積処理では、抽出した操作対象に関する構成アイテムのリレーション（対応関係）を取得し、同種のものが複数関連づいているものを抽出し（Ｓ２５）、抽出した構成アイテムを子構成アイテムとして追加する（Ｓ２６）。次に、集積処理では、運用操作部品の使用回数を１プラスし（Ｓ２７）、運用操作部品の先行ノードと、後続ノードとを前後ノードの履歴情報として記憶する（Ｓ２８）。
　次に、集積処理では、運用操作部品セットとして、新規の追加部品をプロセス定義名に対応して使用可能な運用操作部品として追加する（Ｓ２９）。また、集積処理では、上述したＳ２２の処理において、対象の運用操作部品が新規の追加部品でない場合（Ｓ２２において、ＮＯ）、次の運用操作部品に対して処理を行う。本実施形態では、上述した処理により、次回以降の運用プロセス作成に利用される作成履歴情報を取得することができる。
　ここで、図８は、運用プロセスの作成履歴のデータの一例を示す図である。図８（Ａ）では、構成アイテムの階層構造のデータ例を示し、図８（Ｂ）では、運用操作部品の使用頻度のデータ例を示し、図８（Ｃ）では、前後ノードの履歴情報のデータ例を示し、図８（Ｄ）では、運用操作部品セットのデータ例を示している。
　図８（Ａ）の項目としては、例えば「構成アイテム」、「子構成アイテム」等が関連づけられているが、これに限定されるものではない。なお、図８（Ａ）のデータは、例えば上述したＳ２６の処理で得られるデータである。
　具体的には、本実施形態では、運用プロセス作成時に使用した運用操作部品の構成アイテムから、そのリレーションとして予め関連づけられている構成アイテムを子構成アイテムとして記憶する。例えば、図８（Ａ）の例では、「論理サーバ」の子構成アイテムとして「サービス」が記憶され、「サービス」の子構成アイテムとして「ワークユニット」、「ジョブネット」が記憶される。なお、ワークユニットとは、例えばアプリケーションの運用単位を示す。また、ジョブネットとは、実行順序を指定した、１つ以上のジョブの集まりを示す。
　また、図８（Ｂ）の項目としては、例えば「運用操作部品名」、「使用回数(１ヶ月)」、「使用回数(６ヶ月)」、「使用回数(１年)」等があるが、これに限定されるものではない。なお、図８（Ｂ）のデータは、例えば上述したＳ２７の処理で得られるデータである。具体的には、図８（Ｂ）の例では、例えば運用操作部品名が「サービスの起動確認」である場合に、１ヶ月間での使用回数が１０回、６ヶ月間での使用回数が５０回、１年間での使用回数が９８回であることを示している。
　また、図８（Ｃ）の項目としては、例えば「運用操作部品名」、「先行ノード」、「後続ノード」等があるが、これに限定されるものではない。なお、図８（Ｃ）のデータは、例えば上述したＳ２８の処理で得られるデータである。具体的には、図８（Ｃ）の例では、例えば、運用操作部品名が「サーバの停止」である場合に、先行ノードが「サービスの停止」、後続ノードが「Ｅｍａｉｌ」といった情報が記憶される。
　また、図８（Ｄ）の項目としては、例えば「プロセス定義名」、「使用運用操作部品」等が関連づけられているが、これに限定されるものではない。なお、図８（Ｄ）のデータは、例えば上述したＳ２９の処理で得られるデータである。具体的には、図８（Ｄ）の例では、プロセス定義名が「アプリのパッチの適用」である場合に、使用運用操作部品として、Ａｃｔｉｖｉｔｙ、サービスの停止、パッチの適用、サービスの開始、サービスの起動確認等が記憶される。なお、使用運用操作部品とは、例えば、プロセス定義毎に使用可能な運用操作部品を示す。本実施形態では、上述したような情報を用いて作成中の運用プロセスから次の運用操作部品等のノードを推定することができる。
　＜作成中の運用プロセスから運用操作部品を推定する処理の具体的な実施例＞
　次に、作成中の運用プロセスから運用操作部品を推定する処理の具体的な実施例について説明する。
　＜実施例１＞
　図９は、実施例１における推定処理の一例を示すフローチャートである。なお、実施例１では、上述した固定的なルールと対となる操作とを用いた候補の推定処理の一例を示している。実施例１における推定処理は、まず作成中の運用プロセスにおいて、すでに確定したノードの中から先行ノードを特定する（Ｓ４１）。Ｓ４１の処理では、例えば画面に表示されたカーソルの位置を基準とし、その左側及び上側に配置されているノードを先行ノードとする。次に、実施例１における推定処理は、後続ノードを特定する（Ｓ４２）。Ｓ４２の処理では、例えば画面に表示されたカーソルの右側及び下側に配置されているノードを後続ノードとする。
　次に、実施例１における推定処理は、先行ノードから後続ノードまでの遷移矢印（結合線）の内容を取得し（Ｓ４３）、取得した遷移矢印から、予め設定された固定的なルールを用いて該当する作成中の状態に対する候補ノードを推定する（Ｓ４４）。なお、Ｓ４３の処理では、例えば先行ノードから出ている矢印の出元や名前から矢印の内容を取得する。また、Ｓ４４の処理では、例えば先行ノードと遷移矢印の内容（作成中の状態）と上述した図５に示すデータを比較して現在の作成中の状態に対応する後続の候補ノードを推定する。なお、実施例１における推定処理は、推定した候補ノードを候補テーブル等に追加する（Ｓ４５）。
　次に、実施例１における推定処理は、上述した図６に示すような対となる操作の組み合わせルールから該当する作成中の状態に対する候補ノードを推定する（Ｓ４６）。その後、実施例１における推定処理は、候補ノードを候補テーブルに追加し（Ｓ４７）、処理を終了する。
　ここで、図１０は、実施例１における候補テーブルの一例を示す図である。本実施形態では、上述した図９に示す推定処理により、図１０に示すような候補テーブルに複数の候補ノードが所定の順序で記憶され、この内容がパレット等により画面上の所定の位置に表示される。なお、上述した候補テーブルは、記憶手段２３等に記憶されてもよい。
　なお、上述した実施例１における推定処理では、固定的なルールからの候補ノードの推定と、対となる操作からの候補ノードの推定とを連続して行ったが、これに限定されるものではなく、個々に行ってもよい。その場合には、固定的なルールからの候補ノードの推定処理として、例えばＳ４１～Ｓ４５の処理を行い、また対となる操作からの候補ノードの推定処理として、例えばＳ４１の処理の後、Ｓ４６、Ｓ４７の処理を行う。
　＜実施例２＞
　図１１は、実施例２における推定処理の一例を示すフローチャートである。なお、実施例２では、連続して同じ対象に対する操作を用いた候補の推定処理の一例を示している。
　実施例２における推定処理は、例えば先行及び後続の運用操作部品を抽出し（Ｓ５１）、その後、Ｓ５２～Ｓ５５の処理を、抽出した全ての運用操作部品に対する処理が終了するまで繰り返す処理（ループ）を行う。なお、Ｓ５１の処理は、例えば画面上のカーソルの位置情報に対して所定の方向（上下左右のうち予め設定された少なくとも１つの方向）に配置されている運用操作部品を先行運用操作部品として抽出する。
　実施例２における推定処理は、対象の運用操作部品の操作対象種別を特定する（Ｓ５３）。なお、操作対象種別は、予め各運用操作部品に対応する操作対象種別の情報を設定しておき、その情報を参照することで、操作対象種別を特定する。なお、上述した設定情報は、記憶手段２３に記憶されていてもよい。また、図１１に示す推定処理は、同じ種別を対象とする運用操作部品を候補ノードに追加する（Ｓ５４）。Ｓ５４の処理では、例えば上述した候補テーブルに候補ノードを追加してもよい。なお、上述した図１１の処理は、運用操作部品に限定されるものではなく、他の部品を含むノードに対して行ってもよい。
　ここで、図１２は、実施例２における推定処理に対応するデータの一例を示す図である。なお、図１２（Ａ）は、操作対象種別の一例を示し、図１２（Ｂ）は、実施例２における候補テーブルの一例を示している。図１２（Ａ）では、各運用操作部品名に対応する操作対象種別が設定されているが、内容や種類等についてはこれに限定されるものではない。例えば、運用操作部品名が、「サーバの停止」、「サーバの開始」、「ＯＳの再起動」、「サーバの電源状態取得」、及び「サーバの正常動作確認」であれば、操作対象種別は何れも「サーバ」となる。このように、本実施形態では、運用操作部品名に対応する操作対象種別を予め設定することで、例えば先行ノードが「サーバの停止」である場合に、図１２（Ａ）を参照して同一の操作対象種別の運用操作部品を候補ノードとすることができる。したがって、本実施形態では、図１２（Ｂ）に示すように、同一の操作対象種別の運用操作部品を纏めて提示することができる。
　＜実施例３＞
　図１３は、実施例３における推定処理の一例を示すフローチャートである。なお、実施例３では、階層構造に基づく推定処理の一例を示している。実施例３における推定処理は、例えば先行及び後続の運用操作部品を抽出し（Ｓ６１）、その後、Ｓ６２～Ｓ６６の処理を、抽出した全ての運用操作部品に対する処理が終了するまで、繰り返す処理（ループ）を行う。なお、Ｓ６１の処理は、例えば画面上のカーソルの位置情報に対して所定の方向（上下左右のうち予め設定された少なくとも１つの方向）に配置されている運用操作部品を先行運用操作部品として抽出する。
　実施例３における推定処理は、先行運用操作部品の操作対象種別を特定し（Ｓ６３）、操作対象種別の親や子になりえる構成アイテムの種別を特定する（Ｓ６４）。なお、Ｓ６４の処理では、例えば、図８（Ａ）に示すような情報を用いて親子の階層構造を有する種別を特定する。次に、実施例３における推定処理は、特定した種別を対象とする運用操作部品を候補テーブルに追加する（Ｓ６５）。
　ここで、図１４は、実施例３における候補テーブルの一例を示す図である。実施例３では、上述した図１３に示す推定処理を行うことにより、図１４に示すように、１又は複数の候補ノードを推定することができる。例えば、上述した図８では、「論理サーバ」の子構成アイテムとして「サービス」を有している。したがって、実施例３では、図８を適用すると図１４に示す候補テーブルのように、サーバ（親）に対する候補ノードの下にサービス（子）の候補ノードを１又は複数記憶させることができる。なお、図１４の例では、下位（子）の階層として「サービスの開始」、「サービスの停止」、「サービスの起動確認」の候補ノードが追加されている。
　＜実施例４＞
　図１５は、実施例４における推定処理の一例を示すフローチャートである。なお、実施例４では、操作対象の種別から運用操作部品を推定する例を示している。実施例４における推定処理は、まず先行運用操作部品を抽出し（Ｓ７１）、その後、Ｓ７２～Ｓ７８の処理を、抽出した全ての運用操作部品に対する処理が終了するまで繰り返す処理（ループ）を行う。なお、Ｓ７１の処理は、例えば画面上のカーソルの位置情報に対して所定の方向（上下左右のうち予め設定された少なくとも１つの方向）に配置されている運用操作部品を先行運用操作部品として抽出する。
　実施例４における推定処理は、構成情報の取得部品か否かを判断する（Ｓ７３）。なお、Ｓ７３の処理では、すでに配置が確定された先行ノードのみに対して、構成情報が取得された部品かどうかを判断する。ここで、構成情報の取得部品である場合（Ｓ７３において、ＹＥＳ）、例えば管理サーバ１２に設けられたＣＭＤＢ等を仮検索し、操作対象を抽出する（Ｓ７４）。また、実施例４における推定処理は、抽出により特定した操作対象を対象とする運用操作部品を候補に追加する（Ｓ７５）。
　また、実施例４における推定処理は、上述したＳ７３の処理において、構成情報の取得部品でない場合（Ｓ７３において、ＮＯ）、例えば予め設定された入力パラメータ等から操作対象の種別を決定し（Ｓ７６）、決定により特定した操作対象を対象とする運用操作部品を候補に追加する（Ｓ７７）。なお、Ｓ７５及びＳ７７の処理は、例えば上述した候補テーブルとして追加されてもよい。
　図１６は、実施例４における候補テーブルの一例を示す図である。実施例４では、例えば先行ノードの運用操作部品が構成情報（構成アイテム）の取得部品である場合に、ＣＭＤＢ等を用いた仮検索の結果から、操作対象がワークユニットであると特定したとする。その場合に、実施例４では、ワークユニットを対象とする予め設定された１又は複数の運用操作部品を候補ノードとして候補テーブルに記憶する。なお、図１６の例では、実施例４の処理により、候補ノードとして「ワークユニットの起動」、「ワークユニットの停止」、「ワークユニットを再起動」が記憶されているが、これに限定されるものではない。
　＜実施例５＞
　図１７は、実施例５における推定処理の一例を示すフローチャートである。なお、実施例５では、過去の作成履歴から運用操作部品を推定する推定処理の一例を示している。なお、実施例５では、例えば過去の作成履歴から運用操作部品を推定する例として、例えば運用操作部品の前後関係から候補を推定したり、運用操作部品のセットから候補を推定することができる。
　実施例５における推定処理は、まず先行及び後続の運用操作部品を抽出する（Ｓ８１）。なお、Ｓ８１の処理は、例えば画面上のカーソルの位置情報に対して所定の方向（上下左右のうち予め設定された少なくとも１つの方向）に配置されている運用操作部品を先行運用操作部品として抽出する。
　次に、実施例５における推定処理は、Ｓ８２～Ｓ９１までの処理を、抽出した全ての運用操作部品に対する処理が終了するまで繰り返す処理（ループＡ）を行う。また、実施例５における推定処理は、Ｓ８２～Ｓ９１の処理が終了後、Ｓ９２～Ｓ９６までの処理を、抽出した全ての運用操作部品に対する処理が終了するまで繰り返す処理（ループＢ）を行う。
　実施例５における推定処理は、処理対象のノードが先行ノードか否かを判断し（Ｓ８４）、先行ノードである場合（Ｓ８４において、ＹＥＳ）、前後ノードの履歴テーブルの部品名にその先行ノードの部品が含まれているか否かを判断する（Ｓ８５）。実施例５における推定処理は、部品名に含まれていると判断した場合（Ｓ８５において、ＹＥＳ）、その先行ノードに対応する後続ノードを候補ノードとして推定し（Ｓ８６）、推定されたノードを候補テーブルに追加する（Ｓ８７）。また、実施例５における推定処理は、Ｓ８５の処理において、部品名に含まれていない場合（Ｓ８５において、ＮＯ）、何も処理を行わない。
　また、実施例５における推定処理は、Ｓ８４の処理において、先行ノードでない場合（Ｓ８４において、ＮＯ）、処理対象のノードは後続ノードである。したがって、実施例５における推定処理は、処理対象の後続ノードが前後ノードの履歴テーブルの部品名に含まれているか否かを判断する（Ｓ８８）。また、実施例５における推定処理は、後続ノードが履歴テーブルの部品名に含まれている場合（Ｓ８８において、ＹＥＳ）、その後続ノードに対応する先行ノードを候補ノードとして推定し（Ｓ８９）、推定されたノードを候補テーブルに追加する（Ｓ９０）。また、実施例５における推定処理は、Ｓ８８の処理において、部品名に含まれていない場合（Ｓ８８）において、ＮＯ）、何もしない。なお、上述した前後ノードの履歴テーブルとしては、例えば上述した図８（Ｃ）に示すようなテーブルを用いることができるが、これに限定されるものではない。
　次に、実施例５における推定処理は、ループＢの処理として、処理対象の部品が予め設定された部品セットの履歴テーブルに含まれているか否かを判断する（Ｓ９３）。実施例５における推定処理は、処理対象の部品が部品セットの履歴テーブルに含まれている場合（Ｓ９３において、ＹＥＳ)、履歴テーブルにて対応する他ノードを全て候補ノードとして推定する（Ｓ９４）。また、実施例５における推定処理は、推定されたノードを候補テーブルに追加する（Ｓ９５）。なお、実施例５における推定処理は、Ｓ９３の処理において、処理対象の部品が部品セットの履歴テーブルに含まれていない場合（Ｓ９３において、ＮＯ）、何も処理を行わない。なお、上述した部品セットの履歴テーブルとしては、例えば上述した図８（Ｄ）に示すようなテーブルを用いることができるが、これに限定されるものではない。
　ここで、図１８は、実施例５における候補テーブルの一例を示す図である。図１８（Ａ）では、運用操作部品の前後関係と、運用操作部品のセットから推定された候補ノードの一例を示し、図１８（Ｂ）は、運用操作部品の前後関係から推定された候補ノードの一例を示し、図１８（Ｃ）は、運用操作部品のセットから推定された候補ノードの一例を示す図である。
　実施例５では、上述した図１７に示す処理を行うことで、図１８（Ａ）～（Ｃ）に示すように、それぞれの条件に応じてユーザに適切な異なる候補ノードを提示することができる。また、実施例５では、予め設定された複数の条件により得られた図１８（Ａ）～（Ｃ）に示すような候補テーブルを取得し、取得した各候補テーブルを画面に表示することができる。この場合には、複数の候補テーブルをそれぞれ画面の異なる位置に表示してもよく、また何れか１つの候補テーブルを所定の時間間隔で繰り返し表示させてもよい。
　＜実施例６＞
　図１９は、実施例６における推定処理の一例を示すフローチャートである。なお、実施例６では、運用操作部品の使用回数から候補ノードを推定する推定処理の一例を示している。
　実施例６における推定処理は、まず予め設定された使用頻度テーブルから最も使用頻度の高い（使用回数の多い）ノードを候補ノードとして推定し（Ｓ１０１）、推定されたノードを候補テーブルに追加する（Ｓ１０２）。なお、使用頻度テーブルとしては、例えば上述した図８（Ｂ）に示すテーブルを用いることができるが、これに限定されるものではない。なお、使用頻度は、所定期間（例えば、１ヶ月、６ヶ月、１年等）を基準とする。
　図２０は、実施例６における候補テーブルの一例を示す図である。実施例６では、例えば図１９に示す推定処理を行うことで、図２０に示すように１又は複数の候補ノードを提示することができる。なお、図２０の例では、候補ノードとして「ａｃｔｉｖｉｔｙ」、「サーバを起動」、「サーバの電源状態取得」、「サーバの正常動作確認」、「ＯＳの再起動」、「サービスの開始」、「サービスの停止」、「サービスの起動確認」、「Ｅｍａｉｌ」、「ワークユニットを停止」、「任意のコマンドを実行」、「インシデント発行」の順序でテーブルに格納される。
　なお、本実施形態における推定処理の具体例は、上述した上述した実施例１～実施例６に限定されるものでなく、例えば上述した各実施例のうち、複数の実施例を組み合わせて候補ノードの推定を行ってもよい。
　＜候補ノードの数について＞
　ここで、例えば上述した図２０の例では、１２個の候補ノードが提示されているが、これに限定されるものではなく、例えば画面に表示する候補ノードのパレットの大きさ等に応じて数を調整することができる。なお、パレットに表示される候補ノードは、候補テーブルの最上位のもの、すなわち優先度の高い候補ノードから所定数だけ表示される。
　＜候補ノードの画面表示例（パレット例）＞
　次に、上述した各実施例により推定された候補ノードの画面表示例について図を用いて説明する。図２１～図２３は、本実施形態における運用プロセス作成環境における表示画面例を示す図（その１～その３）である。
　図２１では、例えば運用プロセス作成用のエディタの一例としての運用プロセス作成用画面５０に最初のスタート（Ｓｔａｒｔ）の部品５１が配置され、その後、「サーバの停止（ｈｏｓｔｎａｍｅ:サーバＡ）」の部品５２－１が配置されている。
　このとき、本実施形態では、部品５２－１の後続の候補ノードを画面に表示する。具体的には、図２２に示すように、画面上の現時点のカーソル５３の位置情報を基準として、その近辺に、候補ノードが配列されたパレット５４－１を表示する。なお、カーソル５３は、画面の表示領域に表示されるポインタの一種である。本実施形態では、カーソル５３に限らず、各種ポインタがユーザの操作によって位置移動、や位置が決定される。
　また、本実施形態では、すでに確定した部品５１，５２－１の位置情報を基準にして表示されている部品（例えば、最後に配置された部品）が隠れることがないようにパレット５４－１を表示させてもよい。また、カーソル５３と部品５１，５２－１の両方の位置情報に基づいてパレット５４－１の表示位置を設定してもよい。これにより、本実施形態では、後続ノードの配置位置と
カーソル５３と、パレット５４－１との距離を短くできることになり、ユーザは簡単な操作で次の部品を選択し、配置することができる。したがって、本実施形態では、作成時間を削減することができる。
　なお、候補ノードは、配置が確定された部品５２－１を先行ノードとして、上述した実施例を行うことで、ユーザに適切な候補ノードを取得することができる。また、図２２の例では、部品５１と部品５２－２との結合線（遷移矢印）の状態（例えば、異常、承認、却下）等により候補ノードを取得することもできる。その場合には、矢印の内容（意味）が運用プロセス作成用画面５０上に表示され、その表示されている内容から矢印の内容を取得することができる。
　また、パレット５４－１に配置される候補ノード５５の数については、特に限定されるものでないが、例えば１０個程度が好ましく、また画面サイズ等に応じて変更することができる。
　また、本実施形態では、例えば図２３に示すようにスタートの部品５１の後に「構成情報を取得」の部品５２－２が配置された場合に、上述した推定処理により部品５２－２を先行ノードとした候補ノードが推定される。また、推定された候補ノード５５は、所定数が所定の順序でパレット５４－２上に配置され、上述したようにカーソル５３の位置や配置が確定された部品５１，５２－２等を基準にして運用プロセス作成用画面５０上にパレット５４－２が表示される。本実施形態では、上述した候補ノードの推定処理を行うことで、図２２、図２３に示すように、後続ノードとして適切な異なるノードを提示することができ、またパレット５４もユーザが操作し易い適切な位置に表示することができる。したがって、ユーザは、図２２、図２３に示すパレット５４－１，５４－２に表示された候補ノード５５からカーソル５３を移動させて後続のノードを選択し、運用プロセス作成用画面５０の所定位置に迅速に配置することができる。
　なお、上述した図２１～２３の例では、部品（ノード）をノード毎に設定されたアイコンや名称等により表しているが、これに限定されるものではなく、例えば予め設定された記号や模様等により表示されてもよい。図２１～２３に示すように、本実施形態では、パレットがエディタ上の所定の位置にポップアップで表示されるため、運用操作部品が選択しやすくなり、作成時間を大幅に軽減することができる。
　上述したように、本実施形態によれば、迅速に運用プロセスを作成することができる。したがって、本実施形態によれば、運用プロセス作成時のコストも大幅に軽減することができる。
　なお、本実施形態は、例えばスマート・テクノロジ等の分野に適用することができる。スマート・テクノロジとは、ハードウェアやソフトウェアの状況を自ら判断し、より簡単・安心に利用できるための最適化を図る技術を指す。また、具体的には、運用操作部品の関連性に基づいて自律的に予測する技術のことを指すが、これに限定されるものではない。また、本実施形態は、例えば富士通株式会社製のＳｙｓｔｅｍｗａｌｋｅｒ　Ｒｕｎｂｏｏｋ　Ａｕｔｏｍａｔｉｏｎ（ＳＲＡ）等に適用することができるが、これに限定されるものではない。
　以上、実施例について詳述したが、特定の実施例に限定されるものではなく、特許請求の範囲に記載された範囲内において、種々の変形及び変更が可能である。また、上述した実施例の構成要素を全部又は複数を組み合わせることも可能である。
　１０　運用システム
　１１　ＰＣ
　１２　管理サーバ
　１３　操作対象サーバ
　１４　通信ネットワーク
　２１　入力手段
　２２　出力手段
　２３　記憶手段
　２４　候補ノード推定手段
　２５　パレット生成手段
　２６　画面生成手段
　２７　送受信手段
　２８　制御手段
　３１　プロセス定義情報
　３２　操作対象種別情報
　３３　作成履歴情報
　３４　候補テーブル
　４１　入力装置
　４２　出力装置
　４３　ドライブ装置
　４４　補助記憶装置
　４５　主記憶装置
　４６　ＣＰＵ
　４７　ネットワーク接続装置
　４８　記憶手段
　５０　運用プロセス作成用画面
　５１，５２　部品
　５３　カーソル
　５４　パレット
　５５　候補ノード
Patent WO2013179468A1 - 運用プロセス作成プログラム、運用プロセス作成方法、及び情報処理装置 - Google Patents
