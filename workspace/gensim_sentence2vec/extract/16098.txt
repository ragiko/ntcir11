Webシステム環境で、CPU処理能力に次いで性能ボトルネックの根源になりやすいシステムリソースは、I/O(入出力)処理です。とりわけ、データベース等のファイルアクセスが頻繁に行われるアプリケーションでは、I/Oの振る舞いがシステムの応答性能に大きな影響を与えることになります。ただ、I/Oボトルネック追求はある意味、局所的なアプローチであり、システムテストの段階で初めからこの部分だけを気にしてチェックしていても全体像の視点が無ければ問題把握がしにくいことは事実です。本章では、これらについての総合的な視点で段階的な計測手順と見極め方について整理します。I/Oボトルネック発見と分析の手順1. 著しい応答遅延の計測まず、ユーザーの使用に支障をきたすような著しい応答遅延が存在するかどうかを確認します。どの程度の負荷でこの応答性能の劣化現象が発生するかを把握して、その発生時点の前後に計測されているシステムリソースの振る舞いをチェックすることから調査を開始します。肝心な点は、応答性能劣化の傾向やパターンを確認しないまま、漫然とシステムリソースの計測や分析、または改善を行ったとしても、潜在的により全体的な影響度が大きい制約条件(ボトルネック)が存在していることも考えられます。問題の根源を見ずマニュアル的なアプローチを行ったとしても、その際には改善効果はほとんど得られず、単なる徒労となる場合もありますので、まず対象のシステムの振る舞いを確認することが肝要です。2. I/Oがボトルネックになっている徴候を把握ユーザーにとっての著しい応答劣化が計測される負荷の下では、システム内部側でどのような症状が発生しているか俯瞰的に把握します。具体的には、まず各種サーバー毎にCPU使用率、物理メモリ使用率を確認し、極端にリソース不足の状態にあるサーバーが無いかどうかを確認します。この中で特に物理メモリが枯渇しているマシンでは、不足した物理メモリ量を補うためにディスク上にメモリ領域を仮想展開するスワッピングやページングが多発している可能性があり、その際には主記憶と比べて相対的に読み書きの速度が遅いディスクがボトルネックになっている可能性が高いと言えます。また、CPU使用率が50%以上等ある程度高いマシンでは、そのCPU使用率の内訳を確認してみる必要があります。UNIX系のI/O waitや、Windows系のカーネルタイムが占める比率が高いマシンでは、I/Oボトルネックが生じている可能性が考えられます。また、性能劣化が発生しているにもかかわらず、どのマシンのCPUやメモリも応答遅延の原因になっているように見受けられない場合には、その他の多数の候補の中から要因を探る必要があります。その中で、ネットワーク送受信のI/Oがボトルネックとなる遅延や、物理メモリや拡張ボードやマザーボードのバスのI/Oの処理能力の限界が要因となって遅延が生じているケースもあります。これらの中には計測困難なものもあります。 以下に切り分けの概要を示します。3. UNIX系のマシンでCPU使用率に占めるI/O遅延を切り分ける最近のLinuxの場合には、以下の通りvmstat コマンドを実行することで把握出来ます。$vmstat 1 2
9. I/Oボトルネックの計測
