
このドキュメントでは、 クエリセット(QuerySet) API について詳しく解説し
ます。このドキュメントは、 モデル と
データベースクエリ に基づいて書かれているので、
あらかじめ読んでおくよう勧めます。
このリファレンスを通じて、例題には データベースクエリガイド で取り上げた ブログのモデル例 を使います。
クエリセットはいつ評価されるのか¶
内部的には、クエリセットの生成、フィルタ操作、スライス、コード間の受渡しは、
データベースを操作することなく行えます。クエリセットを何らかの形で評価しな
い限り、データベースの操作は実際には起こらないのです。
以下の方法を使うと、クエリセットを評価できます:
イテレーション。 クエリセットはイテレーション可能オブジェクトであ
り、オブジェクトに対して最初にイテレーション操作を行ったときにデータ
ベースクエリを実行します。例えば、以下の例はデータベース中の全てのエ
ントリのヘッドラインを出力します:
スライス。 クエリセットに制約を課す で説明しているように、
Python の配列スライス表記を使うとクエリセットをスライスできます。通常、
クエリセットに対するスライスは (未評価の) 別のクエリセットを返します
が、スライス表記に「ステップ (step)」パラメタを使った場合には、データ
ベースクエリを実行します。
repr(). クエリセットに対して repr() を呼び出すと、クエリセッ
トは値評価されます。これは Python 対話インタプリタでの利便性のための
仕様で、 API を対話的に使うときに結果を即座に見られるようにしています。
len(). クエリセットに対して len() を呼び出すと、クエリセッ
トは値評価されます。予想に違わず、 len() はクエリ結果リストの長さ
を返します。
注意: クエリセット中のレコードの数を知りたいだけなら、 len() は
使わないでください 。レコード数の計算はデータベース上で SQL 文の
SELECT COUNT(*) 使って行う方が遥かに効率的であり、まさにその理由
から Django では count() メソッドを提供しています。後述の
count() を参照してください。
list(). クエリセットに対して list() を呼び出すと、値評価を強
制できます。例えば:
QuerySet API リファレンス &mdash; Django v1.0 documentation
