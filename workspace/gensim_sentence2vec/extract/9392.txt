
周辺検索を使う方法
概要
テキスト検索と違って、リクエストは1回分で済む
並べ替えができる
nameパラメータを指定する
エイリアスを含めたプレイス名を検索
半角・全角を厳密に識別するため、実用性は微妙
keywordパラメータを指定する
名前、タイプ、住所とユーザのクチコミや第三者のコンテンツも対象となる
半角・全角も同一視してくれるため、使うならこっち
実験
緯度経度、radiusの最大値50,000mの範囲外だと、検索結果は0件になる
rankby=distanceとすると、radiusが強制的に50kmとなる。条件的には上記と同様であるが、50kmの範囲内で該当するものを返す。ただし、この結果は無理矢理返しているような内容になる(例えば、大阪市内で「青森」と検索すると、[近畿青森県人会, 青森放送 大阪支社]などが結果として返される)
あくまで緯度経度ありきでの検索になる模様
テキスト検索を使う方法
概要
緯度経度情報は不要
「東京 ラーメン」という具合にフリーワード検索ができる
この文字列に一致した候補を、関連性の高い順で返す
リクエストの消費回数は10回分となるので、使い過ぎには注意
並び替えはできない
location, radiusパラメータを指定したとき
範囲内の結果は、範囲外のものよりも優先して返す
知名度が高い場合、範囲外であっても結果に含まれる可能性がある
実験
緯度経度を指定し、指定範囲から大きく外れた場所(例えば、大阪の緯度経度で「北海道 ゴルフクラブ」など)を検索文字列として渡した場合、恐らく、該当がないなどの理由で緯度経度・範囲指定を無視し、通常のテキスト検索が行われる模様
期待される検索キーワードが「大阪 ラーメン」や「ラーメン」といった地名+αになっているせいか、地名のみの検索には極端に弱い模様(この仕様はGoogle Mapsと同じ)
## 周辺検索を使う方法
#### 概要
* テキスト検索と違って、リクエストは1回分で済む
* 並べ替えができる
### nameパラメータを指定する
* エイリアスを含めたプレイス名を検索
* 半角・全角を厳密に識別するため、実用性は微妙
### keywordパラメータを指定する
* 名前、タイプ、住所とユーザのクチコミや第三者のコンテンツも対象となる
* 半角・全角も同一視してくれるため、使うならこっち
### 実験
* 緯度経度、radiusの最大値50,000mの範囲外だと、検索結果は0件になる
* `rankby=distance`とすると、radiusが強制的に50kmとなる。条件的には上記と同様であるが、50kmの範囲内で該当するものを返す。ただし、この結果は無理矢理返しているような内容になる(例えば、大阪市内で「青森」と検索すると、[近畿青森県人会, 青森放送 大阪支社]などが結果として返される)
* あくまで緯度経度ありきでの検索になる模様
## テキスト検索を使う方法
#### 概要
* 緯度経度情報は不要
* 「東京 ラーメン」という具合にフリーワード検索ができる
* この文字列に一致した候補を、関連性の高い順で返す
* リクエストの消費回数は10回分となるので、使い過ぎには注意
* 並び替えはできない
### location, radiusパラメータを指定したとき
* 範囲内の結果は、範囲外のものよりも優先して返す
* 知名度が高い場合、範囲外であっても結果に含まれる可能性がある
### 実験
* 緯度経度を指定し、指定範囲から大きく外れた場所(例えば、大阪の緯度経度で「北海道 ゴルフクラブ」など)を検索文字列として渡した場合、恐らく、該当がないなどの理由で緯度経度・範囲指定を無視し、通常のテキスト検索が行われる模様
* 期待される検索キーワードが「大阪 ラーメン」や「ラーメン」といった地名+αになっているせいか、地名のみの検索には極端に弱い模様(この仕様はGoogle Mapsと同じ)
GooglePlacesAPI - Google Places APIの文字列検索 - Qiita
