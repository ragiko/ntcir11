
アルゴリズムとデータ構造編【整列アルゴリズム】 第4章 挿入ソート 解答ページ
問題①
問題① 最初に紹介した改良版でない方の挿入ソートを、降順にソートするようにして下さい。
内側の for文の条件式で、不等号を逆にするだけです。
/*
挿入ソート (降順)
*/
void insertion_sort(int* array, size_t size)
{
size_t i, j;
int tmp;
for( i = 1; i < size; ++i ){
tmp = array[i];
for( j = i; j > 0 && array[j-1] < tmp; --j ){
array[j] = array[j-1];
}
array[j] = tmp;
}
}
「array[j-1] > tmp」となっていたところを「array[j-1] < tmp」に変更しました。
問題②
問題② 改良版の挿入ソートを、降順にソートするようにして下さい。
問題①と同様に、不等号の向きを逆にするだけで実現できますが、今度は2か所書き換えます。
void insertion_sort_ex(int* array, size_t size)
{
size_t i, j;
int tmp;
for( i = 1; i < size; ++i ){
tmp = array[i];
if( array[i-1] < tmp ){  /* 挿入が必要か先に調べる */
j = i;
/* 初回の j > 0 は必ず真(i=1; であり j=i; をしたのだから) であるし、
array[j-1] > tmp も先ほどチェックしたところなので、
do-while文にして条件判定を後に回す方が効率的。
for( j = i; j > 0 && array[j-1] > tmp; --j ); としていることはまったく同じで、
単に do-while文に書き換えただけ。
*/
do {
array[j] = array[j-1];
--j;
} while( j > 0 && array[j-1] < tmp );
array[j] = tmp;  /* ここで行えば、挿入が不要ならば通過しなくて済む */
}
}
}
書き換えたのは、if文の条件式と、do-while文の条件式の2か所です。
問題③
問題③ 挿入位置を探すとき、二分探索(【探索アルゴリズム】第4章参照)の考え方を使えば高速化を図れる可能性があります。
その方法で実装して下さい。
このような実装方法は、二分挿入ソートと呼ばれています。
まずは、改良版でない方から実装してみます。
#include <stdio.h>
#define SIZE_OF_ARRAY(array)    sizeof(array)/sizeof(array[0])
void binary_insertion_sort(int* array, size_t size);
void print_array(const int* array, size_t size);
int main(void)
{
int array[] = {7, 2, 4, 5, 1, 6};
print_array( array, SIZE_OF_ARRAY(array) );
binary_insertion_sort( array, SIZE_OF_ARRAY(array) );
print_array( array, SIZE_OF_ARRAY(array) );
return 0;
}
/*
二分挿入ソート (昇順)
*/
void binary_insertion_sort(int* array, size_t size)
{
size_t i, j;
int tmp;
size_t lower, upper, mid;
for( i = 1; i < size; ++i ){
tmp = array[i];
/* 挿入位置を二分探索で探す */
lower = 0;
upper = i;
while( lower < upper ){
mid = (lower + upper) / 2;
if( array[mid] < tmp ){
lower = mid + 1;
}
else{
upper = mid;
}
}
/* 発見した挿入位置へ挿入 */
for( j = i; j > lower; --j ){
array[j] = array[j-1];
}
array[j] = tmp;
}
}
/*
配列の要素を出力
*/
void print_array(const int* array, size_t size)
{
size_t i;
for( i = 0; i < size; ++i ){
printf( "%d ", array[i] );
}
printf( "\n" );
}
実行結果:
7 2 4 5 1 6
1 2 4 5 6 7
前提として、二分探索を理解している必要があるのは言うまでもありません。
【探索アルゴリズム】第4章で説明していますが、
割と一般的な実装方法だと、同じ値が複数含まれているとき、どれを見つけ出すか不定になります。
この問題によって、決定される挿入位置も不定(同じ値の集まりのどこが選ばれるかということなので、ソートできない訳ではありません)になるため、
不定にならない実装を使う必要があります。
改良版の方も、ほとんど変わらないので簡単です。
/*
二分挿入ソート (昇順)
*/
void binary_insertion_sort_ex(int* array, size_t size)
{
size_t i, j;
int tmp;
size_t lower, upper, mid;
for( i = 1; i < size; ++i ){
tmp = array[i];
if( array[i-1] > tmp ){  /* 挿入が必要か先に調べる */
/* 挿入位置を二分探索で探す */
lower = 0;
upper = i;
while( lower < upper ){
mid = (lower + upper) / 2;
if( array[mid] < tmp ){
lower = mid + 1;
}
else{
upper = mid;
}
}
/* 発見した挿入位置へ挿入 */
for( j = i; j > lower; --j ){
array[j] = array[j-1];
}
array[j] = tmp;
}
}
}
挿入が必要かどうかを先に調べるようにしただけで、他に変化はありません。
結果として、
非改良版の挿入ソート (insertion_sort関数)
非改良版の二分挿入ソート (binary_insertion_sort関数)
改良版の挿入ソート (insertion_sort_ex関数)
改良版の二分挿入ソート (binary_insertion_sort_ex関数)
この4通りの関数が出揃いました。
ここで、性能比較をしておきましょう。
それぞれの実装は、コードライブラリのソースを使っています。
#include <stdio.h>
#include <stdlib.h>
#include "ppp_perform.h"
#include "ppps_int_sort.h"
#define ARRAY_SIZE              50000
#define SIZE_OF_ARRAY(array)    sizeof(array)/sizeof(array[0])
void init_array(int* array, size_t size);
int main(void)
{
int array[ARRAY_SIZE];
init_array( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_BEGIN(1);
ppps_insertion_sort( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_END("insertion_sort");
init_array( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_BEGIN(1);
ppps_insertion_sort_ex( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_END("insertion_sort_ex");
init_array( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_BEGIN(1);
ppps_binary_insertion_sort( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_END("binary_insertion_sort");
init_array( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_BEGIN(1);
ppps_binary_insertion_sort_ex( array, SIZE_OF_ARRAY(array) );
PPP_CHECK_PERFORM_END("binary_insertion_sort_ex");
return 0;
}
/*
配列を初期化
*/
void init_array(int* array, size_t size)
{
size_t i;
srand(0);
for(i = 0; i < size; ++i){
array[i] = rand() % size;
}
}
実行結果:
insertion_sort: 2.594000 seconds
insertion_sort_ex: 2.499000 seconds
binary_insertion_sort: 2.070000 seconds
binary_insertion_sort_ex: 2.130000 seconds
二分挿入ソートの方が良い結果を示しました。
改良版の二分挿入ソートだと、かえって結果が悪くなっていますが、誤差の範疇かも知れません。
また、データ列全体の9割が最初からソート済みの場合、次のような結果になりました。
insertion_sort: 0.719000 seconds
insertion_sort_ex: 0.603000 seconds
binary_insertion_sort: 0.501000 seconds
binary_insertion_sort_ex: 0.533000 seconds
全体的にかなり速くなったことが分かります。
これが挿入ソートの特性です。
参考リンク
特になし
更新履歴
'2013/1/19 性能調査を、コードライブラリのソースを使って行うように変更。
'2012/6/23 コードライブラリのパス変更に伴い、リンクを修正。
'2012/6/8 パフォーマンス計測の方法を修正。
'2012/6/2 新規作成。
第4章のメインページへ
アルゴリズムとデータ構造編のトップページへ
Programming Place Plus のトップページへ
Programming Place Plus アルゴリズムとデータ構造編【整列アルゴリズム】 第4章 挿入ソート 解答ページ
