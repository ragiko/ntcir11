言語処理100本ノックについて  &dagger;
言語処理100本ノックは,言語処理を志す人を対象とした,プログラミングのトレーニング問題集です.
乾・岡崎研の新人研修勉強会の一つであるLearning Programmingで使われています.
このトレーニングは,以下の点に配慮してデザインされています.
自然言語処理の研究を進める上で,一度は書いておいた方がよいプログラム
統計,機械学習,データベースなどの便利な概念・ツールを体験する
実用的で,かつワクワクするようなデータを題材とする
研究を進めるうえで重要なプログラミングのルール・作法を身につける
モジュール性や組み合わせを考慮しつつ,短くてシンプルなプログラムを書く
プログラムの動作を確認(デバッグ)しながらコーディングする
労力を節約する(既存のツール/プログラム/モジュールが使えるときは流用する)
計算資源(メモリ・実行時間)を無駄にしない方法を学ぶ
Pythonの基礎な事項を一通りカバーする
今どきの言語処理系エンジニアが知っておくべき世界の入り口へ誘う
第1セット: テキスト処理の基礎  &dagger;
標準入力からタブ区切り形式のテキスト(address.txt)を読み込み,以下の内容を標準出力に書き出すプログラムを実装せよ.また,ヒントに挙げたツールを用いても,同じ内容が得られることを確認せよ.
(1) 行数をカウントしたもの.確認にはwcコマンドを用いよ.
(2) タブ1文字につきスペース1文字に置換したもの.確認にはsedコマンド,trコマンド,もしくはexpandコマンドを用いよ.
(3) 各行の1列目だけを抜き出したものをcol1.txtに,2列目だけを抜き出したものをcol2.txtとしてファイルに保存せよ.確認にはcutコマンドを用いよ.
(4) (3)で作ったcol1.txtとcol2.txtを結合し,元のタブ区切りテキストを復元したもの.確認にはpasteコマンドを用いよ.
(5) 自然数Nをコマンドライン引数にとり,入力のうち先頭のN行だけ.確認にはheadコマンドを用いよ.
(6) 自然数Nをコマンドライン引数にとり,入力のうち末尾のN行だけ.確認にはtailコマンドを用いよ.
(7) 1コラム目の文字列の異なり数(種類数).確認にはcut, sort, uniq, wcコマンドを用いよ.
(8) 各行を2コラム目の辞書順にソートしたもの(注意: 各行の内容は変更せずに並び替えよ).確認にはsortコマンドを用いよ(この問題は結果が合わなくてもよい).
(9) 各行を2コラム目,1コラム目の優先順位で辞書の逆順ソートしたもの(注意: 各行の内容は変更せずに並び替えよ).確認にはsortコマンドを用いよ(この問題は結果が合わなくてもよい).
(10) 各行の2コラム目の文字列の出現頻度を求め,出現頻度の高い順に並べよ.ただし,(3)で作成したプログラムの出力(col2.txt)を読み込むプログラムとして実装せよ.確認にはcut, uniq, sortコマンドを用いよ.
第2セット: 正規表現・日本語の扱い  &dagger;
標準入力からテキスト(tweets.txt.gz)を読み込み,以下の処理を行うプログラムを実装せよ.
(11) 「拡散希望」という文字列を含むツイートを抽出せよ.
(12) 「なう」という文字列で終わるツイートを抽出せよ.
(13) 非公式RTのツイートの中で,RT先へのコメント部分のみを抽出せよ.
(14) ツイッターのユーザー名(@で始まる文字列)を抽出せよ.
(15) ツイッターのユーザー名(例えば@xxxxxxx)を,そのユーザーのページへのリンク(<a href="https://twitter.com/#!/xxxxxxx">@xxxxxxx</a>で囲まれたHTML断片)に置換せよ.
(16) 括弧表現のうち,括弧の内側がアルファベット大文字の文字列,括弧の左側が漢字の文字列のものを抽出せよ.このとき,括弧の左側の表現と括弧の内側の表現をタブ区切り形式で出力せよ.
(17) 人名らしき表現にマッチする正規表現を各自で設計し,抽出せよ.(例えば「さん」「氏」「ちゃん」などの接尾辞に着目するとよい)
(18) 仙台市の住所らしき表現にマッチする正規表現を各自で設計し,抽出せよ.
(19) 郵便番号・県名・市町村名の3要素を組で(まとめて)抽出せよ.
(20) ツイートから絵文字らしき文字列を抽出せよ.
第3セット: 文分割・トークン化(英語)  &dagger;
英語のテキストmedline.txtを,1行1文形式のテキストmedline.txt.sentに変換するプログラムを,次のように実装せよ.
(21) 標準入力から英語のテキストを読み込み,ピリオドを文の区切りと見なし,1行1文の形式で標準出力に書き出せ.
(22) (21)のプログラムは破棄して,標準入力から英語のテキストを読み込み,ピリオドスペース大文字を文の区切りと見なし,1行1文の形式で標準出力に書き出せ.
1行1文形式のテキストmedline.txt.sentを,1行1単語形式のテキストmedline.txt.sent.tokに変換するプログラムを次のように実装せよ.
(23) (22)の出力を標準入力から1行(1文)を読み込む毎に,スペースで単語列に分割し,1行1単語形式で標準出力に書き出せ.文の終端を表すため,文が終わる毎に空行を出力せよ.
(24) (23)のプログラムを修正し,各トークンの末尾が記号で終わる場合は,その記号を別のトークンとして分離せよ.
(25) (24)の出力を標準入力から1行(1単語)を読み込む毎に,その単語を小文字に変換した文字列を各行の最終列にタブ区切り形式で追加し,標準出力に書き出せ.
1行1単語形式のテキストmedline.txt.sent.tokを用いて,以下の分析を行え.
(26) -nessと-lyの両方の派生語尾をとる単語をすべて抜き出せ.
(27) (10)のプログラムを呼び出すことで,頻度の高い英単語トップ100(単語と頻度がソートされたもの)を作成せよ.
(28) 各単語から文字バイグラムを抽出するプログラムを実装せよ.また,(27)と同様の方法で,頻度の高い文字バイグラムトップ100(バイグラムと頻度がソートされたもの)を作成せよ.
ステミング(単語を語幹に変換し単語の語尾変化を取り除く処理)に関する以下のプログラムを実装せよ.
(29) stemming 1.0(Porterのステマー)を各自の環境にインストールし,正しくインストールされているか確認せよ.
(30) (25)の出力を標準入力から読み込み,stemming.porter2を用いて語幹(ステム)を最終列に追加し,medline.txt.sent.tok.stemというファイルに保存せよ.
第4セット(前半): 辞書引き  &dagger;
inflection.table.txt には,英語の語彙(単語)に関する情報が収録されている.
このファイルは"|"区切り形式で,第1列に単語(活用あり),第2列に品詞,第4列に活用形,第7列に基本形が格納されている.
(31) このファイルを読み込み,単語をキーとして,品詞,活用形,基本形のタプルのリストを値とするマッピング型に格納せよ.プログラムの動作を確認するため,標準入力から読み込んだ単語の語彙項目を閲覧するプログラムを実装せよ.
(32) (31)で読み込んだマッピング型オブジェクトを,marshalモジュールを使ってファイルに書き出せ.書き出したファイルを今後「辞書」と呼ぶ.
(33) (32)で作成した辞書を読み込み,1行1単語形式(例えばmedline.txt.sent.tok.stem)で標準入力から読み込んだ単語に対して,辞書引き結果を付与するプログラムを実装せよ.
(34) 辞書引きを行った結果,辞書に載っていなかった語のみを出力せよ.
(35) 辞書引きを行った結果,3つ以上のエントリが見つかったもののみを出力せよ.
NLP 100 Drill Exercises - 東北大学 乾・岡﨑研究室 / Communication Science Lab, Tohoku University
