音声認識処理を複数のプロセッサで並列化して実行する技術の開発にも取り組んでいます。携帯端末のような小型機器で何万語も扱う音声認識を高速に行うには、先に述べた音声認識エンジンをもってしても、処理を司るプロセッサの性能が高い必要があります。一方、プロセッサの性能が高くても、処理に莫大な電力を費やすのでは、あっという間に電池がなくなってしまいます。そこで注目したのが、1チップの上に複数のプロセッサを持つマルチコアプロセッサです。複数のプロセッサを用いることは、性能の高い一つのプロセッサを用いるよりも消費電力が少なく、携帯機器への利用に適しているからです。 しかし、声の特徴データと予め用意した音響モデルとの距離を計算し、そのデータと辞書にある単語との類似度を計算し、照合する、という一連の処理を、複数のプロセッサで実行しても、割り当てたそれぞれのプロセッサの処理時間が揃っていないと、一番遅いプロセッサでの処理がボトルネックになり、並列に処理している意味がなくなってしまいます。そこで、一連の処理にどのくらいの時間を要するかを調べてみたところ、声の特徴を抽出し、予め用意してある音響モデルとの距離を計算する処理よりも、単語との照合処理に時間がかかることがわかりました。つまり、単純に「声の特徴抽出処理」、「音響モデルとの距離計算」、「単語との照合処理」をそれぞれ別のプロセッサで処理しても、単語との照合処理が終わるのを他のプロセッサがずっと待っているという事態が発生することがわかったのです。 そこで、私たちは、最も時間のかかる単語との照合処理の時間を短くするための工夫をしました。単語レベルの照合処理を行う前に、簡易な音節レベルでの照合処理を行うことで、全体の照合処理を分割しようという発想でした。いきなり単語レベルで照合をかけるのではなく、より確からしい音を先に計算しておき、その結果を活用して単語レベルの照合を行うのです。この単語の照合処理に前処理を施す技術&rdquo;音響先読み技術&rdquo;の開発で、音声認識のプロセスを均等に次の3つのプロセッサで処理させ、マルチコアプロセッサの性能を最大限に発揮させることに成功しました。 例えば、「こんにちは」と言う言葉を認識しようとするとき、次のような処理を、3つのプロセッサに割り当て、計算していきます。 
Aプロセッサ:声の特徴抽出と音響モデルとの距離計算 ここでは、声(音)の特徴を声紋のようなデータとして抽出し、その特徴データと音響モデルとの距離を計算します。
Bプロセッサ:音響先読み Aプロセッサの処理結果を逐次受け取りつつ、並行して、あ、か、さ、た、な、&hellip;といった音節レベルでの近似スコアを計算し、簡単な音節レベルの類似度を調べるのがこのプロセッサです。
Cプロセッサ:単語列照合 Bプロセッサで調べた類似度の高い音節と照らし合わせながら、単語レベルの類似度計算を行います。 例えば、「こんにちは」と言う音声に対し、候補として「今日は」や「こんにゃく」といった単語レベルでの 照合を行う際、Bプロセッサで実行した音節レベルの類似度調査を行わないと、「こんに」という2つの単語が 共有している音から先の音、すなわち、「ち」や「ゃ」からは、両方について類似度を計算する必要があります。 しかし、ここではBプロセッサが「ち」と「ゃ」のどちらがより入ってきた音に近いかを調べていますので、 その結果に基づき、照合の可能性の低い単語候補である「こんにゃく」については類似度を計算しなくてすみます。 これにより、単語列照合にかかる時間を短くし、音声認識処理全体を均等に3つに分割することができました。
音声認識 技術と人の紹介コラム | NEC R&D
