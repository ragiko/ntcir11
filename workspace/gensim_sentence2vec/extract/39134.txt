JConsole グラフィカルユーザーインタフェースは、Java Management Extensions (JMX) 仕様に準拠した監視ツールです。Java 仮想マシン (Java VM) の広範なインストゥルメンテーションを使用して、Java プラットフォームで実行されるアプリケーションのパフォーマンスとリソース消費に関する情報を提供します。
Java Platform, Standard Edition (Java SE プラットフォーム) 6 では JConsole がアップデートされ、Windows および GNOME デスクトップの Look & Feel (他のプラットフォームの場合は標準的な Java のグラフィカル Look & Feel) を提供します。このドキュメントに掲載した画面キャプチャーは、Windows XP で動作するインタフェースのインスタンスから取得されました。
JConsole の起動
jconsole 実行可能ファイルは、JDK_HOME/bin にあります。ここで JDK_HOME は、JDK (Java Development Kit) がインストールされているディレクトリです。このディレクトリがシステムのパスにあれば、コマンド (シェル) プロンプトで jconsole と入力するだけで、JConsole を起動できます。それ以外の場合は、実行可能ファイルへのフルパスを入力する必要があります。
コマンド構文
JConsole を使用すれば、ローカルアプリケーション (JConsole と同じシステム上で動作するアプリケーション) とリモートアプリケーション (他のシステム上で動作するアプリケーション) の両方を監視できます。 
注 - JConsole を使用してローカルアプリケーションを監視するのは、開発やプロトタイプ作成には便利ですが、JConsole 自体がかなりのシステムリソースを消費するため、実稼働環境で使用することはお勧めしません。JConsole アプリケーションを監視対象のプラットフォームから切り離すために、リモート監視をお勧めします。
jconsole コマンドの構文についての詳細は、jconsole コマンドのマニュアルページ「Java 監視および管理コンソール」を参照してください。
ローカル監視の設定
コマンド行で次のコマンドを入力して JConsole を起動します。
JConsole が起動すると、JConsole と接続可能でローカルに動作するすべての Java アプリケーションが選択肢として表示されます。
特定のアプリケーションを監視する場合、そのアプリケーションのプロセス ID を知っていれば、JConsole を起動して、そのアプリケーションと接続させることもできます。この場合、アプリケーションは JConsole と同じユーザー ID で実行する必要があります。特定アプリケーションのローカル監視のために JConsole を起動するコマンド構文は次のとおりです。
ここで、processID は、アプリケーションのプロセス ID (PID) です。アプリケーションの PID を調べるには、次の手順を実行します。
Unix または Linux システムの場合、ps コマンドを使用して、実行中の java インスタンスの PID を見つけます。
Windows システムの場合、タスクマネージャーを使用して、java または javaw の PID を見つけます。
jps コマンド行ユーティリティーを使用して PID を調べることもできます。Java 仮想マシンプロセスステータスツールのマニュアルページを参照してください。
たとえば、Notepad アプリケーションのプロセス ID が 2956 であると特定した場合は、次のコマンドで JConsole を起動します。
3.  JConsole の使用
