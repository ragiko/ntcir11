式と文
式
綾織では,変数・定数・関数などを演算子で結んだものを式と呼びます.代表的な式は,下のようになります.
a * b + 10
文
式の終わりに;(セミコロン)を付けたものを文と呼びます.式はセミコロンが付いて始めて文になるので,物理的に複数の行にまたがった式を書くことが可能です.
c = a * b + 10; //これと
c = a *
b + 10; //これは同じものになる.
アクション
綾織は,キャラクターの一連の挙動とその実行条件を一緒に記述する「アクション」を定義できます.
定義
アクションの定義は次のとおりです.起動条件が満たされる時,{}内に記述された処理が実行されます.起動条件はboolean型の式で記述します.
action アクション名@( 起動条件 )
{
そのアクションの処理;
}
起動条件チェック
起動条件のチェックは,すべてのアクションについて1秒に一回チェックされており,その条件が満たされた(真:trueになった)時点でアクションが起動します.ただし,毎秒連続して条件が真となったままのアクションは,最初の一回のみ起動されます.(毎秒,毎回起動することはできない)
アクションの例
action HourUpdate@( Minute() == 0 && Second() == 0)
{
if( 4 <= Hour() && Hour() <= 10 )
Talk("おはようございます,"+GetProperty("\\User\\LastName") +"." );
else if( 11 <= Hour() && Hour() <= 16 )
Talk( "こんにちは," + GetProperty( "\\User\\LastName" ) + "." );
else
Talk( "こんばんは," + GetProperty( "\\User\\LastName" ) + "." );
}
上の例は毎時0分0秒に起動され,そのときの時刻によっておはようございます/こんにちは/こんばんはを切り替えて話しかけるアクションです.Hour()は現在の時刻,Minute()は現在の分,Second()は現在の秒を返す標準関数で,GetProperty( "\\User\\LastName" )では,プロパティのユーザ情報から「ユーザの名字」をstring型で取り出しています.キャラリナの起動時(StartUp),終了時(ShutDown),マウスの左クリック時(MouseUpL),データの更新時(ScriptUpdated)といったタイミングでは,それぞれの名前をもつ「標準アクション」が優先的に起動されます.起動時や終了時のあいさつ,キャラクターを左クリックしたときの挙動などは,これらの標準アクション内に記述することで実現できます.
起動条件チェックの順序
ある時点で同時に実行されるアクションは一つだけです.アクションが実行されている間,前述の起動条件のチェックは行われません.したがって,アクション実行中に他のアクションの起動条件が成立したとしても,そのアクションは実行されません.標準アクションも同様ですが,ShutDownアクション,ScriptUpdatedアクション,ScriptUpdatingアクションは例外的に処理されます.
起動条件チェックの例外
ShutDownアクション,ScriptUpdatedアクション,ScriptUpdatingアクションは,通常の起動条件チェックの順序に従わず,次に示すように処理されます.
ShutDown標準アクション
現在実行中のアクションを強制的に終了させ,ShutDownを実行します.
ScriptUpdated標準アクション
内部的に専用のフラグで処理され,データのダウンロードが終了してから「アクションが一つも実行していない状態」になった時点で起動されます.
ScriptUpdating標準アクション
「更新」を行い,回線が確立されて実際にデータの転送が開始された時点で起動されますが,その時点で他のアクションが実行されていた場合には起動されません.
但し,ScriptUpdatingアクション内でGetHTTP関数を実行している場合,特例としてGetHTTP関数の処理が終了(正常終了またはタイムアウト等のエラーによる終了)するまで回線は保持されます.[1.01?]
関数
関数は,「引数」を介して複数の値を受取り,内部である処理を行い,その処理結果を返り値で返すことが可能な処理単位です.
定義
関数の定義は次のとおりです.引数が複数ある場合は半角コンマ(,)で区切って定義します.
関数データ型 関数名( 引数データ型 引数名 [,引数データ型 引数名].... )
{
関数で行う処理;
}
int Zettaichi( int x )
{
if( x < 0 )
return -x;
else
return x;
}
この例では,「int型の引数を渡すと,int型の返り値を返す,Zettaichiという名前の関数」を定義しています.渡した値xがマイナスの値なら,それにマイナスの符号をつけてプラスに戻し,プラスの値ならそのまま返すことで,xの絶対値を返すという処理を行います.
呼び出し
関数を実際に使うには,
関数名( 引数1, 引数2, ... 引数n );
の書式で関数を呼び出します.関数の返り値を演算や別の関数の引数に用いることも出来ます(出来ないデータ型もあります).
呼び出す関数と呼び出される関数は,ともに同じモジュール(モジュール=.exaファイルに相当.後述)で定義してあれば,特別な宣言なく使用できます.他のモジュールで宣言された関数を使用するには,後述のプロトタイプ宣言が必要です.
Chararinaキャラクター開発仕様書
