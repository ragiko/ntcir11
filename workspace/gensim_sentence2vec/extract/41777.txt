
このページは、三次元空間をVBで取り扱う方法について記述しています.
ベクトルや直線、平面などを比較的簡単にパソコン上で取り扱うことができます.
このページは個人的な学習用として記述したものです.
したがって、このページをご覧頂いた結果について作者は一切の責任を負いません.
このページは、Microsoft Internet Explorer 5.01 と Netscape(R) Communicator 4.7 で動作確認を行っています.
フォント・サイズは、"小" を推奨いたします.
印字は、ページ設定でA4縦、左マージン18mm、右マージン0mm、さらにプリンタドライバで86〜80%の
縮小をしてください.
空間のどこかにある点 C をここでは C(x, y, z ) と表す事とします.
x, y, z は、それぞれ原点からの距離と考えておきましょう.
これをコンピュータで使用できるようにするには、
' 点の型宣言
TYPE XYZ
x As Double
y As Double
z As Double
End Type
てな感じで自前の型を宣言して
Dim C As XYZ
でもって、点 C が C( 200, 100, 50 ) であれば
C.x = 200#
C.y = 100#
C.z = 50#
なんだな、これが.
ちなみに、C( 200, 100, 50 ) とは、
原点から X 軸上を 200 進み、左に 90 度向きを変え 100 進む、さらに真上に 50 よじ登った位置です.
TOPに戻る
さて、点をコンピュータ上で表す方法を取得したので次は2点間の距離を求めてみよう.
まずは簡単なところで下の図の原点 O( 0, 0, 0 ) から点 C( 200, 100, 50 ) までの距離を求めてみることにしよう.
あまりにも簡単な問題なので見誤るといけないのでちょっとだけ補助線を入れてみよう.
こうしてちょっと線を入れると何となく立体的に見えるから不思議なものだ.
O,Q,P と O,P,C はいずれも直角三角形である事を見抜けば答えは簡単である.
そこで2点間の距離を求める公式に登場してもらう事にする.
各点を c0( x0, y0, z0 ), c1( x1, y1, z1 ) とすれば
' 2点間の距離を求める関数
Function Qcc2abs( c0 As XYZ, c1 As XYZ ) As Double
Qcc2abs = Sqr((c1.x - c0.x) * (c1.x - c0.x) _
+ (c1.y - c0.y) * (c1.y - c0.y) _
+ (c1.z - c0.z) * (c1.z - c0.z))
End Function
さて、直角三角形との言葉に惑わされて "ピタゴラスの定理" を思い浮かべた人もいたことでしょう.
辺 OP の長さを求めるために、辺 OQ と QP の長さを2乗して足してルートして、そして今度は OP と PC の長さを2乗して足してルートしてやっと求める OC の長さとやった人.  お疲れさまでした.
実は、この亜空間の世界で "ピタゴラスの定理" と言う言葉が出てくるのはこれが最初で最後です.
TOPに戻る
ベクトルとは、方向と大きさを持った物体としておこう. 更にこの物体はどこへでも自由に移動できる.
まず、方向だが矢印で表す事とする. 次に大きさだが矢印の長さで表す事としよう.
ベクトルがあったとしよう. こんな風に. つまり適当な矢印を書いておけばそれがベクトルである.
しかし、これではあまりにもつまらないので2つの点について考えてみる事にする.
ベクトルは x 方向、y 方向そして z 方向の成分から成り立っている.
だから型の宣言は、点と同じ XYZ 型を使用する.
そして、その成分は、原点 o から点 c0 に向かうベクトルと、原点o から点c1 に向かうベクトルの差となる.
そんな訳で2点間のベクトルとは、
各点を c0( x0, y0, z0 ), c1( x1, y1, z1 ) とすれば点 c0 から点 c1 へ向かうベクトル v( x, y, z ) は、
' 点 c0 から点 c1 へ向かうベクトルを求める関数
Function Qvector( c0 As XYZ, c1 As XYZ, v As XYZ ) As Boolean
v.x = c1.x - c0.x
v.y = c1.y - c0.y
v.z = c1.z - c0.z
Qvector = True
End Function
さて、上の式をよく見てみよう. c1.x - c0.x このフレーズどこかで見た事のあるような.
そうなんです. 2章で見たはずです. つまり2点間の距離とは、与えられた点を結ぶベクトルの大きさなんです.
時には、ベクトルの大きさの事をベクトルの絶対値などとも表現しますので覚えておこう.
TOPに戻る
ここでは、ベクトルの大きさ、単位ベクトル、方向が同じで特定の大きさのベクトルの作成について検討する.
ベクトル v( x, y, z ) の大きさは、
' ベクトルの大きさを求める関数
Function Qabs( v As XYZ ) As Double
Qabs = Sqr( v.x * v.x + v.y * v.y + v.z * v.z )
End Function
ついでに単位ベクトルについて
単位ベクトルとは、大きさ(絶対値)が 1 のベクトルです.
たとえば、ベクトル v( x, y, z ) の単位ベクトル u( a, b, c ) は、
' 単位ベクトルを求める関数
Function Qtanivec( v As XYZ ) As Boolean
Dim d As Double
' ベクトルの大きさを求める
d = Qabs( v )
If d = 0# Then
' この 0 の判定方法には疑問があるがここでは目をつぶろう.
' 大きさが 0 の場合は戻り値を False とする
v.x = 0#
v.y = 0#
v.z = 0#
Qtanivec = False
Exit Function
End If
v.x = v.x / d
v.y = v.y / d
v.z = v.z / d
Qtanivec = True
End Function
方向が同じで大きさが指定された大きさのベクトルは、
まず、元のベクトルの単位ベクトルを作成し、これと指定された大きさの積とすればよい.
ベクトル v( x, y, z ) と方向が同じで大きさが d のベクトルu( a, b, c ) は、
' 方向が同じで指定された大きさのベクトルを求める関数
Function Qvd2v( v0 As XYZ, d As Double, v1 As XYZ ) As Boolean
Dim wv As XYZ
' v0 を変化させないように wv へコピーして使用する
wv = v0
' 単位ベクトルにする
' 単位ベクトルの大きさが 0 であっても気にしない
Call Qtanivec( wv )
' 指定された大きさにする
v1.x = d * wv.x
v1.y = d * wv.y
v1.z = d * wv.z
Qvd2v = True
End Function
TOPに戻る
VECTOR AND SPACE GEOMETRY・第1部
