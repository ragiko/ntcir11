プログラムの読み込み (プロセッサ固有)
システムは、プロセスイメージを作成または拡張するとき、ファイルのセグメントを仮想メモリーセグメントに論理的にコピーします。システムがファイルをいつ物理的に読み取るかは、プログラムの挙動やシステムの負荷などに依存します。
プロセスは実行時に論理ページを参照しない限り物理ページを必要とせず、また一般に多くのページを未参照状態のままにします。したがって、物理読み取りを遅延させると、これらの物理読み取りが不要になり、システム性能が向上します。この効率性を実際に実現するには、実行可能オブジェクトファイルと共有オブジェクトファイルには、ファイルオフセットと仮想アドレスがページサイズを法として同じであるセグメントイメージが存在しなければなりません。
32 ビットのセグメントの仮想アドレスとファイルオフセットは、64K (0x10000) を法として同じです。64
ビットのセグメントの仮想アドレスとファイルオフセットは、1M バイト (0x100000) を法として同じです。
セグメントを最大ページサイズに整列すると、ファイルは物理ページサイズには関係なくページング処理に対して適切になります。
デフォルトでは 64 ビット SPARC プログラムは開始アドレス (0x100000000) にリンクされます。プログラム全体
(テキスト、データ、ヒープ、スタック、共有オブジェクトの依存関係を含む) は、4G バイトより上に存在します。そうすることにより、プログラムがポインタを切り捨てると、アドレス空間の最下位
4G バイトでフォルトが発生することになるので、64 ビットプログラムが正しく作られたことを確認することがより容易になります。64 ビットプログラムは4G
バイトより上でリンクされていますが、コンパイラあるいはリンカーに mapfile および -M オプションを使用することにより、4G バイト未満でリンクすることも可能です。詳細は、/usr/lib/ld/sparcv9/map.below4G を参照してください。
次の図に、SPARC バージョンの実行可能ファイルを示します。
図 7&ndash;8  SPARC: 実行可能ファイル (64K に整列)次の表に、前の図に示した読み込み可能セグメント要素の定義を示します。
表 7&ndash;39  SPARC: ELF プログラムヘッダーセグメント (64K に整列)
構成要素 
テキスト 
データ 
プログラムの読み込み (プロセッサ固有) (リンカーとライブラリ)
