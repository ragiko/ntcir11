単体テストの基本
ソフトウェアテスト |  23:43 | 
[単体テストの目的]部品が仕様どおりに動作することを確認する。部品の粒度はプロジェクトの方針による。(メソッドごとであったり、画面ごとであったり。)
[単体テストパターン作成技法]単体テストを漏れなく、効率良く行うためのテストパターン作成には、次の技法を用いる。
1. 仕様に基づいてテストパターンを作成する技法どういった入力データで、どういった結果が得られるかという仕様に基づいてテストパターンを作成する技法に、次の技法がある。
1-1. 同値分割法仕様から入力値を意味のあるグループに分割し,各グループの代表となる値をテストデータとして選ぶ技法。同値分割法により、データが偏ったテストになることを避けることができる。各グループの代表値は、その値のテストがOKならば、そのグループの値はすべてテストOKといえるものを選択する。
例:仕様で、入力値aが、1から10までの範囲ならばtrueを出力し、それ以外は、falseを出力する、とあるとする。テストパターンは、例えば次のように作成できる。・aが0ならば、falseを出力・aが5ならば、trueを出力・aが11ならば、falseを出力
1-2. 境界値分析法同値分割法により、各グループに分割した入力値の中から、グループ間の境界となる値をテストデータとして選ぶ技法。境界値付近は、一般的に不具合が発生する可能性が高いため、重要な観点となる。
例:仕様で、入力値aが、1から10までの範囲ならばtrueを出力し、それ以外は、falseを出力する、とあるとする。テストパターンは、例えば次のように作成できる。・aが0ならば、falseを出力・aが1ならば、trueを出力・aが10ならば、trueを出力・aが11ならば、falseを出力
2. テストの網羅性という観点でテストパターンを作成する技法どういった入力データで、どういった処理経路を網羅するかという観点でテストパターンを作成する技法に、次の技法がある。
2-1. 命令網羅テスト対象ソースコードの命令文すべてが実行されるように入力値を選ぶ技法。
例:次のソースコードがあるとする。if (a == 1 && b == 2) {    System.out.println(true);}テストパターンは、例えば次のように作成できる。aが1、bが2ならば、trueを出力する。
2-2. 分岐網羅テスト対象ソースコードの分岐条件true、falseを最低1回ずつ実行されるように入力値を選ぶ技法。
例:次のソースコードがあるとする。if (a == 1 && b == 2) {    System.out.println(true);}テストパターンは、例えば次のように作成できる。aが1、bが2ならば、trueを出力する。aが2、bが2ならば、何も出力しない。
2-3. 条件網羅テスト対象ソースコードの条件文true、falseを最低1回ずつ実行されるように入力値を選ぶ技法。
例:次のソースコードがあるとする。if (a == 1 && b == 2) {    System.out.println(true);}テストパターンは、例えば次のように作成できる。aが1、bが2ならば、trueを出力する。aが2、bが2ならば、何も出力しない。aが1、bが3ならば、何も出力しない。
[まとめ]単体テストは、部品が仕様どおりに動作することを確認するために行うものである。したがって、まず、同値分割法や限界値分析法により、仕様に基づいたテストができるテストパターンを作成すべきである。その後、テストの網羅性という観点で足りないテストパターンを追加するのがよい。テストの網羅性は、テスト完了判断の指標になるので、どのレベルで達成しなければならないかプロジェクトで基準があるだろう。
単体テストの基本 - kguの日記
