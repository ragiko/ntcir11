
8.1 概要
レッスン4で説明したページは顧客の注文をどのように処理するかを示しています。このレッスンでは、顧客に対して既存のアカウントへのサインインをどのように要求するか、また新規顧客の場合はアカウントをどのように作成するかを説明します。そのために、次に示すJSPページの構造を調べます。
新規顧客のアカウント情報を受け取るためのregisternewuser.jsp
既存の顧客のユーザーIDおよびパスワードを受け入れるためのsignin.jsp
新規顧客のアカウント作成を確認するためのaccountcreated.jsp
このレッスンでは、これらの新しいJSPページのレイアウトについて調べ、サインインが検証された後、アプリケーションがどのように顧客に以前のページを表示するかについて説明します。
8.2 Sign-Inページのフロー分析
ページ・フローは、/confirmshippinginfoデータ・ページからrequiresloginアクション・フォワードに進みます。フォワード先は/signinデータ・ページです。このアプリケーションでは、顧客の発送情報を受け付ける前にサインインが必要となります。このタスクをこれ以前に行うことは可能ですが、顧客がチェックアウトに進む前にカタログを参照することを妨害しないようにします。顧客がサインインしたことを保証するために、confirmshippinginfoデータ・アクションのinitializeModelForPage()メソッドが次のテストを行います。
protected void initializeModelForPage(DataActionContext ctx) {
HttpServletRequest request = ctx.getHttpServletRequest();
if (!AppUserInfo.isSignedOn(request)) {
ctx.setActionForward("requireslogin");
} else {
getToyStoreService(ctx).createNewOrder(AppUserInfo.signedInUser(request));
} }
ユーザーがすでにサインインしている場合、注文はcreateNewOrder()サービス・メソッドによって作成され、レッスン4で説明したように、アプリケーションはconfirmshippinginfo.jspページを表示します。しかし、顧客がサインインしていない場合は、StrutsのsetActionForward()メソッドがrequiresloginフォワードとともに起動され、アクション・マッピングが開始され、signin.jspページが表示されます。
プログラムによってアクション・フォワードが起動され、signin.jspページが表示されると、サインインするか、あるいは新規顧客として初めて登録するかのどちらかがユーザーにとって可能になる必要があります。ページ・フロー・ダイアグラムはsignin.jspからregisternewuser.jspへの遷移を点線で示し、実線で示されているアクション・フォワードからの通常のページ・リンクと区別しています。その違いは、ページ・リンクが関連するデータ・アクションにマップしていないため、リンクによってアプリケーションがバインディング・コンテナをターゲット・ページにアタッチすることがない点にあります。これから説明するように、新規顧客の登録ページはデータがまったく表示されていない空のフォームです。
Sign-Inページのフローの最後のタスクは、ユーザーが新しいアカウントを登録したらその確認を提供することです。アカウント確認のタスクはページ・フロー・ダイアグラムでは、ターゲットの/accountcreatedページ・フォワード・アイコンとともに、saveアクション・フォワードによって示されています。ダイアグラムの最後であるSign-Inページのフローを図8-1「Sign-Inページのフロー」に示します。
レッスン5: ユーザーに対するアカウントへのサインインの要求
