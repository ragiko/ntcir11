状態遷移表による設計手法について解説。第5回では、「状態遷移表からの実装」をテーマに、状態遷移表(設計書)から実装に落とし込むまでのプロセスとその方法について詳しく説明する。
はじめに
組み込みソフトウェアが抱える一番の課題は「設計品質の向上」です。本連載の主役「状態遷移表」であれば、イベントと状態の全ての組み合わせを捉えることができるため、「モレ」「ヌケ」のない品質の良い設計が可能です。そして、不具合発生による手戻りコストの削減や開発効率の向上にも役立ちます。
こうした理由から、組み込みソフトウェア開発の世界では、長年、状態遷移系モデルで設計が行われています。
前回は、状態遷移表を使用した設計モデルをテーマに、拡張階層化状態遷移表を用いた設計手法を紹介しました。ソフトウェア開発とは、当然のことながら、設計書の作成がゴールではありません。最終的に、プログラミング(モデルからの自動コード生成を含む)を行い、ソフトウェアを完成させることがゴールです。つまり、設計書は、プログラミングを行う目的のために作成するものと言い換えることもできます。ということで、今回は、「状態遷移表からの実装」について解説します。
なお、本連載では以下の6つのテーマを順番にお届けしていきます。
(連載第1回):状態遷移表設計手法の概要
(連載第2回):なぜ状態遷移表を使うと、品質の良い開発ができるのか
(連載第3回):状態遷移表を使用した要求分析モデル
(連載第4回):状態遷移表を使用した設計モデル(拡張階層化状態遷移表)
状態遷移表からの実装
状態遷移表を使用したテスト手法
フローチャートとは
今回のテーマ、状態遷移表からの実装の本題に入る前に、プログラミングを行うための表現方法について確認しておきましょう。
プログラミングの世界には、C、C++、Javaなど、さまざまな言語が存在します。これと同じように、プログラムの構造や処理の流れを表現するものとして、フローチャートや、PAD、HCPチャートといった構造化プログラミングを行うための構造化チャートなど、実に多くの表記手法があります。
今回は、最も基本的な手法であり、単純な表記で構成されるフローチャートを用いながら、解説を進めていきます。
フローチャート(Flow Chart)とは、流れ図または流れ作業図のことです。各工程(処理)を示す部品はJIS X 0121:1986により規格化されており、形・流れる方向などが統一化されています。端子からスタートし、処理の流れは、で表現します。各処理は、で表現し、選択、反復などの条件部分は、で表現します(図1)。
状態遷移表による設計手法(5):状態遷移表からの実装 (1/3) - MONOist(モノイスト)
