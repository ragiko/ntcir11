
セマンティクス
with_clause
with_clauseを使用すると、次の項目を定義できます。
PL/SQLプロシージャおよびファンクション(plsql_declarations句を使用)
副問合せブロック(subquery_factoring_clauseを使用)
plsql_declarations
plsql_declarations句を使用すると、PL/SQLファンクションとプロシージャの宣言と定義ができます。その後、この句で指定したPL/SQLファンクションは、問合せ内で参照できます。この問合せに副問合せがある場合は、その副問合せでも参照できます。これらのファンクションの名前が名前解決されるときには、スキーマ・レベルのストアド・ファンクションよりも優先されます。
この句で指定した問合せがトップレベルのSELECT文ではない場合、その問合せを含むトップレベルのSQL文には、次のルールが適用されます。
トップレベルの文がSELECT文の場合は、WITH plsql_declarations句またはWITH_PLSQLヒントが含まれている必要があります。
トップレベルの文がDELETE文、MERGE文、INSERT文、またはUPDATE文の場合は、WITH_PLSQLヒントが含まれている必要があります。
WITH_PLSQLヒントを使用して実行できる操作は、文へのWITH plsql_declarations句の指定のみです。これは、オプティマイザ・ヒントではありません。
subquery_factoring_clause
subquery_factoring_clauseを使用すると、副問合せブロックに名前(query_name)を割り当てることができます。query_nameを指定することによって、問合せに複数存在する副問合せブロックを参照することができます。query_nameをインライン・ビューまたは一時表として扱うことによって、問合せが最適化されます。query_nameには、データベース・スキーマ・オブジェクトと同じネーミング規則および制限が適用されます。データベース・オブジェクト名の詳細は、「データベース・オブジェクトのネーミング規則」を参照してください。
query_nameの後に続く列別名およびAS句内にある複数の副問合せを区切る集合演算子は有効ですが、再帰的副問合せのファクタリングを必要とします。search_clauseおよびcycle_clauseは、再帰的副問合せのファクタリングに対してのみ有効ですが、必須ではありません。「再帰的副問合せのファクタリング」を参照してください。
最上位のSELECT文およびほとんどの副問合せでこの句を指定できます。問合せの名前は、主問合せおよび後続のすべての副問合せから参照できます。再帰的副問合せのファクタリングの場合、問合せの名前は、自身の問合せ名を定義する副問合せからも参照できます。
再帰的副問合せのファクタリング 自身の問合せ名を定義する副問合せからsubquery_factoring_clauseが自身のquery_nameを参照する場合、そのsubquery_factoring_clauseは再帰的であるといいます。再帰的subquery_factoring_clauseには、2つの問合せブロック(1つ目のアンカー・メンバーおよび2つ目の再帰的メンバー)が含まれている必要があります。アンカー・メンバーは、再帰的メンバーの前に指定する必要があり、このメンバーはquery_nameを参照できません。アンカー・メンバーは、集合演算子UNION ALL、UNION、INTERSECTまたはMINUSによって結合された1つ以上の問合せブロックで構成できます。再帰的メンバーは、アンカー・メンバーの後に指定し、query_nameの参照は1回のみにする必要があります。UNION ALL集合演算子を使用して、再帰的メンバーをアンカー・メンバーに結合する必要があります。
WITH query_nameの後に続く列別名の数、およびアンカーのSELECT構文のリストと再帰的問合せブロックの数は同じである必要があります。
再帰的メンバーには、次の要素を含めることができません。
DISTINCTキーワードまたはGROUP BY句
model_clause
集計ファンクション。ただし、SELECT構文のリスト内には分析ファンクションを含めることができます。
query_nameを参照する副問合せ。
query_nameを右側の表として参照する外部結合。
search_clause SEARCH句を使用すると、行の順序付けを指定できます。
子の行が戻される前に兄弟の行を戻す必要がある場合は、BREADTH FIRST BYを指定します。
兄弟の行が戻される前に子の行を戻す必要がある場合は、DEPTH FIRST BYを指定します。
兄弟の行は、BYキーワードの後にリストされる列によって順序付けされます。
SEARCHキーワードの後に続くc_aliasリストには、query_nameに対する列別名のリストからの列名を含める必要があります。
ordering_columnは、問合せ名の列リストに自動的に追加されます。query_nameから選択する問合せは、ordering_columnにORDER BYを含めて、SEARCH句によって指定された順序で行を戻すことができます。
cycle_clause CYCLE句を使用すると、再帰内に繰り返しのマークを付けられます。
CYCLEキーワードの後に続くc_aliasリストには、query_nameに対する列別名のリストからの列名を含める必要があります。Oracle Databaseは、これらの列を使用して繰返しを検出します。
cycle_valueおよびno_cycle_valueは、長さが1の文字列です。
繰返しが検出されると、繰返しを引き起こしている行に対してcycle_mark_c_aliasによって指定されている繰返しマーク列に、cycle_valueとして指定されている値が設定されます。その後、この行への再帰は停止します。つまり、問題の行については、その子の行の検索は行われませんが、繰返しが発生していない行については、検索が継続されます。
繰返しが検出されない場合、no_cycle_valueとして指定されているデフォルト値が繰返しマーク列に設定されます。
この繰返しマーク列は、query_nameの列リストに自動的に追加されます。
祖先の行のいずれかの繰返し列に同じ値がある行は、繰返しを形成するとみなされます。
CYCLE句を指定しない場合に、繰返しが検出されると、再帰的WITH句はエラーを戻します。この場合、再帰的メンバーのWHERE句で参照されるquery_nameの列別名リストのすべての列について、祖先の行のいずれかに同じ値がある行は繰返しを形成します。
副問合せのファクタリングの制限事項: この句には、次の制限事項があります。
subquery_factoring_clauseは、1つのSQL文内に1つのみ指定できます。subquery_factoring_clauseで定義したquery_nameは、そのsubquery_factoring_clause内の後続の任意の名前付き問合せブロックで使用できます。
集合演算子を指定した複合問合せの場合、その問合せを構成する各問合せではquery_nameを使用できませんが、各問合せのFROM句ではquery_nameを使用できます。
query_nameに対する列別名のリストには重複した名前を指定できません。
ordering_columnの名前は、cycle_mark_c_aliasとは異なる名前を使用する必要があります。
ordering_columnおよび繰返しマーク列には、query_nameに対する列別名のリストに存在する名前を使用することはできません。
SELECT
