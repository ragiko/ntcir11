
1. は じ め に
SYSTEM ν［nju:］*1Ver3.0は,トランザクション機能を提供するORB(Object Request Broker)「Transactional ORB SYSTEM ν［nju:］」として平成9年4月に発表された.
本稿では,オブジェクト・トランザクション機能について言及した後,SYSTEM ν［nju:］の分散トランザクション機能の解説,その実装方式,SYSTEM ν［nju:］を使用したトランザクション処理アプリケーション・プログラムについて述べる.
なお,本稿では,「インタフェース」という用語を2通りの意味で使用するので,注意されたい.
(1) コンポーネント間の境界(しばしばAPI)を意味する一般的な用語としてのインタフェース.
(2) CORBAで定義された用語としてのインタフェース.この場合は,インタフェースと斜体字で表すことにする.
2. オブジェクト・トランザクション機能
本章では,オブジェクト・トランザクションについて解説する.
2.1 アプリケーション処理の抽象化
アプリケーション・システム全体を抽象的に捉えると,アプリケーション・システムは状態遷移機械であり,アプリケーション処理ロジックは,状態遷移の定義であると言うことができる.すなわち,アプリケーション・プログラムは,与えられた開始状態から,処理ロジックに従い,目的の終了状態を導き出すものである.これは,分散オブジェクト処理であろうと,集中処理であろうと違いはない.
状態遷移は順次行われるものであるから,アプリケーション処理ロジックは,終了状態に到るまで,中間状態として複数の状態遷移を引き起こすことになる.この状態遷移のうち,アプリケーション的に不可分(ひとまとまり)の部分がトランザクションである(図1).
2.2 トランザクションのACID特性
トランザクションは以下の特性を持つ一連の処理単位である.これらの特性は,頭文字を取って「ACID特性」と呼ばれる.
原子性(atomicity)
トランザクションが終わったとき,すべての処理が完結した状態か,あるいは全く行われない状態に確定すること.すなわち,中間状態が排除されること.いわば「All or Nothing」である.
一貫性(consistency)
トランザクションの前後でシステムの論理的な整合性が保たれること.すなわち,開始状態で成立する関係は終了状態でも成立すること.
独立性(isolation;孤立性,分離性)
中間状態は他のアプリケーション・プログラムからは見えないこと.
耐久性(durability;持久性)
いったん確定したトランザクション処理の結果(終了状態)は,取り消されないこと.
2.3 トランザクション処理モデル
CORBAでは,トランザクションの原子性を保証する機能としてTransaction Service(以下,OTSと記す;Object Transaction Serviceの略)を,独立性を実現するロック制御機能としてConcurrency Serviceを規定している.
次に従来から使用されてきたX/Open DTPモデルと,OTSのモデルの概要を説明する.
2.4 X/Open DTPモデル
図2にX/Open DTPモデルを示す.
アプリケーション
使用者アプリケーション・プログラム.
RM(Resource Manager)を使用して業務処理を行い,TM(Transaction Manager)に対してトランザクションの制御を指示する.
TM
トランザクションを制御するコンポーネント.
トランザクションにはいくつかのTMが参加する.このうち,そのトランザクションのコミットを制御するTMを調整TM,その他のTMを参加TMと呼ぶ.
RM
リソースを管理するコンポーネント.
通常,データベースがこれにあたる.
TXインタフェース
アプリケーションからTMを呼び出すインタフェース.
RMインタフェース
アプリケーションからRMを呼び出すインタフェース.
形式はRMに依存する.
XAインタフェース
TMからRMを呼び出すインタフェース.
2.5 OTSモデル
図3にOTSモデルを示す.
Transactional Client
トランザクションを開始し,Transactional Objectに対してオペレーションを起動するクライアント.
Transactional Object
トランザクションの影響を受けるオブジェクト.Transactional Objectインタフェースを継承する必要がある.
Resource Object
トランザクションの処理対象を代表するオブジェクト.データベース(RM)だと考えればよい.
Transaction Service
オブジェクト・トランザクション機能.トランザクションを生成するTransactionFactoryオブジェクト,トランザクションの原子性を保証するCoordinator/Terminatorオブジェクト,トランザクションの回復を制御するRecoveryCoordinatorオブジェクトなどにより実現される.
2.6 SYSTEM ν［nju:］での実装モデル
SYSTEM ν［nju:］バージョン3.0の分散トランザクション機能は,OTSモデルではなく,X/Open DTPモデルに従って実装した.APIは,使用者が容易に使用できるよう,TXインタフェースではなく独自形式を採用した.
なお,SYSTEM ν［nju:］がバージョン3.0でX/Open DTPモデルを採用した理由としては,以下の点が挙げられる.
1) SYSTEMν［nju:］はミッション・クリティカルなアプリケーションに適用できることを目指しており,X/Open DTPモデルはミッション・クリティカル・アプリケーションでの実績がある.
2) SYSTEM ν［nju:］は高効率を目指しているが,OTSをモデルどおりに実装すると,オブジェクト間の相互通信が多く高い効率性が期待できないと予想される.
日本ユニシス株式会社-技報55号(SYSTEM ν ［nju:］)
