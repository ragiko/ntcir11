はじめに
こちらの記事では、GroongaとElasticsearchの単純な検索性能、更新性能、
ディスク使用効率を比較しました。
その結果では、Groongaの検索速度がElasticsearchよりも数倍ほど速く、Elasticsearchの更新速度がGroongaよりも数倍ほど速かったです。
なお、前回の記事では、Elasticsearchでフレーズ検索がされていなかったり*1、punctuation、whiespaceが転置索引に入っていなかったため、追加検証結果を追記しています。
シーケンシャルなスクリプトではGroongaの更新速度のほうが遅かったですが、これは、GroongaとElasticsearchが利用しているLuceneの転置索引の作成方法や管理方法の違いによるものです。
Groongaにおける転置索引
Groongaでは、即時更新に強く更新にかかる処理コストが低くリアルタイムサーチであるという売り文句があります。
これは、転置索引更新の際に間に挿し込めるスペースがあるため、このスペースを使いつぶすまでの間、低負荷、且つ、高速な更新が見込めるとのことです。
このスペースに転置索引を差し込むことにより転置索引の断片化を防ぐことができ、検索性能の劣化を防ぐことができるようです。
http://qiita.com/tamano/items/663c2a958e897226e138
http://groonga.org/ja/blog/2011/07/28/innodb-fts.html
Groongaでは、カラムの値の更新の前に転置索引の更新が行われ、更新リクエストは転置索引とカラムの値の更新が完了した段階でレスポンスが返ってきます。
そのため、更新リクエストのレスポンスが返ってくればすでに全文検索可能な状態となっています。
たとえば、groonga-column-holeプラグインを使えば、転置索引を作った後カラムに値がセットされる前に値を削除して、カラムに値を更新させないなんてこともできます。
GroongaはOS資源関連(ファイルオープン数やmmap周り)のカーネルパラメータ以外はほとんどチューニングはいりません。というかありません。
Elasticsearchにおける転置索引
Elasticsearchでは、Nearリアルタイムサーチをうたっており、通常は1秒で検索可能になるということが書かれています。
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/_basic_concepts.html
Elasticsearchでは、ドキュメントの更新と転置索引の更新(リフレッシュ、フラッシュ、マージ)が独立しており、更新リクエストは、ドキュメントの更新が完了したタイミングでレスポンスが返ってくるみたいです。
デフォルトのインデックスのリフレッシュインターバルは、1sに設定されています。
おそらく、このリフレッシュによりドキュメントから作成された転置索引がメモリ上に乗って、その時点で検索が可能になると思われます。
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html
リフレッシュの後、フラッシュという処理が走るようです。フラッシュっていうのはマージと違って、新しくセグメントを作ってインデックスすることみたいです。
この状態では、ディスク上の転置索引が断片化し検索性能の劣化が生じていると思います。
デフォルトのフラッシュは、5sに設定されています。
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-translog.html#index-modules-translog
その後、ディスク上に小分けに断片化した転置索引を所定のポリシーでマージしてディスク上に再配置する処理が走るみたいです。
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules-merge.html
さらっと読んだだけではデフォルトはtieredというポリシーでこのポリシーはlog_bytes_sizeと似たようなものだということはわかりましたが、どういったタイミングでマージが走るかよくわかりませんでした。
Elasticsearchは、設定項目がめちゃくちゃたくさんあってチューニングが大変そうですね。
optimizeをするとマージが明示的に行われるようです。
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/indices-optimize.html
10/1追記
以下の記事には、Kyoto Cabinetにおける転置インデックスのバッファリング戦略が記載されています。
http://fallabs.com/blog-ja/promenade.cgi?id=127
前回のシーケンシャルな更新スクリプトの実行時間はGroongaの方ではデータ+転置索引の更新時間であり、Elasticsearchの方はデータの更新時間のみでした。
Elasticsearchは、Nearリアルタイムサーチということですが、使ったことがないので実際にどの程度で検索できるようになるのかよくわかりません。
そこで、GroongaとElasticsearchでデータ更新をしつつ実際に検索ができるまでの時間と、リアルタイム更新後の検索性能の違いを計測してみました。
検証環境
項目
バージョン/種類
GroongaとElasticsearchの転置索引の違いと更新反映速度について - CreateField Blog
