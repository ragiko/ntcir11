
WPF と Win32 コードを相互運用するための基本的な手法は 2 つあります。
Win32 ウィンドウで WPF コンテンツをホストします。
この手法では、標準の Win32 ウィンドウおよびアプリケーションのフレームワーク内で WPF の高度なグラフィックス機能を使用できます。  
WPF コンテンツで Win32 ウィンドウをホストします。
この手法では、既存のカスタム Win32 コントロールを他の WPF コンテンツのコンテキストで使用し、境界を越えてデータを渡すことができます。  
ここでは、これらの各手法について概念的に説明します。
Win32 で WPF をホストする場合のコードを使用した説明については、「チュートリアル: Win32 での WPF コンテンツのホスト」を参照してください。  WPF で Win32 をホストする場合のコードを使用した説明については、「チュートリアル: WPF での Win32 コントロールのホスト」を参照してください。  
WPFAPI はマネージ コードですが、ほとんどの既存の Win32 プログラムはアンマネージ C++ で記述されています。
純粋なアンマネージ プログラムから WPFAPI を呼び出すことはできません。  ただし、Microsoft Visual C++ コンパイラで /clr オプションを使用すると、マネージとアンマネージの API 呼び出しをシームレスに混在させることができる、マネージとアンマネージの混在プログラムを作成することができます。  
プロジェクト レベルで、Extensible Application Markup Language (XAML) ファイルを C++ プロジェクトにコンパイルできないという問題があります。
これを解決するために、プロジェクトを分割する手法がいくつかあります。  
すべての XAML ページを含む C# DLL をコンパイル済みのアセンブリとして作成し、C++ 実行可能ファイルにその DLL を参照として含めます。
WPF コンテンツの C# 実行可能ファイルを作成し、そのファイルが Win32 コンテンツを含む C++DLL を参照するようにします。
XAML をコンパイルする代わりに、Load を使用して、XAML を実行時に読み込みます。
XAML を使用せずに、すべての WPF をコードで記述し、Application から要素ツリーを構築します。
これらの中で最適な方法を使用してください。
WPF と Win32 の相互運用性
