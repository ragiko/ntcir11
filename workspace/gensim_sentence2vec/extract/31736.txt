※本稿は、著者達が1年前に執筆したCQ出版社刊 『Design Wave Magazine 2004
December』 [9] の記事を参考に Web へ公開したものです。
目次
UMLはオブジェクト指向なしで使えるのでしょうか?
UMLには図がたくさんあるが、全部使う必要はあるの? いつ、どの図を使うべき?
忙しくてモデルを書いている時間はない。ほんとうにモデルを書く必要があるの?
オブジェクト指向は、私の担当している組み込み製品にとってはオーバースペックなのではないかと思うのですが?
タスク、割り込み等、組み込みシステム特有の概念をUMLで表現できるのか?
今からUMLを始めるのだが、UML 2.0を学ぶべき?
製品知識は分かっているのに、分析する意味はあるの?
機能が多すぎてユースケースが爆発してしまいます。ユースケースの管理しやすい方法を教えてください。
「問題領域の概念を抽出する」って何でしょう?
クラス図を書くのが難しいのですが?
クラス図、ステートチャート図が複雑になり手に負えません。
1 : UMLはオブジェクト指向なしで使えるのでしょうか?
ローカルルールを決めることで使えます。しかし、UMLを効果的に利用できるとも言えず、その用途が限定されてしまいます。そもそも、UMLはオブジェクト指向開発のために考案された表記法であり、オブジェクト指向開発にベストフィットすることを認識していただきたいと思います。
単なる表記法のUMLがこれほどまでに騒がれている理由は、開発対象の大規模複雑化が起因していると考えられます。一昔前の組み込みシステムならば、そのシンプルさからソフトウェアの解決策(ソースコード)へ直結させても、全体を見通すことが可能でした。しかし、近年の組み込みシステムは、安易にソースコード化すると不具合が多発し、手戻り作業の工数が馬鹿にならなくなってきました。そこで、ソースコード化の前に図面(モデル)を作成し、ソフトウェアの品質を早期に評価・検証し、ソフトウェア開発の効率化を目指すプロジェクトが増えてきています。
それでは、オブジェクト指向なしの場合、開発作業の中でどのようにUMLを利用できるのか、シーケンス図とステートチャート図の例を挙げて説明します。両図とも、UMLにおいて振る舞いを表現する図です。今回は、従来型の組み込みシステム開発言語として、一番多く使用されていると思われるC言語を実装言語と想定し、設計する場合の例を示します。C言語等の手続き型言語には、クラスやオブジェクトといった概念がありません。そのため、ローカルルールを決め、UMLの形式で表現できるようにします。
オブジェクト指向なしシーケンス図のローカルルール
シーケンス図は本来、処理の流れを時系列に表現する図です。オブジェクト間の相互作用をメッセージで表現できます。ここで、キーワードとなるオブジェクトとメッセージを以下のように再定義します。
図1−1はシステム内のサブシステムが、ある機能を実施する流れを表現しました。
図 1-1 ローカル・ルールを適用したシーケンス図の例
この図を書くことで、まずはシステム内の動作を整理できます。メッセージの方向からサブシステム間の依存関係がわかり、変更に伴う副作用の局所化が可能となります。また、各メッセージを実施するために必要なデータも把握できます。
オブジェクト指向なしステートチャート図のローカルルール
ステートチャート図は本来、オブジェクトのライフサイクルを表現する図です。オブジェクトの期間停滞を状態として切り出し、オブジェクト外部からの刺激をイベントとして受け、状態遷移する様を表現できます。
ステートチャート図は、オブジェクトのライフサイクルに範囲を限定せず、制御対象の移り変わっていく様子をライフサイクルとして表現する図として活用できます。この場合、ソフトウェア内部の世界だけでなく、設計作業における開発者の考えを整理するために使用します。ステートチャート図を利用することで、組み込みシステムの特徴である、イベント入力に応じてアクションを実行すること、つまりイベント駆動の動作を表現できます。ここで注意していただきたいことは、1つのステートチャート図は1つの視点で記述することです。例えば、ユーザー視点でシステムモードを表現、制御対象であるメカ自身の視点で制御モードを表現、通信プロトコルの視点で通信制御における送・受信状態とその移り変わりを表現といった具合です。
この例(図1-2)では、制御対象であるライト自身の視点(図の作成者がライトになったつもり)で、その点灯・消灯のライフサイクルを表現しています。
オブジェクト指向なしでも、 ローカルルールを決めることでUMLを利用可能になります。まずは、ソースコード偏重の開発スタイルから、図を使った開発スタイルへとシフトしてはいかがでしょうか。そうすることで、各サブシステムや関数の呼び出しのみが記述され、複雑度が減り、ソフトウェアの挙動を概観できます。ソースコードでは、詳細すぎるソフトウェアの挙動を図で表現した結果、要求の実現性だけでなく、挙動の複雑度も設計時に見通すことができるでしょう。
オブジェクト指向を適用するならば、当然ローカルルールを決めなくてもUML仕様のまま使用できます。しかし、オブジェクト指向初級者が、自力でオブジェクト指向開発すると、破綻するケースが多いことも事実です。特に製品化プロジェクトならば、オブジェクト指向スペシャリストにコンサルしてもらい、オブジェクト指向開発の敷居を少しでも低くすることをお勧めします。ただし、理想を追求するコンサルタントではなく、適用プロジェクトのスキルレベルに合わせた手引きができるコンサルタントを採用することが大切です。
また、対象プロジェクトメンバーのスキルレベルに応じて、UMLの使用目的を決め、以下のように段階的に活用するのがお勧めです。これは、UML(表記法)の習得スピードが数ヶ月であるのに対し、オブジェクト指向(考え方)の習得スピードが数年と、全く違うためです。
開発ドキュメントにUMLを使用  ソースコードしか残らない状況を打破
開発作業の成果物として使用(モデル開発)  設計のみに適用
オブジェクト指向開発(分析型開発)  分析と設計を分離した開発
2 : UMLには図がたくさんあるが、全部使う必要はあるの? いつ、どの図を使うべき?
UMLには9種類の図(diagram)が規定されています。しかし、初めからすべての図を使いこなす必要はありません。UMLは、システム(作成しようとしているソフトウェア)をモデリングするための言語です。システムには、機能、構造、ふるまいなど、さまざまな側面があります。こうした側面に応じて適切にモデリングするために、9種類の図があるわけです(表2-1)。
表2-1 UML のそれぞれの図がシステムを表現する
システム開発にUMLを適用するためのFAQ
