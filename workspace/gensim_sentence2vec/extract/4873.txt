架空言語の単語の生成をある程度、自動で行えるようにすることを考えています。その参考として六つの言語の単語を混ぜあわせて単語を生成しているロジバンのアルゴリズムをその実装から読み解いていきます。
重大な問題として著者はPythonがわからないので、誤りがあれば一報下さい……。
gimyzbaの使い方gimyzbaはPythonで書かれたプログラムで、六つの言語の単語を与えることで単語を生成することができます。例えば、英語のexpectに当たる単語を生成する場合は以下のようになります。
$ python gismu_score.py uan rakan ekspekt esper predpologa mulud
Generating candidates...
14720 candidates generated.
Scoring candidates...
14701 Sorting scores...
10 first gismu candidates are:
(0.4667047619047619, 'kanpe', [0.6666666666666666, 0.6, 0.42857142857142855, 0.4, 0.0, 0.0])
(0.45210476190476184, 'spane', [0.6666666666666666, 0.4, 0.42857142857142855, 0.6, 0.0, 0.0])
(0.45210476190476184, 'sanpe', [0.6666666666666666, 0.4, 0.42857142857142855, 0.6, 0.0, 0.0])
(0.44384761904761905, 'ranpe', [0.6666666666666666, 0.6, 0.2857142857142857, 0.4, 0.0, 0.0])
(0.422447619047619, 'ganpe', [0.6666666666666666, 0.4, 0.2857142857142857, 0.4, 0.2, 0.0])
(0.4175047619047619, 'kanse', [0.6666666666666666, 0.6, 0.42857142857142855, 0.0, 0.0, 0.0])
(0.40464761904761903, 'spana', [0.6666666666666666, 0.4, 0.2857142857142857, 0.4, 0.0, 0.0])
(0.40464761904761903, 'spanu', [0.6666666666666666, 0.4, 0.2857142857142857, 0.4, 0.0, 0.0])
(0.40464761904761903, 'spano', [0.6666666666666666, 0.4, 0.2857142857142857, 0.4, 0.0, 0.0])
(0.40464761904761903, 'danpe', [0.6666666666666666, 0.4, 0.2857142857142857, 0.4, 0.0, 0.0])
gimyzbaが使う入力gimyzbaは主に六つの単語とその単語に掛かる利用人口に基づく係数を入力として使います。前者はコマンドで動的に与え、後者はハードコーディングされています。
単語に関しては全てロジバンにおける音韻に基づいたアルファベット表記で入力を行います。例えば、英語のexpectはekspektになりますしlookはlukになります。他の中国語やアラビア語も言語それぞれの文字やラテン文字転写(ピンインなど)ではなく、このロジバン表記に基づいたデータを使います。この一覧は見つけることができなかったので、ご存知の方は教えてくださると幸いです。
gismu_score.pyの振る舞いgismu_scoreはCLIのフロントエンドであり、実際のアルゴリズムはgismu_utilsに含まれています。gismu_scoreは以下の順序で単語の生成を行います。
六単語与えられ、一文字単語が含まれないことを確認する。含まれる場合はエラーを吐く。
単語から子音と母音を抜き出す(使っても良い音素)。—all-lettersオプションが有効な場合、全ての子音と母音を設定する。
許容する音素列を設定する。—shapesオプションで設定できる。標準はCCVCV,CVCCVである(ロジバンの辞書と見比べるとわかりやすい)。
utilsのGismuGeneratorを使って全パターンのgismuを生成する。
utilsのGismuScorerを使って生成されたgismuに得点をつける(実行したらここが遅い)。
得点順に並び替え上位十件を表示する。
gismu_utils.pyのGismuGeneratorの振る舞い
Generatorはscoreから使われる時、使うべき子音と母音と音素列の並びを受け取る。
音素列の並びに基づいて、パターンを全部生成する。
生成したパターンのうち、問題のあるものを除外する。・先頭で子音が二つ連続するとき、bl、br、cf、ckなど列挙された48の並び(ハードコーディングされています)は出現してはいけない。・先頭以外で子音が二つ連続するとき、同じ子音は連続せず、特定の組み合わせ(発音するものと発音しないもの、もしくは歯擦音の連続)の並びにならなければならない。・子音が三つ連続するとき、ndj、ndz、ntc、ntsは出現してはいけない(標準の音素列では使われない)。・先頭以外で子音が二つ連続し、その後の並びがCCVCVのとき、前半のCCでbl、br、cf、ckなど列挙された48の並びは出現してはいけない(標準の音素列では使われない)。
gismu_utils.pyのGismuScorerの振る舞い
Scorerは六カ国語の単語とそのスコアを受け取り初期化される。
スコア計算は元となった言語ごとの類似度スコアを計算し、その類似度スコアを人口に基づく重みで合算したスコアを計算する。並び替えは合算スコアで行われる。
類似度スコアは同じ文字が同じ順序で出現した文字数から得点付けされる(間に無関係な文字が入っても良さそう?)。・三文字以上一致したら、一致した文字数の得点が付く。・二文字一致は、gismuと同じように連続するもしくは一文字まで間に入る場合(末尾の二文字は完全一致)、2を得点としてつける。・それ以外は、得点をつけない。最後にこの得点を元になった文字数で割る(つまり、最小だと0、最大でも得点は1になる)。
それぞれの類似度スコアに利用人口による重みを掛けて合算する。
例えば、uan rakan ekspekt esper predpologa muludを与えてできるkanpeの場合は、
uanは2/3 = 0.666
rakanは3/5 = 0.6
ekspektは3/7 = 0.429
esperは2/5 = 0.4
predpologaは2だけどpeは末尾なので0
muludは0
になります。
まとめ並ぶと発音しにくい音素列はあらかじめ除外した上で、類似性を計算していることがわかりました。架空言語の場合は、入力の音素をもっと異なるものに変更し、生成する文字数も単語によって変化をつけ、この得点付に音象徴などを恣意的に混ぜれば良いのではないかと考えられます。
ある旅人からの教え — ロジバンの単語生成をソースコードから読み解く
