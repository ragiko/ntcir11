近年の仮想化技術の進化に伴い、ネットワークをソフトウェアによって柔軟に設計、構築、運用するSoftware-Defined Networking(SDN)が適用され始め、これを実現するための様々なSDNコントローラやプラットフォームが台頭してきています。 OpenDaylight は、 Linux Foundation 内で発足した、オープンソースのSDNコントローラプラットフォームの協業開発プロジェクト、およびそのソフトウェアです。プロジェクトには著名な通信機器関連企業を始め、数多くのコミッタが参加しており、米国時間の2014年2月4日に初期リリースであるHydrogenが公開され、話題になりました。
今回の記事では、OpenDaylightの簡単な概要と、アーキテクチャやOpenDaylightアプリケーションの作成方法を中心にご紹介します。
OpenDaylightとは
OpenDaylightは、オープンソースのSDNコントローラプラットフォームです。OSGi(後述)を採用することで多様なコントローラ実装をBundleとして追加する機構を持ち、コントローラ自体を停止させることなく機能の追加削除ができるようになっています。
OpenDaylight Hydrogenリリースには、
基本機能を持つ、評価や研究向けの Base Edition
マルチテナントネットワークを実現するネットワーク仮想化機能が追加された、データセンター向けの Virtualization Edition
経路制御やネットワーク監視機能が追加された、プロバイダやキャリア向けの Service Provider Edition
がありますが、今回はHydrogenリリースのBase Editionを対象に話を進めます。
OpenDaylightのアーキテクチャ
OpenDaylightはjavaで実装されており、実体はOSGi Frameworkと、その上で動作するBundle群です。大きく分類すると
コントローラ操作を外部から可能にするNorthbound API (OpenDaylight API)
具体的なコントローラアプリケーションを実装していくコントローラプラットフォーム
通信機器との実際のやりとりを担うSouthbound API
で構成されています。
( http://www.publickey1.jp/blog/13/ibmbrocadejuniperbig_switchvmwaresoftware-defined_networkingopendaylight.html より引用)
Base Editionに含まれる主な機能には、
Northbound API
ユーザ管理や、コントローラプラットフォームの各機能を外部からコントロールできるREST API
コントローラプラットフォーム
ネットワークトポロジを構築するTopology Manager
統計情報を収集、管理するStatistics Manager
機器を管理するSwitch Manager
機器のFlowを管理するForwarding Rules Manager
機器に接続されたホストの追跡を行うHostTracker
ARPパケットを処理するARP Handler
SAL(後述)に含まれるデータ処理機能
Southbound API
OpenFlow
NETCONF
OVSDB
があり、これらもBundleとして実装されています。
( http://www.opendaylight.org/software/base-edition より引用)
OSGiとは
先程から出現している OSGi とは、javaによるサービスプラットフォームおよびサービスの仕様です。実行環境であるOSGi Frameworkのプロセス空間上で、様々な処理(Service)を提供するモジュール(Bundle)群が相互連携しながら動作し、プロセスを停止させることなくBundleの追加や削除をローカルまたはリモートから行うことができます。このような特徴と、Javaさえ動作すればどこでもOSGi FrameworkおよびBundleが動作する特徴などから、組み込み分野で多く紹介されています(というより、当初は機器内で動作させる目的のものでした)。
組み込み以外でOSGiを採用したソフトウェアとして有名なのはEclipseで、OSGi Frameworkには Equinox が使用されています。今回のOpenDaylightでは、実行基盤としてEquinoxを、BundleとServiceのライフサイクルや依存性管理に Apache Felix の機能(DependencyManager)を利用する形態をとっています。
Service Abstraction Layer(SAL)
OpenDaylightには Service Abstraction Layer(SAL) という層が存在します。これはSouthbound APIとコントローラプラットフォーム、Northbound APIの間のデータ交換や変換を担う層で、さまざまなプロトコルに対応できるようプラグインの追加を可能にしたり、そのデータをOpenDaylightアプリケーション(ComponentやNetwork Service Functionとも呼ばれる)で処理可能にしたりするもので、非常に重要なものです。
これも実体はBundleとして実装され、OSGi Framework上で動作しています。OpenDaylightアプリケーション、Southbound API・Northbound API実装であるプラグインや、GUIのBundleは、SALが公開するServiceを利用し、データを交換、処理します。
( https://wiki.opendaylight.org/view/OpenDaylight_Controller:Architectural_Framework より引用)
現在、SALにはアプローチの異なるAPI-Driven SAL(AD-SAL)とModel-Driven SAL(MD-SAL)の二種類の概念が存在します。MD-SALのほうが後発で、モデルからSouthbound APIとNorthbound APIを自動生成するなどが可能となり、AD-SALとは実装の方法も異なりますが、SAL自体の目的としては変わりません。Hydrogenリリースでは、OpenFlow1.0はAD-SAL、OpenFlow1.3はMD-SALで実装されています。
OpenDaylightアプリケーションの作成
上記で、OpenDaylightアプリケーションはOSGi Framework上で動作するBundleであることを説明しました。今回は、手始めにAD-SALを利用する形で実際にOpenDaylightアプリケーションの作成手順と例を見てみます。
Eclipse、Mavenからの作成
Bundleの実体は、特定のManifestファイル、および特定のインタフェースや手続きを実装するクラス群を格納したjarファイルですが、Bundle作成にはMavenを利用するのが近道です。実際にOpenDaylightの各コンポーネントはMavenで作成されています。任意のエディタとコマンドラインで作成してもよいですが、より簡単に作成するためにEclipseを使用します。現在公開されているEclipse 4.3ではMavenと連携するためのm2eプラグインが同梱されており、これにはMaven3が付属しているため、EclipseをインストールするだけでOpenDaylightアプリケーションをビルドすることができます。
HelloWorld
今回は手始めに、AD-SALで対応するOpenFlow1.0のスイッチを対象としたシンプルなレイヤ2スイッチを実装してみます。具体的にはPACKET-INイベントでMACアドレスを学習して、対象スイッチにFlowを設定するようなBundleを作成し、OpenDaylightのOSGi Frameworkにロードして実行します。本記事にはソースコードの抜粋のみ記載しますが、今回使用するソースコード全体は以下に配置してありますので、適宜参照下さい。
HelloWorld ソースコード
今回のOpenDaylightアプリケーション作成の流れの概要は、以下のとおりです。
pom.xmlの作成
packagingをbundleにし、buildでmaven-bundle-pluginを指定することで、OSGi Bundleの作成を定義
必要なOpenDaylightのライブラリをdependencyに記述
ソースコードの作成
Activatorにて、HelloWorldで利用する他のサービスの定義や、パケット受信時のコールバック登録
HelloWorldにて、SALのインタフェースを実装し、Forwarding、Floodingなどのパケット処理を実装
まず、EclipseからMavenプロジェクトを作成し、pom.xmlにビルド情報や依存関係設定します。プロジェクトは、Maven Simple Projectで構いません。
成果物の指定であるPackagingをbundleに設定、buildでmaven-bundle-pluginプラグインを追加することで、Manifestファイルを含んだBundleを生成するようになります。
pom.xml(抜粋:packaging)
OpenDaylightアプリケーションの作り方 | Tech-Sketch
