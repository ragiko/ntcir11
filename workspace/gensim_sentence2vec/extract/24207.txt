
RLogin (2.17.4)
2014/12/05
RLoginは、Windows上で動作するターミナルソフトです。
プロトコルはrlogin,telnet,ssh(バージョン1と2)の3種類に対応し遠隔でのサーバーメンテナンスを考えて安全な暗号化通信をサポートしています。
漢字コードは、EUC,SJIS,UTF-8などに対応しISO-2022によるバンク切り替えで様々な文字コードが表示できます。
画面制御としてxtermに準じたエスケープシーケンスなどに対応しANSIエスケースシーケンスやvt100コンソールとして使用する事ができます。
1. プログラム概要
2. 基本操作の説明
対応しているターミナルプロトコル
対応している漢字コード
エスケープシーケンス一覧
インストールおよびアンインストール
使用しているライブラリなど
RLoginの使用に関して
プログラム・ヒストリー
メニューの説明
コマンドラインでのオプション設定
各種ウィンドウの操作
サーバーの選択・設定
スクリプト仕様書
3. 各種オプションの説明
4. 各種ウィンドウの説明
サーバーのオプション設定
環境変数の設定
チャットスクリプトの設定
プロキシーサーバーの設定
通信共通のオプション設定
プロトコルのオプション設定
暗号方式などの設定
認証キーの設定
ポートフォワードの設定
端末モードの設定
スクリプトのオプション設定
スクリーンのオプション設定
ターミナルのオプション設定
ヒストリーのオプション設定
クリップボードのオプション設定
マウス関連のオプション設定
フォントのオプション設定
カラーのオプション設定
キーボードのオプション設定
キーコードのオプション設定
Tek40xx/41xxウィンドウ
ReGIS/Sixelグラフィック・ウィンドウ
トレースウィンドウ
SFTPによるファイル転送ウィンドウ
1.1 対応しているターミナルプロトコル
rlogin
通信に関してオーバーヘッドがありませんがセキュリティーの考えが無いに等しいです。このプロトコルは、安全なローカルネット(無線LANは無防備?)以外では、使用しないのが普通で、まったく盗聴、偽装などを防げません。
telnet
telnetプロトコルは、サーバーにて自動認証・暗号化以外での接続を禁止すればグローバルなネットでの使用でも比較的小さなオーバーヘッドで通信が可能だと思います。
telnet
ユーザー認証
SRA
暗号方式
DES_CFB64, DES_OFB64
ssh 1/2
グローバルなネットで最も安全なのは、SSHプロトコルを使用しさらに公開鍵認証のみで接続するようsshサーバーで設定することです。ただし事前に公開鍵を作成してサーバー側に設定しなければ接続できないので自由度が低いですが、盗聴、偽装などが非常に困難です。またSSH2によるポートフォワードにも対応しておりpop3やsmtpなどの通信もSSH2上の安全な経路を通して通信させることが可能です。(*sshでもパスワード認証を許可しているとユーザーを騙ってパスワードを色々試しながら接続を試みるロボットソフトがあるようなので注意が必要です。)
ssh
バージョン1
バージョン2
暗号方式
blowfish,
3des,
des
3des-cbc/ctr blowfish-cbc/ctr
idea-cbc/ctr cast128-cbc/ctr
arcfour/128/256
aes128/192/256-cbc/ctr
twofish128/192/256-cbc/ctr
serpent128/192/256-cbc/ctr
camellia128/192/256-cbc/ctr
seed-cbc/ctr@ssh.com,
aes128/256-gcm@openssh.com,
chacha20-poly1305@openssh.com
検証方法
crc
hmac-md5(-96)
hmac-sha1(-96)
hmac-ripemd160
hmac-whirlpool
hmac-sha2-256/512
umac-32/64/96/128,
*-etm@openssh.com
圧縮方式
zlib, none
zlib,none,delay-zlib
認証鍵
rsa1
ssh-rsa, ssh-dss,
ecdsa-sha2-*, ssh-ed25519
1.2 対応している漢字コード
サーバーが出力する漢字コード
サーバーに送る漢字コード
EUC
ISO-2022による文字バンク制御(GR/GL,G0,G1,G2,G3)にる2バイト文字表示を行います
EUC漢字に変換して出力します
SJIS
SHIFT-JISによる漢字コードをその時点での文字バンク2/3に変換します
SHIFT-JIS漢字で出力します
ASCII
EUCと同じですが、デフォルトの文字セットが英語になります
ISO-2022-JPに変換して出力します
UTF-8
UTF-8文字をUTF-16で表示します。ただしU+0000〜U+00FFはG0,G1バンクの文字に変換します。
UTF-8に変換して出力します。
プログラム内部では、文字バンクにしたがったコードからFonts Setで設定されたIconvセットにてUTF-16に変換して表示します。クリップボードやキーボード入力による漢字は、オプション設定の"Iconv
Character Set"にしたがってUNICODEから変換して送り出します。
1.4 インストールおよびアンインストール
動作環境としてRLogin.exeは、Windows XP/Windows 7 x64にて動作確認しています。
サーバーは、FreeBSD 9.1のrlogind, telnetd, sshdにて確認しています。
「rlogin.zip」を解凍してRLogin.exeを適当な場所に置いて実行してください。
レジストリは、HKEY_CURRENT_USER\Software\Culti\RLoginを使用します。
アンイストールする場合は、このレジストリを削除してください。
作業フォルダもしくは、実行プログラムと同じフォルダに「RLogin.ini」を作成しておくと
レジストリに保存せずにプライベートプロファイルを使用します。
実行プログラム
/softlib/program/rlogin.zip
WinXP,Vistaのx86一般用
実行プログラム(SSE2)
/softlib/program/rlogin_sse.zip
WinXP,VistaのPentium4以上
実行プログラム(64bit)
/softlib/program/rlogin_x64.zip
Win7,Vistaの64bit用
実行プログラム(w2k)
/softlib/program/rlogin_w2k.zip
Win2k用(vs2008にて作成)
ソースファイル
/softlib/source/rlogin.zip
ソースをコンパイルするには、以下のライブラリが必要です
openssl-1.0.1j.tar.gz
perlの実行環境が必要
sedの表記は、Makefileの
編集を意味します
x86用 out32
Visual Studio コマンド 
プロンプト (2010)
perl Configure VC-WIN32 no-asm
ms\do_ms
rename ms\nt.mak ms\nt_32_noasm.mak
nmake -f ms\nt_32_noasm.mak
x86-sse用 out32sse
Visual Studio コマンド 
プロンプト (2010)
perl Configure VC-WIN32
ms\do_nasm
rename ms\nt.mak ms\nt_32_sse.mak
sed -e 's/out32/out32sse/g' ms\nt_32_sse.mak
sed -e 's/tmp32/tmp32sse/g' ms\nt_32_sse.mak
sed -e 's/inc32/inc32sse/g' ms\nt_32_sse.mak
echo CFLAG+= -GS- /arch:SSE2 >>nt_32_sse.mak
nmake -f ms\nt_32_sse.mak
x64用 out64
Visual Studio x64 Win64 
コマンド プロンプト (2010)
perl Configure VC-WIN64A
ms\do_win64a
rename ms\nt.mak ms\nt_64.mak
sed -e 's/out32/out64/g' ms\nt_64.mak
sed -e 's/tmp32/tmp64/g' ms\nt_64.mak
sed -e 's/inc32/inc64/g' ms\nt_64.mak
echo CFLAGS+= /Ob2 /O2 -GS- >>nt_64.mak
nmake -f ms\nt_64.mak
zlib-1.2.8.tar.gz
x86用 rel
Visual Studio コマンド 
プロンプト (2010)
nmake -f win32/Makefile.msc CFLAGS="/MT /Ox /Ob2 /Oi /Ot /GS- /Gy
-W1 /nologo -Fdzlib"
mkdir rel
mv *.obj *.lib rel
x86-sse用 sse
Visual Studio コマンド 
プロンプト (2010)
nmake -f win32/Makefile.msc CFLAGS="/MT /Ox /Ob2 /Oi /Ot /GS- /Gy
-W1 /arch:SSE2 /nologo -Fdzlib -DASMV -DASMINF" OBJA="inffas32.obj
match686.obj"
mkdir sse
mv *.obj *.lib sse
x64用 x64
Visual Studio x64 Win64 
コマンド プロンプト (2010)
nmake -f win32/Makefile.msc AS="ml64" CFLAGS="/MT /Ox /Ob2
/Oi /Ot /GS- /Gy -W1 /nologo -Fdzlib -DASMV -DASMINF -I." OBJA="inffasx64.obj
gvmat64.obj inffas8664.obj"
mkdir x64
mv *.obj *.lib x64
libiconv-1.14.tar.gz
追加ファイル
libiconv-1.14-add.zip
x86用 lib\rel lib\sse
Visual Studio コマンド 
プロンプト (2010)
nmake -f lib/Makefile.ms x32
x64用 lib\x64
Visual Studio x64 Win64 
コマンド プロンプト (2010)
nmake -f lib/Makefile.ms x64
nettle-2.0.tar.gz
上記より抜粋して加工
nettle-2.0.zip
stdafx.h内の
#define USE_NETTLE
を有効にする
macro.h
twofish.h
twofish.cpp
serpent.h
serpent_sboxes.h
serpent.cpp
1.5 使用しているライブラリなど
OpenSSL 1.0.1j 15 Oct 2014
Copyright (c) 1998-2014 The OpenSSL Project
Copyright (c) 1995-1998 Eric A. Young, Tim J. Hudson
All rights reserved.
zlib 1.2.8
(C) 1995-2013 Jean-loup Gailly and Mark Adler
libiconv-1.14
Copyright (C) 2000-2011 Free Software Foundation, Inc.
Nettle library (version 2.0)
Originally written 2001 by Niels Moller, updated 2009.
(twofish/serpentのみ使用)
参照したプログラムソース
FreeBSD 5.2.1-RELEASE
Copyright (c) 1980, 1983, 1986, 1988, 1990, 1991, 1993, 1994
The Regents of the University of California. All rights reserved.
rlogin, rlogind, telnet, telnetd, ssh, sshd
1.6 RLoginの使用に関して
RLoginの使用について個人・商用を問わずご自由に使用していただいで結構です。
また、配布・転載・紹介もご連絡の必要もありません。
ソースの改変による配布も自由ですが、どのバージョンの改変かを明記されることを希望します。
また、ソースコードの部分使用なども自由です。
2.1 メニューの説明
ファイル(F)
サーバーに接続(N)
サーバーの選択・設定ダイアログを表示し選択したサーバーに接続します
$FILE_NEW
接続を閉じる(C)
接続中のサーバーとの通信を閉じます
$FILE_CLOSE
サーバー情報を開く(O)
保存されたサーバー情報を元にサーバーに接続します
$FILE_OPEN
サーバー情報を保存(S)
接続中のサーバー設定などをファイルに保存します
$FILE_ALLSAVE
すべての状態を保存(W)
ウインドウの分割状態、サーバーへの接続情報を含めてファイルに保存します
$FILE_SAVE
ログファイルに保存(L)
指定するファイルに通信記録を残します
$LOG_OPEN
印刷(P)
現在の画面を印刷します
$PRINT_DIRECT
印刷プレビュー(V)
印刷をプレビューで表示します
$PRINT_PREVIEW
プリンタの設定(R)
使用するプリンタを設定します
$PRINT_SETUP
sftpファイルの転送(T)
SFTPによるファイル転送ダイアログを開きます
$VIEW_SFTP
XYZModemファイル転送
XYZModem/Kermitプロトコルによるファイル転送を実行します
$XMODEM_DOWNLOAD
$XMODEM_UPLOAD
$YMODEM_DOWNLOAD
$YMODEM_UPLOAD
$ZMODEM_DOWNLOAD
$ZMODEM_UPLOAD
$KERMIT_DOWNLOAD
$KERMIT_UPLOAD
スクリプトの実行(E)
スクリプトファイルを読み込んで実行します。
$SCRIPT_EXEC
アプリケーションの終了(X)
プログラムを終了します
$EXIT
編集(E)
コピー(C)
クリップボードにコピーします
$EDIT_COPY
貼り付け(P)
クリップボードのテキストを送信します
$EDIT_PASTE
すべて選択/コピー
ヒストリーを含めてすべてをクリップボードにコピーします
$EDIT_COPYALL
正規表現で検索
正規表現で文字列を検索し反転表示します
$SEARCH_REG
次を検索
上記検索結果を次の位置まで移動します
$SEARCH_NEXT
$SEARCH_BACK
スクリプトの停止
実行中のChatScript/スクリプトを終了させます
$SCRIPT_END
Break信号を送る
COMポートの場合、ブレーク信号を送ります
$BREAK
マウスイベントを無効
マウス・イベント・トラック・モードを一時的に無効にします
$MOUSE_EVENT
ブロードキャスト
開いているすべての接続にキー操作を同時送信します。
使い方を間違うと意図しない結果になりますのでご注意ください。
$BROADCAST
キー操作の記録(R)
以降のキー入力など再度このメニューを選択するまで記録します
$KEY_REC
キー操作の再現(Q)
最後に記録、再現されたキー操作を再現します
$KEY_PLAY
・・・
記録されたキー操作を最大5つまでここに表示され選択すれば再現します
$KEY_HIS1-5
表示(V)
メニューバー(M)
メニューバーを表示・非表示にします
※非表示の時は、システムメニューでメニューバーを表示できます
$VIEW_MENUBAR
ツールバー(T)
ツールバーを表示・非表示にします
$VIEW_TOOLBAR
ステータスバー(S)
ステータスバーを表示・非表示にします
$VIEW_STATUSBAR
スクロールバー(V)
スクロールバーを表示・非表示にします
$VIEW_SCROLLBAR
Tekウインドウ(K)
Tek40xx/41xxウインドウを表示・非表示にします
$VIEW_TEKDISP
Imageウィンドウ(I)
コンソール画面をグラフィックイメージでウィンドウに表示します
$VIEW_IMAGEDISP
ソケットステータス
接続しているソケットの状態を表示します(デバッグ目的です)
$VIEW_SOCKET
トレースウィンドウ
トレースウィンドウでESCシーケンスなどのログを表示します
$VIEW_TRACEDISP
オプション設定(P)
各種のオプション設定を行います
$OPTION_SET
標準の設定に戻す
オプション設定を下記の標準に設定した時の状態に戻します
$OPTION_LOAD
漢字コードの変更
EUC,SJIS,ASCII,UTF8の漢字コードに一時的に変更します。
※オプションやこの変更で漢字コードを変更しても次回起動時にはサーバーエントリーで設定された漢字コードが有効になります。
$KANJI_EUC
$KANJI_SJIS
$KANJI_ASCII
$KANJI_UTF8
リセット  
タブリセット
タブの設定をデフォルト8文字に設定します
$RESET_TAB
文字バックリセット
文字バンクの設定を初期値に設定します
$RESET_BANK
文字属性リセット
文字属性や色を初期値に設定します
$RESET_ATTR
ESCシーケンスリセット
ESCシーケンス中の処理を中断します
$RESET_ESC
マウスイベントリセット
マウスイベントを取り消します
$RESET_MOUSE
tek40/41xxリセット
tekウインドウの状態をクリアし初期化します
$RESET_TEK
スクリーンリセット
すべてを初期値に戻し画面をクリアします
$RESET_ALL
ウィンドウ(W)
ウィンドウ識別を表示(I)
タブ位置とウィンドウタイトルを画面中央に3秒間表示します
$WINDOW_INDEX
別ウィンドウを開く(N) 
接続中のウィンドウを新たに別ウィンドウで表示します
$WINDOW_NEW
ウィンドウを閉じる(C) 
アクティブなウィンドウを閉じます
$WINDOW_CLOSE
スプリットコマンド 
縦方向に分割して接続
縦に2分割して現在の接続先に新規接続します。
$SPLIT_HEIGHT
横方向に分割して接続
横に2分割して現在の接続先に新規接続します。
$SPLIT_WIDTH
画面分割なしで接続
画面を重ねて現在の接続先に新規接続します。
$SPLIT_OVER
ペインの移動(R)
すべての接続しているウィンドウを移動させます。
$PANE_ROTATION
縦方向に分割(H) 
アクティブなウィンドウを縦方向に2分割します。空いた場所は、次にオープンするウィンドウ(上記「別ウィンドウを開く」もしくは「サーバーに接続」にて開くウィンドウ)に予約されます。
$PANE_HSPLIT
横方向に分割(W) 
上記と同じですが分割を横方向に行います
$PANE_WSPLIT
分割を閉じる(X) 
分割されたウィンドウを元に戻します。片方が空の場合は、閉じられ。空で無い場合は、重なります。
$PANE_DELETE
重ねて表示(O) 
すべてのウィンドウを最大表示サイズで重ねて表示し、空のウィンドウは、閉じます
$PANE_CASCADE
並べて表示(T) 
空でないすべてのウィンドウを横縦方向に並べて整列させます
$PANE_TILEHORZ
現在の分割を保存(S) 
その時点での画面分割状態を保存し次回起動時にその状態で復帰させます
$PANE_SAVE
※右端の$から始まるキーワードは、キーボードのオプション設定などで使用するショートカットキーワードです。
その他ショートカットメニュー
スクリプトメニュー
スクリプトで設定するメニューです
$SCRIPT_MENU1-10
アクティブウィンドウの選択
タブで表示されている各ウィンドウを左から数えてアクティブにします
$PANE_SEL1-10
アクティブウィンドウの移動
アクティブなウィンドウを移動します
$PANE_NEXT
$PANE_PREV
2.2 コマンドラインでのオプション設定
RLogin [<RLogin File Name>] [/ip <addr>] [/port <port>]
[/user <user name>] [/pass <password>] [/term <term>]
[/entry <entry name>] [/direct | /login | /telnet | /ssh] [/inuse]
<RLogin File Name>
「サーバー情報を保存」で保存したファイルを指定。URL形式(login/telnet/ssh)の場合は、それを解釈して/user/pass/ip/portを設定する。
例: telnet://user:pass@host:port
/ip <IP Address>
サーバーのIPアドレスを指定
/port <Port Number>
IPのポート番号を指定
/user <User Name>
ログインユーザー名を指定
/pass <Password>
ログインパスワードを指定
/term <Terminal Name>
接続先のTERM環境変数を指定
/entry <Entry Name>
サーバー選択で登録したエントリーの設定で接続
/direct
プロトコル制御なしでダイレクトに接続
/login
rloginプロトコルで接続
/telnet
telnetプロトコルで接続
/ssh
sshプロトコルで接続
/inuse
すでに起動中のRLoginがあれば、そのウインドウのタブとしてオープンします
※CygwinのCygTermでは、「cygterm.cfg」で「TERM = RLogin.exe /telnet /ip %s /port
%d /user xxx /pass xxx /term vt100」で接続できると思いますが、未確認です。
2.3 各種ウィンドウの操作
「ファイル」「サーバーに接続」もしくは「サーバー情報を開く」にて開いたウィンドウ
基本となるウィンドウです。メインウィンドウがすでに分割してある場合は、アクティブな空ウィンドウ>最初の空ウィンドウ>アクティブなウィンドウと同じ位置で重ねる。の順位で開かれます。メインウィンドウが分割されていなければ、全画面で開き、複数の接続がある場合は、それぞれのエントリー名でタブバーを表示します。
「ウィンドウ」「別ウィンドウを開く」で開いたウィンドウ
基本的に上記のウィンドウと同じですが、接続先が同一の複写されたウィンドウです。下記の分割ウィンドウとの違いは、画面サイズ(サーバー側に報告する縦、横の文字数)がこのウィンドウのサイズになり、アクティブなウィンドウが切り替わる度にサーバーに画面サイズを報告し直します。
各ウィンドウ右端スクロールバー上部の分割バーをドラックして分割したウィンドウ
上下2つに分割されたそれぞれのウィンドウは、同じ接続で同じ画面サイズの複写ウィンドウとなりなす。実画面サイズ(サーバー側に報告する縦、横の文字数)は、表示上のサイズでは、なく分割された元ウィンドウのサイズのままで維持します。したがって実画面の一部分を2つのウィンドウで独立して表示することになります。フォーカスのある画面で文字入力や画面更新があるとカーソル位置に基づいて表示位置が動的に変化します。過去のヒストリー画面をちょっと見ながら文字入力をしたい場合などに有効です。
タブバー上にマウスを2秒以上置くと表示されるウィンドウ
アクティブでない接続のタブバーの上にマウスカーソルを2秒以上置くとその接続の現在の画面を重ねて透過表示します。2つの画面をグラフィカルに見比べる事ができます。
この機能は、以下のレジストリを設定することで抑制できます
[HKEY_CURRENT_USER\Software\Culti\RLogin\TabBar]
"GhostWnd"=dword:1
タブバーのタブをドラッグして移動
タブバー内で移動
タブの表示位置を移動します
ウィンドウに移動
移動先のウィンドウと入れ替わります
メインウィンドウ外に移動
接続を閉じます
2.4 サーバーの選択・設定
Sever Select
OK
接続を開始します
キャンセル
このダイアログを閉じます
新規
新しくサーバーエントリーを作成します
編集
サーバーエントリーを変更します
削除
サーバーエントリーを削除します
右クリックによるポップアップメニュー
接続先を新規作成
新しくサーバーエントリーを作成します
接続先を編集する
サーバーエントリーを変更します
接続先を削除する
サーバーエントリーを削除します
接続先を複写する
同じ設定のエントリーを新規作成します
標準の設定にする
初期化で選択する標準の設定にします
プロトコルハンドラに登録
ssh://hostnameなどのURLリンクで起動・接続できるようにハンドラを登録する
ファイルから設定変更
エクスポートしたファイルから設定を読み込みます
下記インポートとの違いは、既存のエントリーの部分的な変更を行います
ファイルからインポート
エクスポートしたファイルから設定を新規作成します
ファイルにエクスポート
ファイルに設定を保存します。ファイルには、テキスト形式ですのでメモ帳などで編集可能です
最新の情報に更新
エントリーを再表示します
3.1 サーバーのオプション設定
Server Parameter
エントリー
任意の名前をつけることができます
上段がメニューやタイトルになる名前とサーバー選択画面で表示されるタブグループの名前です。下段は、現在のところこのダイアログ以外では、表示されない名前です
プロトコル
通信制御する方式を選択します
Server Address
サーバーのアドレスを設定します
(空の場合は、接続時にホスト名入力を求めます)
ホスト名を","で区切って指定すると同じエントリー設定で複数接続します。また'-'で10進数の範囲、'[x,x]'で部分置換できます。
例 
hostA.hostB,hostC
192.168.0.1-5
192.168.0.[1,3,5]
Sock Port
使用するポート番号を設定します
(Protocolとの関係が重要となります、通常は、Protocolと同じに合わせてください)
User Name
ユーザー認証に使用するユーザー名です
(空の場合は、接続時にユーザー名入力を求めます)
Password
ユーザー認証に使用するパスワードです。公開鍵認証の場合は、その認証鍵のパスフレーズを設定します。
(空の場合は、接続時にパスワード入力を求めます)
User Name,Passwordを設定するとサーバー情報を保存で作成されるファイルや次回起動時用にPasswordなども保存されます。セキュリティーを考えるならPasswordを保存しないでください。
Terminal
telnet,ssh2の時に追加で送信する環境変数を設定します
送り出すTERM環境変数を設定します
Chat Script
接続後に簡単なスクリプトを設定できます
Proxy Server
プロキシーを利用して接続します
SSH Identity Key
このエントリーだけで使用するSSH2の認証鍵ファイル(ssh-keygenなどで作成)を指定します
※設定を削除するにはファイル名選択でキャンセルをクリックして削除の確認にて「はい」を選択してください
文字セット
文字セットを選択します(接続時のデフォルト値となります)
プロトコル
direct
Socket Portで指定したPort番号にダイレクトにTCP/IP接続します。ちょっとしたデバックに使用します。
login
rloginプロトコルで接続します。
telnet
telnetプロトコルで接続します。
ssh
ssh1/ssh2プロトコルで接続します。
com
RS232CのCOM:ポートに接続します。Server Addressにポートや接続条件を設定します。[COM]ボタンで詳細設定できます
pipe
Server Addressの部分で指定したプログラムを標準入出力をパイプでつないで起動・実行します。
CMD.EXEなどのプログラムを指定するとコマンドプロンプトのような使い方ができます。その場合は、通信オプションの「キーボード入力をローカルエディットモードにする」をチェックしないと文字入力できませんのでご注意ください。また漢字コードは、SJISにしないと漢字が化けます。あくまでパイプでつないで起動しているので本来のコマンドプロンプトとは、動作が違いますのでくれぐれもご注意ください。
3.1.1 環境変数の設定
環境変数
チェックマークのある設定のみ送信されます
Name
追加登録する環境変数名です
Value
環境変数の値です
TERMCAP
下記のTERMCAP設定ダイアログで変数を編集できます
※「TERM」は、各種プロトコルの中に送信する機能がありますのでチェックマークの有無に関係なく送られます。
※telnet,ssh2のみ追加で環境変数を送信しますがサーバー側の設定で許可されている必要がありますのでご注意ください。(sshの場合は、sshd_configなどに"AcceptEnv
TERMCAP"などの設定が必要です)
※リスト内で右クリックするとメニューで各種編集機能が選択できます。
TermCap/Info
Entry
TERMの名前になるTermcap/infoの名前でtermcap/infoの設定ファイルを読み込んだ場合は、エントリを選択します
TermCap
termcapの設定ファイルを読み込みます
TermInfo
terminfoの設定ファイルを読み込みます
List
Valueの項目のみダブルクリックで編集することができます。
※リスト内で右クリックするとメニューでそのエントリーをTermcap/infoそれぞれの形式で「ファイルからインポート・エクスポート・クリップボードに送る」など選択できます。
※設定された内容は、termcap形式に変換して環境変数TERMCAPに設定されます。元の設定がterminfoの場合は、変換できない場合や文字数制限にかかる場合がありますのでご注意ください。
3.1.2 チャットスクリプトの設定
Chat Script
受信文字列
正規表現で受信した文字列が一致するまで待ちます
送信文字列
受信文字列が一致した場合に送信する文字列を指定します
次に追加
選択されている受信・送信スクリプトが一致した場合に実行するスクリプトを登録します
ORで追加
選択されている受信・送信スクリプトと同じ時に実行するスクリプトを登録します。
次回接続時に・・・
次回接続時にキーボードで入力した手順をスクリプトにして登録します
※右クリックで「すべてクリップボードにコピー」「クリップボードから貼り付け」メニューが選択できます。簡単なテキストに変換していますのでメモ帳などで編集可能です。
Chat Scriptサンプル
ChatScript
受信文字列
送信文字列
内容
/ATZ\r
無し
ATZ\r
無条件でATZを送信
OK\r\n/ATD123-1234\r
OK\r\n
ATD123-1234\r
OKを待ってダイヤル
CONNECT/
CONNECT
無し
CONNECTを待つ
login:/%U\r
login:
User Name
login:を待ってサーバーエントリーで指定したUser Nameを送信
password:/%P\r
password:
Password
password:を待ってサーバーエントリーで指定したPasswordを送信
NO CARRIER/
NO CARRIER
無し
終了
ERROR/
ERROR
無し
終了
右クリックメニューの「すべてクリップボードにコピー」でテキスト変換された場合の上記サンプル
if "" then "ATZ"
if "OK\r\n" then "ATD123-1234\r"
if "CONNECT"
if "login: %U\r"
if "password:" then "%P\r"
fi
fi
or "NO CARRIER"
or "ERROR"
fi
fi
fi
送信文字列の特殊文字
%E
サーバーエントリーのServer Entryに置き換え
%U
サーバーエントリーのUser Nameに置き換え
%P
サーバーエントリーのPasswordに置き換え
%T
サーバーエントリーのTerminalに置き換え
%S
接続したサーバーアドレスに置き換え
%p
接続したポート番号に置き換え
%D
現在年月日に置き換え
%t
現在時分秒に置き換え
%I
文字入力ダイアログを表示し文字入力を待ちます
3.1.3 プロキシーサーバーの設定
Proxy Server
Select Proxy...
使用するプロキシサーバーをHTTP/SOCKS4/SOCKS5の中から選択します
Over SSL
SSLを通して暗号化します
HTTP+TLSv1でhttpsとして利用できます
Proxy Server
プロキシサーバーアドレスを指定します
Socket Port
プロキシサーバーのポート番号を指定します
User Name
プロキシの認証を行う場合のユーザー名
Password
プロキシの認証を行う場合のパスワード
※HTTPは、Basic/Digestを自動で識別して認証します。
※HTTP(Basic)は、Basic認証のみ使用します。
※SOCKS4には、ユーザー認証ありません。
※SOCKS5は、平文での認証しか対応していません。
3.2 通信関連のオプション設定
オプション
送信を1行ごと・・・
1行単位(CR文字にて判断)で送信しその受信(エコーバックされたCR文字)を確認してから指定した時間(msec)待って次を送信します。
※CRがエコーバックされない場合は、500msec待って次を送信します。また1つのCR文字に複数のCRが返される場合などは、正常に動作しません
BPlusファイル・・・
BPlus/ZModem/Kermitプロトコルでファイルの転送を自動で開始します。BPlusやZModemプロトコルは、昔パソコン通信(Niftyなど)で流行したファイル転送方法です。現在では、ほとんど使われていないと思いますが、Unix上のサーバープログラムのソースをここに置いておきます。
BPlusサーバープログラムソース bp.tar.gz
キーボード入力・・・
行単位で編集してから送信します。ただしコントロールコードなどを送信しなくなりますので注意してください。
接続時にパス・・・
telnet,sshで無条件で接続時にパスワードの入力を要求します
接続が切れると・・・
通信が切れれば自動でウインドウを閉じます
TCPオプションの・・・
TCPオプションのKeepAliveが有効のソケットを作成します
TCP/IP
IPv6/IPv4
DNSから返されたアドレスを順番に接続を試みます
IPv6のみ
IPv6アドレスのみ接続を試みます
IPv4のみ
IPv4アドレスのみ接続を試みます
ローカルエディットの編集機能
,
カーソル(編集ポイント)を左右に移動
,
ヒストリー(過去の入力内容)を上下に移動。ヒストリーは、ターミナルオプションのヒストリーの保存・復元で画面と同時に保存可能
BS,DEL
1文字削除BSで左側、DELで右側
TAB
プロトコルがPipeの場合は、ファイ名を補間。その他のプロトコルでは、ヒストリーの中から文字列を補間する。
Pipeのファイル名補間は、CMD.EXEの使用を前提としてPROMPTがカレントディレクトリを示していると仮定しています。また実行プログラムの補間は、起動時のデフォルトのPATH環境変数を元に検索しています
CTRL+C
Pipeの場合は、CTRL+C割り込みを送信、COMの場合は、ブレーク信号を送信します。
CTRL+Z
Pipeの場合は、CTRL+BREAK割り込みを送信、COMの場合は、ブレーク信号を長めに送信します。
CTRL+X
入力途中の文字列をすべて削除します
CTRL+V
クリップボードから文字列を貼り付けます
CR
行末コード(CR+LF,CR,LFなどを選択可能)を添付してすべての文字列を送信します
3.3 プロトコルのオプション設定
TELNET
自動ユーザー認証を行わない
暗号化された自動ユーザー認証を行いません
データの暗号化を禁止する
自動ユーザー認証後のデータ通信を暗号化しません
SSH
SSHバージョン1で接続する
SSHバージョン2による制御を行いません
ポートフォワードだけ行う
SSH2で接続した場合にSHELLを起動しません。代わりにポートフォワードのログを表示します
エージェント転送を有効にする
ユーザー認証を行うエージェント転送を有効にしssh-addを使用して認証キーの追加・削除を行うことができます(SSH2のみ)
KeepAliveパケットの送信間隔
KeepAliveパケットを指定秒数間隔で送信します(SSH2のみ)
暗号方式
暗号・検証・圧縮方法の優先順位を任意に並べます
認証キー
公開鍵認証で使用する鍵を作成・表示します
ポートフォワード
特定のTCP/IPをサーバーに転送します
端末モード
端末モードの設定をします
3.3.1 暗号方式などの設定
暗号・検証・圧縮方法の優先順位を任意に並べます
変更したい項目を選択してSHIFT+、SHIFT+で順位が変わります。
暗号化のスピードは、以下のようになるようです(コンパイル条件により異なります)
arcfour>aes>twofish>blowfish>camellia>cast>idea>seed>serpent>3des
cbc>ecb>ofb>cfb>ctr
cipher
MByte/sec
cipher
MByte/sec
arcfour
181.932
cast128-ctr
45.433
arcfour128
181.899
camellia256-cbc
41.647
arcfour256
181.899
camellia192-cbc
41.627
aes128-cbc
79.767
camellia192-ctr
39.588
aes128-ctr
73.463
camellia256-ctr
39.554
aes192-cbc
68.681
idea-cbc
36.200
aes192-ctr
64.197
idea-ecb
34.838
aes256-cbc
60.179
idea-ofb
33.421
aes256-ctr
56.910
des
33.045
twofish128-ctr
55.946
idea-ctr
32.348
twofish-ctr
55.928
seed-ofb
32.314
twofish256-ctr
55.895
seed-cbc
32.259
twofish192-ctr
55.861
seed-ecb
32.248
cast128-cbc
53.537
idea-cfb
31.949
camellia128-cbc
53.503
seed-cfb
31.883
blowfish-cbc
52.075
seed-ctr
31.019
twofish256-cbc
51.245
serpent192-cbc
23.314
twofish-cbc
51.212
serpent256-cbc
23.255
twofish128-cbc
51.179
serpent128-cbc
23.248
twofish192-cbc
51.179
serpent256-ctr
22.085
cast128-ecb
50.680
serpent128-ctr
22.052
camellia128-ctr
50.083
serpent192-ctr
22.052
blowfish-ecb
49.717
3des-cbc
12.520
cast128-ofb
48.139
3des-ecb
12.288
blowfish-ofb
47.774
3des-ctr
12.022
blowfish
47.326
3des-ofb
11.860
blowfish-ctr
46.429
3des-cfb
11.823
cast128-cfb
44.802
3des
11.029
blowfish-cfb
44.271
mac
MByte/sec
mac
MByte/sec
umac-32
3245.134
hmac-sha1-96
252.706
umac-64
1616.805
hmac-ripemd160
143.920
umac-96
1135.934
hmac-sha2-224
103.819
umac-128
920.830
hmac-sha2-256
103.654
hmac-md5-96
339.488
hmac-sha2-384
54.334
hmac-md5
335.614
hmac-sha2-512
54.267
hmac-sha1
253.204
hmac-whirlpool
30.986
※すべての暗号アルゴリズムを検証していません。
※ECB/CFB/OFBは、テスト環境しか実装していません。
※2.11.6からctr暗号をスレッド化しています。サーバーもスレッド化した場合、アルゴリズムに関係なく非暗号に近いスピードが期待できます。(openssh-5.9p1用のスレッド化したcipher-ctr-nt.c)
※2.11.7からctr暗号の前処理をアイドル時に実行に変更しました。
3.3.2 認証キーの設定
認証キー
上へ・下へ
チェックマークを入れた認証キーをこのサーバーエントリーで使用します。上下ボタンでアクセストライの順位を設定できます
公開鍵
認証キーの公開鍵をクリップボードにコピーします
インポート
ファイルに保存された認証キーを読み込みます。正しいパスフレーズを入力しないと読み込めません
対応している鍵のファイル形式
opensslのPEM形式
ssh-rsa,ssh-dss
ecdsa-sha2-*
openssh独自形式
ssh-rsa,ssh-dss
ecdsa-sha2-*
ssh-ed25519
ssh.com
ssh-rsa,ssh-dss
putty
ssh-rsa,ssh-dss
エクスポート
認証キーをファイルに保存します。作成時に設定したパスフレーズを入力しないと保存できません
RSA1/RSA2/DSA2
ECDSA/ED25519
作成する認証キーの種類を指定します(RSA1/RSA2は、基本的に同じですが、エクスポートする際の形式が異なります)
256/384/521
768/1024/2048/4096
認証キーのサイズを指定します。サイズが大きい程、作成するのに時間がかかります(通常1024か2048で十分でしょう)
ECDSAは256/384/521から選択してください
ED25519では、ビットサイズ指定できません
Name
任意の名前を付けることができます
作成
作成時にパスフレーズの設定が必要です。
※認証キーのリストで右クリックするとメニューが表示され上記の処理以外に削除や署名付きの公開鍵の読み込みなどができます。
3.3.3 ポートフォワードの設定
Port Forward
X11ポートフォワード
X11クライアントのポートフォワードを有効にします。
X11サーバーをローカルで起動しSSH2で接続するとX11端末のように動作するようになります。
DISPLAY
X11のDISPLAY環境変数のデフォルト値です。環境変数にDISPLAYが設定されていない場合にこの値を使用します。
新規
新たに設定を追加します
編集
設定の変更を行います
削除
設定を削除します
SSH2 ポートフォワードの設定
Listen
Local
ローカル側で待機します
Local Socks
ローカル側のSOCKSサーバーで待機します
Remote
リモート側(SSHサーバー)で待機します
待機するサーバーの名前とポート番号を指定します。
Connect
転送するホスト名とポート番号を指定します
例: localhost:pop3 > mailxxx.com:pop3
RLoginが動いているパソコンでダミーのpop3サーバーを開き、接続があった場合には、その内容をSSH2で暗号化して安全にmailxxx.com:pop3に転送します。
3.3.4 端末モードの設定
端末モードの設定
Name/Value
端末で使用するコントロール文字などを設定します
デフォルトの設定などは、各種OSによって色々ですがユーザーのログインスクリプトなどでも変更される場合がありここでの設定が反映されないこともあります。
3.4 スクリプトのオプション設定
スクリプト
エントリー・スクリプト
接続時に実行するスクリプトファイル
トレースデバック
簡単なスクリプトのチェックを行う
スクリプト
直接実行スクリプトを編集します。
上記スクリプトファイルにライブラリを関数定義してここでエントリーごとに実行する関数を呼び出します。
スクリプトの詳細は、「スクリプト仕様書」を参照してください。
サンプルのスクリプトファイル。(script.txt)
MatStrCol(); // 指定文字列に色を付ける
TekClock(); // アナログ時計
TekClock2(); // 図形回転のアナログ時計
TekFeq(); // スピーカーフィルター特性
「編集」メニューに「アナログ時計」を追加するサンプルスクリプト
menu(0, "アナログ時計", "TekClock2");
function TekClock2() {
ofs = complex(1500, 1500);
hou = [ complex(0, 600), complex(40, 0), complex(0, -100), complex(-40, 0), complex(0, 600) ];
min = [ complex(0, 900), complex(40, 0), complex(0, -100), complex(-40, 0), complex(0, 900) ];
sec = [ complex(0, 920), complex(20, 0), complex(0, -200), complex(-20, 0), complex(0, 920) ];
d = -2 * PI;
//iconstyle("TekClock2を実行中");
tekopen(1);
while ( !Document.Abort ) {
tekclear(1);
t = getdate(time());
for ( n = 0 ; n < 60 ; n++ ) {
i = d * n / 60;
pxy[0] = complex(0, (n % 5) == 0 ? 930 : 950) * complex(cos(i), sin(i)) + ofs;
pxy[1] = complex(0, 990) * complex(cos(i), sin(i)) + ofs;
tekpoly(pxy, 4, 0, 1, 1);
}
for ( n = 0 ; n < 5 ; n++ ) {
i = d * (t.hour * 60 + t.min) / 720;
hxy[n] = hou[n] * complex(cos(i), sin(i)) + ofs;
i = d * (t.min * 60 + t.sec) / 3600;
mxy[n] = min[n] * complex(cos(i), sin(i)) + ofs;
i = d * t.sec / 60;
sxy[n] = sec[n] * complex(cos(i), sin(i)) + ofs;
}
tekpoly(hxy, 2, 0, 1, 1);
tekpoly(mxy, 2, 0, 1, 1);
tekpoly(sxy, 3, 0, 1, 1);
tekflush(0);
sleep(1000);    // 1秒待ち
}
}
3.5 スクリーンのオプション設定
スクリーン
1行あたりの・・・
一行あたりの文字数を20〜512文字に設定します
DECCOLMの・・・
DECCOLM(ESC[?3h)の処理でウィンドウをリサイズして1行あたりの文字数を変更します。
フォントサイズ・・・
フォントサイズから一行あたりの文字数を計算します
スクリーン左右の
スクリーン左右の余白をピクセル単位で設定します
フォントの縦横比・・・
フォントの縦横比を設定します。
ベルコード(07)・・・
None/Sound/Visual/Bothから選択します
ウィンドウタイトル 
初期値設定
Entry
サーバーエントリー
Host
接続先ホスト名
Port
ホスト名:ポート番号
User
ユーザー名
報告を禁止
CSI 20/21 tでのタイトル名リポートを禁止
変更を禁止
OSC 0/1/2 での変更を禁止
改行コード
受信した改行・・・
0D(CR),0A(LF)の文字コードを受信した時のそれぞれの動作を変更します。
0D(CR))
0A(LF)
CR+LF
キャリッジリターン
(左端に移動)
ラインフィード
(改行、スクロール)
標準の設定
CR
左端に移動して
改行、スクロール
何もしない
0D(CR)コードだけで
CR+LFの動作を行う
LF
何もしない
左端に移動して
改行、スクロール
0A(LF)コードだけで
CR+LFの動作を行う
CR/LF
左端に移動して
改行、スクロール
左端に移動して
改行、スクロール
0D(CR),OA(LF)共に
CR+LFの動作を行う
送信する改行・・・
標準のRETURN(ENTER)キーを押した時に送信するコードを指定します。
CR
0D(CR)のみを送信する
標準の設定
LF
0A(LF)のみを送信する
0D(CR)を0A(LF)に
変換して送信します
CR+LF
0D(CR)と0A(LF)を送信する
0D(CR)を0D(CR)0A(LF)に
変換して送信します
(※RETURNキーに下記のキーコードの割り当てで0D(CR)以外を設定した場合は、動作が変わりますので注意)
3.6 ターミナルのオプション設定
エスケープシーケンス
ESC/CSI/DCS
ESC/CSI/DCSシーケンスを個別に変更します
セット時の...
CSIシーケンスのオプションを個別に設定します
オプション一覧を参照
DECSET/DECRSTで変更できるオリジナルのオプション設定
8400
SGRで空白属性を設定しない
SGRで空白文字属性を設定
SGR(ESC[m)により変更される文字属性を空白文字にも適用します。
この設定は、FreeBSDのcons25の仕様に合わせる物です
8401
行末での遅延改行無効
行末での遅延改行有効
行末で文字表示の自動改行を次の文字表示まで遅らせます
この設定は、FreeBSDのcons25の仕様に合わせる物です
8403
ボールド文字有効
ボールド文字無効
重ね書きでボールド(太文字)を表示します。
ただし字体が崩れて表示されてしまいます
8406
画面のスタックを禁止
画面のスタックが有効
DECSET/DECRST(CSI?47h/l)で現在の画面をスタックに積みます。
8428
Aタイプを半角で表示
Aタイプを全角で表示
UNICODE仕様書のEastAsianWidth.txtでAタイプ(Ambiguous)で定義された文字の表示幅を設定します。フォントによりかなり違いがあります
8437
漢字コードを自動追従
漢字コードを変更しない
漢字コードがエラーを起こした場合に自動で変更します。
エラーを起こすまで変更しないので文字化けは、起こります
8440
ノーマルキーモード
アプリケーションキーモード
DECPNM/DECPAMの設定です
8441
IMEオープン
IMEクロース
8442
(7727)
ESCキーのCKM有効
ESCキーのCKM無効
DECCKMによるキーコードの変更にESCキーを含めます。
本来ESCのキーコードは'\033'だけを返しますがCKM時に'\0330['を返すようにします
8448
UTF-8ノーマライズを禁止
UTF-8ノーマライズを行う
UNICODEの文字変換処理をしないでそのままの形で表示します。
8449
Unicde半角の調整をしない
Unicde半角の調整を行う
一部のフォントで半角・全角になるように調整して表示ます
8451
罫線を文字で表示する
罫線を線で表示する
罫線を線で描画せずにフォントの持つ本来の文字として表示します
8452
Sixel画像の右にカーソル
Sixel画像の下にカーソル
スクロールモード時のSixel画像表示後のカーソル位置を設定します
8453
(8800)
Unicodeマッピング有効
Unicodeマッピング無効
ISO-2022コードセットをUnicode16面にマッピングを有効・無効にします
8454
C1制御文字を無視する
C1制御文字を処理する
C1制御文字(80-9F)を無視する・しない
各種オプション
452
カーソルをIで表示
カーソルを通常表示
カーソルが画面内の場合にIで表示するようにします。
制御コードによるマウスコントロール中には、矢印とIが入れ替わります
453
右クリックでペースト
右クリックでメニュー選択
画面内で右クリックした場合の動作を変更します。
クリップボードオプションの右ダブルクリックの設定と重なります
454
ゴースト表示しない
タブにマウスでゴースト表示
この接続でのゴースト表示を禁止します。
すべて表示しないようにするにはレジストリの変更で可能です
HCU\\Software\\Culti\\RLogin\\TabBar\\GhostWnd=1
455
サイズを表示しない
画面サイズを表示する
画面サイズが変更されると画面中央に横x縦サイズを自動で表示します
表示は、約3秒ほどで自動で消えます
456
イメージを全表示する
イメージを部分表示する
Sixel/Imageを外部ウィンドウで表示する場合の表示方法を選択します
全表示では、上下/左右に余白が表示されます
ESCシーケンス、CSIシーケンスの変更したいリストをダブルクリックするとそれぞれのシーケンスの設定ダイアログが表示されます。ファンクション名の部分を「NOP」にすると何もしなように変更することができます。
例:OSC(ウインドウタイトルの設定・文字色パレットの変更)を禁止する
ESCシーケンス
Code: ]
Func: OSC -> NOP
例:CSIシーケンスをVT520互換に設定する
CSIシーケンス
Code: p
Func: ORGBFAT -> DECSSL
Code: s
Func: SCOSC -> DECSLRM
Code: t
Func: XPWOP -> DECSLPP
Code: u
Func: SCORC -> DECSHTS
Code: v
Func: ORGSCD -> DECSVTS
3.7 ヒストリーのオプション設定
通信ログ
通信ログを・・・
通信ログを指定したファイルに年月日を追加して自動で作成します。ファイル名にChatScriptの「送信文字列の特殊文字」を使用することができます(%E-%D.txtなどが利用できます)
ファイルに保存・・・
ログファイルに記録するモードを選択します
RAW
通信した内容をそのままの形で記録します
CTRL
制御コードを<XX>の形で記録します
CHAR
一部の制御コードと文字を記録します
LINE
行単位で記録し無駄な制御コードを含みませんが通信内容と一致しませんので注意が必要です
ログの文字・・・
ログファイルに保存する漢字コードを選択します
ログの先頭に・・・
行頭に時間を記録します
strftimeのフォーマットを指定できます
ヒストリー
ヒストリーを保存・・・
接続終了時のヒストリーをファイルに保存し次回接続時に復元します。同じエントリーで複数接続した場合は、連番でファイルを自動で作成し管理します。
※2.3.0から文字をUnicodeに変更しました。それ以前の物を復元すると漢字などが化けます
※2.7.2からファイル名にChatScriptの「送信文字列の特殊文字」を使用することができます(%E-%D.txtなどが利用できます
スクロールバック・・・
記録できる行数を設定します(400〜200000行)
あまり多くの行を指定するとメモリを大量に使用し動作が遅くなります。1文字あたり約16バイト消費しますので80桁の場合、1000行で16*80*1000=1280000=約1.3Mバイトです。
トレースログ
トレースログファイル
トレースウィンドウを開くと指定したファイルに即時ログを記録します。このファイル名にも「送信文字列の特殊文字」を使用できます
トレースバック・・・
記録できるトレースウィンドウの行数を指定ます(60-200000)
多く指定すると動作が極度に遅くなりますので注意してください
3.8 クリップボードのオプション設定
クリップボード
左クリック・・・
左クリックの範囲指定するだけで自動でクリップボードに文字列をコピーします。チェックなしでは、範囲指定のみ行います。
※CTRLキーを押すと矩形選択モードになります。
※SHIFTキーを押すと行選択モードになります。
※左右ウインドウ外で行選択モードになります。
右ダブルクリック・・・
クリップボードからのペーストを右ダブルクリックだけで行います。チェックなしでは、右クリックで編集メニューが表示されます
http:で始まる・・・
http:で始まる文字列をコピーすると自動でブラウザを起動します
選択した文字列・・・
コピーした文字列の連続したスペースをタブに変換します。
ワード選択文字
左ダブルクリックでクリップボードにコピーするワード文字列を設定します。ワードと認識するのは、0-9,a-Zとここで指定する記号などの文字と漢字の場合は、ひらがな、カタカナによる簡単な文節です。
URL文字列
自動でブラウザを起動するURL文字列を設定します
制御コードによる・・・
OSC 52 によるクリップボードの読み書きを許可します
3.9 マウス関連のオプション設定
マウスホイール
マウスホイール・・・
マウスのホイールでスクロールする方向や量を指定します
※2.10.9からshift+wheelですべてのウィンドウを同時にスクロールすることができます
アプリモード時・・・ 
キーコードがアプリモードの場合にマウスホイールの動作を上下カーソルキーが押されたようにする動作を禁止します
ヌルヌルを禁止
マウスホイールのヌルヌルした動作を禁止します
マウスイベント
マウス左ボタン
送信するボタン番号を1-6までの番号を選択
マウス右ボタン
送信するボタン番号を1-6までの番号を選択
Shiftキー
Shiftキーのコードをshift,meta,ctrlから選択
Ctrlキー
Ctrlキーのコードをshift,meta,ctrlから選択
ファイルのドラッグ&ドロップ
ドロップ動作
送信するコマンド
アップロード
Non
なし
何もしません
BPlus
bp -d %s\r
コマンドを送信します
※通信の設定でBPlusの自動
起動を有効にする必要があります。
XModem
rx %s\r
コマンドを送信しXModem
アップロードを起動します
Ymodem
rx %s\r
コマンドを送信しYModem
アップロードを起動します
ZModem
rz\r
コマンドを送信しZModem
アップロードを起動します
SCP
scp -t %s
SSH2で接続している場合
のみバックグランドでSCP
を起動しファイルを転送します
※別プロセスで起動する為にカレント
ディレクトリがユーザーホームになり
ますので転送先にご注意ください
Kermit 
kermit -i -r 
コマンドを送信します
※通信の設定でKermitの自動
起動を有効にする必要があります。
3.10 フォントのオプション設定
文字セット
Charcter Set
EUC,SJIS,ASCII,UTF-8の文字セットを切り替えます
GL/GR
現在選択されている文字バンクを変更できます
G0,G1,G2,G3
文字バンクに文字セットを設定します
フォントセット
デフォルトフォント
Font Face Nameのデフォルトです
フォント名の指定がないフォントセットは、デフォルトフォントでの表示を試みます。ただしフォントセット内のWindows Character Setを優先して検索しますのでデフォルトフォントにそのCharacter
Setのフォントが無い場合は、Windowsが適当なフォントを選択して表示します
※すでに登録されたフォントセットをすべて初期化するには、リスト内の右クリックで「初期化する」を選択してください。2.17.4よりVT100セット以外、フォント名は、空白にしました。
Alt.Font
拡張フォントセットの切り換え(ESC[10m-20mにて選択)
新規
新たに設定を追加します
編集
設定の変更を行います
削除
設定を削除します
※GL/GR/G0,G1,G2,G3は、ISO-2022にしたがったエスケープシーケンスで動的に変化します
※Bank94のCode"0"は、VT100グラフィックキャラクターセットとして使用していますがWindowsフォントとして標準では、存在しません。TeraTermに付属する「Tera
Special」などのフォントが別途必要です。
Font Parameter
Font Name
文字バンク設定に使用する任意の名前です
Code
ISO-2022 ESCシーケンスで使用するCODEです
IConv Character Set
iconvでコード変換に使用する名前を選択します
Bank
1バイト文字 94(0x21-0x7E) 96(0x20-0x7F)
2バイト文字 94x94(0x2121-0x7E7E) 96x96(0x2020-0x7F7F)を使用します
Windows Character Set
Windowsのフォント参照するCHARACTER_SET番号を設定します
Font Face Name
Windowsのフォント名を指定します
Font
Windowsのフォントを選択します
Alt.Fonts
拡張フォントセットのフォント名切り換え
※Alt.Fonts 0(ESC[10m)にゴシック体、Alt.Fonts 1(ESC[11m)に明朝体などのフォントを個別に設定することができます
GRバンク用・・・
1バイト文字の場合0x80-0xFFまでの文字をGRバンク用として使用します
Disp Zoom
文字の大きさを基準%で変更します
Disp Offset
文字のベースラインを%で変更します
Font Quality
文字表示の品質を指定します
※Windowsのフォントが選択される条件としては、Windows Character Setの方がFace Nameより優先されるようです。使用するフォントがWindows
Character Setを持っているかが重要のようです。
※2.3.0よりCode,Bank,IConv Chacter Setなどを変更しても次回起動から有効になります。すでに表示されている文字は、変更されませんのでご注意ください。
※2.6.4より半角・全角の区別が無いフォントを強制的に全角コードの文字を倍の横幅で表示するようにしました。フォントによっては、表示が崩れる場合があります。
※2.10.7よりUNICODEのデフォルトフォントをMSゴシックに変更しました。漢字の表示が普通になりますがすべてのUNICODEを表示できません。すべてのコードを表示する場合は、フルセットのUnicodeフォントに変更してください。
Iconv Set 各種漢字コード変換に使用するiconvキャラクターセットを設定します
EUC
EUC-JISX0213,EUCJP,EUCJP-MSから選択
SJIS
SHIFT-JISX0213,SJIS,CP932から選択
ASCII
ISO-2022-JP,ISO-2022-JP-1,ISO-2022-JP-3から選択
UTF-8
UTF-8のみ
漢字コードの変換経路を下記に示します。
キーボード、クリップボード
UNICODE(UTF-16)
各種漢字コードに変換して
サーバーに送信
EUCJP,SJIS,ISO-2022-JP,UTF-8
[Character Set/Iconv Set]
サーバーからの受信
EUC,SJIS,ASCII,UTF-8
[Character Set]
プログラム内部の文字バンクに
漢字コードを変換(*1)
JIS X 0208-1990/JIS X 0212-1990
JIS X 0213-2000.1/JIS X 0213-2000.2
[Character Bank]
すべてUNICODEに
変換をして表示(*2)
UNICODE(UTF-16)
[Fonts Set]
(*1)SJISのみコード変換が行われ漢字コードが変化する場合があります。
(*2)Windowsフォントに変換できないもしくはフォントがインストールされていない場合は、UNICODEに変換を試みて表示を行います。それでも表示できない文字は空白文字になります。
3.11 カラーのオプション設定
Color Set
16色カラーテーブル
オリジナル、スタンダードからカラーセットを選択
色見本をダブルクリックすると変更できます
スライダーでコントラスト(C)、明るさ(B)、色相(H)を変更できます
文字カラー
上の[Color Table]の色見本をドラックすれば設定を変更できます
透明化
ウインドウ全体を半透明します。0で薄くなり255で不透明です
Sleep Time
指定時間、通信が無いとウインドウを透明化します
ガラス効果・・
Vista/Win7でガラス効果でウィンドウを表示します
文字装飾
文字属性を変更できます。
バックグランド画像
バック画面で使用する画像をBMP/JPEGから選択できます
3.12 キーボードのオプション設定
キーコード
ファンクションキーなどのキーコードを設定・編集・削除します
新規
新たに設定を追加します
編集
設定の変更を行います
削除
設定を削除します
Metaキー設定
Windowsで使用するAltキーをMetaキーとして使用できるように個別で設定します。ただしMetaキーのコードは、8ビットコードでは、無くキーコードの前にESCを追加するだけです。
Assign Key String
KeyCode
設定できるキーを選択します
Shift Ctrl Alt
同時に押すキーを選択します
App CKM VT52
それぞれのモード時のコードを設定します
App
DECPAM/DECPNM
ESC = / ESC >
CKM
DECCKM
CSI ? 1 h/l
VT52
DECANM
CSI ? 2 h/l
Assign String
"\xxx"にて制御文字を設定します(例ESC=\033)
スクロール機能として特殊文字が設定できます
$PRIOR ヒストリーを含めたスクロールアップ
$NEXT ヒストリーを含めたスクロールダウン
上記以外に$から始まる文字列(プルダウンで表示)でメニューのショートカットを指定できます。
設定したショートカットは、メニューで確認できます。
例 Alt+V=$EDIT_PASTE
3.13 キーコードのオプション設定
Shift/Alt/Ctrlキーと同時にキーを押した場合にキーコードにパラメータを追加するように設定することができます。
Pn
各キーは、下記のグループで管理されそれぞれにキー名を設定します
キー名は、Assign Key StringダイアログのKeyCodeで使用している名前です
1
modifyCursorKeys
カーソルキー及びエディットキー
2
modifyFunctionKeys
F1-F12のファンクションキー
3
modifyKeypwdKeys
NumLock時のテンキー
4
modifyOtherKeys
Esc/Tab/Bs/Enterキー
5
modifyStringKeys
0-9/A-Zの文字キー
Ps
作成されるキーコードのフォーマットを指定します(Shift + )
-1
追加しません
CSI A / SS3 A
0
状態コードのみ追加
CSI 2 A / SS3 2 A
1
CSIでコード追加
CSI 2 A
2
パラメータ無しの場合に1を追加
CSI 1 ; 2 A
3
CSI >でコード追加
CSI > 1 ; 2 A
modifyKetsがメニューのショート...
Shift/Alt/Ctrl + キーの組み合わせがキーコードの設定でメニューのショートカットして使用していた場合に優先するかどうかを指定します。チェックした場合には、ショートカットを行わずにキーコードを返します
※この設定は、CSI > Pn ; Ps m及びCSI > Pn nで動的に変化します
4.1 Tek40xx/41xxウィンドウ
ファイルメニュー
ファイルに保存
1024x768のGIF/JPEG/PNG/BMPのビットマップに変換して保存します。(W2k用バイナリでは、選択できません)
暫定的にベクトルイメージとしてDXF/TEKファイルに保存することもできます。
閉じる
表示を閉じます(画面は、クリアされません)
編集メニュー
画面のクリア
画面をクリアします
Tek/VTモード切換
文字シーケンスをTekモードとVTモード(通常)に切り換えます
完全にTek41xxに対応していません。gnuplotを「set term tek410x」で使用できる程度の互換性しかありませんのでご注意ください。
4.2 ReGIS/Sixelグラフィック・ウィンドウ
ファイルメニュー
ファイルに保存
1024x768のGIF/JPEG/PNG/BMPのビットマップに変換して保存します。(W2k用バイナリでは、選択できません)
閉じる
表示を閉じます
編集メニュー
コピー
クリップボードに画像をコピーします
画面のクリア
画面をクリアします
※完全にReGISに対応できていません。ご注意ください。(Reportコマンドなどに対応していません)
gnuplotでは、「set term regis」で利用できます。RLogin上のReGISに最適化したgnuplot-4.4.1用のterm/regis.trmのパッチをこちらに置いておきます「regis.trm.patch」
Netpbmなどのコンバーターを使用すれば画像が表示されます。
jpegtopnm tiger.jpg | pnmquant 256 | ppmtosixel
libgdを使ったsixelコンバータのソースファイルです。sixel.tar.gz
sixel [-p MaxPalet] [-tf] [-w width] [-h height] <file name...>
-p MaxPalet
使用するパレット数
-t
随時パレット更新のフルカラーで出力します
※実験的要素が多い実装です
-f
1色だけ塗り潰しでサイズを小さくします
-w width
画像サイズを横サイズ指定で変更します
-h height
画像サイズを縦サイズ指定で変更します
<file name...>
filename.[png|gif|jpg|bmp|six|pnm]
saitohaさんの作られたlibsixelの方が上記のコンバータより高機能で優れています。
https://github.com/saitoha/libsixel
-fオプションの塗りつぶしでサイズを小さくは、arakikenさんの書かれた
「libsixelによるSixel Graphicsへの変換処理について」の3(2)更なる最適化
を参考に実装しました。
gnuplot-4.6.0のterm/gd.trmに対するsixelパッチです。
gnuplot-sixel.tar.gz
4.3 トレースウィンドウ
ファイルメニュー
ファイルに保存
トレースログをファイルに保存します。
閉じる
ウィンドウを閉じます
編集メニュー
コピー
トレースログをクリップボードにコピーします
画面のクリア
トレースログをクリアします
コントロール文字やESCシーケンスなどのログを最大1000ステップまで表示します。
表示された項目を選択するとその時の画面を表示します。またカーソルキー(キー)の項目移動でそれぞれの制御文字の挙動を確認できます。
*トレースバックして表示される画面は、完全にその時と同じに再現されない場合があります。
(画面サイズが違う場合、画面スタック操作、ウィンドウ設定、Tek/Sixel/ReGIS操作など)
4.4 SFTPによるファイル転送
SFTP
アップロード
左(ローカル)の指定されたファイルを右(サーバー)に転送(アップロード)します
ダウンロード
右(サーバー)の指定されたファイルを左(ローカル)に転送(ダウンロード)します
フォルダの作成
新しいフォルダを作成します
ファイルの削除
指定されたファイルを削除します。(複数選択可能)
ファイル名の変更
指定されたファイルの名前を変更します
ファイル属性の変更
指定されたファイルの属性を変更します
ミラーアップロード
左(ローカル)から右(サーバー)に更新日時とサイズを比較して同一でない物のみ転送(アップロード)しローカルに無いファイルを削除します
ミラーダウンロード
右(サーバー)から左(ローカル)に更新日時とサイズを比較して同一でない物のみ転送(ダウンロード)しリモートに無いファイルを削除します
最新の情報に更新
最新のファイル情報に左右共に更新します
転送の中止
転送中のファイルを中断します
ファイルリストの中から右クリックでファイルを選択すると上記の操作メニューが表示されます。また、ファイルリストからファイルをドラック&ドロップするとアップ・ダウンロードされます
TOP | SOFT | LOG | LINK
rlogin/telnet/ssh(クライアント)ターミナルソフト
