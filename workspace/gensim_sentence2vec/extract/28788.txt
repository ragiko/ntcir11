これといった決定的な方法があるわけではなく、プロジェクトや自身の置かれた状況によっても左右されますが、ここでは私が比較的時間に余裕のあるケースで用いている方法をご紹介します。
時間に余裕がない場合に取る手段は、ほぼハッキング/クラッキングとソーシャル・エンジニアリングの領域に入りますので、ここでは伏せておきます。
最初に、対象となるシステム、モジュール、プログラムのエントリーポイントを探し出します。コンピューターは究極的には、プログラムを上から順番に実行することしか出来ないので、プログラム、モジュール、システムの始まりがどこかを特定できれば、そこを起点にデバッガーで実行するなり目視でソースコードを追うなりして内容を確かめることが出来ます。
エントリーポイントの探し方は、プログラムの適当な場所からその呼び出し元を辿ってゆき、Cで言うところのmain関数(Javaではあるクラスのmainメソッド)や、スクリプト言語での関数やプロシージャーの外側部分に到達すれば、だいたいそこがエントリーポイントになります。アプリケーション・フレームワークを使用している場合は、main関数などは隠蔽され(従って普通に呼び出し元を辿っても到達することが出来ない)、代わりにフレームワークが提供するエントリーポイントを使用することになりますので、それらが見つかった時点で探索終了です。どうやってもエントリーポイントに到達できないことがあるかもしれませんが、それはそのプログラムやモジュールがプログラムの実行に直接関係していないもの(例えばデータ・コンテナ)であることを示しています。
以上の作業は、言語や開発環境によっては多くを自動化できます。また、経験に左右される分野でもあり、熟練したプログラマーであれば、エントリーポイントを探す過程でモジュールやシステムの構造をある程度把握してしまうことも多いはずです。
一般に、プログラムやモジュールの名前はそれらの追った役割に合わせて付けられることが多いため、内容を把握するヒントにはなります。特にフレームワークを使用している場合は、そのフレームワークでよく使われている命名規則のようなものがあり、それが各モジュールの性格を決めていますので、その傾向は強くなります。
ただし、大手SIerでメインフレームの案件を多く扱っているようなところでは設計書の管理番号をそのままモジュール名などに採用しているため、名前は全く意味をなしません。全部ではないがモジュール名のプリフィックスに使う場合も多く、このようなケースの場合には古くから参加しているメンバーに名前の意味を問い合わせた方が良いかもしれません。
コメントやドキュメントがないのは、考え方によっては好都合かもしれません。なぜなら、コメントやドキュメントのミスリードにより、逆にプログラムが読めないこともあるからです。コメントもドキュメントもない状況ではそこにあるプログラムがすべてなので。
他人ソースコードの効率的な読み方
