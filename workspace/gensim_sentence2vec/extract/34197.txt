
はじめに
本書は、OCF(Open Cluster Framework)準拠のクラスタリソースエージェントに関して作業をしているすべての開発者、メンテナンス担当者および寄稿者に対するガイドおよびリファレンスとして機能します。本書は、リソースエージェントの構造や一般的機能を説明し、リソースエージェントAPIを説明し、リソースエージェント著者に効果的なヒントやヘルプを提供します。
リソースエージェントとは何?
リソースエージェントは、クライアントリソースを管理する実行ファイルです。クラスタリソースに関しては、「クラスタが管理するものはすべてリソースである」という以外、正式な記述はありません。
クラスタリソースは、IPアドレス、ファイルシステム、データベースサービスおよび仮想マシン全体など多種多様なものとなっています。
誰がまたは何がリソースエージェントを使うのか?
OCF(Open Cluster Framework)に準拠したクラスタ管理アプリケーションなら、いずれのアプリケーションも、本書で説明されているリソースエージェントを使いリソースを管理することができます。本書の執筆時、Linuxプラットフォーム用に2つのOCF準拠クラスタ管理アプリケーションがあります。
Pacemaker :CorosyncおよびHeartbeatクラスタメッセージングフレームワークの両方をサポートするクラスタマネージャ。Pacemakerは、Linux-HAプロジェクトから進化し独立しています。 
RGmanager :Red Hat Cluster Suiteでバンドルされているクラスタマネージャ。これは、Corosyncクラスタメッセージングフレームワークだけをサポートします。 
リソースエージェントはどの言語で記述されているのか?
OCF準拠リソースエージェントは どのような プログラミング言語ででも実装可能です。APIは言語を問いません。しかし、ほとんどのリソースエージェントはshellスクリプトとして実装されています。本ガイドは、主にshell言語で記述されたサンプルコードを使います。
API定義
環境変数
リソースエージェントは、環境変数を通じて、それが管理するリソースのすべての設定情報を受け取ります。これらの環境変数の名前は、常に、 OCF_RESKEY_ という接頭語が付いたリソースパラメータの名前となります。たとえば、リソースが、 192.168.1.1 に設定されている ip パラメータを持っている場合、リソースエージェントは、その値を保持する OCF_RESKEY_ip 環境変数にアクセスできます。ユーザによって設定される必要のないリソースパラメータに対しては、つまり、リソースエージェントメタデータでのそのパラメータ定義は required="true" を指定しませんが、リソースエージェントは以下を行う必要があります。
適切なデフォルトを提供する。これは、メタデータで宣言される必要があります。慣例により、リソースエージェントは、このデフォルトを保持する OCF_RESKEY_<parametername>_default と名付けられた変数を使います。 
あるいは、空値に対して正しく対処する。 
さらに、クラスタマネージャは、 meta リソースパラメータもサポートします。これらは、リソース設定には直接適用されませんが、クラスタリソースマネージャが どのように リソースを管理するかが指定されます。たとえば、Pacemakerクラスタマネージャは、リソースが起動されるべきか停止されるべきかを指定するために、 target-role metaパラメータを使います。
metaパラメータは OCF_RESKEY_CRM_meta_ 名前空間でリソースエージェントに渡されます。(この場合、ハイフンはアンダースコアに変換されます)。したがって、 target-role 属性は OCF_RESKEY_CRM_meta_target_role と名付けられた環境変数にマッピングされます。
アクション
いずれのリソースエージェントも1つのコマンドライン引数をサポートしなければなりません。これは、リソースエージェントが実行しようとしているアクションを指定します。以下のアクションはいずれのリソースエージェントによってサポートされなければなりません。
start — リソースを起動します。 
stop — リソースを停止します。 
monitor — リソースの状態を問合せします。 
meta-data — リソースエージェントメタデータをダンプします。 さらに、リソースエージェントは、以下のアクションをオプションとしてサポートします。 
promote — リソースを Master 役割に変更します(Master/Slaveリソースのみ)。 
demote — リソースを Slave 役割に変更します(Master/Slaveリソースのみ)。 
migrate_to および migrate_from — リソースのライブマイグレーションを実施します。 
validate-all –リソースの設定を検証します。 
usage or help — リソースエージェントがコマンドラインから起動される場合に、クライアントメッセージの代わり使用メッセージを表示します。 
status —  monitor に対する歴史的(旧)同義語。 
タイムアウト
アクションのタイムアウトは、リソースエージェントの範囲外で実施されます。リソースエージェントアクションがどれぐらいの時間実行されているかを監視し、その終了時間にアクションが終了しない場合には、そのアクションを停止するのはクラスタマネージャの責任です。したがって、リソースエージェント自身は、タイムアウトをチェックする必要はありません。しかし、リソースエージェントは、適切なタイムアウト値(正しく設定されれば、クラスタマネージャによって正しく実行される)をユーザに_忠告_することができます。リソースエージェントが、その提案されたタイムアウトをどのように忠告するかについては以下のセクションを参照してください。
メタデータ
それぞれのリソースエージェントは、一連のXML メタデータで自分自身の目的とサポートされているパラメータを記述しなければなりません。このメタデータは、オンラインヘルプに対して、クラスタ管理アプリケーションによって使われ、リソースエージェントのmanページもそれから生成されます。以下は、架空のリソースエージェントからの一連の仮想メタデータです。
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="foobar" version="0.1">
<version>0.1</version>
<longdesc lang="en">
This is a fictitious example resource agent written for the
OCF Resource Agent Developers Guide.
</longdesc>
<shortdesc lang="en">Example resource agent
for budding OCF RA developers</shortdesc>
<parameters>
<parameter name="eggs" unique="0" required="1">
<longdesc lang="en">
Number of eggs, an example numeric parameter
</longdesc>
<shortdesc lang="en">Number of eggs</shortdesc>
<content type="integer"/>
</parameter>
<parameter name="superfrobnicate" unique="0" required="0">
<longdesc lang="en">
Enable superfrobnication, an example boolean parameter
</longdesc>
<shortdesc lang="en">Enable superfrobnication</shortdesc>
<content type="boolean" default="false"/>
</parameter>
<parameter name="datadir" unique="0" required="1">
<longdesc lang="en">
Data directory, an example string parameter
</longdesc>
<shortdesc lang="en">Data directory</shortdesc>
<content type="string"/>
</parameter>
</parameters>
<actions>
<action name="start"        timeout="20" />
<action name="stop"         timeout="20" />
<action name="monitor"      timeout="20"
interval="10" depth="0" />
<action name="reload"       timeout="20" />
<action name="migrate_to"   timeout="20" />
<action name="migrate_from" timeout="20" />
<action name="meta-data"    timeout="5" />
<action name="validate-all"   timeout="20" />
</actions>
</resource-agent>
resource-agent 要素はリソースエージェント毎に1つだけ設定される必要があり、リソースエージェントの name と version を定義します。
resource-agent の longdesc と shortdesc 要素は、リソースエージェントの機能のlong説明とshort説明を設定します。 shortdesc は、リソースエージェントが何をするかの説明(1行)で、通常、簡単なリストで使われます。それに対して longdesc は、リソースエージェントを出来るだけ詳細に説明します。
parameters 要素はリソースエージェントのパラメータを説明し、リソースエージェントがサポートするそれぞれのパラメータに対し て parameter 要素をいくつも持ちます。
それぞれの parameter は、全体的に resource-agent のように、 shortdesc と longdesc と共に設定され、また、パラメータの期待される内容を記述す る content 要素と共に設定されます。
content 要素では、4種類の属性が設定されます。
type はパラメータタイプ( string , integer , boolean )を設定します。デフォルト: string 
required はパラメータ設定が必須( required="true" )であるかオプション( required="false" )であるかを設定します。 
オプションパラメータに関しては、default属性を通じて適切なデフォルトを提供してください。 
最後に、 unique 属性(許容値: true 、 false )は、この特定のリソースタイプのこのパラメータに対してその特定値がクラスタ全体で一意となる必要があることを示します。たとえば、特に多く使われるフローティングIPアドレスは unique として宣言され、1つのIPアドレスは、クラスタを通じて1回しか使用できません。 
actions リストは、リソースエージェントが「サポートされている」と宣伝するアクションを定義します。
それぞれの action は、自分自身の timeout 値をリストします。これは、アクションに対してどのような_最小_タイムアウトが設定されるべきかというユーザに対するヒントとなります。これは、特定のリソース(例:IPアドレスやファイルシステム)はすばやく起動/停止できたり、他のリソース(例:データベース)は数分かかったりするのに対応するためです。
さらに、繰り返しアクション(例: monitor )は、最低推奨 interval も指定する必要があります。 interval は、同じアクションが2回続けて起動される場合の間隔を指定します。 timeout のように、この値はデフォルト設定できません。これは、どのような最低アクション間隔を設定すればいいかというユーザへのヒントにすぎません。
戻り値
アクションが起動されたら、リソースエージェントは、定義された戻り値で終了しなければなりません。戻り値は、起動されたアクションの結果を呼出側に通知します。戻り値は以下の項で詳細が説明されています。
OCF_SUCCESS (0)
アクションは正しく終了しています。これは、正しく終了したアクション( start , stop , promote , demote , migrate_from , migrate_to , meta_data , help および usage )に対する戻り値となります。しかし、 monitor ( status :旧エイリアス)に関しては、変更された規定が適用されます。
primitive (stateless)リソースに関しては、 monitor からの OCF_SUCCESS は、リソースが実行されていることを意味します。実行されておらず正しく停止されたリソースは、 OCF_NOT_RUNNING を返す必要があります。 
master/slave (stateful)リソースに関しては、 monitor からの OCF_SUCCESS は、リソースが Slaveモードで 実行されていることを意味します。Masterモード実行されているリソースは OCF_RUNNING_MASTER を返す必要があり、正しく停止されたリソースは OCF_NOT_RUNNING を返す必要があります。 
OCF_ERR_GENERIC (1)
アクションは汎用エラーを返しています。以下に定義された具体的なエラーコードが、いずれも問題を記述していない場合にのみ、リソースエージェントこの終了コードでアクションを終了する必要があります。
クラスタリソースマネージャは、この終了コードを_ソフト_エラーとして解釈します。これは、具体的に設定されていない限り、リソースマネージャは、同じノードのリソースを再起動することによってインプレース のOCF_ERR_GENERIC で失敗したリソースをリカバリしようとします。
OCF_ERR_ARGS (2)
リソースエージェントは正しくない引数で起動されました。これは、「あってはならない」エラーに対する安全策で、リソースエージェントは、たとえば、正しくない数のコマンドライン引数で起動されたような場合にのみに返すべきです。
OCF_ERR_UNIMPLEMENTED (3)
リソースエージェントは、エージェントが設定していないアクションを実行するよう指示されました。
すべてのリソースエージェントが必須となっているわけではありません。リソースエージェントはそれらを設定しているかしていな いpromote , demote , migrate_to , migrate_from および notify はすべてオプショナルのアクションです。non-statefulリソースエージェントが、たとえば、まちがってmaster/slaveリソースに設定された場合、リソースエージェントは、 promote および demote アクションで、 OCF_ERR_UNIMPLEMENTED を返してこの設定エラーについてユーザに警告するべきです。
OCF_ERR_PERM (4)
アクションは、不十分なアクセス権限により失敗しました。これは、エージェントが特定のファイルを開くことができなかったり、特定のソケットでlistenできなかったり、ディレクトリに書き込みができなかったりしたことによるものです。
クライアントリソースマネージャは、この終了コードを _ハード_エラーとして解釈します。この場合、具体的に設定されていないかぎり、リソースマネージャは、異なるノード(アクセス権限に関する問題がない)でリソースを再起動することにより、このエラーで故障したリソースをリカバリしようとします。
OCF_ERR_INSTALLED (5)
アクションは、それが実行されたノードに必要コンポーネントがなかったために失敗しました。これは、必要バイナリが実行可能ではなかった、あるいは、重要な設定ファイルが「読めない」ことによるものです。
クラスタマネージャは、この終了コードを ハード エラーとして解釈します。
この場合、具体的に設定されていないかぎり、リソースマネージャは、異なるノード(必要ファイルやバイナリがある)でリソースを再起動することにより、このエラーで故障したリソースをリカバリしようとします。
OCF_ERR_CONFIGURED (6)
アクションは、ユーザがリソースを正しく設定しなかったために失敗しました。たとえば、ユーザが、整数パラメータに英数字文字列を設定したような場合です。
クラスタリソースマネージャは、この終了コードを 致命的 エラーとして解釈します。これはクラスタ全体の設定エラーであるため、インプレースのノードではもちろんのこと、異なるノードでそのようなリソースをリカバリするのは意味がありません。リソースがこのエラーで故障すると、クラスタマネージャは、リソースを停止しようとし、管理者の介入を待ちます。
OCF_NOT_RUNNING (7)
リソースは実行されていないことが判明しました。これは、 monitor アクションのみによって返される終了コードです。
OCFリソースエージェント開発者ガイド « Linux-HA Japan
