PIC24FJ64による、C言語によるROMボイス再生
PIC24FJ64GA002で音声を録音再生すると、1.2秒ぐらいの再生時間になってしまいます。RAMが6kBしかないためなのですが、音声データをためておくには、ROMに書き込んでおく方法もあります。予め、他の機器で録音し、データとしたものを定数配列の初期値データとしておいて、これをサンプリング間隔ごとに読み出して、PWMへ送り出すことになります。録音データを準備しているうち、USBフレームワークのオーディオマイクの例題に音声データがあることが分かり、サンプリングなどをあわせて再生してみました。
USBフレームワークスのMCHPFSUSBには、USBのアプリケーションとして、USB接続のオーディオマイクの動作を試すことができるものがあります。実際にマイクをつなぐのではなく、ROM内に記録した音声データをマイクの音声としてパソコンに送るものです。
音声データは、16ビット、8kHzサンプリングのモノラルのPCMデータで、「ハロー」と再生されます。
いままで製作してきた音声は、10kHzサンプリングの8ビットデータなので、対応する必要がありましたが、データが、PCMということで、符号付のバイナリデータなので利用できそうでした。
サンプリング間隔を8kHzに変更し、16ビットの符号付データを32768を加えることでオフセットを与えて、符号なしで扱えるようにしました。16ビット音声データのうち、上位8ビットのみを取り出してPWMのデューティを決定するレジスタに書き込みます。
再生のみなので、タイマを125μS(8kHz)に設定し、その間隔で、ROMを読み出して再生することが出来ますが、いままでのプログラムの枠のままで、AD変換割り込みを125μSにあわせて、その処理の中で出力しました。
「ハロー」という音声は、2秒以下の再生時間ですが、ROMの使用量は4分の1程度なので、10秒ぐらいの再生が出来ると思います。また、データは、16ビットとして用意されていますが、実際使用しているのは半分の8ビットなので、更に節約できます。
16ビットのオーディオマイクで聞いた音に較べ、8ビットのPWMでは、すこし「湿った」音がしました。下位8ビットを削っているので、微妙に変化する分がなくなっているからだと思います。
録音用装置を作れば、短い音声の再生専用の回路が出来ると思います。
このプログラムは、下記のホームページからダウンロードできます。
「趣味のホームページ」−「電子工作」−「PICのプログラム」−「PIC24FJ64ライブラリ、ROMボイス再生」
http://homepage2.nifty.com/sfukuda/page150.html
PIC24FJ64による、C言語によるROMボイス再生 趣味のブログ/ウェブリブログ
