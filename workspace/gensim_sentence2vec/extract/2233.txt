本連載では、Oracleデータベースのパフォーマンス・チューニングの中から、特にSQLのチューニングに注目して、実践レベルの手法を解説する。読者はOracleデータベースのアーキテクチャを理解し、運用管理の実務経験を積んでいることが望ましい。対象とするバージョンは現状で広く使われているOracle9iの機能を基本とするが、Oracle 10gで有効な情報も随時紹介していく。(編集局)
連載目次
前回「索引を作成したのにパフォーマンスが悪いケース」では、索引を使用するためのSQLの記述方法や、索引を使用した検索時の注意点について説明しました。今回は、索引を利用した検索速度をさらに向上させるテクニックとして、複合索引(コンポジット索引)を利用する方法を説明します。
複合索引(コンポジット索引)の使用
複合索引とは、複数の列を指定した索引で、SQLでWHERE条件に指定する列が決まっている場合や、選択性が低い複数の列を組み合わせることで選択性を高めることができる場合に使用します。
ここで、B*Tree索引の構造を思い出してください。第2回「SQLチューニングの必須知識を総ざらい(前編)Page 2 索引スキャン」の「図6 B*Tree索引スキャン」で説明したように、B*Tree索引のリーフブロックには索引列のデータが格納されています。複合索引の場合も、指定したすべての索引列のデータがリーフブロックに格納されます。
そのため、OracleではSQLで必要とされるすべての列(WHERE条件列、参照列)が索引に含まれている場合、表にアクセスすることなく、索引へのアクセスのみで処理を完了することができます。つまり、複合索引をうまく利用することで、表へのアクセスを排除し、処理速度を大幅に向上できる場合があります。
Oracle SQLチューニング講座(8):複合索引(コンポジット索引)が有効なケース (1/3) - @IT
