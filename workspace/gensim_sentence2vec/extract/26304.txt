
ユーザが(投票や更新のために)ボタンをクリックしたら、以下の関数が呼び出されます。
vote_changed(old_vote, new_vote); // 投票は"Up"・"Down"・"" のいずれか
関数の処理では、「old_vote」と「new_vote」のすべての組み合わせを考慮して、scoreを更新しています。
var vote_changed = function (old_vote, new_vote) {
var score = get_score();
if (new_vote !== old_vote) {
if (new_vote === 'Up') {
score += (old_vote === 'Down' ? 2 : 1);
} else if (new_vote === 'Down') {
score -= (old_vote === 'Up' ? 2 : 1);
} else if (new_vote === '') {
score += (old_vote === 'Up' ? -1 : 1);
}
}
set_score(score);
};
短いコードですが、いろんなことをやっています。難しいところがたくさんあるので、「エラー」「タイポ」「バグ」があっても一目見ただけではわかりません。
このコードはたった1つのこと(スコアを更新すること)をしているように見えて、実際には、一度に以下の2つのタスクを行っています。
「old_vote」と「new_vote」を数値に「パース」する。
「score」を更新する。
だから、理解しにくいのです。
どうすれば?
一つ一つのタスクを小さくします。
上述例であれば、2 つのタスクを別々に解決すれば、読みやすいコードになります。以下のコードは、最初のタスク(投票を数値にパースする)を解決したものです。
var vote_value = function (vote) {
if (vote === 'Up') {
return +1;
}
if (vote === 'Down') {
return -1;
}
return 0;
};
次のコードは、2つめのタスク(スコアの更新)を解決しています。
var vote_changed = function (old_vote, new_vote) {
var score = get_score();
score -= vote_value(old_vote); // 古い値を削除する
score += vote_value(new_vote); // 新しい値を追加する
set_score(score);
};
新しいコードは、一目見ただけで正しく動きそうです。これが「コードを楽に理解できるようにする」ということです。
Permalink | コメント(0) | トラックバック(0) | 06:59   
一度に一つ:タスクは小さく - Strategic Choice
