
クラスの継承リスト: Vector
< Object
< Kernel
要約
数 Numeric を要素とするベクトルを扱うクラスです。
Vector オブジェクトは Matrix オブジェクトとの演算においては列ベクトルとして扱われます。
ベクトルの要素のインデックスは 0 から始まることに注意してください。
Complexクラスとの併用 Working with Complex class
require 'complex' することによって、
Vector オブジェクトの要素は Complex クラスに拡張されます。
多くのメソッドは、この拡張されたVectorクラスでも、期待通りに動作します。
次の例は、各要素を共役複素数に置換するメソッド (Vector#conjugate)です。
require 'matrix'
require 'complex'
class Vector
def conjugate
collect{|e| e.conjugate }
end
end
v1 = Vector[Complex(1,1),Complex(2,2),Complex(3,3)]
v2 = v1.conjugate
p v2 #=> Vector[Complex(1,-1),Complex(2,-2),Complex(3,-3)]
v3 = v1+v2
p v3 #=> Vector[Complex(1,0),Complex(2,0),Complex(3,0)]
しかし、Complex 要素に拡張された Vector クラスで、
期待通りに動作しないメソッドもあります。
例えば、ベクトルの絶対値を求める Vector#r メソッドは、
各要素の2乗和の平方根 Math.#sqrt を求めますが、
このとき例外を発生させる可能性があります。
複素数を要素とするベクトルの絶対値を求めるためには、
各要素の絶対値の2乗和をとらなくてはなりません(次の例 Vector#absメソッド)。
require 'matrix'
require 'complex'
class Vector
def abs
r=0
@elements.each{|e| r += e.abs2 }
Math.sqrt(r)
end
end
v = Vector[Complex(1,1),Complex(2,2),Complex(3,3)}
p v.abs #=> 5.291502622 # Math.sqrt(28)
p v.r   #=> 'sqrt': undefined method `Rational'
目次
特異メソッド
[]
elements
インスタンスメソッド
*
+
-
==
eql?
[]
clone
collect
map
collect2
covector
each2
hash
inner_product
inspect
map2
r
size
to_a
to_s
特異メソッド
self[*a] -> Vector[permalink][rdoc]
可変個引数を要素とするベクトルを生成します。
Vector[a1, a2, a3, ... ]としたとき、 引数a1, a2, a3, ... を要素とするベクトルを生成します。
[PARAM] a:
ベクトルの要素
例:
v1 = Vector[1, 3, 5, 7]
v2 = Vector[5.25, 10.5]
p v1   #=> Vector[1, 3, 5, 7]
p v2   #=> Vector[5.25, 10.5]
elements(a, copy = true) -> Vector[permalink][rdoc]
配列 a を要素とするベクトルを生成します。
ただし、オプション引数 copy が偽 (false) ならば、複製を行いません。
[PARAM] a:
Vectorを生成する際の要素の配列
[PARAM] copy:
引数の配列 a のコピーをするかどうかのフラグ
例:
a = [1, 2, 3, 4]
v1 = Vector.elements(a, true)
v2 = Vector.elements(a, false)
p v1        #=> Vector[1, 2, 3, 4]
p v2        #=> Vector[1, 2, 3, 4]
a[0] = -1
p v1        #=> Vector[1, 2, 3, 4]
p v2        #=> Vector[-1, 2, 3, 4]
インスタンスメソッド
self * other -> Vector[permalink][rdoc]
self の各要素に数 other を乗じたベクトルを返します。
[PARAM] other:
self の各要素に掛ける Numeric オブジェクトを指定します。
例:
a = [1, 2, 3.5, 100]
v1 = Vector.elements(a)
p v1.*(2)     #=> Vector[2, 4, 7.0, 200]
p v1.*(-1.5)  #=> Vector[-1.5, -3.0, -5.25, -150.0]
self * m -> Matrix[permalink][rdoc]
自分自身を列ベクトル(行列)に変換して (実際には Matrix.column_vector(self) を適用) から、行列 m を右から乗じた行列 (Matrix クラス) を返します。
[PARAM] m:
右から乗算を行う行列
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
次元が合わない場合に発生します
注意
引数の行列 m は自分自身を列ベクトルとした場合に乗算が定義できる行列である必要があります。
例:
require 'matrix'
v = Vector[1, 2]
a = [4, 5, 6]
m = Matrix[a]
p v * m #=> Matrix[[4, 5, 6], [8, 10, 12]]
self + v -> Vector | Matrix[permalink][rdoc]
self にベクトル v を加えたベクトルを返します。
v には column_size が 1 の Matrix オブジェクトも指定できます。
その場合は返り値も Matrix オブジェクトになります。
[PARAM] v:
加算するベクトル。加算可能な行列やベクトルを指定します。
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
self - v -> Vector | Matrix[permalink][rdoc]
self からベクトル v を減じたベクトルを返します。
v には column_size が 1 の Matrix オブジェクトも指定できます。
その場合は返り値も Matrix オブジェクトになります。
[PARAM] v:
減算するベクトル。減算可能な行列やベクトルを指定します。
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
self == v -> bool[permalink][rdoc]
eql?(v) -> bool
自分自身と引数 v を比較し、true/false を返します。
[PARAM] v:
比較対象ベクトル
self[i] -> object | nil[permalink][rdoc]
i 番目の要素を返します。インデックスは 0 から開始します。
要素が存在しないインデックスを指定した時には nil を返します。
[PARAM] i:
取得する要素のインデックスを整数値で指定します。
インデックスは 0 から始めます。
clone() -> Vector[permalink][rdoc]
自分自身をコピーしたベクトルを返します。
collect {|x| ... } -> Vector[permalink][rdoc]
map {|x| ... } -> Vector
ベクトルの各要素に対してブロックを評価した結果を、要素として持つベクトルを生成します。
例:
a = [1, 2, 3.5, -10]
v1 = Vector.elements(a)
p v1 #=> Vector[1, 2, 3.5, -10]
v2 =  v1.map{|x|
x * -1
}
p v2 #=> Vector[-1, -2, -3.5, 10]
collect2(v) {|x, y| ... } -> Array[permalink][rdoc]
ベクトルの各要素と引数 v の要素との組に対してブロックを評価し、その結果を要素として持つ配列を返します。
ベクトルの各要素と、それに対応するインデックスを持つ引数 v (ベクトル or 配列)の要素との組に対して (2引数の) ブロックを評価し、その結果を要素として持つ配列を返します。
[PARAM] v:
ブロック内で評価される(ベクトル or 配列)
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
[SEE_ALSO] Vector#map2
次の例は、2つのベクトルの要素毎の積を要素とする配列を生成します。
例:
require 'matrix'
v1 = Vector[2, 3, 5]
v2 = Vector[7, 9, 11]
a = Array[7, 9, 11]
z = v1.collect2(v2){|x, y| x * y }
p z #=> [14, 27, 55]
z = v1.collect2(a) {|x, y| x * y } # ArrayでもOK
p z #=> [14, 27, 55]
covector -> Matrix[permalink][rdoc]
Matrix オブジェクトへ変換します。
列ベクトル (行列)、すなわち、(n, 1) 型の行列に変換します。
実際には Matrix.row_vector(self) を適用します。
例:
require 'matrix'
v = Vector[2, 3, 5]
p v #=> Vector[2, 3, 5]
m = v.covector
p m #=> Matrix[[2, 3, 5]]
each2(v) {|x, y| ... } -> self[permalink][rdoc]
ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。
v は配列互換(size メソッドと [] メソッドを持つ)オブジェクトです。
Vector も使えます。
[PARAM] v:
各要素と組を取るためのオブジェクト
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
[SEE_ALSO] Array#zip
hash() -> Fixnum[permalink][rdoc]
自分自身のハッシュ値を返します。
inner_product(v) -> Float[permalink][rdoc]
ベクトル v との内積を返します。
[PARAM] v:
内積を求めるベクトル
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
inspect() -> String[permalink][rdoc]
オブジェクトの内容を文字列化します。
map2(v) {|x, y| ... } -> Vector[permalink][rdoc]
ベクトルの各要素と引数 v の要素との組に対してブロックを評価し、その結果を要素として持つベクトルを返します。
ベクトルの各要素と、それに対応するインデックスを持つ引数 (ベクトル or 配列) の要素との組に対して (2引数の) ブロックを評価した結果を、要素として持つベクトルを返します。
[PARAM] v:
ブロック内で評価される(ベクトル or 配列)
[EXCEPTION] ExceptionForMatrix::ErrDimensionMismatch:
自分自身と引数のベクト
ルの要素の数(次元)が異なっていたときに発生します。
[SEE_ALSO] Vector#collect2
次の例は、2つのベクトルの要素毎の積を要素として持つベクトルを生成します。
例:
require 'matrix'
v1 = Vector[2, 3, 5]
v2 = Vector[7, 9, 11]
a = Array[7, 9, 11]
z = v1.map2(v2) {|x, y| x * y }
p z #=> Vector[14, 27, 55]
z = v1.map2(a) {|x, y| x * y } # ArrayでもOK
p z #=> Vector[14, 27, 55]
r -> Float[permalink][rdoc]
ベクトルの大きさ(ノルム)を返します。
ただし、要素の自乗和の平方根(Math.sqrt)を計算しているので、
複素ベクトルの場合は一般に正しい値(要素の絶対値自乗の和の平方根)
を返しません。
Vector[3, 4].r # => 5.0
Vector[Complex(0, 1), 0].r # => Complex(0.0, 1.0)   正しくは 1.0
要素が複素数の場合にも対応したメソッドは以下のように定義できます。
class Vector
def norm
Math.sqrt @elements.inject(0){|sum, z| sum+(z*z).abs}
end
end
Vector[Complex(0, 1), 0].norm # => 1.0
size() -> Fixnum[permalink][rdoc]
ベクトルの要素数(次元)を返します。
to_a -> Array[permalink][rdoc]
ベクトル(Vector)から配列 (Array) に変換します。
例:
require 'matrix'
v = Vector[2, 3, 5, 7, 9]
a = v.to_a
p a #=> [2, 3, 5, 7, 9]
to_s -> String[permalink][rdoc]
ベクトル(Vector)から文字列 (String) に変換します。
例:
require 'matrix'
v = Vector[2, 3, 5, 7, 9]
s = v.to_s
p s #=> "Vector[2, 3, 5, 7, 9]"
class Vector
