前回はエンティティ・オブジェクトに作成されたsetterメソッドにカスタム・コードを記述して属性値を計算し、一時属性に値をセットする方法を説明しましたが、見方を変えればアプリケーションのデータが満たすべきビジネス・ルールを実装したと捉えることもできます。BC4Jでは前回のようにコーディングによってビジネス・ルールを実装できる一方で、事前に定義された一般的なビジネス・ルールをコーディングなしで宣言的に利用することも可能です。今回はBC4Jでビジネス・ルールを実装する方法について説明します。
ビジネス・ルールと一口にいっても様々な種類がありますが、ここでは「あるデータが満たすべき条件」として限定して説明を進めます。そのように限定したとしても枚挙に暇がありませんが、例えば以下のようなものが考えられます。
給与を表す数値データがある範囲内にあるかどうか
E-mailアドレスを表す文字列データが正しいフォーマットかどうか
職種のデータを使用して給与のデフォルト値を設定したい
入力された所属部門番号が実際に存在する番号かどうか
入社日の日付が未来の日付になっていないかどうか
ここで挙げたようなビジネス・ルールをアプリケーションに適用する場合、ビジネス・ルールを実装できる場所には様々ありますが、当然ビュー層やクライアント層ではなくモデル・コンポーネント内にカプセル化して実装するべきです。
BC4Jではこのようなビジネス・ルールはエンティティ・オブジェクトにカプセル化して実装します。前回までに説明したように、クライアント側に公開される複数種類のビュー行は同じエンティティ・オブジェクトをベースにすることが可能なため、そのようにエンティティ・オブジェクトにビジネス・ルールをカプセル化しておけば、ビュー行ごとにビジネス・ルールを実装する手間を省くことができ、またビジネス・ルールを変更する際にも1ヶ所だけの変更だけで済ませることができます。
エンティティ・オブジェクトへのビジネス・ルールの実装方法には以下の3通りの方法があります。
実装方法
コーディング
特長
エンティティ・オブジェクトにコーディング
必要
他の属性の操作も含む最も柔軟な処理が可能
検証規則を使用
不要
宣言的な使用が可能
ドメインを使用
必要
作成したビジネス・ルールの再利用が可能
これらの手法は、実装するビジネス・ルールの複雑さの程度や、再利用を可能にするかどうかなどで使い分けることができます。次のセクションから具体的な使用方法を見ていきましょう。
ここではエンティティ・オブジェクトに直接コーディングすることによってビジネス・ルールを実装する方法を説明します。準備として以下のようなBC4Jコンポーネントを作成しておきましょう。
Empエンティティ・オブジェクト
SCOTTスキーマのEMP表に基づくエンティティ・オブジェクト。使用する属性はEmpno、Ename、Job、Sal、Commの5つ。
EmpViewビュー・オブジェクト
Empエンティティ・オブジェクトをベースにするビュー・オブジェクト。Empエンティティ・オブジェクトの属性はすべて組込んでおきます。
SampleModuleアプリケーション・モジュール
EmpViewをデータモデルとして持つアプリケーション・モジュール。EmpViewのインスタンス名は「EmpView」。
作成される拡張クラスやデータ型などの設定はデフォルトのままで構いません。JDeveloperのシステム・ナビゲータには、作成したコンポーネントが以下のように表示されます。
ここでは、Empエンティティ・オブジェクトに次の2つのビジネス・ルールを実装します。
職種(Job属性)を変更する際に、職種に応じて給与(Sal属性)のデフォルト値を同時に設定する
名前(Ename属性)は1文字以上8文字以下の大文字アルファベットである必要がある
前回は一時属性値を計算し設定するため、エンティティ・オブジェクトに作成された属性のsetter/getterメソッドを使用してコーディングを行いましたが、それを覚えている方であれば大体のイメージはつかめるのではないかと思います。
まずは1番目のビジネス・ルールを実装します。Empエンティティ・オブジェクトのソース・ファイル(EmpImpl.java)を開き、以下に示すように職種に応じた給与のデフォルト値を返すgetDefaultSal()メソッドを作成し、それをsetJob()メソッドからコールするようにコーディングを行います。
次に2番目のビジネス・ルールを実装します。setEname()メソッドを以下のように変更し、名前の長さが1文字以上8文字以下の大文字アルファベットという条件を満たさない場合にoracle.jbo.JboExceptionをスローするようにコーディングします。oracle.jbo.JboExceptionはjava.lang.RuntimeExceptionの拡張クラスなので、メソッドシグネチャにthrows節は必要ありません。
ここではビジネス・ルールを満たさなかった場合にJboExceptionをスローするようにしました。JboExceptionはBC4Jで使用されるすべての例外クラスの親クラスであるため汎用的に使用することができますが、その他にも様々なエラー処理方法があります。例えばJboExceptionを拡張した定義済みの例外クラスを使用する方法や、JboExceptionを拡張したアプリケーション独自の例外クラスを作成して使用する方法、またはエラーコード(すなわちメソッドの戻り値)を使用してエラー処理を行う方法などがあります。BC4Jにおけるエラー処理の詳細については、オンラインヘルプの以下のトピックを参照してください。
ビジネス・コンポーネントの開発
エンティティ・オブジェクト、Associationおよびデータベース表の使用
エンティティ・オブジェクトとAssociationの作成および変更
ビジネス・コンポーネント・アプリケーションにおけるエラー処理方法
上で挙げた2つのビジネス・ルールの実装はこれで完了です。それではこれまでと同様にBusiness Component Browserを使用して動作をテストしてみましょう。
Business Component BrowserでEmpViewのデータを表示したら、Job属性をCLERK,
SALESMAN, ANALYST, MANAGER, PRESIDENTのいずれかに変更し、カーソルを別のフィールドに移動してみます。
カーソルを移動すると、ビュー行のsetAttribute()メソッドを経由してエンティティ・オブジェクトsetJob()メソッドがコールされ、そこに記述されたビジネス・ルールによって、職種に応じた給与のデフォルト値がSal属性にセットされます。
次にEname属性が小文字を含むように変更し、同様にカーソルを別のフィールドに変更してみます。
カーソルを移動するとsetEname()メソッドに記述したビジネス・ルールによってJboExceptionがスローされ、Business
Component Browserによってエラーを示すダイアログが表示され、設定したメッセージが表示されます。
[OK]をクリックしてエラーダイアログを閉じ、カーソルがEnameフィールドにある状態で[Esc]ボタンを押すと変更前のデータに戻ります。設定したビジネス・ルールを満たすようにEname属性を設定し、左上のコミットボタンをクリックしてトランザクションをコミットします。
ここではBusiness Component Browserを使用したためビジネス・ルールからスローした例外がエラーダイアログの形で示されましたが、アプリケーションのビジネス・ロジックからこのようなビジネス・ルールを含むメソッドをコールする場合は、try-catchを使用して適切に例外処理を行う必要があります。StrutsのようなWebアプリケーションを例にした場合、属性の変更中に例外が発生したらトランザクションをロールバックして入力画面に戻って正しい入力を促す、といった例外処理が考えられます。
職種別に給与のデフォルト値を取得するためのgetDefaultSal()メソッドを作成しましたが、エンティティ・オブジェクトのソースファイルに職種名をハード・コードしている点が気になるかもしれません。ソースにハード・コードしているため、新しい職種を追加したい場合やデフォルト値を変更したい場合はクラスの再コンパイルが必要になります。しかし、エンティティ・オブジェクトのプロパティ設定を使用すると、このようなデータをエンティティ・オブジェクトの定義ファイルに外部定義することができ、その結果再コンパイルの必要がなくなります。
エンティティ・オブジェクトのプロパティ値を設定するにはエンティティ・オブジェクトの編集画面を使用します。システム・ナビゲータでEmpエンティティ・オブジェクトを右クリックし、[Empの編集]を選択します。編集ダイアログで[プロパティ]画面を表示し、以下のように新しいプロパティを作成して[追加]ボタンをクリックします。
名前:DEFAULT_SAL_LIST
値:CLERK=1000,SALESMAN=2000,ANALYST=2000,MANAGER=3000,PRESIDENT=5000
[OK]をクリックして編集ダイアログを閉じ、Empエンティティ・オブジェクトの定義ファイルであるEmp.xmlをダブルクリックして開くと、作成したプロパティのエントリが追加されていることが確認できます(実際には改行されていません)。
アプリケーションが運用段階に入った後にはこのプロパティを直接編集することで、再コンパイルすることなしにビジネス・ルールの動作を変更することが可能になります。JDeveloperのエディタからはこのファイルを直接編集することはできません。開発時にプロパティを変更するにはここでの操作と同様にエンティティ・オブジェクトの編集ダイアログを使用します。次に、このプロパティを使用して給与のデフォルト値を取得するようにgetDefaultSal()メソッドを以下のように変更します。
再度コンパイルしてBusiness Component Browserでテスト実行してみると、先のセクションと同様に職種ごとの給与のデフォルト値が自動で設定されることが確認できます。
OTN Japan - J2EE データアクセス・コンポーネントの開発:ビジネス・ルールの実装1
