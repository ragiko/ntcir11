   各データ型のビット形式については、一般のコンピュータ知識の範疇にあたるので詳細は省略しますが、いくつかの C# の特徴的な点をふまえて補足します。  なお、上記の表で「型(タイプ)」の欄に書かれた名称は、C# のキーワード(予約語)であり、この後の 2-2-2 「変数の宣言」で使用します。また、表にある「値型」と「参照型」の分類の意味は、2-3 「値型と参照型」で説明します。 整数について   C# の整数は、「符号あり」と「符号なし」の 2 種類があります。そのバイト長が異なる 4 種類のデータ型があります。  
浮動小数点  小数点をともなう計算では、浮動小数点、または decimal (次項で説明)を使うことになります。C# の浮動小数点は、IEEE754 準拠の浮動小数点であり、一般的なプログラミング言語で利用されています。   IEEE の浮動小数点では、± 1.m × 2n または± 0.m × 2n と表記できる値について、符号、仮数( m の部分)、指数( n の部分)をビットの並びとして記憶します。IEEE に限らず、一般的に浮動小数点の小数部分の扱いでは、特に 10 進数表記とは異なるので注意が必要です。   10 進数では、小数点第 1 位が 10 分の 1、第 2 位が 100 分の 1 となりますが、浮動小数点の仮数( m の部分)は、あるビットが 2 分の 1、その下位のビットが 4 分の 1、さらに下位が 8 分の 1 となります。そのため、10 進数の小数が浮動小数点で正確に表されるとは限りません。この誤差を、浮動小数点の「丸め誤差」といいます( IEEE 浮動小数点の正確なビット表現は、値の範囲によって多少変化します。また、「正の無限大」や「負の無限大」、「数でない値」などが定義されています。正確なビット表現は関連ドキュメントを参照してください)。  さらに浮動小数点では、表 2-1 の float なら有効数字が 7 桁、double なら有効数字は 15 桁～ 16 桁程度と、有効桁数が限られています。そのため、財務計算などの大きな額の計算には向きません。桁数の大きい金額の計算には、次に説明する decimal を使います。  decimal   decimal は、金額が大きい財務計算に向いたデータ型です。有効数字は、28 桁～ 29 桁です。  また、小数点も扱うことができます。decimal は、± m × 10n で表すデータをビットとして記憶しています。m は、0 ～ 296-1 の範囲の整数、n は− 28 ～ 0 の範囲です。指数( n の部分)がマイナスになるので、小数点も表すことができます。  ただし、浮動小数点と違い、指数の対象となる数(底)は、2 ではなく 10 です。また仮数にあたる部分( m の部分)は、小数ではなく整数です。つまり、浮動小数点のように、小数部分が 2 分の 1、4 分の 1、8 分の 1 という値の組み合わせではなく、10 進数を想定した表現になっています。そのため、浮動小数点で起こる「丸め誤差」は、decimal には発生しません。 文字の扱い   char 型は、1 文字データを扱うデータ型です。このデータは、Unicode 文字であり、見た目が全角・半角に限らず、常に 2 バイト長です。このデータを表記するときは、シングルコーテーション( ' ' )でデータをくくります。   string 型は、可変長の文字列を扱うときのデータ型で、これも Unicode 文字列です。このデータを表記するときは、ダブルコーテーション(" ")を使います。  この文字列データも .NET Framework の Common Type System に準拠したものですが、.NET Framework では実行時の文字列操作は、Unicode として扱います。ただし、プログラムのソースコードは、その OS のネイティブな文字セットを使うことができます(日本語 Windows 環境では、ShiftJIS )。例えば、以下のようなプログラムも、日本語 Windows 環境では、既定では ShiftJIS の文字セットとして保存されます。このソースプログラムを C# コンパイラでコンパイルすると、文字列「"Hello, world!"」は、Unicode 文字列に変換されます(文字列の操作については、別途、2-5 「文字列」で扱います)。また、メモ帳などで、Unicode としてソースプログラムを保存し、それをコンパイルすることもできます。 ［例］文字列の代入 string str = "Hello, world!"; 日付・時間について  日付や時間のデータ型について、C# では専用のキーワード(予約語)は用意されていません。しかし、Base クラスライブラリには、DateTime クラスや TimeSpan クラスなど、日付や時間を簡単に操作できる便利なクラスが用意されており、もちろん C# でも、これらのクラスを C# プログラムで利用することができます(これらを利用するには、第 4 章「クラスの定義と実装」で扱うクラスの知識が必要です。日付や時間の操作を学びたい場合、第 4 章まで学習した後、Base クラスライブラリ関連のレファレンスマニュアルをご覧ください)。  bool   bool 型は、真偽値をもつデータ型であり、true か false のどちらかの値しかとりません。プログラムの流れを変化させるフラグなどで利用できます。  
2-2 変数と定数
