階層クラスタリングの紹介階層的なクラスタリング グループは、クラスター ツリーまたは "系統樹" を作成することによって、さまざまなスケールで、データをグループ化します。このツリーは、1 つのクラスターの集合ではなく、あるレベルのクラスターが次のレベルでクラスターとして加わる多重レベルの階層です。これにより、アプリケーションに最適なクラスタリングのレベルまたはスケールを決定することが可能になります。Statistics Toolbox™ の関数 clusterdata は、凝集型のクラスタリングをサポートし、必要なすべての手順を実行します。関数 pdist、linkage、cluster が組み込まれ、これらの関数はさらに詳細な分析で別々に使用することもできます。関数 dendrogram は、クラスター ツリーをプロットします。
アルゴリズムの説明Statistics Toolbox の関数を使用してデータセットの凝集型の階層クラスター分析を実行するには、次の手順に従います。データセット内のオブジェクトの各ペア間の類似度または非類似度を求めます。この手順では、関数 pdist を使って、オブジェクト間の "距離" を計算します。関数 pdist は、この測定を計算するさまざまな多くの方法をサポートします。詳細は、「類似度の測定」を参照してください。オブジェクトを、2 値の階層クラスター ツリーにグループ化します。この手順では、関数 linkage を使って、近接するオブジェクトのペアをリンクします。関数 linkage は、ステップ 1 で生成された距離の情報を使って、オブジェクトの proximity を互いに決めます。オブジェクトは 2 つのクラスターでペアになっているので、新規に作成されたクラスターは、階層ツリーが形成されるまで大きいクラスター内にグループ化されています。詳細は、「リンケージ」を参照してください。階層ツリーを切り取る位置を決め、クラス木にします。この手順では、関数 cluster を使用して、階層ツリーの下部から分岐を枝刈りし、それぞれ切り取った分岐の下のすべてのオブジェクトを 1 つのクラスターに割り当てます。これは、データの分割を作成します。関数 cluster は、階層ツリーで自然のグループ化を検出したり、または任意の点で階層ツリーをカットオフすることによって、これらのクラスターを作成できます。以下の節では、これらのステップに関する情報を詳しく説明します。
類似度の測定関数 pdist を使用して、データセットのオブジェクトのペア間の距離を計算します。m 個のオブジェクトで構成されているデータセットの場合、m*(m – 1)/2 のペアがデータセット内にあります。この計算の結果は、距離行列または非類似度行列として一般に知られています。この距離情報を計算する方法はたくさんあります。既定の設定では、関数 pdist は、オブジェクト間のユークリッド距離を計算します。しかし、その他のオプションのいずれかを指定できます。詳細は、pdist を参照してください。
メモ:  
距離の情報を計算する前に、データセットの値をオプションによって正規化できます。実世界のデータセットでは、変数は異なるスケールに対して測定される場合があります。たとえば、ある変数が Intelligence Quotient (IQ) テスト スコアを測定し、別の変数が頭部の円周を測定することがあります。これらのばらつきは、類似度の計算を歪めることがあります。関数 zscore を使うと、データセットのすべての値を変換し、同じ比率のスケールを使用できます。詳細は、zscore を参照してください。
たとえば、各オブジェクトが x,y 座標のセットである 5 つのオブジェクトで構成されている、データセット X を考えます。Object 1: 1, 2Object 2: 2.5, 4.5Object 3: 2, 2Object 4: 4, 1.5Object 5: 4, 2.5このデータセットを行列として定義し、rng('default')  % For reproducibility
X = [1 2;2.5 4.5;2 2;4 1.5;...
4 2.5];
を pdist に渡すことができます。関数 pdist は、オブジェクト 1 とオブジェクト 2、オブジェクト 1 とオブジェクト 3 などのペアの距離を、すべてのペアの間の距離が算出されるまで計算します。次の図は、グラフにこれらのオブジェクトをプロットしています。オブジェクト 2 とオブジェクト 3 の間のユークリッド距離は、距離の 1 つの解釈を説明するために示されます。
距離情報関数 pdist は、この距離情報をベクトル Y に返します。各要素は、オブジェクトのペア間の距離を含みます。Y = pdist(X)
Y =
Columns 1 through 7
2.9155    1.0000    3.0414    3.0414    2.5495    3.3541    2.5000
Columns 8 through 10
2.0616    2.0616    1.0000
pdist とオリジナルのデータセットのオブジェクトにより生成される距離情報の関係を確認しやすくするため、関数 squareform を使用して、距離ベクトルを行列に作り変えることができます。この行列では、要素 i,j は、オリジナルのデータセットのオブジェクト  i と オブジェクト  j  の距離に相当します。次の例で、要素 1,1 は、オブジェクト 1 と それ自身 (ゼロ) の距離を表します。要素 1,2 は、オブジェクト 1 とオブジェクト 2 などの距離を表します。squareform(Y)
ans =
0    2.9155    1.0000    3.0414    3.0414
2.9155         0    2.5495    3.3541    2.5000
1.0000    2.5495         0    2.0616    2.0616
3.0414    3.3541    2.0616         0    1.0000
3.0414    2.5000    2.0616    1.0000         0
リンケージデータセット内のオブジェクト間の近接性を計算すると、関数 linkage を使用して、データセット内のどのオブジェクトがクラスターにグループ化されるべきかを決定することができます。関数 linkage は、pdist により作成された距離情報を受け取り、近接したオブジェクトのペアをバイナリ クラスター (2 つのオブジェクトから構成されるクラスター) にリンクします。すると、関数 linkage は、これらの新しく形成されたクラスターを互いにリンクしたり、他のオブジェクトにリンクして、クラスター ツリーとして、オリジナル データセットのすべてのオブジェクトにリンクされるまで、より大きなクラスターを生成していきます。 たとえば、x と y 座標の標本データセットから pdist により生成された距離ベクトル  Y が与えられると、関数 linkage は、行列  Z に結合の情報を返して、階層クラスター ツリーを作成します。Z = linkage(Y)
Z =
4.0000    5.0000    1.0000
1.0000    3.0000    1.0000
6.0000    7.0000    2.0616
2.0000    8.0000    2.5000
この出力において、各行はオブジェクトまたはクラスター間のリンクを識別します。最初の 2 列は、リンクされたオブジェクトを識別します。3 列目は、これらのオブジェクト間の距離を含みます。x と  y 座標の標本のデータセットに対して、関数 linkage は、オブジェクト 4 と 5 をグループ化することにより始めます。これは最近接 (距離の値 = 1.0000) をもちます。関数 linkage は、オブジェクト 1 と 3 をグループ化することにより続けます。これはまた、距離の値 1.0000 をもちます。3 行目は、関数 linkage がオブジェクト 6 と 7 をグループ化したことを表します。オリジナルの標本データセットが 5 つのオブジェクトのみを含むとすると、オブジェクト 6 と 7 は何ですか。オブジェクト 6 は、オブジェクト 4 と 5 のグループ化によって作成された、新しく形成されたバイナリ クラスターです。関数 linkage が 2 つのオブジェクトを新しいクラスターにグループ化すると、それは、クラスターに、値 m+1 から始まる一意的なインデックスの値を割り当てる必要があります。ここで、m は、オリジナルのデータセット内のオブジェクトの数です (値 1 ～ m は、オリジナルのデータセットによって既に使用されています)。同様に、オブジェクト 7 は、オブジェクト 1 と 3 をグループ化することによって形成されます。linkage は、距離を使ってオブジェクトをクラスターする順序を決定します。距離ベクトル Y は、オリジナルのオブジェクト 1 から 5 の間の距離を含みます。しかし、linkage は、オブジェクト 6 や 7 のように、作成するクラスターを含む、距離も決定できなければなりません。既定の設定では、linkage は、単一 linkageとして知られる方法を使います。しかし、利用できる方法はまだ他にもあります。詳細は、linkage のリファレンス ページを参照してください。 最後のクラスターとして、関数 linkage は、オリジナルのデータセットからのオブジェクト 2 と共に、オブジェクト 6 と 7 から構成される新しく形成されたクラスター、オブジェクト 8 をグループ化しました。次の図は、linkage がオブジェクトをクラスター階層にグループ化する方法をグラフィカルに説明します。
系統樹関数 linkage によって作成された階層的なバイナリ クラスター ツリーは、グラフィカルに表示されると最も容易に理解できます。Statistics Toolbox の関数 dendrogram は、次のようにツリーをプロットします。dendrogram(Z)
図の横軸に表示された数値は、オリジナル データセットのオブジェクトのインデックスを表します。オブジェクト間のリンクは、逆 U 字形の線として表されます。U の高さは、オブジェクト間の距離を示します。たとえば、オブジェクト 1 と 3 を含むクラスターを表すリンクは、高さ 1 です。オブジェクト 2 をオブジェクト 1、3、4、5、(これらは、既にオブジェクト 8 としてクラスターされました) とグループ化するクラスターを表すリンクはの高さは 2.5 です。この高さは、linkage が計算するオブジェクト 2 と 8 の間の距離を表します。系統樹図の作成の詳細は、dendrogram のリファレンス ページを参照してください。
クラスター ツリーの確認データセットのオブジェクトを階層クラスター ツリーにリンクした後、ツリーにおける距離 (すなわち、高さ) がオリジナルの距離を正確に反映することを確認したい場合もあります。さらに、オブジェクト間のリンクの間に存在する自然な分割について調べることもできます。以下のセクションで説明するように、Statistics Toolbox の関数はこれらのタスクの両方に使用できます。非類似度の検証一致の確認非類似度の検証階層クラスター ツリーにおいて、オリジナル データセットの任意の 2 つのオブジェクトは最終的に、あるレベルでリンクされます。リンクの高さは、それら 2 つのオブジェクトを含む 2 つのクラスター間の距離を表します。この高さは、2 つのオブジェクト間の "コーフェン距離" として知られます。関数 linkage によって作成されたクラスター ツリーが適切にデータを反映しているかどうかを測定する 1 つの方法は、コーフェン距離を、関数 pdist によって作成されたオリジナルの距離データと比較することです。クラスタリングが有効である場合は、クラスター ツリー内のオブジェクトのリンクは、距離ベクトル内のオブジェクト間の距離と強い相関があります。関数 cophenet は、これら 2 つの値の集合を比較し、それらの相関を計算し、"コーフェン相関係数" と呼ばれる値を出力します。コーフェン相関係数の値が 1 に近づくにつれて、クラスタリングの解は、より正確にデータを反映します。 コーフェン相関係数を使って、異なる距離計算法またはクラスタリング アルゴリズムを使った同じデータセットのクラスタリングの結果を比較することができます。たとえば、関数 cophenet を使用して、標本データセットに対して作成されたクラスターを評価できます。c = cophenet(Z,Y)
c =
0.8615
Z は関数 linkage によって出力される行列であり、Y は関数 pdist によって出力される距離ベクトルです。 今回は City Block metric を指定して同じデータセットに対して再び pdist を実行します。平均リンケージの方法を使用して、この新しい pdist の出力に関数 linkage を実行後、cophenet を呼び出して、クラスタリングの解を評価します。Y = pdist(X,'cityblock');
Z = linkage(Y,'average');
c = cophenet(Z,Y)
c =
0.9047
コーフェン相関係数は、異なる距離とリンケージの方法を使うと、オリジナルの距離をわずかにより適切に表す平方 2 乗を作成することを示します。一致の確認データセット内での自然なクラスターの分割を決定する方法の 1 つは、クラスター ツリーの各リンクの高さを、そのツリーより下のリンクの高さと比較することです。リンクの高さがその下のリンクの高さとほぼ同じである場合、階層のそのレベルで結合するオブジェクト間にはっきりと区別できる分割が存在しないことを示します。これらのリンクは、高レベルの一致を示すと言われます。なぜなら、結合されているオブジェクト間の距離は、それらが含むオブジェクト間の距離とほぼ同じであるためです。 一方、リンクの高さがその下のリンクの高さと著しく異なる場合、クラスター ツリーのこのレベルで結合したオブジェクトは、それらの成分が結合した時点よりも相互に離れているということを示します。このリンクは、その下のリンクと不整合であると言われます。クラスター分析において、不整合リンクは、データセット内の自然な分割の境界を示します。関数 cluster は、不整合の量的な尺度を使用して、データセットをクラスターに分割する位置を決定します。次の系統樹は、不整合リンクを説明します。系統樹のオブジェクトが、ツリーのかなり高いレベルで、リンクによって結合している 2 つのグループに分類される様子に注意してください。これらのリンクは、階層でそれらの下のリンクと比較されるとき不整合です。
階層クラスター ツリーも各リンクの相対的な整合性は、不整合係数として定量化され表されます。この値は、クラスター階層のリンクの高さとその下のリンクの平均の高さを比較します。異なるクラスターに結合するリンクは、高い不整合係数をもちます。indistinct クラスターに結合するリンクは、低い不整合係数をもちます。クラスター ツリーの各リンクに対する不整合係数のリストを作成するには、関数 inconsistent を使用します。既定の設定では、関数 inconsistent は、クラスター階層の各リンクを、クラスター階層内のそれより 2 レベル内にある下の近隣のリンクと比較します。これは、比較の "深さ" と呼ばれます。他の深さを指定することもできます。葉ノードと呼ばれる、下層にオブジェクトをもたないクラスター ツリーの一番下のオブジェクトは、不整合係数が 0 です。2 つの葉に結合するクラスターは、ゼロの不整合係数ももちます。たとえば、関数 inconsistent を使用して、「リンケージ」で関数 linkage によって作成したリンクに対する不整合値を計算できます。最初に既定の設定を使用して距離とリンク値を再計算します。Y = pdist(X);
Z = linkage(Y);
次に inconsistent を使用して不整合値を計算します。I = inconsistent(Z)
I =
1.0000         0    1.0000         0
1.0000         0    1.0000         0
1.3539    0.6129    3.0000    1.1547
2.2808    0.3100    2.0000    0.7071
関数 inconsistent は、(m-1) 行 4 列の行列のリンクについてのデータを出力します。次の表は、この行列の列を示しています。列説明
階層クラスタリング - MATLAB & Simulink - MathWorks 日本
