汎化ではどのように拡張するかが曖昧になるため、
ユースケースにバリエーションを持たせる以外では、
&lt&ltinclude&gt&gtや&lt&ltextend&gt&gtの依存関係を用いることが多くなるでしょう。
アクター(actor)
機能を利用するユーザや、システムが使用するハードウェア、外部システムがアクターとして表現されます。
アクターはシステムの一部ではありません。また、アクターにも汎化があり、ユースケースへの関連を引き継ぎます。
ノート(note)
全ての図において使用できる要素で、文章を書くことができます。
単独で使用することも、対象と破線によって結びつけて使用することもできます。モデルに影響は与えません。
それでは、勤怠システムを例にユースケース図を見ていきましょう。
図2が勤怠システムのユースケース図です。
「社員認証」を含んだ「勤怠入力」機能があり、遅刻や早退だった場合には、
「早遅理由入力」機能により理由入力することが示されています。
「勤怠入力」機能である「出社」と「退社」は、
「社員」と「社員」の関連を引き継いだ「総務」によって利用されます。
また、「勤怠変更」機能は「総務」だけが利用でき、「勤怠変更」機能にも「社員認証」が含まれています。
「社員認証」/「勤怠入力」/「勤怠変更」機能は、
外部システムである「データベース」(*)を使用します。
ノートにより「早遅理由入力」は、次期開発項目であることが明記してありますので、これ以降は取り上げません。
このように、ユースケース図を作成することで、外部要素であるアクターやシステムに必要とされる機能が、
明確に切り出せていますね。
脚注(*)
データベースをアクタとして書くことには異論があるかもしれません.
もしユーザの言葉として「データベース」という単語が表れていれば私はアクターとしてもよいと考えます.
データベースが今回の開発対象外であること,既に存在していること,
他のシステムにおいても共有されることなどを明確にできるからです.
ユースケース記述
ユースケースを説明する文章記述です。
文章があることで、より明確にユースケースの内容を相手に伝えることができます。
図3: ユースケース記述
ユースケース名   出社処理ユースケース                 
ゴール       出社処理が完了する                  
事前条件      1−1.ログイン画面になっていること         
メインフロー    2-1.自分の社員IDを入力する              
2-2.パスワードを入力する               
2-3.ログインボタンを押す(E-1)             
2-4.出社ボタンを押して出社時間を登録する(E-2)     
2-5.ログアウトボタンを押す              
2-6.終了ボタンを押す                 
事後条件      3-1.データベースに出社時間が記録されること      
例外フロー     E-1:認証失敗。警告のダイアログボックスを表示する   
E-2:データベースエラー。データベースエラーのダイアログ
ボックスを表示した後、システムを終了する     
今回は例外処理が発生するので、図3のようなイベントフローという形式で記述してみました。
例外処理が、うまくまとまって表現されていますよね。
この他にも、シナリオと呼ばれる一連の処理の流れを記述する形式があります。
シナリオは一連の処理の流れですので、ひとつのユースケースを表すのに、
メインシナリオや例外シナリオといったような、複数のシナリオが必要となります。
- UML超入門_第2章
