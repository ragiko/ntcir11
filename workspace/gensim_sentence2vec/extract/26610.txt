要件におけるユーザーストーリーの利点
アジャイル
これの続きというか、Mike CohnのProject Advantages of User Stories as Requirementsを適当訳しておく。たんにまだ『User Stories Applied: For Agile Software Development』に手を出しかねているのだけなのだが。
要件におけるユーザーストーリーの利点
エクストリームプログラミング(XP)は、ユーザーストーリーの形式で要求を表現するというプラクティスを導入します。ユーザーストーリーは利用者の視点から語られた機能要件の短い説明です。機能要件とはソフトウェアの利用者あるいはソフトウェアの顧客のどちらかにとって価値があるものです。人材募集・検索サイトのための典型的なユーザーストーリーをあげましょう。
利用者は自身の履歴書をウェブサイトに掲示できます。
利用者は仕事を検索できます。
企業は新しい求人を掲示できます。
利用者は自身の履歴書を参照できる人を制限できます。
しかし、ユーザーストーリーはたんなる短い文章ではありません。それぞれのユーザーストーリーには3つの側面があります。
書き留められたストーリーの説明。計画づくりや備忘として使います。
ストーリーについての対話。ストーリーの詳細を肉づけするために役立ちます。
詳細を伝達し文書化するテスト。いつストーリーが完了したかを決定するために使うことができます。
ユーザーストーリーの記述は習慣的に紙のインデックスカードに手書きされるので、Ron Jeffriesはこれらの3つの側面を、カード(card)、対話(conversation)、確認(confirmation)とうまく頭韻を踏んで名づけました。カードはユーザーストーリーのいちばん目につくものでしょうが、でも、いちばん重要なものではありません。カードにはストーリーの文章が書かれているとはいっても、その詳細は対話のなかで明確にされ、さらに確認をとおして記録、検証されるのです。
ユーザーストーリーとは何か
ユースケースあるいは伝統的な要求仕様とストーリーは同じ特徴をもつように見えるので、以前からある要求をまとめる手法からストーリーを区別するものが何なのかを見ておくことが大切です。この差異がユーザーストーリーに多くの利点をもたらすのです。
明確になる
ユーザーストーリーは話し言葉でのコニュニケーションを重視します。書き言葉はしばしばとても曖昧で、顧客と開発者がひとつの文を同じように解釈することを保証しません。たとえば、この前ランチのとき、メニューにこのように書かれていたのを読みました。「前菜がつきます。スープあるいはサラダとパンが選べます。」
理解するのが困難な文ではないはずですが、でも実際はそうでした。これらのどちらを選ぶことができたという意味だったのでしょうか?
スープあるいは(サラダとパン)
(スープあるいはサラダ)とパン
私たちは書き言葉が明確であるかのように行動しますが、しかしそうでないことがしばしばあるのです。メニューに書かれた言葉と、ウェイトレスの話し言葉「スープかサラダ、どちらにしますか」を対比してください。もっと都合のよいことに、彼女は注文を取る前にテーブルの上にパンの入ったかごを置くことで、すべての曖昧さをなくしました。
もうひとつ別の例をあげます。最近この要求に遭遇したのですが、データー管理システムで利用者がフォルダーに名称をつけることができることに言及していました。「利用者は名称を入力できる。名称は127文字であることができる」。この文章からでは、利用者がフォルダーに名称を必ず入力しなければならないのかどうかが明確ではありません。たぶん既定の名称は提供されるでしょう。二つ目の文はほとんど無意味です。フォルダーの名称は他の長さでもよいのでしょうか?あるいはいつも127文字でなければならないのでしょうか?
計画づくりに役に立つ
ユーザーストーリーの2つ目の利点は、ユーザーストーリーがプロジェクトの計画づくりにすぐに利用できるということです。ユーザーストーリーはそれぞれが開発がどれくらい困難かあるいは時間がかかるかを見積ることができるように書かれます。いっぽうでユースケースはたいてい大きすぎて見積もりには役立ちません。また、ストーリーはアジャイルプロジェクトのひとつのイテレーション中に完全に実装されるのですが、ひとつのユースケースは複数のイテレーションにまたがるように分割されるのがふつうです(それらのイテレーションはストーリー駆動のプロジェクトよりもたいてい長いのですが)。
IEEE 830形式のシステム要件項目(「本システムは...すること」)には、別の問題があります。典型的なプロダクトにおけるソフトウェアの要求(とそれらの間の関連)中には何千あるいは何万もの項目があります。それを考えると項目間の優先順位づけという固有の困難さがあることが簡単に分かります。要求項目を一般的な高、中、低よりも細かく優先順位づけできないと、2から4週間ごとに動作するソフトウェアを提供するという高度にイテレーティブ(反復型)かつインクリメンタル(増分型)な開発プロセスには対応できません。
詳細から解放される
ストーリーは他にも利点をもっています。でも、あとひとつだけあげましょう。ユーザーストーリーはチームが詳細を集めることを先延ばしにするように勧めます。place–holding goal–levelのストーリー(採用担当者は新しい求人を掲示できます)がはじめに書かれて、そのあと詳細を把握することが重要になったときにより詳しいストーリーに置き換えられます。この手法によりユーザーストーリーは時間的な制約のあるプロジェクトに最適なものになります。システムの全体的な感触を把握できるような2、3ダースのストーリーを、チームは実にすばやく書くことができます。その後、彼らは2、3のストーリーの詳細へと進んで、ずっと短期間でコード化できるのです。IEEE 830形式のシステム要件仕様を完成するよう強制されたと感じているチームは、もっと長期間かかかるでしょう。
ユーザーストーリーはユースケースではありません
Ivar Jacobsenが最初に提唱したユースケースは、今日ではふつう統一プロセス(Unified Process)と関連しています。ユースケースとは、システムと1つあるいはそれ以上のアクターとの間のやりとりをひとまとめにして、それを汎用的に記述したものです。アクターは利用者であったり、他のシステムであったりします。ユースケースは構造化されていない文章として書かれることがありますし、あるいは構造化された雛形に従うこともあります。よく使われる雛形としてAlistair Cockburnが提案するものがあります。サンプルをUse Case 1として示しました。これは次のユーザーストーリーと同等のものです。「求人担当者として、クレジットカードで求人掲示にたいする支払いを行うことができる」。
ユースケースの中では、基本系列(Main Success Scenario)という用語はユースケースを通過する主要な成功する道筋を指します。この場合、示されている5つの段階を完了したあとに成功します。拡張系列(Extensions)はユースケースの代替の筋道を定義します。拡張系列はエラー処理によく利用されます。しかし拡張系列はまた、成功するけれども補助的な筋道を記述するためにも使われます。Use Case 1にある拡張系列3aのようなものです。ユースケースを通過するそれぞれの道筋はシナリオとして指し示されます。だから、基本系列が1-5の段階の系列によって表現されるのとちょうどに同じように、代替のシナリオは1, 2, 2a, 2a1, 2, 3, 4, 5.のという系列によって表現されるのです。
ストーリーとユースケースとのもっとも明白な違いのひとつはスコープです。どちらもビジネス価値を提供するために大きさを測ります。でも、ストーリーではスコープを小さいままに保ちます。なぜなら、計画に使えるようにストーリーの大きさを(「開発作業に10日以上かかると予想できるストーリーをつくらない」というように)制限するからです。ユースケースはたいていいつも、ストーリーよりずっと大きなスコープを含んでいます。たとえば、「求人担当者として、クレジットカードで求人掲示にたいする支払いを行うことができる」というユーザーストーリーに注目すると、それがUse Case 1の基本系列に似ていることがわかります。このことがユーザーストーリーがユースケースのひとつのシナリオと似ているという発言を導きます。それぞれのストーリーはかならずしも基本系列と同等ではありません。たとえば、このようなストーリーを書くことができます。「利用者が期限切れのクレジットカードを使おうとしたとき、システムは利用者に別のクレジットカードを使うか尋ねる」。これは、Use Case 1の拡張系列2bと同等です。
ユーザーストーリーとユースケースはまた、完全性の程度においても異なります。James Grenningは、ストーリーカード上の文章に受入れテストを加えたものは「基本的にユースケースと同じものである」といっています。このように、Grenningはストーリーはユースケースの基本系列に対応し、ストーリーのテストはユースケースの拡張系列に対応すると主張しています。
たとえば、「求人担当者として、クレジットカードで求人掲示にたいする支払いを行うことができる」というストーリーにたいする妥当な受入れテストは以下のようになるでしょう。
Visa, MasterCard,それに American Expressによるテスト(成功)
Diner's Clubによるテスト(失敗)
カードのID番号が正しい、間違った、未入力であるときのテスト
期限切れカードによるテスト
いろいろな支払い総額によるテスト (カードの上限金額を超えるものを含む)
これらの受入れテストをみると、Use Case 1の拡張系列と相関関係があることがわかります。
ユーザーストーリーとユースケースとのもうひとつの重要な違いは、寿命にあります。ユースケースはたいてい永続的な成果物です。それらは製品が開発中あるいはメンテナンス中であるかぎりずっと存在し続けます。いっぽうで、ストーリーはそれらがソフトウェアに追加されるときのイテレーションをこえて生き延びることを意図していません。ストーリーカードを保存しておくことは可能ですが、ほとんどのチームはたんに破棄します。
さらにもうひとつの違いは、ユースケースがユーザーインターフェイスの詳細を含む傾向があるという点があります。この戦略を避けるようにという警告があるにもかかわらず、です。これには理由があります。まず、たいていユースケースは大きな紙を与えられ、そしてユーザーインターフェイスの要求を置くのに適した他の場所がないので、結局ユーザーインターフェイスはユースケースの中に置かれることになるのです。つぎに、ユースケースを書く人はあまりに早期に、ビジネス上の目標よりもソフトウェアの実装に注目してしまいます。
ユーザーインターフェイスの詳細を含めることは、明確な問題を引き起こします。とりわけ新規プロジェクトの初期段階ではそうです。先入観のせいでユーザーインターフェースの設計をより困難にするべきではありません。最近、Use Case 2として示したユースケースに遭遇しました。これは電子メールを作成して送信するための段階を記述しています。
このユースケースのいたるところでユーザーインタフェースが前提とされています。「新規メッセージ」というメニューアイテム、新しいメッセージを作成するダイアログボックス、そのダイアログにある件名と受信者の入力ボックス、そして「送信」ボタン。これらの仮定のほとんどは有効で問題ないかもしれません。でも、メッセージの受信者を設定するためにキーボードで入力するのではなく受信者の名前をクリックするというユーザーインターフェイスを排除しているでしょう。さらにいえば、Use Case 2のユースケースはシステムへのインターフェイスとして音声認識を利用する可能性を排除しています。たしかに音声認識を使うよりもキーボード入力を使う電子メールクライアントのほうがずっと多いでしょう。しかしポイントは、このようにしてユーザーインターフェイスを指定するのに、ユースケースは適した場所ではないということです。
Use Case 2を置き換えるようなユーザーストーリーについて考えてください。それは次のようものでしょう。「利用者として、電子メールのメッセージを作成して送信できる」。ユーザーインターフェイスの仮定は隠されていません。ストーリーを使えば、ユーザーインターフェイスは顧客との対話のなかで登場するでしょう。
ユースケース中にあるユーザーインターフェイスの仮定という問題を回避するために、ConstantineとLockwoodは本質ユースケース(essential use cases)という考え方を示唆しています。本質ユースケースは、技術や実装の詳細にかんする隠れた仮定を明らかにするものです。たとえば、次のテーブルは電子メールのメッセージを作成して送信するための本質ユースケースを示します。本質ユースケースが興味深いのは、利用者の意図がそのまま説明されているところです。ユーザーストーリーがそうであるように。
もうひとつの違いは、ユースケースとストーリーが違う目的のために書かれるというところにあります。ユースケースは顧客と開発者の両方がユースケースを読んで合意できるよう、両者に受け入れられる形式で書かれます。ユースケースの目的は顧客と開発チームとの間の合意文書となることなのです。いっぽうストーリーはリリースおよびイテレーションの計画づくりを促すために書かれます。そして利用者の詳細な要求についての対話のプレースホルダーとして役に立ちます。
すべてのユースケースが必要事項を書き留める(Use Case 1で見たように)というわけではありません。構造化されない文章としてユースケースが書かれることもあります。Cockburnは構造化されないユースケースを要約ユースケース(use case briefs)と呼んでいます。要約ユースケースは2つの理由でユーザーストーリーと異なっています。1つ目に、要約ユースケースはやはりユースケースとおなじスコープを含む必要があるからです。要約ユースケースのスコープはほとんどの場合ユーザーストーリーのスコープよりも大きいのです。いいかえると、ほとんどの場合、要約ユースケースはストーリーよりも詳細になるでしょう。2つ目に要約ユースケースは製品が生きている間じゅう生き続けることを意図しています。いっぽうユーザーストーリーは使い終わると破棄されます。結局のところ、おおざっぱにいえば、ユースケースはふつう分析活動の結果として書かれるのであり、いっぽうで、ユーザーストーリーは分析の対話を始めるために利用することができる覚書として書かれるのです。
ユーザーストーリーは要求記述ではありません
米国電気電子技術者協会(IEEE)はソフトウェアの要求仕様をどのように書くかという指針を公開しました。IEEE標準830とよばれるこの文書は1988年に最後に改訂されました。IEEEの提案は次のような項目を含んでいます。要求仕様書をどのように組織化するか、プロトタイピングの役割、良い要求の特徴。IEEE 830形式のソフトウェアの要求仕様のいちばん明白な特徴は「本システムは...すること」という決まり文句を利用することです。これはIEEEの提案する機能要求の書き方です。よくあるIEEE 830形式の仕様の断片は、次のようなものになるでしょう。
4.6) 本システムは企業がクレジットカードで求人の支払いを認めること。
4.6.1) 本システムはVisa, MasterCard, および American Express のカードを受け付けること。
4.6.2) 本システムは求人がサイトに掲示される前にクレジットカードに請求すること。
4.6.3) 本システムは利用者に一意の予約番号を提供すること。 
システムの要求をこのレベルまで文書化するすることは、面倒で、間違いの元になり、そして非常に時間がかかります。くわえて、このやり方で書かれた要求文書は、率直にいって、読むには退屈すぎます。たんに読むのが退屈だというだけでは、この手法を捨てる十分な理由にはならないでしょう。でも、300ページもあるこのような要求を扱うと仮定してください(それでも中規模のシステムにすぎません)。これを読む必要がある人が全員、じっくり読んでいるだろうと想定することはできないでしょう。読み手は退屈のあまり流し読みや拾い読みするでしょう。さらに、このレベル書かれた文書が、読み手が全体像を把握することを不可能にしてしまうことがよくあります。
私たちは計画しているシステムについてよくよく考えることができ、そして要求をすべて「本システムは...すること」というように書くことができるという発想には非常に強い魅力があります。ほとんどの実際のシステムでそうであるような「もし可能であれば、システムは...するだろう」あるいは「時間があれば....するように試みます」などよりも、はるかに良いように思えるでしょう。
残念ながら、すべてのシステムの要求をこのやりかたで書くことは現実的には不可能です。利用者が彼らのために作られたソフトウェアを最初に目にしたとき、強力かつ重要なフィードバックループが起こります。利用者はソフトウェアを目にしたとき、新しい提案を持ち出したり、以前の提案から乗り換えたりします。要件定義で検討を重ねたソフトウェアにたいして変更が求められたとき、それを「スコープの変更」と呼ぶことが当たり前になっています。このような考え方は2つの理由から正しくありません。1つ目に、ソフトウェアのスコープは検討済みで、すでに完全に定義されており、十分に明白になっていたいうニュアンスをもちます。要求の検討に先払いでどれだけ努力するかは重要ではありません。利用者がソフトウェアを目にした時点で、彼らは異なった(そしてより良い)意見をもつということを私たちは学んだのです。2つ目に、こような考え方は、ソフトウェアが利用者の意図する目標を実現するよりむしろ、要求のリストを実現したときにソフトウェアが完璧になるという信念を補強します。利用者の目標のスコープが変われば、たぶん「スコープの変更」ということはできるでしょう。でも、この用語はふつう、ソフトウェアのある具体的な解決策の詳細が変更された場合にのみ当てはまるのです。
IEEE 830形式の要求は数多くのプロジェクトを間違った方向に向かわせてきました。というのも、利用者の目標よりもむしろ要求のチェックリストに注意を集中してしまったからです。そして、要求の一覧は読み手に製品の全体的な理解を与えることはありません(ユーザーストーリーはそれを提供します)。頭の中で無意識に具体的な解決策を考えることなく、要求の一覧を読むことはとても難しいのです。たとえば、Carrollは次のように示唆します。設計者は「最初に出会った少数の要求についてだけ解決策をうみだすことができるでしょう」。たとえば、次の要求を考えてください。
3.4) 本製品はガソリンエンジンを有していること。
3.5) 本製品は4つの車輪を有していること。
3.5.1) 本製品は各車輪にゴム製のタイヤを有していること。
3.6) 本製品はハンドルを有していること。
3.7) 本製品は鋼鉄製の筐体を有していること。
この時点で、あなたの頭に自動車のイメージが浮かんでいると思います。もちろん、自動車は上記の一覧にある要求すべてを満足しています。真っ赤なオープンカーを思い浮かべた人もいるでしょうが、私は青いトラックを想像しました。おそらくオープンカーとトラックとの間の差異はさらなる要求の記述でカバーされるでしょう。
しかし、IEEE 830形式の要求仕様を書くかわりに、顧客が製品の目標について私たちに話したと思ってください。
この製品で、私は簡単で早く芝生を刈ることができます。
快適な乗り心地です。
目標に注目することで、製品の見え方は全く別物になります。顧客が本当に欲しいのは自動車ではなく、乗用の芝刈機なのです。これらの目標はユーザーストーリーではありませんが、IEEE 830形式の文書では要求の一覧を記述するところに、ストーリーでは利用者の目標を記述します。新製品の属性を一覧にするよりも新製品についての顧客の目標に焦点をあわせることで、利用者の要望にたいしてよりよい解決策を設計することができるのです。
ユーザーストーリーとIEEE 830形式の要求仕様書との間にある違いの最後は、後者の場合、すべての要求を書き終えるまで各要求のコストが目に見えるようにならないという点です。ひとりあるいは何人かのアナリストが2、3ヶ月(しばしばそれ以上)を費やして長大な要求文書を書くということが、よくあります。この文書がその後プログラマーに手渡されます。プログラマーはアナリスト(彼らは顧客への連絡係です)に、このプロジェクトは24ヶ月かかるだろうと伝えます。ところが顧客が望んでいた開発期間は6ヶ月なのです。この場合、文書の4分の3は、チームには開発するための時間がない要件を書いていることになります。このために多くの時間を費やしました。そして、開発者、アナリストそして顧客が期限内にどの機能を開発できるのかという相談を繰り返すために、より多くの時間が費やされることになるでしょう。ユーザーストーリーでは、見積もりは直接それぞれのストーリーに結びついています。顧客はチームのベロシティとそれぞれのストーリーの費用を知っています。すべてのイテレーションを満足するだけの十分なストーリーを書き終わったとき、見積りが終わったことがわかるのです。
Kent Beckはこの違いを結婚のお祝い品の登録のたとえで説明しています。お祝い品を登録するとき、それぞれの項目の費用を確かめることはありません。たんに欲しいものをすべて欲しい物リストにするだけです。結婚式ならそれで十分ですが、ソフトウェア開発ではうまく行かないでしょう。顧客はプロジェクトの欲しい物リストに項目を追加するとき、その費用を知りたいのです。
相変わらず理解できていないところもあるが、こんなところ。なかでも、次の一文が印象に残った。
おおざっぱにいえば、ユースケースはふつう分析活動の結果として書かれるのであり、いっぽうで、ユーザーストーリーは分析の対話を始めるために利用することができる覚書として書かれるのです。
アジャイルというのが銀の弾丸ではなく、むしろ銀の弾丸など存在しないという前提で、顧客の目標を具体的に実現していくための活動のノウハウなのだということが、すこし腑に落ちたような気がする。
Permalink | コメント(0) | トラックバック(0) | 21:46   
要件におけるユーザーストーリーの利点 - winplusの日記
