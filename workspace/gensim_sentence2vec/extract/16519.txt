このチュートリアルでは、Smalltalkに実装されている業界標準の方法論を利用して、小さなデータドリブンWebサイトを作成します。 これらの方法論は、一括してVisualWorks Web Toolkitでサポートされています。 このチュートリアルを進める上で、単純なテキストエディタか市販のHTMLエディタが必要です。 
図 1. ブラウザとWebサーバの関係  上図は、インターネットがどのように動作するか、その略図です。 インターネットに接続されたマシンでユーザがWebブラウザプログラムを起動します(Internet Explorer, Netscape Navigator, Mozilla, などのブラウザ)。そして、HTTP プロトコル (Hyper Text Transfer Protocol)を使用して、特定のロケーション(URL- Uniform Resource Locator)で見つけられるドキュメント(やファイル)をリクエスト(request:要求)します。 ブラウザは、インターネットにリクエストを送信します。そして、Webサーバと呼ばれるインターネットに接続された別のマシンが、そのようなリクエストを待ち受けています。 Webサーバは、指定された位置に要求されたドキュメント(やファイル)を見つけようとします。見つかった場合、それを要求しているクライアントにそれを戻します。 これは、レスポンス(response:応答)と呼ばれています。  Web Toolkitでは、これらの用語(リクエストとレスポンス)は、実際にASPとJ2EEモデルのオブジェクトです。そして、Webアプリケーションでrequest と responseオブジェクトのさまざまなメソッドを使用します。ですから、はやくこれらの用語に慣れてください。    図 2. ブラウザ/Webサーバの詳細関連図  すべてのWebサーバは、これを実行できます--「静的な」HTMLドキュメント(ファイル)を検索します。 実際には、オペレーティングシステムからファイルを取り出し、材料をHTTPに追加して、要求者に送り返す以外何もしてはいけないので、Webサーバに実行するよう要求することが最も簡単です。  以下のボックスは、静的HTMLドキュメント(ファイル)の例です。 その下のボックスは、ファイル(ドキュメント)をWebブラウザで表示した画像です。 Webドキュメントは、単語(Welcome、Click、friendlyなど)と、括弧によって囲まれる文字(<h2>、<br>、<font>など)から構成されていることを確認できます。 テキスト文字列は、タグ(tag)と呼ばれる括弧で囲まれています。これらは、レンダリングや表示方法に関するブラウザへの指示します。 これらのタグは、まとめてHTMLと呼ばれます(Hyper Text Markup Language)。    図 3. HTMLファイルのサンプルとブラウザでの表示のされ方  この上の例は、Hyper Text Transfer Protocol (http://)を使用して、特定の場所(localhost:8008/sandbox)に存在するhello.htmというドキュメントをリクエストしているWebブラウザプログラム(この場合はMozilla)を示しています。 サーバは、ドキュメントを探し、Mozillaにそれを送り返します。Mozillaは、ドキュメント内の"タグ"に従って、ドキュメントのコンテンツを表示します。  HTMLやHTMLドキュメント内の"タグ"に関して詳しく知るために、HTML入門書を読んでください。 
しかし、Amazon.comのようなWebサイトでは、静的なHTMLページを戻す以上のことを実行します。    図 4. Amazon.comのホームページ(ある時期の)  多くの要素によってコンテンツは、変化します。Webサーバがこれをするには、データの蓄積場所からある種の有益情報(すなわち、論理処理指示)に基づいて、ダイナミックにHTMLドキュメントを作成する能力を必要とします。    図 5. Webサーバ側の詳細  リクエストのこのタイプは、Webサーバで若干の作業を行います。HTMLドキュメント内にコード(またはサーバ側の指示)を持つHTMLドキュメント(ファイル)を検索します。 Webサーバは、HTMLドキュメントを生成するために、コードとテキストを分割して、ファイルを解析する必要があります。 これは、Webサーバやプラットフォームによって、さまざまな異なる方法で実行されます。  以下のHTMLドキュメントの例には、コード(code) または 命令(instruction)を含んでいます。 ファイルのコード部分は、"パーセント"タグで囲まれています。    図 6. Smalltalkコードを含むWebページ  この例は、Hyper Text Transfer Protocol (http://)を使用して、特定の場所(localhost:8008/sandbox)に存在するhello.sspというドキュメントをリクエストしているWebブラウザプログラム(Mozilla)を示しています。 サーバは、コードからテキストを分割するために、このドキュメントを解析します(実際には、1行1行読み込みます)。 コードタグは、角括弧とパーセント記号(<% と %>)です。  Webサーバは、コードタグが見つかるまでデータストリーム(コードではないすべてのテキストとタグ)を返送し始めます。 見つかったら、データストリームの返送を停止して、コードタグ内のコードを実行します(<% と %>)。 コードが"何らかの表示"をWebサーバに指示する場合(すなわち出力の生成)、"パーセント"タグの中のコードを実行し終えると、出力すべきものをデータストリームに追加して、出力されます。  この例では、コードは、今日の日付を出力するようWebサーバに指示します。 しかし、コードは、Smalltalkコードです。ですから、Smalltalkを認識可能なWebサーバだけがこのページを正しく処理できます。  図6の最初の図は、hello.sspファイルの実際の内容です(WebサーバがSmalltalk Server Pageとして認識します)。 SSP拡張子は、要求者にこのファイルを単に返送しないよう、Webサーバ(この場合は、VisualWave)に指示します。なぜなら、ファイルを開いて、"コードタグ"を検査するためです。  コードタグは、パーセント記号と角括弧です。 最初のコードタグ (<%) は、テキストのストリーミングを停止して、解析を開始するようにWebサーバに伝えます。そして、終わりのコードタグ(%>)が見つかるまで、コードを解釈して、処理します。 通常、コード間のタグには、追加のHTMLを出力します。 この概念は、"スクリプト(scripting)"として知られています。  図6の下の図は、ファイル(ドキュメント)をWebブラウザで表示しています。 Webサーバが"Date today"コードを処理して、適切な出力内容が生成されたことを確認できます。 
Webサーバは、HTMLドキュメントを作成するために、格納データにアクセスして、ロジック解析を実行するために"コード"(言語)を必要とします。 これは、Web開発と呼ばれます。  格納されているデータへのアクセスは、Webサーバの作業ではありません。 Oracle, MS SQL Server, Sybase, Informix, mySQL, PostGreSQL, et. Al. などのデータベースは、複数プラットフォームや複数言語から用意にアクセスできます。 最もよいWebサーバ(または言語)は、何でしょうか。  以下のリストは、Webサーバ製品を出している有名なベンダです。
IBM: WebSphere
BEA: WebLogic
Microsoft: Internet Information Server (IIS)
Sun: Apache
Macromedia: Cold Fusion
Macromedia: JRun
Cincom: VisualWave
これらの製品は、開発モデル(model)の一部をサポートしています。以下にそのモデル(または規格)を示します。
Java 2 Enterprise Edition (J2EE)
Sun MicroSystems Solution
Java Server Pages (JSP)
Servlets
Java Beans
タグライブラリ(Tag Libraries)
Active Server Pages (ASP)
Microsoft Solution
Visual Basic Script
Java Script
.Net ("ドットネット")
Microsoft Solution
Visual Basic (VB.Net)
C# ("see sharp"と発音)
さまざまな選択肢があり、Unix、WindowsやLinuxサーバは、PerlからPython、PHPスクリプトなど何でも実行できます。 市場のシェアは、J2EEとASPをサポートする製品がほとんどです。 VisualWorks Web ToolkitのSmalltalk WebサーバコンポーネントであるVisualwaveは、J2EEとASPの両方のモデルをサポートしています。 ただし、スクリプト言語としてJavaやVisual Basicを使用するのではなく、Web Toolkitは、Smalltalkを使用します。  J2EEやASPモデルを使用してWebページの開発に何らかの経験やバックグラウンドを持っている場合、Web Toolkitを使用した開発手法も非常に分かりやすいでしょう。 もちろん、経験がなくても問題ありません。サンプルアプリケーションを開発し始めれば、J2EE とASPの両方の開発モデルからさまざまなコーディング手法を学べるからです。
Cincom VisualWorks Web Toolkit Tutorial : Web 開発の概念
