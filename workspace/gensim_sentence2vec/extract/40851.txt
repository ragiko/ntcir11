ダイクストラ法が何かを解説すると余計に難しくなるので省略しますが、
ダイクストラ法アルゴリズムを使う最大のメリットは、
「不要な経路が分かった時点で以降の計算を省略できる」
これに尽きます。
ではさっそく。一つ例を説明していきましょう。
さきほどの図です。スタート点をA、ゴール点をFとします。
青い数字は、それぞれの点間の移動に要する距離です。
Aの一つ隣の点を調べます
Aの隣はBとCです。
BとCの各点にAからの検索がきたこと、そしてスタート地点から移動に要した距離をセットします。
両方とも「Aの10」になりますね。
さて次はAの隣、BとCについて調べていきましょう。
Bの一つ隣の点を調べます
Bの隣はA,C,Dです。
Dにはこれまでと同じ方法で「Bの18」をセットできます。
ここからが大事なところです。
BからCへ向かうルートをたどるとき、Cはすでに一度探索が行われています。
Cが未探索であれば、Cには「Bの20」をセットするはずですが、
セットしたい距離よりも小さな距離が既に入っている時はセットできません。
この時にABCを通るルートが最短距離になり得ないことが判明します。
ABCを通るルート検索は以降省略できます。
BAについても同様ですね。
Aはスタート地点です。ここには距離「0」が入っています。
小さな値の入った点には進めないので戻るルートをたどることもありませんね。
もしも検索済みの点よりも小さい値がセットできたならどうでしょうか
図は点CからBを検索した場合です。
さらにこのとき「AB間の距離を5」、そして「BC間の距離が2」としました。ABCは距離7になります
Bはすでに検索済みですがより小さな距離が入る場合は距離を再セットして計算を続けます。
なのでBの隣のD,C,Aが再び検索の対象になります。
同じように処理を続けていくと
未処理の点あるいは最小値を更新しながら次の点をたどっていくと、たどれる点が無くなります。
これで計算完了です。
計算はゴール地点から
さて、ひとつ上の図を見てみて下さい。ダイクストラ法の計算が終わると各点にはスタート地点へ向かう隣の点が記憶されています。
なのでゴール地点からそれぞれ記憶されている次の点をたどっていけばスタート地点への最短経路が分かりますが・・・
あれ?
もしかしてゴール点から計算したほうが良かったのでは?
そうなのです。ゴール点から計算すればスタートから順に点をたどれました。
そしてどの点からもゴールへ向かう経路が分かります。
ということは、たった一回の計算で
複数のキャラを一斉に同じゴールに向かわせることもできるのです。
ゴール側から計算したほうがいいですね。
ダイクストラ法による最短ルートの求めかた
