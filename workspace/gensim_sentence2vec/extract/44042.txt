この項目「オープンソースソフトウェア」は翻訳されたばかりのものです。不自然あるいは曖昧な表現などが含まれる可能性があり、このままでは読みづらいかもしれません。(原文:en:Open-source software 21:02, 21 October 2013 UTC)
修正、加筆に協力し、現在の表現をより原文に近づけて下さる方を求めています。ノートページや履歴も参照してください。(2013年7月)
オープンソースソフトウェア(英: Open-source software, 略称: OSS)とは、ソースコードが利用可能で、著作権保持者がどんな目的のためでもソフトウェアを、学習、変更、そして配布するための権利を提供するというライセンスに基づいたソフトウェアである[1]。オープンソースソフトウェアはとてもよく公に、共同的な方法で開発されている。オープンソースソフトウェアは最も著名なオープンソース開発の例であり、しばし(技術的に定義される)消費者生成メディアや(法的に定義される)オープンコンテント運動と比較される[2]。
(2008年からの)Standish Groupの報告によると、オープンソースソフトウェアモデルの採用は消費者にとって1年につき約60ドルの節約になることが示されている[3][4]。
Open Source Initiativeの定義は、標準や「デファクト」の定義として広く認知されている[誰?]。エリックS.レイモンドとブルース・ペレンズは1998年2月に組織を設立した。問題からの証拠の約20年、既にインターネットで提供されているクローズドとオープン開発の歴史を持ちながら、OSI{Open Source Initiative}は営利的なビジネスに「オープンソース」問題を提供している。彼らはより高いプロフィールをフリーで利用可能なソースコードの現実的な利益にもたらそうとして、メジャーなソフトウェアビジネスと他のハイテク工業をオープンソースに置き換えたがっていた。
OSIは、ソフトウェアライセンスがオープンソースであるかどうかを決定する場合、「オープンソースの定義」を使用する。この定義は、主にブルース・ペレンズにより書かれ改変された、Debianフリーソフトウェアガイドラインに基づいていた[5][6][7]。ペレンズは、後に幅広く利用可能のみとなる、FSFからの彼の書き込みであるフリーソフトウェアの「4つの自由」に基づかなかった。[8]
ペレンズの定義によると、「オープンソース」とは、緩められたかまたは存在しない著作権制限によりソースコードを一般大衆に利用可能とする、幅広く一般的なソフトウェアライセンス形式である。明言された通り、この原則は、商標や特許についてのあらゆる物が、通常の監査やリリース体制が作業を引き出すことを保証するため絶対に協力を利用したり要求することがないことを示している。オープンソースが組織やユーザーに使用や配布の制限を課さないことが、オープンソースの明白な「特徴」である。オープンソースは原則として主要な元々の寄付者でさえ作業を引き出すために継続したアクセスを保証するためにこれを禁じている[要出典]。
しかしながら、フリーソフトウェア財団のリチャード・ストールマンは、「フリーソフトウェア」としてみなされて適用される「オープンソース」という用語にきっぱりと反対している。法的にフリーソフトウェアはオープンソースとしての資格があるのは明らかであるが、ストールマンはその分類は乱用であるとみなしている[9]。批評家もまたOpen Source Initiativeの公言した実用主義に反対している。というのも、彼らは自由と共同体のフリーソフトウェアの理想が、ソフトウェアの自由のためのFSFの理想主義的な標準に妥協することによって脅迫されているからである[10][11]。
"Free and open-source software" という言葉は、増々[要出典]、フリーソフトウェアとオープンソースソフトウェアの両方に共通する事柄を意味する言葉として、一般的に使われている。[要出典]。
用語の増殖[編集]
ライセンスは、ライセンサーがライセンシーに与えた権利と義務を定義する。オープンソースライセンスは、ソースコード(あるいは内容)をコピーし、修正し、そして再配布するための権利をライセンシーに許可する。これらのライセンスは義務を負わせる(例えば、配布されるコードへの変更をソースコード形式で入手できるようにすべきであり、作者への帰属はオープンソースを利用するプログラムやドキュメンテーション内に記述しなければならない)[要出典]。
著者は最初に、著者が著作権を所有した作業の創作物に付随する法的理論のライセンスに基づく自分の作業に、ライセンスを承諾するための権利を得る。著者やライセンサーが、自分達の成果をコピーし、修正し、そして再配布を許可する際に彼らが承諾するものは、著者の著作権を使用するための権利である。著者はまだそれらの著作権の所有権を保持しており、彼らがライセンスの義務を主張している限り、ライセンスで許可されているように、ライセンスは単にそれらの権利を使用することが許されているに過ぎない。著者はライセンスに対して、彼らの成果物の著作権に対する独占的な権利を売ったり譲渡することを選択することもある。そうすると新しい所有者や譲受人は著作権を制御する。著作権の所有権(「権利」)は、成果物の所有権(「物」)から分割され別個のものとなる。個人コピーする権利を持たずしてがコードの断片(または本のコピー)を所有し、そのコピーを修正し再配布することが可能となる[要出典]。
著者が(例えば、Apache.orgのような)オープンソースプロジェクトにコードを寄付する場合、明示的なライセンス(例えば、Apache Contributor License Agreement)か、暗黙的ライセンス(例えば、プロジェクトが既にライセンスコード配下であるオープンソースライセンス)の下で寄付を行う。オープンソースプロジェクトの中にはライセンス配下の寄付されたコードを取り入れるのではなく、プロジェクトへのコードの寄付を受け入れるために、著者の著作権の譲渡を実際に要求する(例えば、OpenOffice.orgとその共同著作権の譲渡契約)[要出典]。
パブリックドメインとされたコード(や内容)は、その成果物から著者(あるいは所有者)の著作権を放棄するための方法である。どのライセンスも承諾されず、パブリックドメインの成果物をコピーし、修正し、再配布するために必要なものは何もない[要出典]。
フリーソフトウェアライセンスやオープンソースライセンスの例としては、Apache License、BSDライセンス、GNU General Public License、GNU Lesser General Public License、MIT License、Eclipse Public LicenseそしてMozilla Public Licenseがある。
オープンソースライセンスの激増は、いくつかあるオープンソース運動の否定的側面のうちの一つである。というのも、オープンソースライセンスはライセンスの違いの法的な意味を理解することがしばしば難しいためである。180,000以上のオープンソースプロジェクトが利用可能で、その1400以上のの独自ライセンスを持つことで、「クローズドソース」な営利事業内でオープンソースの使用を管理する方法を決定することの複雑さは劇的に増加している。いくつかは完全自作である一方、他方は主流となった、Berkeley Software Distribution ("BSD")、Apache、MIT-style (Massachusetts Institute of Technology)、もしくはGNU General Public License ("GPL") のようなFOSSライセンスにならって作られる。この観点から、オープンソースを開始する人は、FOSSライセンスがグループ化された分類体系を使用することを開始する(通常はコピーレフト条項により押し付けられた実在と義務に基づいている。つまりコピーレフト条項の強さである)[14]。
オープンソースおよびフリーソフトウェアに対する重要な法的マイルストーンが2008年に通過した。米連邦控訴裁判所がフリーソフトウェアライセンスは著作権のある成果物の使用において明確に法的拘束力の条件を設定すると判決し、それゆえに著作権法の下で強制力を持つのである。結果として、エンドユーザーがライセンス条件に違反した場合、それらのライセンスは見えなくなり、著作権を侵害したことを意味するのである。[15]
認証[編集]
認証は、より高いユーザーの信頼を構築するために役立つ。認証を、完全なソフトウェアシステムに最もシンプルなモジュールをビルドするための開発者によって使用される、最もシンプルなコンポーネントに適用することができる。International Institute of Software Technology / 国際連合大学 (United Nations University) <http://www.iist.unu.edu> を含む、オープンソースソフトウェアのこの領域に関わる多数の機関が存在している。UNU/IISTは国際連合の、非営利の研究および教育機関である。それは現在 "The Global Desktop Project" として知られるプロジェクトに現在関わっている。このプロジェクトは、全てのエンドユーザーが、例えば言語と文化の壁を越えて理解し影響し合うことが可能となるデスクトップインタフェースをビルドすることを狙いとしている。それはアプリケーション開発からローカライゼイションまでの領域に含まれる当事者から巨大な注意を引き起こす。さらに、このプロジェクトは情報システムへの開発している国民のアクセスを改善する。UNU/IISTは、ソフトウェアの質に妥協することなしにこれを達成することを狙いとしている。それはグローバルスタンダードが認証を招待することを持続させることができると信じており、分野の最先端領域を調査するために現在カンファレンスを組織している<http://opencert.iist.unu.edu>。
代わりに、(DO-178Bのような)保証モデルはソフトウェアに対する「認証」アプローチを既に解決している。このアプローチは調整することができ、OSSに適用することができるが、必要とされる計画や実行、設計、テスト、そして追跡可能な人工物が生成された場合のみである。
オープンソースソフトウェア開発[編集]
開発モデル[編集]
1997年のエッセイである『伽藍とバザール』[16]において、オープンソースエバンジェリストのエリック・レイモンドは「バザール方式」として知られるOSSの開発モデルを提案した。レイモンドは、「華麗に分離して働いている個々の魔法使いや賢士の小さな一団」といった大聖堂を開発する伝統的な方法論でソフトウェアの開発を例えた。彼は全てのソフトウェアはバザール形式を使用して開発されるべきだと提案している。そして彼は「アジェンダとアプローチが異なる大きな雑談が聞こえるバザール」と述べている[要出典]。
「大聖堂」モデルと呼ばれる伝統的な開発モデルにおいて、開発は中央集権的な方法で行われる。役割が明らかに定義される。役割は設計するために専念する人々(設計者)、プロジェクトを管理する責任がある人々、そして実装する責任がある人々が含まれる。伝統的なソフトウェア工学は大聖堂方式に従う。フレデリック・ブルックスが書いた本である『人月の神話』はこの方式を擁護している。彼は加えてシステムの建築学的な無傷を維持するために、システムデザインは可能な限り少ない人数の設計者で行うべきだと述べている[要出典]。
しかしながら、バザール方式は異なる。この方式において、役割は明らかに定義されない。Gregorio Robles[17]はバザール方式を用いて開発されたソフトウェアは以下のパターンを表すべきだとしている :
ユーザーが共同開発者として扱われるべきである 
ユーザーは共同開発者のように扱われるべきである。そのため、彼らはソフトウェアのソースコードにアクセスする。加えてユーザーはソフトウェアへの追加、ソフトウェアのコード修正、バグレポート、ドキュメンテーションを提出することを奨励される。複数の共同開発者を持つことは、ソフトウェアを発展する割合を増加させる。リーナスの法則では、「十分な目玉を与えられることで、全てのバグは浅くなる」と述べている。このことは、多くのユーザーがソースコードを眺めれば、結局は全てのバグを発見しそれらの修正方法が提案される、ということを意味している。あるユーザーが進んだプログラミングスキルを持っており、それゆえに各ユーザーのマシンが追加のテスト環境を提供することに注意しなければならない。この新しいテスト環境は新しいバグを発見し修正する能力を提供する。
早いリリース 
ソフトウェアの最初のバージョンは、共同開発者を素早く見つけ出すための機会を増やすために、可能な限り早期にリリースされるべきである。
頻繁な統合 
コード変更は、プロジェクトのライフサイクルの終わりに多数のバグを修正することのオーバーヘッドを避けるために、可能な限り頻繁に統合すべきである。オープンソースプロジェクトの中には、毎日統合が自動的に行われる深夜のビルドを持つ。
いくつかのバージョン 
少なくともソフトウェアの2つのバージョンが存在するべきである。より多くの機能を持つ、バグがより多いバージョンと、より少ない機能を持つ、より安定したバージョンとが存在するべきである。(開発中バージョンと呼ばれる)バグのあるバージョンは、最新機能を即座に利用したくて、まだ徹底的なテストが行われていないコードを使用するリスクを受け入れることを厭わないユーザー向けである。そのユーザーはそれから共同開発者として振る舞い、バグを知らせたりバグ修正を提供する。
高いモジュール化 
ソフトウェアの全般的な構造は、独立したコンポーネントの並行開発を許可するためにモジュール化されるべきである。
構造作成の動的決定 
公式であれ非公式であれ、戦略的決定をユーザー要求と他の要因を変更することに依存する、構造作成を決定するための必要がある。エクストリーム・プログラミングを参照すること。
しかしながら、データはOSSがバザール方式の提案ほど十分に民主的ではないことを暗示している。31,999人の開発者によるフリーもしくはオープンソースコードの50億バイトを分析すると、そのコードの74%が大部分のアクティブな10%の著者によって書かれていることが示された。プロジェクトに含まれる著者の平均的な数は、中央値を2とした5.1人であった[18]。
ソフトウェア製作者への報酬[編集]
オープンソースソフトウェアのソフトウェアエキスパートおよび研究者は、いくつかの長所と短所を見分ける。ビジネス上の主な利点は、オープンソースがマーケットにより多くの浸透を成し遂げているためビジネスにとって良い手段であることである。オープンソースソフトウェアを提供する企業は工業標準を制定することが可能となる。そのため、競争における長所を得る[要出典]。開発者が権限を与えていると感じ、エンド製品の所有権の意識を持っているため、オープンソースソフトウェアは開発者の忠義にも助けられている[19]。その上、マーケティングや物流サービスの低コストはOSSに対して必要とされる。それも企業が全ての技術開発を並行して行うことにも役立つ。それは企業製品を含む企業のイメージを促進するための良いツールである[20]。OSS開発アプローチは、信頼でき高い質を持つソフトウェアを素早くかつ安価に生み出す手伝いをする[21]。「オープンソース」という用語は元々商標化を意図したものであった。しかしながら、その用語はとても記述的だと思われ、そのため商標が存在しなかった。その上、それはとても融通が利く技術とより素早い革新に対する可能性を提供する。それは通常独立した、テストをしたりソフトウェアのバグを修正する数千の開発者を持つため、より信頼性が高いと言われる。それは融通が利くとされる。というのも、オープンソースプログラムは非常に多くの異なるプログラマー達の共著の製品であるため、モジュラーシステムによりプログラマーがカスタムインタフェースをビルドしたり、新しい能力を追加することが許されるからである。分岐した見方の混合物、共通の目的、そして個人的目標は革新を加速させる[22]。その上、フリーソフトウェアは純粋に技術的要求に一致して開発される可能性がある。それは、しばしソフトウェアの質を下げることになる、商業的圧力について考えることを要求されない。商業的圧力は伝統的なソフトウェア開発者にセキュリティ要求よりも顧客の要求への注意を払わされた。というのも、そのような機能は顧客にとっては多少見え難いからである[23]。
時々、オープンソース開発プロセスは、システムテストやドキュメンテーションを無視したように良く定義されておらず、開発プロセスの段階であると言われることがある。しかしながらこのことは小さいプロジェクト(大半は一人のプログラマーによる)に対してのみ真実である。巨大で成功しているプロジェクトは、プログラマー達がチームワークを可能とするために必要な、少なくともいくつかの規則を定義し補強している[24][25]。際部分の複雑なプロジェクトにおいて、これらの規則は二つの独立した開発者による少しの変更でさえレビューをするほど厳格である[26]。
例えばSourceXchangeやEazelのように[19]、全てのOSS主導権が成功した訳ではない。オープンソースの能力が良質なシステムを作成することに納得していないソフトウェア専門家や研究者は、不透明なプロセス、最新の欠陥の発見、そして経験的な証拠の欠如を大部分の重要な問題(生産性と品質を心配させる集められたデータ)であると見極めている[27]。オープンソースに基づく商業的な音楽ビジネスモデルを設計することも難しい。従って、技術的要求のみが満たされて、マーケットの一つとしては満たされない[27]。セキュリティの観点において、オープンソースによりハッカーがクローズドソースよりも容易にソフトウェアの弱点や抜け穴について知ることが可能となる。仮想組織に参加している自主的な代理人の有効なパフォーマンスを作成するために、オープンソースは制御メカニズムに依存する[28]。
開発ツール[編集]
OSS開発において、大部分がボランティアである参加者は、異なる地理的な地域の間に分布している。そのため、ソースコード開発を共同して行うために参加者を助けるためのツールが必要となる。しばし、これらのツールもOSSとして利用可能である[要出典]。
Concurrent Versions System (CVS) や後にはSubversion (svn) やGitのようなバージョン管理システムは、ソフトウェアプロジェクトに対するソースコードファイルやそのファイルの変化を中心的に管理する手助けをするツールの例である[要出典]。
テストの自動化、コンパイル、そしてバグ報告をするユーティリティは、多くの開発者を持つが管理者や質の制御者、あるいは技術的サポートのないソフトウェアプロジェクトの安定とサポートを維持することの手助けをする。異なるプラットフォーム間の編集エラーを報告する構築システムには、Tinderboxが含まれる。共に用いられるバグトラッカーには、BugzillaやGNATSが含まれる[要出典]。
メーリングリスト、IRC、そしてインスタントメッセージのようなツールは、開発者間のインターネットコミュニケーションの手段を提供する。Webも上述したシステムの全ての核となる機能である。サイトの中にはこれらツールの機能を、ソフトウェア開発管理システムとして、全て集中させたものもある。これにはGNU Savannah、SourceForge.net、そしてBountysourceが含まれる。
プロジェクトと組織[編集]
OSS開発に関係する「より傑出した組織」の中には、Apache Web サーバーの作成元であるApacheソフトウェア財団、Linuxオペレーティングシステムカーネルの作成元である、2012年現在ではリーナス・トーバルズを雇っている非営利団体であるLinux Foundation、Eclipseソフトウェア開発プラットフォームの本家であるEclipse Foundation、有力なDebian GNU/Linuxの作成元であるDebian Project、Firefoxウェブブラウザの本家であるMozilla Foundation、そしてヨーロッパ発祥のオープンソースミドルウェアを開発するコミュニティであるOW2 Consortiumが含まれる。新しい組織はより洗練された統治モデルを持ち、その会員達はしばし法人会員から構成される[29]。
オープンソースプログラムの中にはその空間内に入会を定義するようになっているものもある。それにはGIMPイメージ編集システム、サンのJavaプログラミング言語および環境、MySQLデータベース、FreeBSD Unixオペレーティングシステム、サンのOpenOffice.orgオフィスプロダクティビティスイート、そしてWiresharkネットワークLANアナライザおよびプロトコルアナライザが含まれる[要出典]。
オープンソース開発は、LaunchpadやSourceForgeウェブサイトのようなインターネット上のフリーで提供されるサービスを用いたり、CVSやSubversionコントロールシステム、そしてGNUコンパイラコレクションを含むオープンソース自体であるツールを利用することで、しばし「生きていて公然である」ように行われる[要出典]。
Open Source Software Instituteは会員制ベースで、米国連邦の州や地方官庁内のオープンソースソフトウェアソリューションの開発と実装を促進する、2001年に設立された非営利 (501 (c)(6)) な組織である。OSSIの努力は、連邦政府や防御施設、そして国のセキュリティコミュニティ内にオープンソースソフトウェアプログラムと方針の採用を促進することに集中してきた[要出典]。
Open Source for Americaは米国連邦政府にオープンソースソフトウェアの利益についての自覚を高めるために作られたグループである。その目標は、政府の透明性を向上するために、政府のオープンソースソフトウェアの利用、オープンソースソフトウェアプロジェクトへの参加、そしてオープンソースコミュニティの原動力の法人格付与を促進することである[30]。
Mil-OSSは軍の中にOSSの使用と作成の促進に捧げたグループである[31]。
財源[編集]
制限された著作権ライセンスが付いてくる、プロプライエタリないつでも買えるソフトウェアとは異なり、オープンソースソフトウェアは無料で与えられる。このことは、作成者が資金調達のため各ユーザーにライセンス料を要求できないことを意味している。代わりに、その開発に資金を供給するための多くの新しいモデルが現れている[要出典]。
ソフトウェアは1人以上の顧客に対し顧問のプロジェクトとして開発される。顧客は、優先的なバグを見つけ修正したり機能を追加したりする開発者の努力に向けて支払う。企業や独立したコンサルタントはトレーニング、インストール作業、技術支援、またはソフトウェアのカスタマイズにも料金を請求する[要出典]。
財源を得るための別のアプローチは、ソフトウェアをフリーで提供するが、データライブラリのようにプロプライエタリなアドオンのライセンスを売ることである。例えば、オープンソースCADプログラムは、サブスクリプションや定額料金に基づき販売されている部品のライブラリを要求する場合がある。オープンソースソフトウェアは、PC電話ハードウェアの製造業者 (Digium) により開発された、Asterisk電話ソフトウェアのように、相互運用性がある特化されたハードウェアの販売を促進することもある[要出典]。
多くのオープンソースソフトウェアプロジェクトは、大学内の研究プロジェクト、生徒や教授の個人的なプロジェクト、または科学的研究を援助するためのツールとして開始されてきた。オープンソースの大学や研究学会の影響は、BSD Unix、CMU Common Lisp、あるいはApacheへと進化したNCSA HTTPdのように、主催学会の後に名付けられたプロジェクトの数の中に示される[要出典]。
企業は、企業のインフラに役立つオープンソースプロジェクトに取り組む開発者を雇用する。この場合、それは販売するための製品として開発するのではなく、共有した公のユーティリティの種類として開発される。企業の要求に応じて、または自身の仕事を容易にするためのいずれかより生ずる、開発者によるソフトウェアの問題に対するローカルなバグ修正や解決策は、企業が何も支払うことなしにオープンソースの寄付としてリリースされる[32]。Linuxカーネルのようなより巨大なプロジェクトは、趣味に熱中している人や研究開発者と同様に、それを使用し依存している多数の企業から寄付を受けている。
しかも、2005年に創設されたGoogleのGoogle Summer of Codeのように[33]、オープンソースソフトウェアの開発をサポートするための給付金が存在する。
オープンソースプロジェクトに対する新しい資金調達のアプローチは、Webプラットフォームを超えて組織された、Kickstarter、IndiegogoやBountysourceのような、クラウドファンディングである。
他のソフトウェアのライセンス / 開発モデルとの比較[編集]
クローズドソース / プロプライエタリ・ソフトウェア[編集]
オープンソース対クローズドソース(代わりにプロプライエタリ・ソフトウェアと呼ばれる)の討議は時に白熱する。
(Open Source Business Conference surveyにより提供されたように[34])個人や組織がオープンソースを選ぶ主要な4つの理由は、
安価である、
セキュリティ、
ベンダロックインでない、
より良い品質である。
革新的な企業は最早ソフトウェアの販売に依存しないため、プロプライエタリ・ソフトウェアは必要性が低くなってきている[35]。そのような訳で、オープンソースコンテンツマネージメントシステム(あるいはCMS)の開発者はよりありふれたものになってきている。2009年[36]、アメリカのホワイトハウスはそのCMSシステムをプロプライエタリシステムからDrupalオープンソースCMSに交換した。加えて、ノベルのような企業は、既にオープンソースコードに提供する製品の一部を切り替えているため、継続的にオープンソース可用性へ切り替えることの利益を思案している[37]。このように、オープンソースソフトウェアは独特なあるいは特有な問題への解決策を提供する。そのため、企業レベルの会社の98%が何らかの能力でオープンソースのソフトウェア製品を使用することが報告されている[38]。
この市場シフトによると、より重要なシステムがオープンソース提供物を信頼することの始まりであり[39]、(アメリカ合衆国国土安全保障省が認めている[39]ように)さらなる資金調達が「セキュリティバグの追跡」を手助けすることが可能となる。OSSを採用した組織の試験的な研究によると、統計上の重要性のいくつかの要因が、(a)成果に対する態度、(b)他者の影響および行動、そして(c)行動する能力に関して、管理者の信念で観察されていた[40]。
多くの主張者が、多くの人間がコードを閲覧し、編集し、変更するため、オープンソースソフトウェアは本質的により安全であると主張している[41]。Linuxソースコードはコードの1000行あたり0.17個のバグがある一方で、プロプライエタリ・ソフトウェアは一般的に1000行あたり20–30個のバグがある[42]。
フリーソフトウェア[編集]
主要な違いは他の上で一つの用語(つまり、「オープンソース」や「フリーソフトウェア」のどちらか)を選択することで、一つが他方にその目標となるものについて理解させる。リチャード・ストールマンがそれを提起したため、「オープンソースは開発の方法論で、フリーソフトウェアは社会的運動である」[43]
批評家[誰?]は、「オープンソース」という用語は、それを使用し、修正し、再配布する自由を持つソースを単に利用できることと混同するように、異なる種類の曖昧さをそれが育成すると述べている。開発者は代替の用語として、結果としてフリーソフトウェアでもあるオープンソースソフトウェアを述べることとなる、Free/open source Software (FOSS) や、Free/Libre/open source Software (FLOSS) を使用している[要出典]。
「オープンソース」という用語は元々商標とすることを意図されていた。しかしながら、その用語はあまりに記述的であるため、商標が存在しない[44]。OSIは、それが商標であるかのように人々がオープンソースを扱い、OSIが認めたライセンスの配下でライセンスされたソフトウェアであると単に説明するためにオープンソースを使用することを好んでいる[45]。
OSI認定は、Open Source Initiativeのリストに記されたライセンス配下でライセンスされたソフトウェアを再配布する人々のためのみにライセンスされた商標である[46]。
オープンソースソフトウェアとフリーソフトウェアは、ユーザーに対して信頼できる権利や自由を伴う異なる用語である。それらはフリーソフトウェアに対して2つのアプローチと哲学を述べる。「オープンソース」とフリーソフトウェア」(あるいは「ソフトウェアリブレ」)は共にライセンス制限の厄介さから解放されるソフトウェアであると述べられる。それは制限なしにコピーされ、学習され、修正され、そして再配布される。フリーソフトウェアは、無料で利用可能なソフトウェアとであるフリーウェアとは同じではない[要出典]。
オープンソースソフトウェアの定義は、フリーソフトウェアの定義とほとんど同じものとして記されていた[47]。フリーソフトウェアであるが、オープンソースソフトウェア、およびその逆ではないソフトウェアの非常に少数の場合がある。それらは重点を置く場所という点に違いがある。「フリーソフトウェア」はユーザーに自由を与えるための用語として定義されている。これはフリーソフトウェア運動の目標を反映している。「オープンソース」は、ソースコードが全て見ることができることを強調している。その用語の支持者は通常、ソフトウェアの質と、これがFLOSSプロジェクト間において可能で一般的な開発モデルの原因となった理由を力説している[要出典]。
FSFは、自由の概念の知識は不可欠な要求であり[47][48]、フリーという用語の使用を力説し[47][48]、そしてオープンソース運動からはそれ自体が分離されると信じている[47][48]。
オープンソース対ソース利用可能[編集]
「オープンソースソフトウェア」のOSI定義が幅広く受け入れられているのだが、少数の人々や組織は、ソースを見ることができるが法的に改変したり再配布することができないソフトウェアを呼ぶための用語を使っている。そのようなソフトウェアはしばし「ソース利用可能」や、2001年にマイクロソフトが作り出した「シェアードソース」として呼ばれている.[49] While in 2007 two shared source licenses were certified by the OSI, most of the shared source licenses are still source-available only.[50]。
2007年にOSIの長であるマイケル・ティーマンは、実際にはOSIが認めたライセンスを持っていない場合に「オープンソース」としてソフトウェアを促進しているSugarCRMのような企業を非難した[51]。SugarCRMの場合、ユーザインタフェースに表示されるべき「バッジ」を明示していたため、いわゆる "badgeware" と呼ばれる理由である[52](SugarCRMはそれ以来GPLv3に切り替えられた[53])。別の例としてはバージョン5以前のScilabがある。それは自身を「数値計算用のオープンソースプラットフォーム」[54]であると呼んでいるが、修正したバージョンの商業的再配布を禁止するライセンス[55]を持っていた。OSIは「オープンソース」という用語に対して登録した商標を持っていないため、その用語の利用を妨げるための法的能力は制限される。しかしティーマンは、OSIのライセンスに変更したり異なる用語を使ったりすることでそのような組織に圧力をかけるOSI、顧客、そして共同体のメンバーからの公的意見を使用することを主張している。
主にメディア用を主としてデザインされたが、時々ソフトウェアでも利用されるクリエイティブ・コモンズ・ライセンスは、オープンソース、ソース利用可能、そしてパブリックドメインの間に連続してライセンスをすることを許可するライセンス条項要素を提供する。
歴史[編集]
End of 1990s: Foundation of the Open Source Initative[編集]
1997年エリック・レイモンドはハッカー社会とフリーソフトウェアの原則についての思慮深い分析である伽藍とバザールを出版した。当紙は初期1998年にかなりの注目をあび、ネットスケープコミュニケーションズがNetscape Communicatorをフリーソフトウェアとしてリリースするきっかけの一つとなった。そのコードは今日ではMozilla FirefoxとThunderbirdとしてよく知られる。[要説明]
Netscapeの行動はレイモンドらをFSFのフリーソフトウェアの理想と認知の利点をどのように商業ソフトウェア産業へ運べるかを検討する方向へ動かした。彼らはFSFの社会活動はNetscapeなどの企業に魅力的でないとの結論をだし、ソフトウェアソースコードを共有し、協力しあうことに置ける事業の可能性を強調したフリーソフトウェア運動のリブランドの方法を探した。新たに選んだ名前は「オープンソース」であり、ブルース・ペレンズ、出版者ティム・オライリー、リーナス・トーバルズその他はリブランディングに署名した。Open Source Initiativeは1998年2月に新しい用語の使用を薦め、オープンソースの原則を伝道するために設立された。[56]
Open Source Initiativeは支持する新しい用語の使用を薦め、その原則を伝道するのに努める中、商業ソフトウェア販売者は自由に配布されるソフトウェアとアプリケーションのソースコードへの普遍的アクセスの概念にますます脅かされる気がしていた。あるマイクロソフト取締役が2001年に公に述べたのは「オープンソースは著作物を破壊する物だ。私はこれ以上にソフトウェア事業と著作物事業に悪質な物を想像できない。」[57] この見解は一部のソフトウェア企業によるFOSSへの最初の反応を完璧に要約する。[要出典] しかし、FOSSが歴史的に民間ソフトウェア開発のメインストリーム外を動いていたと同時に、マイクロソフトのような大きな会社はインターネットで正式なオープンソースへの参加を始めた。IBM, Oracle, GoogleとState Farmは今日の競争的なオープンソース市場の企業の内いくつかだ。これまでにfree and open-source software (FOSS)の開発に対しての企業哲学には相当の動きがあった。[58]
フリーソフトウェア運動は1983年に始まった。1998年に、フリーソフトウェアという用語は、法人世界にとって曖昧さを少なくしより快適にする表現として、オープンソースソフトウェアに置き換えるべきだと個人達のグループが主張した[59]。ソフトウェアの開発者は自身のソフトウェアをオープンソースライセンスを伴うソフトウェアとして発表したがっていた。というのも、誰もが同じソフトウェアを開発したりその内部機能を理解するかもしれないからである。オープンソースソフトウェアに伴い、一般的に誰もがそれの修正を作ったり、新しいオペレーティングシステムやプロセッサアーキテクチャに移植したり、他者と共有したり、またある場合はそれを販売することが許される。学者であるCassonとRyanは、オープンソースが採用される、いくつかのポリシーに基づく理由を指摘した。特に(大半のプロプライエタリ文法と比較される)オープンソースから高められた価値の提案は以下のカテゴリである :
セキュリティ
値頃感
透明性
永続性
相互運用性
適応性
ローカライゼーション—特に(ソフトウェアの決定をする)地方政治組織の環境において。CassonとRyanは、プロプライエタリのソフトウェアを購入したりオープンソース選択を実装することを決定するこれらの原因の注意深い分析を含む、「政治組織は固有の責任と納税者への信認義務を持つ」ことを主張している[60]。
「オープンソースの定義」は、特に、オープンソース哲学を表す。そしてさらにオープンソースソフトウェアの使い方、修正、および再配布の用語を定義する。ソフトウェアライセンスは、その他の点を著作権者に著作権法で予約されたユーザーに権利を授ける。いくつかのオープンソースソフトウェアライセンスは、「オープンソースの定義」の境界内に資格を得る。大半の顕著で有名な例としてはGNU General Public License (GPL) がある。GPLは、「さらなる開発とアプリケーションが同じライセンスの下に置かれる状態において、無料配布を許可する」、そのため、フリーでもある[32]。オープンソース配布は、製品のソースコードを公にアクセス可能とする方法を表す一方、オープンソースライセンスにより著者がそのようなアクセスで微調整することを許可される。
「オープンソース」という商標は、ネットスケープの1998年の1月に行われた(Mozillaとして)Navigator用のソースコードリリースの声明に対抗して、1998年の4月7日にパロアルトで開催された戦略会議から出てきた。その会議にいた個人のグループには、ティム・オライリー、リーナス・トーバルズ、Tom Paquin、Jamie Zawinski、ラリー・ウォール、Brian Behlendorf、Sameer Parekh、エリック・オールマン、Greg Olson、ポール・ヴィクシー、John Ousterhout、グイド・ヴァンロッサム、フィル・ジマーマン、ジョン・ギルモア、そしてエリック・レイモンドがいた[61]。彼らは、英語の "free" という言葉の曖昧さにより引き起こされた潜在的な混乱を明らかにするため、Navigatorのソースコードのリリース前の機会を利用した。
多くの人々が、1969年からのインターネットの誕生が、オープンソース運動を開始し、その一方で他者がオープンソースとフリーソフトウェア運動を見分けられなくしたと主張している[62]。
フリーソフトウェア財団 (FSF) は1985年に開始し、"free" という言葉を「配布自由」(または「自由な発言に対しての自由」)を意味するよう意図され、「費用からの自由」(または「フリービールのようなフリー」)ではなかった。フリーソフトウェアの大規模な取引は既に(そして未だに)無料のままであったため、そのようなフリーソフトウェアは非広告的とされる、無料と関連付けられるようになった[要出典]。
Open Source Initiative (OSI) は1998年2月にエリック・レイモンドとブルース・ペレンズによって設立された。インターネット開発共同体によりすでに提供されているクローズドソース開発対オープン開発の歴史が事例からの証拠のうち少なくとも20年に渡っており、OSIは「オープンソース」の事例を、Netscapeのような商業的ビジネスに提供した。OSIは、戦略会議でForesight InstituteのPetersonが提案した用語である、曖昧さを除去し、特に反宣伝的な「フリーソフトウェア」を知覚していた人々によって、「オープンソース」という商標の使用が望みであった。彼らは無料で利用可能なソースコードの実践的な利益へのさらに高いプロフィールをもたらすものを探しており、そして主要なソフトウェアをもたらしたがっている彼らは、ビジネスや他のハイテク産業にオープンソースを導入している。ペレンズは「オープンソース」をOSIのサービスマークにしようと試みた。しかしその試みは商標標準において実用的でないとされた。そうしている間に、ネットスケープ上部管理のためのレイモンドの論文のプレゼンテーションのため、レイモンドは、彼がプレスリリース[63]を単に読んだだけで、その日からネットスケープのCEOであるJim Barksdaleの個人秘書と後に呼ばれるようになった。ネットスケープはそのNavigatorのソースコードをオープンソースとしてリリースし、満足な結果を得た[64]。
現在のアプリケーション[編集]
オープンソースソフトウェア - Wikipedia
