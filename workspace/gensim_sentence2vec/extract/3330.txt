
つい最近PollyPassHashという新しいパスワード管理手法を知りました。
PolyPassHashingについては時間があれば別のポストで書きますが、要約すると、ある一定数の管理者の正しいパスワードが入力されないと暗号化されたパスワードデータベースを復号化できないようにするための仕組みです。
このポストではPolyPassHashingの中核の暗号技術である シャミアの秘密分散法 の紹介とそれを実現する数学的な仕組みを解説したいと思います。
この記事の内容
シャミアの秘密分散法とはなにか
用語
実際にやってみる: Rubyでシャミアの秘密分散
仕組み
シェアの計算
シークレットの復元
シャミアの秘密分散法とはなにか
名前からわかるとおり、シャミアの秘密分散法はRSAのアルゴリズムにも貢献した有名なイスラエル人の暗号研究者アディ・シャミアによって作られました。
シャミアの秘密分散法は秘密のデータであるシークレットを複数のシェアに分割します。一定数のシェアを持ち寄ることで元のデータを復元することができます。
何かデータを暗号化しなければいけないとしましょう。どんな暗号化方式を使ってもいいですが、暗号の鍵はあとで復号するためにどこかに保存しなければいけません。
この鍵は安全な場所と方法で保管されないといけません。もし、この鍵が盗まれたら攻撃者は暗号化したデータを簡単に復号化できてしまいます。しかし、鍵を安全に保管するというのはとても難しい問題です。その鍵を誰かと共有する場合はもっと難しくなります。
鍵の保管と共有は管理者にとって常に頭痛のタネです。
しかし、シャミアの秘密分散法を使えば二つの問題をかなりの割合で解決することができます。
まず、暗号の鍵を複数に分割してそれぞれを別々の管理者に渡します。各管理者は渡された鍵の断片を大切に保管しなければいけませんが、仮に一つの断片が盗まれたとしても元の鍵は復元することはできません。
攻撃者は複数の管理者が持っている断片を盗まないといけないので、もとの鍵を盗むことは格段に難しくなります。
用語
詳細に行く前に使われる用語を明確にしておきましょう。
シークレット
シークレットは攻撃者には知られてはいけないデータです。メッセージや数字の羅列の形を取り、用途は暗号の鍵だったり秘密にしたいメッセージだったりします。
(英語だとSecretと簡潔に言えますが、日本語でピンとくる単語が見つからなかったのでカタカナにしました。)
シェア
シークレットを分割してできた各断片をシェアと呼びます。シェアはシークレットから計算して得られます。シークレットを復元するためには一定数のシェアがそろわないといけません。(シェアは英語だとshareです。直訳すると割り符になりますが、これもなんかしっくりこないのでシェアと書くことにします。)
閾値
閾値はシークレットを復元するために最低必要なシェアの数です。閾値以上のシェアがそろっている場合のみ、もとのシークレットを復元することができます。
実際にやってみる: Rubyでシャミアの秘密分散
そろそろシャミアの秘密分散が動くところを実際に見てみましょう。僕が書いた小さなRubyのライブラリを使ってデモします。このライブラリはPolyPassHash projectで使われているPythonで書かれたものをポートしたものです。Python版はJustinCapposによって書かれました。
まず、コードをPolyPassHash-Rubyから落としてきて、shamirsecret.rbをirbセッションにロードします。
Kim's Tech Blog
