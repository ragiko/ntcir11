
ソフトウェア開発4つの課題
第3回 アーキテクチャについて
アーキテクチャ基礎講義
日本IBM
藤井智弘 
「アーキテクチャ」。この言葉が意味するものはあまりにも幅広く、その存在を正確に捉えている人はとても少ないようだ。今回はRational Unified Process(RUP)で定義されている「アーキテクチャ」を軸に、初心者にもわかりやすくアーキテクチャの真髄を解き明かしていく。キーワードは、コンポーネントとインターフェイスにある。(アットマーク・アイティ編集局)
さて今回はアーキテクチャの話である。……とはいいつつ、魔物ですね、このテーマは。「ワンランク上のエンジニア」を対象とする記事では、よくアーキテクチャという言葉を見かける。プログラミング作法ではなく、アーキテクチャについて語ることが、「ワンランク上のエンジニア」の証であるかのように扱われているようにも思える。しかし、アーキテクチャという言葉自体は、非常に幅広く使われており、「どこからがアーキテクチャで、どこからがアーキテクチャではないのか」という境界は、この記事を書いている私自身、よくわからない。
本稿を書くにあたり、@ITサイトでの過去の記事もざっくりと眺めてみた(とはいっても、タイトルだけだが)が、J2EEのアーキテクチャや.NETアーキテクチャやらの「フレームワーク解説」的実装に近い話から、いきなりEA(Enterprise Architecture)やSOAの話へと一気にジャンプする。「Rational Unified Process(RUP)」をはじめとする反復型開発を標榜するプロセスでは、多かれ少なかれ「アーキテクチャ・リスクを減らしましょう」とか「しっかりとしたアーキテクチャをつくりましょう」というアーキテクチャ重視の姿勢が打ち出されているが、そもそも「アーキテクチャって何か?」が明確でなければ、重視のしようがない。
本稿では、［J2EEより上層］で［SOAほど上層じゃない］、個々のシステム開発プロジェクトにおいて意識すべき層にフォーカスをあてていきたい。
「ソフトウェア開発者ギルド」を開始するときの露払いとして、オンラインのアンケートが実施されたことを覚えていらっしゃるだろうか? Rationalという事業体は、ソフトウェア開発のベスト・プラクティスとして「反復型開発」や「コンポーネントベース・アーキテクチャ」を一貫して推奨してきたが、「では、日本の実際はどうなの?」という所を拾いだしたくてアンケートを行った。そこで、あえてアーキテクチャという言葉を説明せずに、「皆さんが使っているアーキテクチャは何ですか?」という設問をおいたところ、ほとんどの方が、J2EEや.NETをアーキテクチャとしてあげていた。
では業界のお歴々はどう見るか? 「ITアーキテクト宣言」だ。厳密には開発者の役割としてのアーキテクトについて業界の著名人が言及したものであるが、逆にそこから「アーキテクトが扱うモノとしてのアーキテクチャ」の答えがないか……と思って読んではみたが、筆者の結論は「結局、大所高所からモノを見て、でもプロジェクトの金勘定はしない人」であった(あ、なんか、あちらこちらから怒られそう)。しかし、「大所高所から見たモノ」だけでは、アーキテクチャ・リスクって何かわからないし……。
そこで、まずは「Rational Unified Process」におけるアーキテクチャの定義をご覧いただこう。
その環境におけるシステムの最も重要な概念です[IEEE]。特定時点でのソフトウェアシステムのアーキテクチャとは、重要なコンポーネント間のインターフェースを通じた相互作用の構成を示します。システムの組織の構成[UML]。アーキテクチャは、インターフェイスを通じて相互作用を行う部分、これらの部分を繋ぐ関係およびそれらを組み立てるための制約に、段階的に分解できます。インターフェイスを通じて相互作用を行う部分には、クラス、コンポーネントおよびサブシステムが含まれます。(Rational Unified Process Ver2003.06.13より引用)。
そもそも、アーキテクチャという言葉自体は、単に構造といっているに過ぎない。上記の定義からは、次のことが読み取れる。
アーキテクチャは、システムの分割を表す。その分割単位は、何らかの視点で重要度が判別されうる、意味ある単位である
分割されたモノの内部詳細よりも、他とのインターフェイスに注目する
アーキテクチャでは動的側面も取り扱う。この動的側面は、「インターフェイス」を通じた相互作用で表現される
アーキテクチャには、それを組み立てるにあたって、何らかの制約がある場合がある
これをもう少し噛み砕いてみたい。例として、(個人的にはまってみたい)コンポーネント・ステレオを例にしてみよう。
@IT [FYI] ソフトウェア開発4つの課題(3)
