
Sanjeev は、ソフトウェア業界で 20 年もの長い経験があり、この 18 年は IBM Rational ソフトウェアのソリューション・アーキテクトを務めてきました。彼の専門分野には、DevOps、モバイル開発とユーザー・エクスペリエンス、リーン変革とアジャイル変革、アプリケーションのライフサイクル管理、ソフトウェア・サプライ・チェーンなどがあります。彼は、IBM における DevOps の思想的リーダーであり、現在は DevOps を対象とした IBM Worldwide Technical Sales チームのリーダーです。Sanjeev はカンファレンスで定期的に講演をしており、論文も数本執筆しています。彼は『DevOps For Dummies』という書籍の著者でもあります。
最近のビジネス環境は、組織とそのソフトウェア・デリバリー機能に対し、多くを要求します。現在、ビジネス環境は以下のような状況になっています。事業主は、アジリティー (俊敏性) を求めている。開発者は、機能を毎日次々に開発している。運用担当者は、要求に応じて環境をプロビジョニングできるようになっている。顧客は、使用中のどのプラットフォームからでも、最新の機能にアクセスし、それらを使用できることを求めている。以上は、DevOps ムーブメントの原動力となっている要因の一例に過ぎません。現在のアプリケーションは、携帯型端末から複雑な処理を行えるようになっていますが、顧客の要望に合ったビジネス機能を提供するために、エンタープライズ・アプリケーション、レガシー・データウェアハウス、および外部のサード・パーティー API にアクセスする必要もあります。あらゆる新しいテクノロジーやテクノロジー関係のムーブメントと同じく、「DevOps」は、1 つの流行語になりました。DevOps を実践している企業として、Etsy、Facebook、Netflix が例に挙げられることがよくありますが、これらの組織は DevOps の最適な手法については意見を異にしています。一部の組織は、DevOps を「NoOps」の意味で捉えています。つまり、すべての運用業務を開発者が行うことを前提としています。その一方、そのような仕組みは大企業に適していないと反論する組織もあります。業界が DevOps について定義するなかで、各企業のリスク・アセスメント、必要とする価値、そしてニーズに基づいて、さまざまな手法が進化しています。この記事では、DevOps の概要を説明し、組織が DevOps によって実現できるビジネス価値を探り、DevOps を導入するためのアプローチを紹介します。DevOps とは何かDevOps とは、リーン開発およびアジャイル開発の原則に基づくソフトウェア・デリバリーの手法です。DevOps では、事業部門から、開発、品質保証、および運用に至るまでのすべての利害関係者が協力して、顧客から実際に寄せられたフィードバックに基づいてソフトウェアを提供することを目的としています。DevOps の原則によって、ソフトウェア・アプリケーションをより効率的かつ効果的な方法で提供できるだけでなく、実際の顧客フィードバックに応じてソフトウェアを変更および強化することが可能になります。
上に戻るデミング、リーン生産方式、カイゼンDevOps を支える原則は、リーン生産方式のムーブメントが起こった時期に、ウィリアム E. デミング博士などの思想リーダーたちによって広まった原則が基になっています。デミング博士が提唱したのは、継続的な製造品質の改善を目的とした、計画 (Plan)、実行 (Do)、評価 (Check)、そして改善 (Act) または調整 (Adjust) からなる PDCA サイクルです (図 1 を参照)。リーン生産方式のムーブメントは、このコアとなる手法を基に、生産する製品を継続的に改善し、その生産プロセスにおける無駄を常に減らしていくことを目指しています。日本の製造業では、これらの継続的改善のための原則を、「カイゼン」(改善) という手法を用いて数十年前に導入しました。図 1. デミング博士が提唱した、計画、実行、評価、改善のサイクル近年のソフトウェア開発業界では、これらのリーン原則を基にした、アジャイル方法論を適用しています。図 2 に示すように、アジャイル方法論の基本的な考え方は、一定の期間 (スクラム方法論では「スプリント」と呼ばれます) に区切られた反復作業の中で、実際に機能するソフトウェアの一部を開発して顧客からそれに関するフィードバックをすぐに受け取り、そのフィードバックを基にビルドを繰り返し作成することで、ソフトウェア要件を実装していくというものです。アジャイル方法論は、4 つの重要な価値に基づいています。これらの価値は、アジャイル・マニフェストで以下のように説明されています。プロセスやツールよりも個人と対話を優先包括的なドキュメントよりも機能するソフトウェアを優先契約交渉よりも顧客との協調を優先計画に従うよりも変化への対応を優先図 2. DevOps: 小規模なリリースを本番環境に移し、迅速にフィードバックを受けるDevOps は、このリーンおよびアジャイル手法の適用範囲をソフトウェア・デリバリー・ライフサイクル全体に拡大し、開発および品質保証の部門だけでなく、事業部門と運用チームを含むすべての利害関係者を関与させます。DevOps ムーブメントの当初の目的は、開発チームと運用チームの間を隔てる障害を取り除くことでした。これらのチームの間にコミュニケーションや信頼関係がなかったことが、ソフトウェアをデプロイする際の課題となっていたからです。効果的なコミュニケーションの欠如は、開発チームとビジネスの利害関係者が、ユーザーからのフィードバックを入手するのを困難にします。有効なユーザー・フィードバックのメカニズムがなければ、開発チームはフィードバックに対処して、フィードバックを有効に活かすことはできません。DevOps ムーブメントを後押ししたのは、Systems of Engagement (人と関わりあうシステム) アプリケーションに対するニーズです。Systems of Engagement アプリケーションでは、迅速かつ継続的に変更を適用し、市場に製品を適合させることに焦点を絞る必要があります。これらのアプリケーションを使用するのは顧客自身であり、企業の従業員ではありません。従って、これらのアプリケーションは企業が顧客に直接、革新的な機能を提供する機会をもたらします。例えば、銀行の場合、顧客が携帯電話から自身の口座を直接管理できるようにする機能を提供するなどです。DevOps のすべての原則に共通する目的は、開発チームと運用チームの間にある障壁を取り除くことです。これにより、チーム間のコミュニケーションと信頼を確立し、小規模な機能セットをできるだけ早く本番環境および顧客に提供し、顧客からのフィードバックを受け取り、そのフィードバックに対処することが可能となります。それと同時に、ソフトウェア・デリバリー・プロセスを改善して、無駄、やり直し、過剰生産を抑えることにもなります。このように、DevOps を導入することで、組織はイノベーション、高品質の実現、価値を生み出すまでの時間の短縮、そしてコスト低減に焦点を絞れるようになります。
上に戻るDevOps に対する IBM の見解DevOps が成熟するに従って、その原則はソフトウェア・デリバリー・ライフサイクル全体に適用されるようになっていきました。今では、事業主や事業部門の利害関係者にもフィードバックが送信されます。このことから、PDCA サイクルは、ソフトウェアの機能だけでなく、リリース計画、要件、テスティング、環境、そしてソフトウェア・デリバリーのプロセスにも影響を与えるようになっています。DevOps の原則も成熟し、Systems of Engagement アプリケーションに加え、従来の Systems of Record (基幹システム) アプリケーションにも、これらの原則が適用されています。市場が急速に進化し、競争が激化する中で、企業は顧客に提供する無数のアプリケーションにおいて、イノベーションと安定性のバランスを維持しようと格闘しています。IBM が定義する DevOps とは、「継続的ソフトウェア・デリバリーによって、ソフトウェアの利用者が市場機会を捉え、顧客からのフィードバックを受け取るまでの時間を短縮するためのエンタープライズ機能」です。
継続的なイノベーションのために DevOps を導入する
