
数値はすべて16進数です。
青で示したのはZ80の命令として解釈される数値です。それ以外は単なるデータです。機械語では、命令とデータはどちらも単なる数値ですから、プログラムをどこから開始するかによって同じ数値が命令になるかデータになるかが変わります。もしCDが命令として解釈されたとすれば、CALLというサブルーチン呼出し命令になります。
ということで、このプログラムは、
CD(=10進数では205)をAレジスタに入れ、それを0100番地に入れよ
という意味になるのです。
Aレジスタ?、メモリの番地?、などと思った人は次も読んでください。
コンピュータの仕組み
CPUはコンピュータの頭脳である、と言われますが、CPUだけでコンピュータが動いているわけではありません。コンピュータがきちんと機能するためには、CPUの周りにある周辺装置も重要です。
詳しい話は「計算機工学」で勉強してもらうとして、ここではざっくりとコンピュータとCPUの仕組みを説明します。
コンピュータの構造
下の図は一般的なコンピュータの構造を示しています。
メモリとは「主記憶」と呼ばれる記憶装置であり、周辺機器はハードディスクやキーボード、マウス、グラフィックスカードなど、メモリ以外のさまざまなパーツのことです。周辺機器はI/O(Input/Output)とも呼ばれます。
CPUとメモリやI/Oとは、アドレスバスとデータバスによってつながっています。また、いくつかの制御信号もつながっています。
それらは基本的には、アドレスで番地を指定し、その番地のデータを読んだり、その番地にデータを書いたりします。
操作対象がメモリなのかI/Oなのかは制御信号によって指定しますが、機械語のプログラミングの場合は使用する命令が違いますから、どのようにして切り替わっているかを意識する必要はありません。
メモリはデータを記憶しておくための装置であり、通常は、実行中のプログラムやデータはここに記憶されています。
I/Oにはさまざまなタイプがあります。
入力デバイスとしてはキーボードやマウス、カメラなどがあります。このような機器に接続されたI/Oのアドレスを指定してデータを読むと、その入力装置からのデータが読み込めます。
出力デバイスとしてはディスプレイ(グラフィックスカード)やスピーカー(サウンドカード)などがあります。このような機器に接続されたI/Oのアドレスを指定してデータを書くと、その出力装置に何かが出力されるわけです。
またハードディスクやUSBメモリなどは入力にも出力にも使われるI/O機器です。このようなI/Oの場合、書き込みと読み込みの両方を行うことができます。
コンピュータは、メモリの上にプログラムをおき、それを読み書きして実行しながら、必要に応じてI/Oと通信して入出力デバイスからデータを読んだり書いたりしているのです。これによって、キーボードやマウスでコンピュータにいろいろな指示を出したり、結果をディスプレイやスピーカーで確認できるというわけです。
CPUの仕組み
次に、CPUの内部の仕組みを簡単に説明しましょう。
ここでは、機械語プログラミングに必要な部分に限って説明します。
上の図はZ80というCPUの内部構造を表しています。
この中で、機械語のプログラミングを行う上で扱わなければならないのは赤色で示した3つの部分です。
レジスタとはCPU内部の記憶装置のことであり、外部にあるメモリよりさらに高速にアクセスが可能です。メモリやI/Oから読み込んだデータはレジスタに記憶しておき、必要に応じてさまざまな処理に使われます。
レジスタセットはCPUによって異なっており、Z80の持つレジスタは全部で次の21個あります。
Aレジスタはアキュムレータとも呼ばれ、加算や論理積などの演算はこのレジスタの中のデータに対して行われます。言い換えれば、演算を行いたい場合は、Aレジスタに格納しておく必要があります。
Fレジスタはフラグレジスタと呼ばれ、演算結果によって状態が自動的に変化する特別なレジスタです。このレジスタの状態を使って処理を分岐させたりします。これは、いわゆるIF文の実現です。フラグレジスタは8ビットの大きさを持ち、各ビットは次の意味を持っています。
S : サイン(符号)フラグ。演算結果が正(プラス)であれば0に、負(マイナス)であれば1になる
Z : ゼロフラグ。演算結果が0ならば1に、そうでなければ0になる
X : 未使用
H : ハーフキャリーフラグ。演算時に下位4ビットから上位4ビットに桁上がりがあれば1に、なければ0になる
P/V : 
パリティ/オーバーフローフラグ。論理演算の結果では演算結果の中での1のビットの数(パリティ)が偶数なら1に、奇数なら0になる。算術演算の結果ではオーバーフローがあれば1に、なければ0になる。
N : サブトラクト(減算)フラグ。直前に実行された命令が減算命令ならば1に、そうでなければ0になる
C : キャリーフラグ。演算の結果、桁上がり(または桁借り)が発生すれば1に、そうでなければ0になる
この中で特に重要なフラグはゼロフラグとキャリーフラグです。この実験ではゼロフラグしか使いません。
BレジスタからLレジスタまでは汎用レジスタと呼ばれ、データの一時的な記憶やカウンタなど、さまざまな目的で利用されます。プログラムを実行する上での変数のようなものだと思えばよいです。BとC、DとE、HとLはそれぞれ組み合わせて16ビットレジスタとしても使用することができます。メモリのアドレスを指定する場合などに使われます。
Iレジスタはインタラプトレジストといって、割り込みを処理するときに使用されますが、ここでは省略。
Rレジスタはリフレッシュレジスタといって、DRAM(ダイナミックRAM)のリフレッシュに使用されますが、これも省略。
IXとIYレジスタはインデックスレジスタといって、アドレスを指定する際に便利なレジスタです。このレジスタにはディスプレースメントと呼ばれる-128から+127までの数値を指定することができ、ある番地を基準にして相対的なアドレス指定を行うことができます。が、この実験では使用しません。
SPはスタックポインタです。スタックとはちょうど生協食堂のトレイ置き場のような概念で、データを積んでおく場所と考えられます。PUSHとPOPという2つの命令がスタックを使用します。PUSH命令ではスタックにデータを積みます。POP命令でスタックからデータを取り出します。
プログラムカウンタ(PC)は、メモリ上の現在実行中のアドレスを保持しているレジスタです。(これもレジスタですが、構造上分けました)
ALUとはArithmetic Logical 
Unitの略で、日本語では算術論理演算装置と訳されます。CPU内部で必要となる論理演算と算術演算を実行します。可能な演算は、加算、減算、論理積、論理和、比較、シフト・ローテートなどたくさんあります。Z80では、アキュムレータのデータをその他のレジスタのデータを演算し、結果をアキュムレータに戻します。
このように、CPUは、外部のメモリやI/Oからデータを読み、それを必要に応じて演算して、メモリやI/Oに書き出す、という処理を行う装置であるといえます。
ニーモニックについて
機械語は、たとえ16進数で表したとしても、人間にはとても理解しにくい形をしています。
そこで、人間にわかりやすい形で表現するためにニーモニックという表記が使われます。
ニーモニックは、機械語の命令の1つ1つに名前をつけて、読んで意味がわかりやすくしたコードであり、機械語と1対1に対応します。
たとえば、機械語の3Eという命令は、ニーモニックでは LD A,n と記述されます。この意味は、
Aレジスタに、数値nをロード(LD)せよ
ということです。この命令を実行すると、Aレジスタに値が設定されます。
ニーモニックで書かれた機械語プログラムは、16進数表記と比較すると格段に読みやすくなります。
しかし、ニーモニックは直接CPUが実行することはできないので、機械語に翻訳する必要があります。この作業をアセンプルといい、この作業をやってくれるプログラムをアセンプラといいます。
また、ニーモニックから手作業で機械語コードを導く作業はハンドアセンブルと呼ばれます。
詳細な説明(命令動作表)はここにあります。参考にしてください。
レジスタによる計算
まず最初の実験として、2つの整数の和を求める簡単な機械語のプログラムを作ります。
まず、作業用フォルダを準備します。Z:ドライブのどこかに(実験2のフォルダなど)、作業フォルダを作成します。名前は何でも良いですが、ここでは "z80" 
としましょう。
なおこれ以降、ニーモニックにおける16進数の数値には、最後に H をつけて10進数と区別することにします。H は Hexadecimal 
の頭文字です。また、16進数の最初の文字がアルファベットの場合、先頭に0を付加することにします。
ただし、機械語のコードには、この H はつけません。
なお、10進数(Decimal Number)の場合は最後にD、2進数(Binary Number)の場合は最後にBをつけて表現する場合があります。
Z80シミュレータ z80edit
z80editは、植木友浩氏が作成、公開をしているフリーのZ80シミュレータです。(現在は作成終了)
このソフトは内部にニーモニックエディタ、アセンプラ、シミュレータを備えたオールインワンな設計で、Z80の機械語を勉強するにはとても良い環境を提供してくれます。
電算機演習室で使用する場合、デスクトップの「コンピュータ」アイコンをクリック上のアドレス欄をクリック「\\nas\share\exp1\Z80edit」を入力「Z80edit.exe」を実行してください。
Z80シミュレータを起動すると、次の画面が現れます。
z80editを使う上での注意
z80editは良くできたソフトウェアですが、個人がフリーソフトとして作っているものですので、動作がおかしくなる場合もあります。
現在までにわかっている誤動作とその対策について、ここにまとめておきます。
アセンブルがエラーになる:
エラーメッセージが出る場合は、命令をもう一度見直してください。Z80の命令表に載っている命令以外は使えません。特に、Aレジスタではできることが他のBやCレジスタではできない場合が多いので、注意すること。たとえば、DE 
レジスタの番地の内容を HL レジスタの番地に入れようとして、LD (HL),(DE) と書いてもエラーになります。この場合、LD A,(DE) と 
LD (HL),A の2つに分けて書かなければなりません。
エラーメッセージが出ないでとまる場合は、いったんソースコードを保存して、z80edit 
を終了し、再度起動してからやり直すと、うまくいく場合があります。
余計なスペース文字が入っていると、エラーメッセージが出ないエラーになることがあります。行の最後やコードの最後に不要なスペースやタブ文字がないかを確認しましょう。
2つの数値の加算
Z80シミュレータ z80edit に慣れるため、機械語の簡単なプログラムの作成と実行をしてみます。
ここでは、レジスタを使って 13H + 28H = 3BH の足し算を行ってみましょう。
(10進数では、13H=(1x16+3)=19D、28H=(2x16+8)=40D、3B=(3x16+11)=59D)
以下、z80edit の画面を示しながら説明をします。
ニーモニックコードの作成
z80editを起動し、「ファイル」「新規作成」で新しいエディタ画面を開き、次のように入力します。
擬似命令とは、機械語の命令ではなくアセンブラに指示するための命令です。ORGはプログラムの開始番地を指定します。ここで指定した番地にプログラムがおかれます。またENDはプログラムの終端を示すための擬似命令です。
LD命令はLOADの略で、レジスタなどに数値(ここでは13H)を入れる命令です。
ADD命令は加算命令で、今の場合はAレジスタに数値(ここでは28H)を足して、結果をAレジスタに入れます。
HALT命令はCPUの動作を停止します。
また、セミコロン(;)より右はコメントであり、何を書いてあってもアセンブラは無視します。(ということは書かなくても大丈夫です)
入力が終わったら、「ファイル」「保存」でZドライブを選択し、名前をつけて保存します。ファイル名は "addnum1.asm" とします。
今後も新しいプログラムを作成するたびに"自分でわかるファイル名.asm"としてZドライブに保存してください。
また、以前に保存したプログラムを呼び出す場合は、「ファイル」「開く」ファイルの種類を「アセンブラファイル(*asm)」にして選びます。
アセンブル
ニーモニックコードができたら、アセンブルします。
「編集」「アセンブル」を選ぶと次の画面が現れます。
ここで、左のボタンを押すとアセンブルが開始され、エラーがなければ次のようにアセンブルされたコードが表示されます。
もしエラーが表示された場合は、ニーモニックコードをもう一度見直しましょう。
シミュレータで実行
実行には2種類があります。
ステップ実行:ニーモニックコードを1行ずつ実行します
実行:連続的にプログラムが止まるまで実行します
ここでは、ステップ実行を行ってみます。
「シミュレーション」「ステップ実行」を選びます。次の3つのウィンドウが現れます。
ステップ実行ウィンドウはプログラムを1行ずつ実行するためのウィンドウです。右矢印をクリックすると1行進み、左矢印をクリックすると1行戻ります。
メモリダンプウィンドウはプログラムを実行中のメモリの状態を表示します。ただし、このウィンドウはプログラムコードは表示されないようです。シミュレータ上のプログラムが使用可能なメモリ領域は8000H〜8FFFHの4KBのみです。
レジスタウィンドウにはプログラム実行中のレジスタの状態を表示されます。これは2進数、10進数、16進数の3通りの表示形式が選べます。
さらにレジスタウィンドウの上側には、8セグメント8桁LEDと8個のLEDの表示部があり、プログラムからこれらの点灯状態を制御することができます。この方法については後から説明します。
さて、ステップ実行ウィンドウの右矢印をクリックして1行ずつ実行してみましょう。
次のようにレジスタの値が変化するかを確認してください。
行
アドレス
命令
実行後のAレジスタ
機械語プログラミング
