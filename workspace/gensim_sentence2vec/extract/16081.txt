オブジェクト指向ソフトウェアとリレーショナルデータベースを使った作業は、今日のエンタープライズ環境では、厄介で時間を要するものかもしれません。Hibernate は、Java 環境のためのオブジェクト/リレーショナルマッピングツールです。用語オブジェクト/リレーションマッピング (ORM) は、オブジェクトモデルのデータ表現を、 SQL ベースのスキーマをもつリレーショナルデータモデルにマッピングするテクニックを指します。
Hibernate は、Java クラスのデータベーステーブルへの (そして Java データ型から SQL データ型への) マッピングの面倒を見るだけでなく、データクエリーと検索ファシリティーも提供し、SQL と JDBC による手作業でのデータハンドリングで時間を費やすことなく、開発時間の著しい削減を可能にします。
Hibernate の目標は、開発者が、プログラミングタスクが関係する一般的なデータ永続性に関わる時間の 95% を節約できるようにすることです。Hibernate は、データベースにビジネスロジックを実装するために、ストアドプロシジャーだけを使うデータ中心的なアプリケーションにとって、最善の解決策ではないかもしれません。Hibernate は、オブジェクト指向ドメインモデルと Java ベースの中間層内のビジネスロジックで非常に役立ちます。しかしながら、Hibernate が、ベンダー固有の SQL コードを取り除いたり、カプセル化するのに役立つことは確かであり、結果セットを、テーブル状の表現からオブジェクトのグラフに変換するという一般的なタスクについて役立つことでしょう。
Hibernate とオブジェクト/リレーショナルマッピング、あるいは Java すら初めてという場合には、次のステップに従って下さい。
チュートリアルの第 1 章 Tomcat を使ったクイックスタートを、30 分間、Tomcat を使いながら読む。
Hibernate を使うことのできる環境を理解するため、第 2 章 アーキテクチャーを読む。
Hibernate 配布版の eg/ ディレクトリーを見る。ここには、サンプルアプリケーションが含まれている。JDBC ドライバーを lib/ ディレクトリーにコピーし、src/hibernate.properties を編集して、使用するデータベース用に正しい値を設定する。配布版のディレクトリーで、コマンドプロンプトから、(Ant を使って) ant eg と入力する。あるいは、Windows では、build eg と入力する。
情報の主ソースとして、このリファレンスドキュメントを使用する。
FAQ とその答は、Hibernate ウェブサイト上にある。
サードパーティーのデモ、例、チュートリアルのリンクは、Hibernate ウェブサイトにある。
Hibernate ウェブサイト上のコミュニティーエリアは、デザインパターンと (Tomcat、JBoss、Spring、Struts、EJB などとの) 様々な統合解決策の優れたソースである。
Hibernate ウェブサイトのオフラインバージョンは、doc/ サブディレクトリー中で、Hibernate とともに配布されている。
疑問があれば、Hibernate ウェブサイトでリンクされたユーザーフォーラムを使って下さい。私達は、バグレポートと機能リクエストのため、JIRA 問題追跡システムも使っています。Hibernate の開発に興味があれば、開発者メーリングリストに参加して下さい。
Hibernate の商用開発、製品サポート、トレーニングが、JBoss Inc. を通じて利用可能です (http://www.hibernate.org/SupportTraining/ を参照して下さい)。Hibernate は、JBoss プロフェッショナルオープンソース製品スイートのプロジェクトです。
このチュートリアルは、ウェブベースのアプリケーション用の Apache Tomcat サーブレットコンテナーとともに、Hibernate 2.1 をセットアップする方法を説明します。Hibernate は、主要な J2EE アプリケーションサーバーすべてを使って管理された環境で、あるいは、スタンドアロンの Java アプリケーション内部ですら、正しく動作します。このチュートリアルで使用するデータベースシステムは、PostgreSQL です。他のデータベースのサポートは、Hibernate SQL 方言 (dialect) 設定を変更するだけの問題です。
まず、必要なライブラリーすべてを Tomcat をインストールしたディレクトリーにコピーしなければなりません。このチュートリアルには、異なったウェブコンテキスト (webapps/quickstart) を使うので、グローバルライブラリーサーチパス (TOMCAT/common/lib) と、webapps/quickstart/WEB-INF/lib (JAR ファイル用) と webapps/quickstart/WEB-INF/classes 内のコンテキストレベルにおけるクラスローダーの両方を考慮しなければなりません。両方のクラスローダーレベルを、グローバルクラスパスとコンテキストクラスパスと呼ぶことにしましょう。
次に、ライブラリーを 2 つのクラスパスにコピーします。
JDBC ドライバーをグローバルクラスパスにコピーする。これは、Tomcat にバンドルされた DBCP 接続プールソフトウェアのために必要である。Hibernate は、JDBC 接続を使って、データベース上で SQL を実行する。そのため、プールされる JDBC 接続を提供するか、直接サポートされるプール (C3P0, Proxool) の 1 つを使うように Hibernate を設定する必要がある。このチュートリアルの場合、pg73jdbc3.jar ライブラリー (PostgreSQL 7.3 と JDK 1.4 用) をグローバルクラスローダーパスにコピーする。別のデータベースを使いたい場合には、それ用の適切な JDBC ドライバーをコピーするだけである。
Tomcat のグローバルクラスローダーに他の何もコピーしてはいけない。そうしておかないと、Log4j、commons-logging やその他を含む様々なツールに関して問題が発生する可能性があるからである。個々のアプリケーションには、常に、コンテキストパスを使用する。つまり、ライブラリーは WEB-INF/lib にコピーし、自分自身の設定/プロパティーファイルは WEB-INF/classes にコピーする。いずれのディレクトリーも、デフォルトで、コンテキストレベルのクラスパス内にある。
Hibernate は、JAR ライブラリーとしてパッケージされている。hibernate2.jar ファイルは、アプリケーションの他のクラスとともに、コンテキストクラスパスにコピーすべきである。Hibernate は、実行時に、幾つかのサードパーティーライブラリーを必要とする。これらは、Hibernate の配布版の lib/ ディレクトリーにバンドルされている。テーブル 1.1 “Hibernate サードパーティーライブラリー&#8221 を参照せよ。必要なサードパーティーライブラリーをコンテキストクラスパスにコピーする。
HIBERNATE - 慣用的な Java のためのリレーショナル永続性
