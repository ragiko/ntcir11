スクリプト言語
最近はスクリプト言語が広く使われるようになってきたが、何をもってスクリプト言語と呼ぶかという定義は難しい。「スクリプト」という言葉はいろいろな意味で使われており、複数の系統の言語が混じり合っている。
OSのコマンドインタプリタ
1950年代から1980年代の汎用大型機では、バッチ処理の指示にはジョブ制御言語(JCL)、タイムシェアリングシステムの操作にはTSSコマンドインタプリタが使われた。簡単な条件判断やマクロの機能はあるが、普通はプログラミング言語に含めない。
1970年代に登場したUNIXではシェルと呼ばれるコマンドインタプリタで操作を行う。これはコマンドを実行するだけでなく、変数、条件分岐、繰り返しなどの一般的なプログラミング言語として必要な機能を備えている。そのため、対話的に使うだけでなく、プログラムを記述して実行することができる。シェルで記述したプログラムはシェルスクリプトと呼ばれる。
もともとコマンドインタプリタなので、実質的な処理はコマンドを呼び出して行う。例えば、Bourne Shell の場合、整数の足し算は expr コマンドを使って a=`expr $a + 1` などとする。
BSDでは文法をCに近づけた C Shell が標準になった。その後は tcsh や ksh など改良版が次々に作られた。
for x in *.jpg
do
cp "$x" "../backup/$x"
end
テキスト処理用言語
AWK
UNIXでは、ファイルの内容およびコマンドの入出力はすべてバイトストリームであり、リダイレクションやパイプを介して自由にデータをやり取りできる。バイトストリームは普通は文字列として解釈されるので、データを加工することは文字列(テキスト)を加工することとほぼ同義である。そのため、簡便かつ強力なテキスト処理ツールであるAWKがよく使われる。
なお、sedなどのテキスト処理ツールの命令をファイルに保存したものもスクリプトと呼ばれるが、変数も制御構造も無いので、プログラミング言語とは言えない。
もともとAWKは簡単なテキスト処理を効率的に行うことを目的に開発されたが、その後どんどん機能が拡張されていった。
入力から一行読み込み、処理することをファイルの最後まで繰り返す。
読み込まれた行は自動的にフィールドに分割され、 $1, $2, ... という変数でアクセスできる。
スクリプトはパターンとアクションの組を並べた形になっていて、読み込んだ行がパターンとマッチすると、対応するアクションが実行される。
アクションはCと似た文法で記述する。条件分岐、繰り返し、関数などの制御構造がある。
データ型は数値(倍精度浮動小数点数)と文字列であるが、数値が必要な文脈では文字列は自動的に数値に変換され、逆に文字列が必要な場合は数値が文字列に変換される。これは便利だが、時々余計なお世話になる。
データ構造としては、連想配列(ハッシュ)がある。
{ sum += $1 }
END { print sum }
Perl
Perlも、最初はテキストデータを処理してレポートを出力するための、簡易なプログラミング言語として開発された。
制御構造はCとよく似ている。それに加えて、シェルやAWKの便利な点を取り込んでいる。
AWKのように行単位の繰り返しに限定されていないが、コマンドラインオプションを付けると、スクリプトの外側に暗黙の行単位の繰り返しが付加されるので、AWKと同じように使うことができる。
#!/usr/bin/perl
while (<>) {
print if /xxx/;
}
と
#!/usr/bin/perl -n
print if /xxx/;
は同じ。
よく使う書き方は徹底して省略し、とにかく書く量を減らしている。例えば、while ( $_ = <ARGV> ) { print $_; } は while (<>) { print; } と書くことができる。
オブジェクト指向の導入など機能拡張を重ね、現在では汎用プログラミング言語として広く使われている。
スクリプトは、実行時にバイトコードにコンパイルしてから仮想機械で実行する。コンパイルが速いので、コンパイルしたバイトコードを別のファイルに保存することはあまり行われない。
機能拡張用言語
アプリケーションの本体は高速なコンパイル型言語で作るが、それでは柔軟性に乏しいので、機能拡張のためにスクリプト言語のインタプリタを埋め込むことがある。
Emacs Lisp
Emacsはテキストエディタであり、本体はCで書かれているが、Lispの方言であるEmacs Lispのインタプリタを内蔵し、これによって機能を拡張することができる。と言うか、今や機能の大部分がEmacs Lispで書かれている。
最近では少数派となった動的スコープ。
テキストエディタの拡張用に作られたので、エディタの操作を行う関数が用意されているのは当然であるが、「バッファローカル変数」など、Lispの言語仕様にも若干の変更がある。
JavaScript
ブラウザの機能拡張と、インタラクティブなウェブページを提供することを目的に開発された。サーバサイドのプログラムと連携し、ウェブアプリケーションのインターフェース部分という位置づけで使われることも多い。
標準化された言語仕様は ECMAScript という名前になっている。
昔は実行速度が遅かったが、最近はJITコンパイラによって高速になっている。
ブラウザ以外のアプリケーションの拡張言語として使われている例もある(Adobe Acrobat など)。
その他
Python も最初は拡張用言語として開発された。
ゲームソフトにはスクリプト言語が内蔵されていることが多い。LUAなどの汎用スクリプト言語を組み込む場合と、そのアプリケーション固有の言語を作る場合がある。
動的言語
コンパイル時に処理の内容が決定される割合が高い言語(CやJavaなど)に対し、実行時に処理の内容が決定される割合が高い言語を動的言語と呼ぶ。動的とスクリプトは関係無いような気もするのだが、動的であると、小規模なアプリケーションやプロトタイプを素早く作るのに適しているので、結果的にスクリプトを書くのに使われることが多くなる。
Lisp, Perl, Python, Ruby, PHP などが代表的。
動的言語の方がプログラムが小さくなり、開発も早くできると言われている。しかし、プログラムが大規模になるとデバッグが困難になるという欠点もある。
動的に決まる部分が多いと最適化がしにくいので、実行速度は遅くなる。
並列・分散処理用言語
ベクトル化
SIMD(ベクトル)計算機で使われているFORTRANは、配列を繰り返し処理する部分があると、コンパイラが自動的に(あるいはプログラマの指示によって)ベクトル命令を生成する。
X10
参考資料:並列・分散プログラミング言語 X10
IBMが開発中。
マルチコア時代の新しいプログラミングモデル。
単一アドレス空間だが複数の「プレース」に分割される。
複数プレースにまたがるデータ構造が作れるが、データはどれかのプレースに属し、移動は起こらない。
Go
参考資料:The Go Programming Language
Googleが開発。
goroutine: ライトウェイトなスレッド。
channels: データを受け渡すための通信路。
プログラミング言語論教材(追加)
