画像処理の応用の一つに、車や人物といった物体の検出があります。画像の中から、上記のような特定のパターンを探し出すには、「テンプレートマッチング法」が良く用いられます。ここでは、テンプレートマッチングの最も簡単な方法を紹介します。
はじめに
画像処理の応用の一つに、車や人物といった物体の検出があります。まだ、十分完成した技術とはいえませんが、車の場合は、車輪のような丸いものが一定の間隔で並んでいると車らしいと判断し、人物の場合は、丸みを帯びた白いものの真中付近に二つ並んで黒いものがあり、さらにその下の中央部に、横に長いものがあれば人物らしいと判断します。
特に、人物の検出は、防犯やセキュリティ管理の上で重要視され、研究が盛んです。最近、カメラの被写体の中から人物を探し、そこに自動的に焦点をあわせるカメラも出現しました。
画像の中から、上記のような特定のパターンを探し出すには、「テンプレートマッチング法」が良く用いられます。テンプレートとは型紙のことで、それを画像上で移動させながら比較して行くやり方です。ただし、単純な方法では、テンプレートに対して傾斜を持っている画像や、相似形であるが大きさが異なる画像は検出できません。それらに対応させるには、より面倒な処理が必要になり、時間がかかります。
ここでは、テンプレートマッチングの最も簡単な方法を紹介しますが、検出性能は低く、あまり実用的ではありません。技法の理解と遊びが目的と考えてください。
完成版アプレットを見る
対象読者
画像処理に関心があり、画像の二値化、マスク処理などを学習したい人。
必要な環境
J2SE5.0を使っていますが、それより若干旧いバージョンでも大丈夫です。CPUパワーは、大きい方がストレスを感じさせません。
プログラムの概要
図1に示すように、このプログラムは次の部分から成っています。
画像を読み込むreadImageFileメソッド
画像をグレイ化するchangeToGrayメソッド
グレイ画像を二値化するchangeToBinaryメソッド
二つの二値画像を比較するsearchMatchingメソッド
これに対して、被探索画像としての「Faces.jpg」と、テンプレート画像「Temp.gif」を用意し、アプレットを呼び出すHTMLファイルと同じフォルダ(ディレクトリ)に入れておきます。テンプレート画像をGIFにしたのは、JPEGだと非可逆圧縮のために色ににじみが発生し、正確な比較ができないからです。
searchMatchingメソッドに与えるx0とy0のパラメータは、探索結果を表示する画像の左上の座標です。ここでは、被探索二値画像の座標を選んでいます。thresholdパラメータは、これを大きくすると条件が厳しくなり、なかなか合致しません。逆に小さいと、顔以外のものを顔として判定するケースが増えてきます。
上記1.から3.までをinit()メソッドから呼び出し、テンプレートマッチングの準備をします。4.はpaint()メソッドから呼び出し、顔が見つかった場合に赤枠で表示します。ただし、この方法では、処理の終了後に自動的に再描画が始まり、赤枠の表示が二回行われる不自然さが残ります。
テンプレートマッチング法を用いた顔画像の検出:CodeZine
