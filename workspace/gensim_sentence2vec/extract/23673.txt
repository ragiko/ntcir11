コンボリューション(畳み込み演算)を画像処理に使うと、画像を滑らかにしたり、シャープにしたりできます。本稿では、Java 2D APIを利用して、画像処理の基本となる平滑化、鮮鋭化、およびエッジ検出を実装する方法を解説します。
はじめに
コンボリューション(Convolution)は数学用語で、日本語では「畳み込み」といいます。掛け算の結果を足し集める演算からなり、コンピュータ処理の得意とするところです。コンボリューションを画像処理に使うと、画像を滑らかにしたり、シャープにしたりできます。掛け算の係数は、3×3などのサイズのマトリックスで指定します。これをオペレータ、フィルタ、マスク、カーネルなどと呼びます。
Java 2D APIには、画像処理でコンボリューションを行うのに便利なConvolveOpやKernelのクラスがあります。しかし、これらだけに頼ると不便な点もあるため、これらを利用しながら、従来と変わらぬ画像処理ができるように工夫しました。
対象読者
画像処理の基本を学び、ペイント系画像ソフトの一部の機能を自作したい人。
必要な環境
J2SE 5.0を使っていますが、J2SE 1.4.2でも大丈夫です。
コンボリューションに使用するオペレータのいろいろ
コンボリューションは、3×3(一例)のオペレータを原画像に沿って移動させ、オペレータの各要素の値と対応する原画像のピクセル値とを掛け合わせて合計して行います。ここでは、画像処理の目的に応じた各種のオペレータを紹介します。
平滑化オペレータ
一番単純なのは平滑化オペレータで、3×3の範囲の原画像のピクセル値を平均して、中心のピクセル値として出力します。一種の移動平均を取る操作で、画像は「ぼけ」た状態になります。
図1は、オペレータの要素と効果を示したもので、中央が平均化(平滑化)用です。左は、説明のためのもので、実際に使用されることはありませんが、これを使用すると原画像と同じ出力が得られます。右は、「ぼけ」の程度を弱めたもので、中心のピクセルの値に大きな比重を与えています。いずれも、各要素を合計すると1になることに注目してください。
平滑化オペレータには、もっと複雑なものもあります。ガウス分布を用い、「ぼけ」の範囲をσ(シグマ)で調整できる7×7や15×15の大きなものです。
鮮鋭化オペレータ
鮮鋭化オペレータには、原画像に二次微分空間フィルタLaplacian(ラプラシアン)の結果を加算する方式と、アンシャープと呼ばれる、原画像から平滑化(ぼけ)の結果を減算する方法とがあります。アンシャープ方式の方が、ガウス分布による調節ができるので、多く使われています。
アンシャープ(Unsharp)は、文字通り訳すと「シャープにしない」ですが、実際は「シャープにする」オペレータです。図2はアンシャープオペレータの原理を示したもので、原画像と平均(平滑化)画像との差分を原画像に上乗せすることにより、変化分を強調します。
プログラムでは、アンシャープ方式の最も簡単なものを採用しています。
エッジ検出オペレータ
エッジ検出オペレータには、一次微分を用いるものと二次微分を用いるものがあります。一次微分は方向性があり、垂直方向、水平方向などに分けて検出する必要があります。一次微分方式で有名なものには、Prewitt(プレビィット)とSobel(ゾーベル)がありますが、差はほとんどありません。二次微分はLaplacianを用い、方向性がありませんが感度が高いために、雑音に弱い欠点があります。したがって、これを単独で用いることは少なく、ガウスぼかし(平滑化)と併用します。
プログラムでは、一次微分の中では一般的なSobelオペレータを用いています。
図3はSobelオペレータの原理をイメージ的に示したもので、右側に黒い部分がある画像部分をコンボリューションすると「4」が得られ、左側に黒い部分があると「-4」が得られます。上下にある場合や、変化がない場合は、コンボリューション結果は「0」になります。つまり、このオペレータは、垂直方向のエッジを検出します。右が黒か、左が黒かは、出力の符号で分かります。ただし、Java 2D APIのConvolveOpの場合は、負の出力はカットされますので、オペレータの各要素を反転した(-1を掛けた)、負出力用のオペレータを併用する必要があります。
コンボリューションを用いた画像の平滑化、鮮鋭化とエッジ検出:CodeZine
