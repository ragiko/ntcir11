連載目次
前回に引き続き、「APIコントローラの実装」について解説を行う*1。今回は、より実践的なAPIコントローラの実装方法を学ぶ。前回、RESTfulなAPIを設計するための3つのポイントを説明したが、それらが容易に実装できるようになっている点にも注目してみてほしい。
前回〜今回の目次(再掲)は、以下のとおりだ。
【前回】  1. RESTfulなAPIの設計を学ぼう   1-1. REST とは   1-2. HTTPメソッドは、リソースをどのように操作したいかを表す   1-3. URLはリソースの名前を表す   1-4. APIの処理の結果は、ステータス・コードで表す
【今回】  2. APIコントローラの実装   2-1. APIコントローラの役割とは   2-2. APIコントローラの用意   2-3. HTTPリクエストを取得する   2-4. HTTPレスポンスの内容を指定する
なお、開発環境はMicrosoft Visual Studio Express 2012 for Web(Update3)、言語はC#、対象とするASP.NET Web APIのバージョンは1とする*2。
*1ルーティングの設定については、第4回目で紹介する予定だ。
*2開発環境は、本稿執筆時点でリリースされているMicrosoft Visual Studio Express 2013 for Web(製品候補版)でも構わない。ただし、プロジェクト・テンプレートに含まれるASP.NET Web APIのバージョンは2なので注意。 以降の解説にて、バージョン2との違いがある場合は随時補足する。
今回、実装するAPIコントローラのコード内容や仕様は、前回の「今回〜次回で使用するAPIコントローラのサンプル・コード」で説明しているので、こちらをもう一度ざっと眺めていただくことでより全体が理解しやすくなるだろう。
2. APIコントローラの実装
ここでは、APIコントローラの実装方法について解説する。大半のケースでは、APIコントローラはリソースごとに作成し、
HTTPリクエストの取得
処理の実行
HTTPレスポンスの決定
と主に3つの処理を記述することになる。
詳しい実装方法に入る前に、まずはASP.NET Web APIにおけるAPIコントローラの役割を明確にしよう。
2-1 APIコントローラの役割とは
ASP.NET Web APIフレームワークの全体の流れ(クライアントからHTTPリクエストを受けて、HTTPレスポンスを返すまでの一連の流れ)を、APIコントローラを中心に下の図2にまとめた。
流れを順に追っていくと、以下のとおりとなる。
(1)ASP.NET Web APIフレームワークは、HTTPリクエストを受けて、ルーティングの設定を参照し、APIコントローラ・クラスとそのメソッドを特定して呼び出す ……(1) (2)呼び出されたAPIコントローラ・クラスのメソッドは、HTTPリクエストの値を参照し、APIの目的である処理を実行した後、クライアントへ返すためのHTTPレスポンスの内容を決定する ……(2) (3)ASP.NET Web APIフレームワーク(APIコントローラ以外の部分)は、HTTPレスポンスを構築し、クライアントへ返す ……(3)
つまりAPIコントローラの役割は、APIの目的である処理を実行し、HTTPレスポンスの内容を指定することにある。この役割を踏まえ、開発者は主に3つの処理をAPIコントローラに記述する。
a. 処理を実行するために必要なHTTPリクエストの値を取得する
b. 処理を記述する
c. HTTPレスポンスの内容を指定する
大半は、aはメソッドの引数、bはメソッド内、cはメソッドの戻り値にて表す。例として、前回のリスト1「顧客APIコントローラ・クラス」のコードの中で該当する箇所を下の図3に示す。
連載:ASP.NET Web API 入門:第3回 APIコントローラの実装方法 (1/3) - @IT
