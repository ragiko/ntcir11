1ページ(表紙)
システム量子工学専攻 大橋研究室 学籍番号56542の梅城崇師です
これから、「多閾値Membership行列を用いたコミュニティ検出に関する研究」についての発表を始めます。
2ページ
まず、研究の背景について説明します。
一般にネットワークとは、複数の頂点と、頂点同士をつなぐ辺によって成り立つ抽象構造です。
これは現実世界の様々なシステムに適用可能です。
例えば、インターネットでは「ページ」と「ページ間のリンク」をネットワークと見做すことができます。
社会ネットワークでは「個人」と「友人・知人関係」をネットワークと見なすことができます。
このようなネットワークを図示した例が中央の図で、
左側がWebサイト、右側が論文の共著関係のネットワークになります。
この「ネットワーク」の特徴からシステムの振る舞いを分析する、ネットワークサイエンス分野では、
「コミュニティ」と呼ばれるものの定義と検出が注目されています。
コミュニティの定義は、ここでは、コミュニティ内では密に接続しあっているが、
コミュニティ外の頂点とは疎に接続している頂点の集合であるとします。
コミュニティ検出が注目される理由は、これを解析することでネットワーク構造を把握しやすくなるためです。
例えば応用例として、インターネットにおいて、ページ分類やトピック作成を的確に行えるようになったり、
社会ネットワークにおいて、個人における所属集団を特定したりといったことが可能になります。
3ページ
引き続いて研究の背景と目的について説明させていただきます。
コミュニティ構造検出方法の代表例は、媒介中心性と呼ばれる数値を用いたものです。
しかし、この方法は、計算量が非常に多く、
全ネットワーク構造が既知である必要や、
複数最短経路があった場合の対応方法などの問題点があります。
これを克服する方法の一つとして、l-shell法が提案されています。
これは、局所的なネットワーク構造に注目したアルゴリズムで、計算量も少ないものです。
また、membership行列を併用することで、全体構造も把握可能となります。
本研究ではl-shell法とそれに基づくmembership行列を、多閾値という方向で発展させ、
より柔軟で効率のよいコミュニティ検出を行い、
ひいてはコミュニティの階層構造をも検出できるようにすることを目的とします。
4ページ
次にl-shell法について説明します。
l-shell法はネットワーク中で、ある頂点が属するコミュニティを特定するアルゴリズムです。
この「l-shell」とは、開始頂点jからの最短距離がlである頂点群のことを指します。
図では、赤色頂点が開始頂点であり0-shell、
青色頂点が距離1で1-shell、緑色頂点が2-shell、黄色頂点が3-shellになります。
このl-shellを用いることで、頂点jが属するコミュニティを、
jから後述のラージL-shellまで広がるshellの集合体と定義します。
ここで更に、l-shellに対応するtotal emerging degreeという値を、
l-shellより外側へ向けて張られた辺の数と定義します。
図では、0-shellのemerging degreeは赤線で示した3本、
1-shellのemerging degreeは青線で示した4本、
2-shellのemerging degreeは緑線で示した4本になり、
同一shellに向けた黒線で示したような辺は無視します。
5ページ
続いて、total emerging degree変化率を、先ほどのemerging degreeの比として定義します。
この変化率をl=1から順に計算していき、
変化率が初めてαより小さくなるlをラージLとします。
この計算方法からわかるように、ラージL-shellより外側の頂点は不要なため、
計算量はO(1)となり、局所的探索で計算が終了することがわかります。
この変化率について簡単に考察すれば、
l-shellがコミュニティ内で拡大しているときは、
通常のコミュニティ内には多数の相互接続があるため、
emerging degreeは増加し、変化率は1より大きな値を取ると考えられます。
逆にl-shellがコミュニティの境界に達すると、
コミュニティからコミュニティ外の頂点への接続数は内部の相互接続に比べて少ないため、
emerging degreeは急速に減少し、変化率は1より小さな値を取ると予想されます。
よって適当な閾値αを導入し、変化率を監視することで、
l-shellがコミュニティを覆った段階でshellの成長を中止することができることになります。
6ページ
l-shell法は局所的に処理でき、計算量も少ないのですが、
ネットワーク構造における開始頂点の位置に結果が影響されやすい欠点があります。
例えばコミュニティ境界付近の頂点を開始頂点にした場合、
l-shellは境界をまたぐ形で両方のコミュニティに同時に広がってしまいます。
この影響を緩和するため、これから説明するmembership行列を用います。
membership行列は、全頂点に対してl-shell法を適用し、
全ての局所的なメンバ関係を列挙することで
ネットワークの全体構造を把握する手法です。
具体的にmembership行列の生成方法は、
まずネットワーク中のN個の全頂点に、左下の図のように1〜Nの番号を任意に割り振ります。
次に例えば頂点番号10番に対し、l-shell法を適用した際の結果を、ベクトルとして保持します。
このベクトルのi番目の要素は、i番目の頂点が10番目の頂点と同じコミュニティなら1で、違うなら0という値を持ちます。
このベクトルを全ての頂点に対して生成して、結果をN×Nの行列形式にすることで、
右に示したようなmembership行列ができます。
この例では、赤色部分が1を、青色部分が0の値を示しています。
7ページ
頂点に番号を任意に割り振るため、
通常のMembership行列は右上図のようになって構造がわかりにくい状態になっています。
よってコミュニティを視覚的に検出するために、ソート作業を行う必要があります。
まず、頂点iと頂点jの距離を、iとjそれぞれの要素をδ関数を用いて評価した式で定義します。
ソートの方法は、既にi番目の要素までがソート済とした場合、
頂点iと、それより後方のi+1からnまでの頂点との距離を、それぞれ計算します。(これが図の1番です)
次にiとの距離が最も小さい頂点j-minを求めます(これが図の2番です)。
そして、(3番として)i+1とj-minの位置を交換し、
(最後に)これをiが、1からn-1まで同様に繰り返すことで完了します。
ソートを行うことで、右上図の行列は、右下図のようになり、
簡単にコミュニティ構造を確認することができるようになります。
8ページ
従来手法では、l-shell法に単一のαを閾値として用いてきました。
このαは検出するコミュニティレベルを規定する唯一の値になります。
αを小さくすればより広範なコミュニティを、
αを大きくすればより狭小なコミュニティを検出できます。
極端な例ではα=0では全接続頂点で単一コミュニティを、
αが頂点が持つ最大の辺の数より大きいときは全頂点で単独コミュニティを形成します。
しかしこのαを用いる方法では問題点もあります。
問題点の一つは、適切なαを簡単には与えられないことです。
αは任意値を与えることができる柔軟性を持つ反面、
どのような値を与えればよいかという指標が存在しません。
よってコミュニティ検出に適したαを得るため、
ネットワークに対して適当と思われるαを試行錯誤しながら、
membership行列を生成・ソート・評価して理想的な結果を得なければなりません。
これはコミュニティ分析に費やす労力と計算量の無駄につながります。
9ページ
単閾値において、更に重要な問題として、αという閾値が単一であるため、
階層構造を持つコミュニティを一度に捉えられないことであります。
例えば左上のような階層構造を持ったネットワークを考えます。
これは、6個の頂点同士が接続したネットワーク同士をつなぎあわせたもので、
六角形を単位とした6個のコミュニティとも、
中央を境にした青色頂点群と橙色頂点群の2個のコミュニティともとることができます。
このネットワーク対し、単閾値αでmembership行列を求めると下のような結果となり、
αが2.0のときは六角形のコミュニティが、
αが0.75のときは左右の二つのコミュニティが現れるように、
どちらか一方のコミュニティのみが現れるか、
両者の中間値のαが1.3のように、コミュニティレベルの混合された
解析の難しい結果が現れるという極端な結果となります。
10ページ
ここで今回新たに、
l-shell法で用いてきた閾値変数αを、複数の閾値に変更する方法を提案します。
まず複数の閾値を小さい順にα1,α2,…,αxと定義します。
これを次の方法を用いて、membership行列に適用することで、
これまで0と1のビット値しかもたなかった行列を、整数値をもつものに拡張できます。
具体的な拡張方法は、
αをα_iとしてl-shellを広げたときに、Lのαx-shellまで広がるとします。
このときmembership行列の要素v_jを、
0からLのαx-shellに属する頂点についてはvj=x、
Lのαx+1からLのα(x-1)-shellに属する頂点については、vj=x−1
これら以外についてはvj=0とします。
図にはx=3の場合を示しました。
x=3なので、Lのα3,α2,α1-shellが定義できます。
そして、Lのα3-shellに含まれる頂点が3の値を、
Lのα3からα2-shellに含まれる頂点が2の値を、
Lのα2からα1-shellに含まれる頂点が1の値を、
そしてLのα1-shellより外側の頂点が0の値を持つことになります。
11ページ
このようにして生成されたmembership行列は、
0からxまでの値が要素に含まれる可能性があるため、
頂点iと頂点jの距離の計算式も、単閾値の場合の式のxについての総和をとるという方法で拡張します。
この際、単閾値法と同じ考え方を取るために、δ関数に加えて、ステップ関数を使用しています。
更に、この距離の式は絶対値を使った簡単なものに書き下すことができ、
計算量が少ないため実際はこちらを用いて計算を行いました。
以上の多閾値法は、
x=1ならば従来の単閾値法と全く同じものと考えることができます。
また多閾値法での計算量は、
単閾値法でαをα1とした場合に等しく計算コストは変わりません。
12ページ
続いて、多閾値を用いた場合の結果を示します。
下の行列は、左上の階層構造ネットワークに多閾値法を適用して、membership行列を求めた結果です。
ここで、青色部分が行列の値が0で、赤色が濃くなるに従って行列の値を大きくなることを示します。
左図のようにαを0.75と2.0の二つの閾値を与えると、
単閾値での二つのmembership行列の結果を重ね合わせた、
コミュニティの階層構造が一瞥してわかるようになって、
多閾値によるmembership行列が階層構造の視覚的な検出に際して有効であることがわかります。
また、0.2〜2.0まで0.2刻みで10個の多閾値を指定した結果については、
この場合も濃赤色の小規模コミュニティと、
濃赤色〜淡赤色の大規模コミュニティの二つを容易に確認することができました。
これによって、αの適切な値がわからない場合でも、
適当に多数の閾値を与えることで、ネットワーク構造を把握することができることがわかり、
αの試行錯誤による労力の軽減が図られたといえます。
13ページ
次に、複数閾値でソートを行った結果です。
まず左側の二つの図に注目してください。
左側のランダムに並び替えた状態から、ソートすることで、
中央の階層構造が的確に認識できる状態を生成できていて、
距離の計算式が有効に働いていることと、
ソートアルゴリズムが多閾値の場合でも妥当であることを確認できました。
また、単閾値よりも多閾値でソートがより有効なことを示すため、
単閾値で行ったソート結果を右側の上下に並べた図に示してあります。
なお、構造を把握しやすくするために、単閾値の結果をα=0.75,2.0と複数閾値の色分けを使用して示します。
単閾値の場合はそれぞれのαで抽出されるコミュニティのみに着目してソートしているため、
当該αの階層でないコミュニティはソートの際に無視されていて、
上側では小さなコミュニティは形成されているが、大きなコミュニティは破壊されている様子が、
下側では大きなコミュニティは形成されているが、小さなコミュニティは破壊されている様子がわかります。
(これと比較すれば、多閾値がコミュニティの階層構造を構築する形で
非常に有用な影響を及ぼしていることがわかります。)
14ページ
以上より、今回新たに提案した多閾値法が
コミュニティ構造検出に伴うリソース削減と、
階層構造の視覚的把握にとって非常に有効であることがわかりました。
課題としては、
より大規模で複雑なネットワークで、本手法が有効であることを確認するとともに、
多閾値を発展させ連続値として精度向上を図ることと、
結果を視覚的ではなく定量的に判断するための結果評価法の確立が挙げられます。
また行列のソートはN^3オーダーの計算量が必要なため、
精度を保ちつつ計算コストを圧縮できないかの検討も必要であると考えます。

