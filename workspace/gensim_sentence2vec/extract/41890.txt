改訂: 2007.Jun.11. M.Yasue.
みだし
6.1 ファイルの基本概念
| 
6.2 ディレクトリシステム
| 
6.3 領域割り当て
| 
6.4 アクセスメソッド
|
戻る
| 
次へ
| 
上へ
6.1 ファイルの基本概念
CPUと利用者側からみたコンピュータシステム
[CPU][主記憶]
|[二次記憶]
||
[格納領域][利用者]
利用者は、格納領域を仮想(論理)アドレス空間として利用。
格納されるデータ:ファイル(1かたまりのデータ)
格納されたデータは、「0と1」の2進数で表現されている。
表現の二値論理化(電子化、ディジタル化、コンピュータ上での表現法)
アナログ表現:連続的にかわる量で表現
[内部データ][利用者]
ファイル:大きさは可変。作成、編集(修正、挿入、追加、入れ替え)、削除
ファイルの中のデータ:ファイルの名前fとファイル内の記憶位置rで指定
つまり、二次仮想アドレス空間は、(f,r)で指定される2次元空間。
f、rの表記は、file, recordの略名。
レコード方式のファイルの構造:
項目(Record)---サブ項目(Field) 
例:座席予約ファイル:
項目(日時:列車名)
|---サブ項目(何号車:座席番号:どの駅から:どの駅まで:氏名:電話番号)
バイト列方式のファイルの構造:主記憶のように、ファイルをバイトの列として扱う。
UNIX, Windows, MacOSのファイル形式はバイト列方式を採用
二次仮想アドレス空間の仕様
オペレーティングシステムは、以下の仕様を実現している。
(1)ファイルは、任意の時点で任意の所に作成・削除可
(2)ファイルは、随時、拡大・縮小可
(3)ファイルの属性:ファイルをプロセス間で共用可。
利用者間でread,write,executeの許可を設定可。
(4)ファイルの大きさに制限はない。
二次記憶に対して、二次記憶内のデータの値を呼び出すときの手続き:
(a)        (b)                     (c)
ユーザ定義名 ----->全システムで------>全システムで固有の------>値
(f,r)      ユニークな名前   物理的記憶位置           (v)
(g,r)              (d,c,t,s)
(d,c,t,s):ディスク上のデータの記憶位置を識別
ボリューム番号、シリンダ番号、トラック番号、セクタ番号
磁気テープの場合は、(d,s):ボリューム番号、レコード番号
(a)ファイルネーミング関数
(b)アクセス関数
(c)内容関数:値vをその記憶位置(d,c,t,s)から読み出す、または書き込む。
この関数を入出力スーパバイザ(I/O superviser)という。
6.2 ディレクトリシステム
ファイルは、実行中のプロセスばかりでなく、利用者が使うアプリケーションプログラムからも参照される。このため、ファイルは、システムの制御の下におかれ、システム共通のネーミング機構を用いて参照される。このネーミング機構としてディレクトリシステムを使う。
(a)ディレクトリシステムの構造
ディレクトリシステムの機能:ユーザ定義名をシステムに固有な名前(g,r)に変換。
名前付けの構造:階層構造(木構造、ツリー構造)
木構造:ルート(根)---ノード(幹、枝)---リーフノード(葉)
途中のノードをディレクトリという。
階層構造の例として、本学の課程、専攻、学生からなる階層を考える。
--------------->----------
ルートディレクトリ ［T｜S｜L］  組織全体(宮教の場合、学部は複数の課程で構成されている)
課程レベルの    T               S      L     課程別の専攻
ディレクトリ [t1|t2|t3...]   [s1|s2|....]    [L1,L2|L3....]
個人レベルの  T/t1            T/t2    .....      L/L1 ...  専攻内の学生
ディレクトリ [t1-1|t1-2...]   [t2-1|t2-2|..]    [L1-1|L1-2|L1-3|...]
|                 :                |
|   :.............:                |
|   :        (Link)                |
|   :                              |
T/t1/t1-1     ......              L/L1/L1-1 .....  
ファイル    [ File-1, File-2,..]              [ File-1, File-2....]
-----------------------------------------------------------------------
注: 木構造に対して、1次元構造をしているのが学籍番号(c8001,c8002......)
ディレクトリの有する情報:すぐ下の階層のディレクトリとファイル情報
アクセス制御(Read/Write/Execute)、所有者情報など
ファイルの物理的アドレス情報、
時間情報(最初に作られたとき、最終的更新)
ディレクトリ内のディレクトリやファイル名(エントリ名という):
所属するディレクトリ内でのみユニークであればよい。
ファイル名の指定:ルートからファイルに至るエントリ名の列(例:T/t1/t1-1/File-n)
統一性と単純性のため、ディレクトリ自身もファイルとして扱う。==>
ディレクトリもエントリ名の列(パス名)で識別できる。
異なるディレクトリ間でのファイル共有:
この機能を実現するため、エントリ名にポインタ-リンクを張って、参照可にする。
6.3 領域割り当て
ディスク上のファイルの読み書きを効率的におこなうため、いくつかの「領域割り当て」方式が考案されている。磁気ディスクの上の領域割り当ては主記憶の場合と本質的に同じ。しかし、二次記憶のアクセスタイムは主記憶に比べて大きく、二次記憶内でのファイルの再配置は頻繁に行えない。(記憶の階層構造を参照)
このアクセスタイムの違いのために、主記憶の領域は、ページングによって固定サイズで区切られるのに対して、二次記憶の領域割り当ては、割り当ての大きさが固定長と可変長の場合がある。
二次記憶の固定長割り当ては、フラグメンテーションを回避できるが、ファイルは小さなブロックに分けられ、ファイルアクセスが遅くなる欠点がある。この欠点は、キャッシングによって改善されうる。
(a)固定長割り当て方式
固定長割り当ては、セクタ、またはブロック(複数のセクタ)単位でおこなう。方式として、リスト方式とインデックス方式とがある。
(1)リスト方式
・ファイルのディレクトリエントリに最初のセクタ位置を記録
・ファイルの読み出しは、ファイルの先頭から指定されたレコード(領域割り当ての単位)位置を指定しておこなう。書き込みは、追加モードでおこなう。
・フラグメンテーションを生じない。前もって、ファイルの大きさを宣言しなくてよい。
・シーケンシャルファイル(順次追加書き込み、順次読み出し)に対応。この特徴は、ランダムなアクセス(任意の指定箇所への書き込み/読み出し)ができないという欠点でもある。
(2)インデックス方式
ファイルに割り当てられた領域のセクタアドレスの一覧をインデックスとしてもつ。(割り当てられた領域は連続した領域でなくてもよい。)ファイルの先頭の1つのセクタをインデックスとする。1個のセクタで不足の時は、インデックスを階層化する。
ファイルへのアクセスは、
・インデックスへのアクセス
・インデックスで示されたセクタへのアクセス
の2段階。ただし、インデックスをメモリ上におくことで、1回のディスクアクセスでよくなる。(ファイルアクセスの高速化)
空きセクタの管理:セクタの「使用中/空き」の情報を1ビット情報(0,1)で表すテーブルでおこなえる。
(b)可変長割り当て方式
連続したセクタをファイルに割り当てる方式。この方式には、次の2つがある。
・単一領域割り当て方式:ファイルを分割せずに、専属した1つの領域を割り当てる。
・多重分割方式:ファイルの分割を許し、各分割(セグメント)に連続割り当て方式を適用。
単一領域割り当て方式の欠点:
(1)ファイル作成時に、ファイルのサイズを宣言しなければならない。
(2)該当する連続領域を割り当てるので、空き領域のフラグメンテーションがおきる。フラグメンテーションを避けるために、ディスクのコンパクションをときどき必要とする。(コンパクションは、別のディスクへファイルを転送することで可能)
単一領域割り当て方式の長所:
(1)連続したセクタが割り当てられるので、シーク(読み出しヘッドの前後の移動)の回数が減り、ファイルアクセスが速い。
(2)ランダムアクセスファイルに対して、レコードの番号をセクタ番号に変換するのが簡単。
単一領域割り当て方式の欠点を補い、長所を取り入れたのが、多重分割方式である。
os6
