
データベース クエリ パフォーマンスの向上
製品: All
バージョン: All
最終修正日:  08 Nov 2014
よく機能するワークブックおよび視覚化を作成する上で最も重要なことは、決して視覚化が参照元クエリより高速に実行されないという基本原則です。そのため、ワークブックをできるだけ速く実行するには、クエリを適切に実行する必要があります。
エンド ユーザー対象
以下では、いくつかのヒントとポインターを通し、データ アクセスが問題であるかどうかをワークブック作成者が理解するよう助け、その対処方法に関する提案を示します。
要求内容の把握
視覚化の実行速度が低下する原因は、参照元の表から多数のレコードを返すクエリが不意に作成されたことであり、その場合、少数の集計レコードが影響を受ける可能性があります。データベース管理システム (DBMS) が結果を計算してレコードを Tableau に戻すのにかかる時間は、非常に長くなる場合があります。Tableau Desktop ワークスペースの左下隅でマーク数を見ると確認できます。マーク数が非常に大きい場合、大量のデータをデータベースから取得している可能性があります。
不要なディメンションを一切視覚化に含めないようにします。このようにすると、データベースの集計が影響を受け、結果セットのサイズが大きくなります。
ネイティブ ドライバーの使用
Tableau 製品には、広範な種類のデータ ソースに接続する機能が含まれています。これらのデータ ソースの多くは、ネイティブ接続として実装されます。つまり、Tableau はこれらのデータ ソースに固有の技術、機能、および最適化を実装しています。これらの接続のための Tableau エンジニアリングおよびテスト アクティビティにより、これらの製品が、Tableau が提供する必要のある最も堅牢な製品であることを保証します。
さらに Tableau では、新しい接続を作成する際に利用可能な名前付きオプションのリスト以外のデータ ソースにアクセスするために、汎用性のある ODBC 標準を使用するオプションを実装しています。公に定められた基準として、多くのデータベース ベンダーは ODBC ドライバーをベンダーのデータベースに接続できるようにします。Tableau では、これらの ODBC ドライバーを使用してデータに接続するオプションを提供しています。
データベース ベンダーごとに ODBC 標準の機能を解釈または実装する方法が異なる可能性があります。場合によっては、特定のドライバーを引き続き使用するために、Tableau ではデータ抽出の作成を推奨または要求します。Tableau が接続できない ODBC ドライバーおよびデータベースもあります。
クエリ中のデータ ソースに対するネイティブ ドライバーがある場合、通常はパフォーマンスが向上しますので、ODBC 接続に対してこのドライバーを使用します。
別のツールによるテスト
ワークブックの速度低下の原因がクエリの速度低下であるかどうかを特定する良い方法として、Microsoft Access や Microsoft Excel など別のツールで同じクエリをテストします。実行しているクエリを見つけるには、My Documents\My Tableau Repository\Logs を検索し、log.txt というファイルを見つけます。 このファイルを開いて下から上に向かってスクロールし、次のようなセクションを見つけます: 
2011-08-04 13:46:16.161 (2198): DATA INTERPRETER: Executing primary query.2011-08-04 13:46:16.171 (2204): QUERY protocol='05d09100 '2011-08-04 13:46:16.171 (2204): SELECT [Superstore APAC].[Customer Segment] AS [none:Customer Segment:nk],2011-08-04 13:46:16.171 (2204): [Superstore APAC].[Product Category] AS [none:Product Category:nk],2011-08-04 13:46:16.171 (2204): [Superstore APAC].[Product Sub-Category] AS [none:Product Sub-Category:nk],2011-08-04 13:46:16.171 (2204): SUM([Superstore APAC].[Sales]) AS [sum:Sales:qk]2011-08-04 13:46:16.171 (2204): FROM [dbo].[Superstore APAC] [Superstore APAC]2011-08-04 13:46:16.171 (2204): GROUP BY [Superstore APAC].[Customer Segment],2011-08-04 13:46:16.171 (2204): [Superstore APAC].[Product Category],2011-08-04 13:46:16.171 (2204): [Superstore APAC].[Product Sub-Category]2011-08-04 13:46:16.171 (2204): /QUERY 2011-08-04 13:46:16.238 (2204): [Time] Running the command took 0.0659 sec.2011-08-04 13:46:16.238 (2204): [Time] Running the query took 0.0662 sec.2011-08-04 13:46:16.240 (2204): [Time] Getting the records took 0.0007 sec.2011-08-04 13:46:16.240 (2204): Building the tuples took 0.0001 sec.2011-08-04 13:46:16.240 (2198): [Count] Query returned 68 records (Q10).
クエリ開始タグとクエリ終了タグに囲まれているセクションが、データベースに渡されたクエリです。このテキストをコピーし、Access や Excel のようなツールから使用することができます。返す時間が Tableau と同程度の場合、問題はツールではなく、クエリである可能性があります。
抽出の使用
データ (つまり、Excel スプレッドシートまたはデータベース サーバー) にライブ接続する際にクエリ パフォーマンスが低下している場合、1 つの簡単な方法として、Tableau データ抽出 (.tde) を作成することでパフォーマンスを向上させることができます。
抽出により、データ接続により指定された完全なセットのデータを読み取り、Tableau が作成する分析クエリ型に対して特別に設計された、最適化されたファイル構造に保存することができます。これらの抽出ファイルには、階層の事前集計データや事前計算された計算フィールド (視覚化のレンダリングおよび表示に必要な作業量を減らす) など、パフォーマンス優先の機能を含めることができます。
DBA 対象
上記のポイントではパフォーマンスの問題に十分に対処できない場合、問題はエンド ユーザーでは対処できないほど深刻です。データベース管理者 (DBA) に依頼して次のセクションを見てもらい、提案してもらうことをお勧めします。
要求内容の十分な把握
すでに述べたとおり、データベースに求める事柄を認識することがパフォーマンス調整の重要な一部となります。データベース上で監査や追跡を実行することで、Tableau がクエリ エンジンに渡しているクエリを分離することができ、このクエリが予期しているものかどうかを確認できます。たとえば、このクエリに予期していたグループ化およびフィルター句があるかどうか、未加工のフィールド値を返すのではなくクエリ内で集計を実行しているかどうかなどです。
たとえば、SQL Server ではプロファイラー ツールを開始して実行中のクエリを追跡します (サーバーがビジーの場合はアプリケーション名="Tableau 6.1"、またはユーザー名ごとにフィルター)。 これにより、クエリの内容と、クエリを返すのにかかった時間を確認できます。
インデックスの調整
クエリが実行中であることが分かったら、クエリを実行計画推定量にダンプして OBMS がクエリをどのように処理するかについての詳細を確認できます。これはクエリを実行するのではなく、サーバーが収集した統計に基づく推定実行計画を返します。
返された情報に基づいて、追加のインデックスを作成する必要があるかどうかを決定できます (つまり、エンド ユーザーが要求しているクエリの種類が変更され、現在のインデックス作成モデルがこの種類を正確に反映していない)。
これは高度なトピックですが、いくつかの基本的な原則は次のとおりです: 
表の結合の一部であるすべての列にインデックスがあることを確認するフィルターで使用される任意の列にインデックスがあることを確認する主キーを明確に定義する外部キーの関係を明確に定義する大規模なデータ セットの場合、表の区分指定を使用する可能であれば列を NULL 以外と定義する
統計の使用
データベース エンジンは、データベースに保存されているインデックスと列のデータに関する統計情報を収集します。これらの統計はクエリ オプティマイザーによって使用され、データの取得や更新について最も効率的な計画を選択します。優れた統計により、オプティマイザーはさまざまなクエリ計画の費用を正確に評価し、質の高い計画を選択できます。たとえば、誤解としてよく見られるのは、インデックスがある場合にデータベースがそれらのインデックスを使用してクエリ内のレコードを取得するという点です。必ずしもそうとは限りません。たとえば、City にインデックスを作成し、値の 90% 未満が 'Vancouver' であるとします。DBMS がこれらの統計を認識している場合、インデックスを使用する代わりに表のスキャンを選択する可能性が高くなります。
データベース統計が収集され、使用されていることを確保することで、データベース エンジンがより優れたクエリを作成するのに役立ち、結果としてより速いクエリ パフォーマンスをもたらします。
データ モデルの最適化
最後に、クエリされたデータ モデルはクエリのパフォーマンスに重要な影響を及ぼす可能性があります。データ構造がエンド ユーザーにより実行される分析の種類に整列されていることを確保することは、優れたクエリ パフォーマンスを得る上で重要です。過剰な結合の設計を必要としていることが判明した場合、それはデータ モデルが目前のタスクに適していない兆候である可能性があります。
例としては、ほとんどのクエリがベース レベルの詳細なレコードではなく集計データのみを必要とする場合にサマリー表を作成することが有益となる場合などがあります。
さらに、この記事の範囲を越えている大規模なトピックとなりますが、DBMS ベンダーにはデータ ウェアハウスおよびデータ マートの設計についての推奨ベスト プラクティスについて説明している多くのホワイトペーパーがあります。
この記事で問題は解決しましたか?
データベース クエリ パフォーマンスの向上 | Tableau Software
