ちょっとしたコードの解説
せっかくなので、どういうコードなのかというのを、さらっとみましょう。
jQuery(function($) {
//data-hrefの属性を持つtrを選択しclassにclickableを付加
$('tbody tr[data-href]').addClass('clickable')
//ata-hrefの属性を持つtrをクリックしたら動作
.click( function() {
//data-href属性の値をattr()メソッドで取得し、ページを遷移させる
window.location = $(this).attr('data-href');
//もしtr内にa要素があれば、a要素にホバーした時に以下動作させる
}).find('a').hover( function() {
//a要素の先祖要素trのクリックイベントを解除
$(this).parents('tr').unbind('click');
//a要素からホバーが抜けたら以下実行
}, function() {
//a要素の先祖要素trにクリックイベントを付加
$(this).parents('tr').click( function() {
//data-href属性の値をattr()メソッドで取得し、ページを遷移させる
window.location = $(this).attr('data-href');
});
});
});
なぜa要素を見つけて、そのa要素にhoverしている時にtrのクリックイベントをunbindさせているのかというと、これをしないと、a要素のリンクと、data-hrefにセットしたリンクがどちらも動作してしまう場合があるためです。(例えばa要素のリンクを_blankで開く時など)
そんな状況の時に、a要素だけを優先して動作させるために、trのクリックイベントを解除しているというわけです。
こんなことできないかなーという疑問
と、ここで自分がもっと短くできないかなって思ってしまったのが、そのhoverイベントの部分。このコードだと、クリックしようがしまいが、a要素にマウスをのせるたびに、ちょっとした無駄な動作がでてしまうという。気にする程ではないんですけどね。
でも思ったのは、a要素クリックした時に、a要素の先祖に、そのクリックイベントがバブリング(ある要素でイベントが発生した時に、その親要素にも同じイベントが伝わっていく仕組み)しなきゃいいんじゃないか?もしくはバブリングしても、a要素じゃない時にだけ動作するようにしたらいいじゃないかーなんて思った。
で、たまたま先日のTwitterのTLでの@t32kのこーちゃんの発言がきっかけで、次に紹介するコードが思い浮かんだので、試してみた。
さらに少量のコードにする
先に注意ですが、この先紹介するコードは、jQuery1.4.3以降のバージョンで動作するものになっています。理由は後ほど。
まぁ、まずはコードとその動作でもを見てみましょ。
jQuery(function($) {
$('tr[data-href]').addClass('clickable')
.click(function(e) {
if(!$(e.target).is('a')){
window.location = $(e.target).closest('tr').data('href');
};
});
});
先程のhover時の処理などがなくなった分すっきり!
もっと少量のjQueryコードでHTMLテーブルの列にリンク先を指定できるようにする方法 | THE HAM MEDIA BLOG
