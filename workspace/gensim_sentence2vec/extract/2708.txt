
ロギング ラスト リソース トランザクションの最適化
WebLogic Server 9.0 では、JDBC データ ソースを通じてのロギング ラスト リソース (LLR) トランザクションの最適化をサポートしています。LLR は、1 つの XA 以外のリソースが、XA と同じ ACID 保証を伴ってグローバル トランザクションに参加できるようにする、パフォーマンス向上のためのオプションです。LLR は、「最後のエージェントによる最適化」を改良したものです。最後のエージェントによる最適化との相違点は、トランザクションとしては安全であるということです。LLR リソースは、トランザクション処理にローカル トランザクションを使用します。WebLogic Server トランザクション マネージャは、トランザクションの他のすべてのリソースを準備し、その後、LLR リソースのローカル トランザクションの結果に基づいて、グローバル トランザクションに対するコミットの決定を下します。
LLR 参加リソースによるグローバルな 2 フェーズ コミット (2PC) トランザクションでは、WebLogic Server トランザクション マネージャは次の基本的な手順に従います。
LLR の利点の詳細については、『WebLogic JDBC のコンフィグレーションと管理』の「ロギング ラスト リソース トランザクション オプションについて」を参照してください。
LLR 最適化トランザクションの最適化について
多くの場合、グローバル トランザクションが 2 フェーズ コミット (2PC) トランザクションになるのは、データベース操作 (JDBC を使用) と、メッセージ キュー操作 (JMS を使用) などの非データベース操作が関与しているためです。このように、2PC トランザクション内のデータベースへの参加リソースが 1 つの場合、ロギング ラスト リソース (LLR) 最適化トランザクション オプションは、データベース処理の XA オーバーヘッドの一部を除去し、JDBC XA ドライバ (通常は非 XA ドライバよりも効率が悪い) の使用を回避することにより、トランザクションのパフォーマンスを著しく向上させられます。LLR トランザクション オプションでは、[2 フェーズ コミットのエミュレート] JDBC データ ソース オプションや NonXAResource リソース アダプタ (コネクタ) オプションの場合のようにデータがリスクを受けることはありません。
ロギング ラスト リソース処理の詳細
サーバ起動時またはデータ ソースのデプロイメント時に、LLR データ ソースは、データベース接続のプールを行うデータベース上に、テーブルをロードまたは作成します。テーブルは、データベース接続を作成するよう指定されたユーザが決定したスキーマ内に作成されます。データベース テーブルが作成またはロードできない場合、サーバの起動は失敗します。 
グローバル トランザクション内で、LLR データ ソースから最初に取得された接続が、そのトランザクション専用の内部 JDBC 接続を予約します。内部 JDBC 接続は、トランザクションのコーディネータでもある特定のサーバ上で予約されます。任意のサーバにある同名のデータ ソースから取得された接続に対する後続のトランザクション操作は、すべてこの同じ単一の内部 JDBC 接続にルーティングされます。
LLR トランザクションがコミットされると、WebLogic Server トランザクション マネージャはその処理を透過的に扱います。アプリケーション側から見ると、トランザクション セマンティクスは同じままですが、内部から見ると、トランザクションには標準的な XA トランザクションとは異なった処理が行われています。アプリケーションがグローバル トランザクションをコミットすると、WebLogic Server トランザクション マネージャは、他のトランザクション参加リソースに対してトランザクション作業をコミットする前に、LLR 接続に対して原子性を維持しつつローカル トランザクションをコミットします。2 フェーズ コミット トランザクションの場合、トランザクション マネージャは同じローカル トランザクションの一部として、データベース上に 2PC レコードの書き込みも行います。ローカル トランザクションが正常に完了した後、トランザクション マネージャは他のすべてのグローバル トランザクション参加リソースに対し commit を呼び出します。他のすべてのトランザクション参加リソースがコミット フェーズを完了させると、関連の LLR 2PC トランザクション レコードは、解放されて削除できるようになります。トランザクション マネージャは、短い間隔を置いて、または別のローカル トランザクションで、トランザクション レコードを時間をかけて削除します。
アプリケーションがグローバル トランザクションをロールバックするか、トランザクションがタイムアウトした場合、トランザクション マネージャはローカル トランザクションの作業をロールバックし、データベースに 2PC レコードを格納しません。
LLR トランザクションの最適化を有効化するには、JDBC データ ソースをロギング ラスト リソース トランザクション プロトコルで作成して、アプリケーション内のデータ ソースからデータベース接続を使用します。WebLogic Server は、データベース上に必要なテーブルを自動作成します。 
Administration Console オンライン ヘルプの「LLR を利用可能な JDBC データ ソースの作成」を参照してください。『WebLogic JDBC のコンフィグレーションと管理』の「ロギング ラスト リソース トランザクション オプションについて」も参照してください。 
データ ソースのコンフィグレーションおよび使用上の要件と制限事項のリストについては、以下を参照してください。
LLR データベース テーブルの詳細
各 WebLogic サーバ インスタンスは、JDBC LLR データ ソースがデータベース接続をプールするデータベース上に、データベース「LLR」テーブルを保持します。これらのテーブルは、トランザクション ログ レコードの格納に使用されるもので、自動的に作成されます。複数の LLR データ ソースが同じ WebLogic サーバ インスタンス上にデプロイされて同じデータベース インスタンスおよびデータベース スキーマに接続されている場合、これらのデータ ソースも同じ LLR テーブルを共有します。
LLR テーブル名は、管理者がコンフィグレーションすることを選択しない限り、自動的に生成されます。デフォルトのテーブル名は WL_LLR_SERVERNAME です。DBMS によっては、テーブル名の長さは最大で 18 文字です。環境をコンフィグレーションする際には、テーブル名の最大長を考慮に入れてください。
LLR データベース テーブルに関しては、以下の制限事項があります。
ロギング ラスト リソース トランザクションの最適化
