
この文書はSmalltalk-80 実装のひとつであるGNU Smalltalk について記しています。
従って他のSmalltalk 実装とは異なる部分もメソッドや文法の点などでいくつか見受けられます。
また巷の入門書、専門書ほどの丁寧で具体的な解説はしていません。
しばしば専門的な話というのは初心者にとってとても難しいものであったりしますが、筆者自身がGNU Smalltalk を学んでいった初心者の視点に基づき説明していきますが、
最低でも1 つの手続き型プログラミング言語を学んだ人を対象としています。
特にC++, Java, Python, Ruby を習得した方であればオブジェクト指向には絶対と言っていいほど触れているはずなので理解がしやすいでしょう。
この文書はSmalltalk 初心者である筆者が記したものであるので、あくまでひとつのコラム程度に読んで頂けると幸いです。
ところで筆者はプログラミング言語を学ぶ上でふたつの段階があると考えておりそれは、
文法を覚える
標準ライブラリを覚える
の以上2 つであります。
本文書では出来るだけプログラムソースを盛り込み実際のプログラミングを想像しやすい形で書いてあり、
文法についてはそれなりに学べると思えますがライブラリについては不足していると言わざるを得ません。
しかしライブラリは必要に応じて学び覚えるものであって最初からすべてが必要になるものでは無いことから、
基本的なデータ形式についてのみ記しています。
そして可能な限り実践的なアプリケーションに向けて必要になるであろう内容に触れています。
具体的にはCGI による掲示板の作成が出来る程度の素材を説明の中で提供しています。
最近ではオブジェクト指向プログラミング言語の代表と言えば汎用プログラミング言語であるC++ やマルチプラットフォームを意識したJava、加えて日本国内で人気のオブジェクト指向スクリプト言語であるRuby という認識ですが、
プログラミング史では今から遥かに昔の1970 年代の前半に、純粋オブジェクト指向プログラミング言語としてSmalltalk が生まれました。
純粋なオブジェクト指向というのは"扱うデータすべてがオブジェクト" を意味し、Ruby の様にプリミティブ型とクラスが混在していないものを言います。
それだけにとどまらずSmalltalk は手続き型言語には当たり前であるif-else 句やfor 句といった文法上の構造も排し、
オブジェクトとそれに対応するメソッドに置き換え、オブジェクトのみによるプログラミングを実現しました。
加えてすべてのオブジェクトはクラスObject の子孫という構造をとっています。
クラスが点在するのではなく、生物学の分類の様なトップダウン式の洗練されたクラスヒエラルキーはオブジェクトとしてのクラスの役割をより良く表現することに成功しています。
ここでSmalltalk のプログラムの一例を見てみましょう。
cond ifTrue: ['cond is true' displayNl].
これはcond が真であるとき、'cond is true' と標準出力へ印字するプログラムです。
ifTrue: はBoolean クラスに属するメソッドで引数に[ ] で表されるブロックを受け取ります。
ブロックの[ ] 記号が文法構造ではないかと感じるかも知れませんが、これはれっきとしたBlockClosure クラスのインスタンスなのです。
Smalltalk 人口は少ないですが、"使えない" 言語ではありません。
クラスの書き易さはPython に並び、それがもたらすオブジェクト指向型開発の生産性の高さと多態性が提供する柔軟な処理の実現、
ストレスフリーなプログラミングには目を見張るものがあります。
ちょっとした処理や書き捨てる様な用途には向かない言語ですが、じっくりと設計する用途にはうってつけでしょう。
動的型付けスクリプト言語のため、修正や変更は簡単ですし、Smalltalk 処理系は一般にJIT(実行時最適化) を行っているので、速度面でも優秀と言えます。
Smalltalk はオブジェクト指向プログラミングをするのがとても簡単で、
クラスのスクラッチやプロトタイプを作成するのにうってつけです。
また、汎用プログラミング言語としてもおおいに利用出来ます。
しかし、何でもクラスベースなので、Perl でよくあるちょこちょこっと書いて捨てるプログラムには不向きです。
また、OS に迫る様な低レベルな操作も苦手です(GNU Smalltalk ではC Callouts によってライブラリを呼び出せるので、その点は解消されています)。
クラスは充実していますが、ライブラリが充実しているとはお世辞にも言い難いものがあるので、
巷に良く有る「すぐにWeb アプリが作れる!」や「を使って通信!」と言ったことがすぐには出来ません。
ほぼ自分自身で作り上げることになります。
ですが、Smalltalk の持つクラスベースオブジェクト指向プログラミングのパワフルさをもっていれば意外と簡単に実現出来てしまったりするのです。
しかし、何でもクラスベースなので、Perl でよくあるちょこちょこっと書いて捨てるプログラムには不向きです。
また、OS に迫るような低レベルな操作も苦手です(GNU Smalltalk ではC Callouts によってライブラリを呼び出せるので、その点は解消されています)。
クラスは充実していますが、ライブラリが充実しているとはお世辞にも言い難いものがあるので、
巷に良くある「すぐにWeb アプリが作れる!」や「を使って通信!」と言ったことがすぐに実現は出来ません。
ほぼ自分自身で作り上げることになります。
ですが、Smalltalk の持つクラスベースオブジェクト指向プログラミングのパワフルさをもってすれば意外と簡単に実現出来てしまったりするのです。
GNU Smalltalk Tutorial
