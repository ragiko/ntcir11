Webアプリケーションの開発プロジェクトでは、必ず環境依存性の問題が発生する。
もしも、datasource.xml ファイルに jdbcurl=hdbc:mysql:127.0.0.1...
と書いて、あるいはもしも、logback.xml ファイルに level=”DEBUG” と書いて、
それらすべてがwarファイルに同梱されてしまったら、
そのWebアプリケーションは、あなたのローカルPCでしか正常に作動せず、試験用サーバにはリリースできない。
過去、意外と多くの開発プロジェクトが、この単純な問題を軽視していた。
そして結合テストの直前になってから、開発したWebアプリケーションを試験用サーバで作動させることが難しいことに気づき、
問題の解決のために膨大な時間を費やすことになった。
この章では、環境依存性の問題を解決するための原則と具体的な方法を解説する。
7.3.1. 目的¶
あなたのチームがこれから開発する全てのソースコード、あるいはそのバイナリは、
以下のすべてのシチュエーションでシームレスに動作可能でなければならない。
全ての開発者のPCのIDE(eclipse)上で設定されたAPサーバ上でのアプリケーションの実行
全ての開発者のPCのIDE上のJUnitプラグインによるテストの実行
全ての開発者のPC上のビルドツール(maven/ant)によるテストの実行
CIサーバ上でのテストの実行
CIサーバ上でのパッケージング(jar/warファイルの生成)
試験サーバ上でのアプリケーションの実行
本番サーバ上でのアプリケーションの実行
7.3.2. 原則¶
前述の目的を実現するために、原則として下記のようなプロジェクト構造とする。
必ずマルチプロジェクト構成にする。
一つのプロジェクトに環境依存性のある設定ファイル(ex. logback.xml, jdbc.properties)をできるだけ集約する。 以降、このプロジェクトを *-env と表現する。
7.3. 環境依存性の排除 &mdash; TERASOLUNA Global Framework Development Guideline 1.0.0.publicreview documentation
