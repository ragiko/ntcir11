
LogicLock ブロック・ベース・デザインは、アルテラQuartus&reg; II ソフトウェアのユーザだけが利用できる画期的な設計手法です。この手法においてデザインは、モジュール・レベルで各モジュールを個別に設計・実装した後に、最上位レベルのプロジェクトにインポートするというように、階層的に構築されます。デザイン・モジュールを最適化するのは一度だけであり、最適化を繰り返す必要がないため、デザイン工程の生産性がアップします。実装やシステム・レベルの検証の段階では、各ロジック・モジュールの性能は一貫して維持されます。図 1 は、LogicLock 手法を導入したデザイン・フローと、LogicLock 手法を用いない従来的なデザイン・フローの比較を示しています。
図 1.LogicLock の有無によるデザイン・フローの違い
LogicLock 設計手法では、設計者は LogicLock 制約を作成して、より大きなデザインに統合していきます。LogicLock 制約には、設計者側で独自に作成したロジック・ブロックと、アルテラや AMPPSM  パートナが提供している検証済みの IP (Intellectual Property) のどちらでも使用できます。LogicLockデザイン・フローでは、現在のプロジェクトでモジュールを実装する時や他のプロジェクトにエクスポートする時に、その配置情報を維持したまま使い回すことが可能になります。
デザイン上の利点
LogicLock 設計手法には、次の利点があります。
モジュール・レベルで性能が維持されるため、デザイン・サイクルが短縮される                       
強化された階層的なデザイン・フロー               
デザインの再利用フローが最適化される
効率の良いチーム・デザイン手法                                        
モジュール・レベルでの性能の維持によるデザイン・サイクルの短縮
LogicLock 制約を使用すれば、ロジック・モジュールの最適化は一度行うだけで十分になります。制約が目標性能に到達した後に、LogicLock 領域をバックアノテーションすることでその性能が保持されます。
たとえば、設計者はデザイン内で PCI メガファンクションをインスタンスし、配置や性能を固定することができます。同じデザイン内の他のエリアにロジック・モジュールを追加したり、他のエリアのロジックを変更しても、PCI コアの性能が影響されることはありません。このようにLogicLock フローでは、プロジェクト完了までに要する設計工程を短縮することができます。
強化された階層的なデザイン・フロー
LogicLock フローでは、設計者はモジュールごとに個別にプロパティを管理し、階層化した領域の実装を通じて、必要な性能をすみやかに実現することができます。設計者または設計グループごとに、それぞれ別のモジュールのデザインを行い、デザイン・モジュールの配置と配線を済ませ、さらに最適化と検証まで、他の設計者や設計グループから独立して進めることが可能です。統合段階ではシステム全体を検証し、モジュール・レベルでの検証は不要です。各モジュールの配置と性能は、この段階では一貫して維持されます。 
デザインの再利用の最適化
LogicLock 制約はインポート可能です。LogicLock 設計方式では、制約を適用した 1つのデザイン・モジュールを複数のデザインにインポートして、容易に再利用することができます。図 2 は、開発済みの 1 つのデザイン・モジュールを、他の複数のプロジェクトで利用している様子を示しています。インポートしたモジュールの性能は、図中のどちらのプロジェクトでも共通です。 
図 2.LogicLock デザインの再利用
LogicLock 領域
設計者はモジュールの配置を、LogicLock 領域を使って制御できます。LogicLock 領域は、いずれかのモジュールに変更を加えても、同じデザイン内の他のモジュールが影響を受けることがない階層構造のデザインを実現する枠組みを提供します。図 3 は、Quartus II のフロアプラン・エディタに表示された LogicLock 領域を示しています。 
日本アルテラ - LogicLock ブロック・ベース・デザイン
