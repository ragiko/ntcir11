
ちなみに、上で紹介した identicon の Python 実装にはバグがあります. decode() 関数は以下のようになるべきです。
def decode(self, code): 
# decode the code  
middleType  = self.MIDDLE_PATCH_SET
middleInvert= (code >> 2) & 0x01
cornerType  = (code >> 3) & 0x0F
cornerInvert= (code >> 7) & 0x01
cornerTurn  = (code >> 8 ) & 0x03
sideType    = (code >> 10) & 0x0F
sideInvert  = (code >> 14) & 0x01
sideTurn    = (code >> 15) & 0x03
blue        = (code >> 17) & 0x1F
green       = (code >> 22) & 0x1F
red         = (code >> 27) & 0x1F
...
1枚の identicon は、9つ(3 x 3)の「パッチ」から構成されます。各パッチは、三角形や四角形などの、単純な幾何学的模様によって描写されます。真ん中のパッチ “middle” は、上下左右に線対称な図形(上記 identicon 紹介ページの 1, 5, 9, 16番のパッチ)から構成され、そのタイプと色の反転は、それぞれ “middleType” と “middleInvert” のビットによって制御されます。角のパッチ “corner” と、辺の真ん中にあるパッチ “side” は、タイプ Type, 色の反転 Invert, そして回転 Turn によって制御されます。パッチ全体の色は、blue, gren, red の各ビットの値から RGB の値を計算して決定します。オリジナルの identicon の実装では、それぞれ 5 ビットによって表現されています。
iconlang の詳細 
ここでは、iconlang が上記の identicon をベースとして、どのように単語に幾何学的模様を対応づけるかについて説明します。iconlang のアルゴリズムは、以下の2ステップに分けることができます。
単語からハッシュ値を計算
ハッシュ値からキルト模様を生成
単語からハッシュ値の計算 
iconlang が単語からハッシュ値を計算する時には、「綴りの似ている単語はハッシュ値も近くなるが、単語同士のハッシュ値が同じになるのは極力避ける」という方針に基づいています。具体的には、入力単語中の文字トライグラムに基づき、以下のステップでハッシュ値を求めています。
単語から文字ユニグラム, バイグラム, トライグラムのリストを求めます。その際には、単語の先頭および末尾にそれぞれ終端文字を追加します。例えば、”dog”という単語については、先頭・終端文字を追加し”^dog$”とした後、”d” “o” “g” “^d” “do” “og” “g$”, “^do” “dog” “og$” の、計10個の文字Nグラムを生成します。これらの文字Nグラムは、生成された順に番号がついています。
それぞれの文字Nグラムについて、その「値」を求めます。これは、文字Nグラムを「28進数」(アルファベット26文字および先頭・終端文字)として計算した結果です。それぞれの文字と10進数の対応は以下の通りです。これは衝突(異なる単語のハッシュ値が同じになること、もしくは、生成されたキルト模様が同じになること)がなるべく少なくなるようにランダムにマッピングを生成した結果で、ここには改善の余地があります。
CHAR_LOOKUP = {“k”:24, “v”:12, “w”:22, “a”:20, “l”:9, “b”:18, “m”:14, “x”:11, “y”:13, “n”:10, “c”:4, “z”:19, “o”:17, “d”:8, “$”:5, “e”:21, “p”:6, “f”:2, “q”:0, “g”:27, “r”:1, “^”:23, “h”:15, “s”:3, “t”:26, “i”:25, “j”:16, “u”:7}
生成するハッシュ値を h = 0 とします。h の 「Nグラムの値+Nグラムの番号」ビット目を反転する、という操作を、単語から生成された全てのNグラムに対して行います。「Nグラムの値+Nグラムの番号」がハッシュ幅(iconlang のハッシュ幅は、以下で説明するように、34ビットです)をオーバーした場合、34で割った余り (modulo) を使用します。この操作の後の h が最終的なハッシュ値です。
ハッシュ値からキルト模様を生成 
ハッシュ値を求めた後、キルト模様を生成するアルゴリズムは、基本的には identicon と同じです。ただ、iconlang では、「文字」としての視認性を高めるために、2点の変更を加えています。一つは、角のパッチ “corner” にマスクを適用し、かならずしも点対称の模様を生成するわけではなくしたこと。もう一つは、色のビット幅を狭め、近似色による混乱を避けたことです。
iconlang の各ビットの解釈は、以下のようになります。ボールド部分が identicon との差異です。
ビット範囲(幅) 
役割           
iconlang – 視認性・識別性向上のための新しい表意文字体系
