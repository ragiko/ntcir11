-r --rcfile
使用するリソースファイルを指定する
リソースファイルとは、辞書ディレクトリに入っている「dicrc」ファイルを指します。
試しにシステム辞書の「dicrc」ファイルをコピーして、「dicrc2」というファイルを作り、その中の「; simple」の「EOS」を「eos」に書き換えます。するとこんな風になります。
// リソースを指定せずに実行
$ echo テスト | mecab -O simple
テスト	名詞-サ変接続
EOS
// リソースを改変したdic2に指定して実行
$ echo テスト | mecab -r dicrc2 -O simple -d /usr/local/lib/mecab/dic/naist-jdic
テスト	名詞-サ変接続
eos
我が家の環境では、システム辞書ディレクトリをカレントディレクトリとした状態にするか、「-d」でシステム辞書ディレクトリを指定しないと、「-r」時に「./dicrc」に対して「no such file or directory」というエラーが出ました。
あまり使う機会が無さそうなコマンドなので詳細は未調査。
-d --dicdir
使用するシステム辞書を指定する
システム辞書がインストールされているディレクトリを指定することで、デフォルト以外のシステム辞書を手軽に使うことができます。
// IPA辞書がインストールされているディレクトリを指定
$ echo hoge | mecab -d /usr/local/lib/mecab/dic/ipadic
hoge	名詞,固有名詞,組織,*,*,*,*
EOS
// 同UniDicを指定
$ echo hoge | mecab -d /usr/local/lib/mecab/dic/unidic-mecab-1.3.12
hoge	名詞,普通名詞,一般,*,*,*
EOS
辞書を変えたので、結果が微妙に変化しました。
これらの使い分けをするには、もちろんそれぞれの辞書のインストールが必要です。
-u --userdir
使用するユーザ辞書を指定する
ユーザ辞書ファイルを指定することで、指定した辞書の情報を含めて解析することができます。
試しに以下のような一語だけを含んだファイル(hoge1.csv)から、辞書を作成してみます。
アーサー王,1349,1349,-30000,名詞,固有名詞,人名,一般,*,*,*,アーサー王,アーサーオウ,アーサーオー
// ユーザ辞書作成コマンド
$ /usr/local/libexec/mecab/mecab-dict-index -d /usr/local/lib/mecab/dic/naist-jdic -u hoge1.dic -t utf-8 -f utf-8 hoge1.csv
生成されたdic1.dicという辞書を使って解析をしてみます。
// 未指定の場合の結果
$ echo アーサー王 | mecab
アーサー	名詞,固有名詞,人名,姓,*,*,アーサー,アーサー,アーサー,,
王	名詞,接尾,一般,*,*,*,王,オウ,オー,,
EOS
/ユーザ辞書指定時
$ echo アーサー王 | mecab -u dic1.dic
アーサー王	名詞,固有名詞,人名,一般,*,*,*,アーサー王,アーサーオウ,アーサーオー
EOS
複数のユーザ辞書使用する場合は、カンマで繋げます。(hoge2.dicはランスロットという言葉を含む)
// 未指定の場合の結果
$ echo ランスロット | mecab
ラン	名詞,一般,*,*,*,*,ラン,ラン,ラン,,
スロット	名詞,一般,*,*,*,*,スロット,スロット,スロット,,
EOS
$ echo ランスロット | mecab -u dic1.dic,dic2.dic
ランスロット	名詞,固有名詞,人名,一般,*,*,*,ランスロット,ランスロット,ランスロット
EOS
-l lattice-level
索性レベルを指定する
lattice-levelの設定は以下の3つ。
0 : 最適解のみが出力可能なレベル(デフォルト、高速)
1 : N-best解が出力可能なレベル(中速)
2 : ソフトわかち書きが可能なレベル(低速)
alpha, beta, prob辺りの結果を取る場合は、これを設定する必要があります。
$ echo 気分屋 | mecab -F"%m,%pP,%pA,%pB\n" -l1
気分,0.000000,0.000000,0.000000
屋,0.000000,0.000000,0.000000
EOS
$ echo 気分屋 | mecab -F"%m,%pP,%pA,%pB\n" -l2
気分,0.996378,-4.683214,-4.079328
屋,0.977003,-8.642894,-0.139286
EOS
-D --dictionary-info-type
辞書の情報を表示する
$ mecab -D
filename:	/usr/local/lib/mecab/dic/naist-jdic/sys.dic
version:	102
charset:	utf8
type:	0
size:	485263
left size:	1377
right size:	1377
どのシステム辞書を設定したっけとか、文字コードちゃんとUTF-8で設定されてるかなといったことを確認するのに使えそうです。「size」は登録したワードの数、「left size」と「right size」はleft-idとright-idの数のようです。
「-d」でシステム辞書を指定したり、「-u」でユーザ辞書を指定すれば、その情報も見られます。
$ mecab -D -d /usr/local/lib/mecab/dic/ipadic/
filename:	/usr/local/lib/mecab/dic/ipadic/sys.dic
version:	102
charset:	utf8
type:	0
size:	392126
left size:	1316
right size:	1316
IPAを「-d」で指定すると上記のような情報が出ました。sizeはNAISTより10万近く小さいようです。ちなみにUniDicは62万でした。
「-u」でユーザ辞書を指定した場合は、システム辞書とユーザ辞書、両方の情報が出ます。もちろんユーザ辞書をカンマ区切りで複数指定することも可能です。
$ mecab -D -u hoge1.dic,hoge2.dic
filename:	/usr/local/lib/mecab/dic/naist-jdic/sys.dic
version:	102
charset:	utf8
type:	0
size:	485263
left size:	1377
right size:	1377
filename:	hoge.dic
version:	102
charset:	utf-8
type:	1
size:	1
left size:	1377
right size:	1377
filename:	hoge2.dic
version:	102
charset:	utf-8
type:	1
size:	1
left size:	1377
right size:	1377
-a --all-morphs
該当する全ての形態素を表示する
一致する可能性のある全ての形態素が表示されます。試しに「天使」という言葉を解析してみます。
$ echo 天使 | mecab -a
天使	名詞,一般,*,*,*,*,天使,テンシ,テンシ,,
天	名詞,一般,*,*,*,*,天,テン,テン,,
天	名詞,固有名詞,人名,名,*,*,天,タカシ,タカシ,,
天	名詞,一般,*,*,*,*,天,アメ,アメ,,
使	名詞,一般,*,*,*,*,使,ツカイ,ツカイ,,
使	名詞,一般,*,*,*,*,使,ヅカイ,ヅカイ,,
使	名詞,接尾,一般,*,*,*,使,シ,シ,,
EOS
たった2文字でこれだけの形態素が表示されます。普通の文章を流したら、出力量はえらいことになります。
ユーザ辞書を適用した際に思っていた解析結果が得られなかったら、これを使ってまず形態素として認識されているかを見るのも良いかもしれません。
また、これの解析結果を見ていると、指定した言葉に対してどんなパターンがあるかを感覚的に学べたりします。
-O --output-format-type
出力するフォーマット形式を指定する
Chasen互換、ヨミ付与、全情報出力などが選択できます。
指定できる引数の値は、各辞書ディレクトリの中のdicrc(IPAなら/usr/locallib/mecab/dic/ipadic/dicrc)の中に書いてあります。
また、ハードコーディングで「dump」と「wakati」の2つが設定されています。
まず引数なしで「もう 眠い」という言葉(「もう」と「眠い」の間に半角スペースあり)を解析した場合。半角スペースは無視され、以下のような結果になります。
$ echo もう眠い | mecab
もう	副詞,一般,*,*,*,*,もう,モウ,モー,,
眠い	形容詞,自立,*,*,形容詞・アウオ段,基本形,眠い,ネムイ,ネムイ,ねむい/眠い,
EOS
次に-Ochasenを指定してみます。chasenを指定すると、茶筌互換形式で表示されます。これがあるお陰で、茶筌用のソフトウェアでもつつがなくMeCabは動きます。
$ echo もう 眠い | mecab -Ochasen
もう	モウ	もう	副詞-一般		
眠い	ネムイ	眠い	形容詞-自立	形容詞・アウオ段	基本形
EOS
ちなみにchasenフォーマットのフォーマット文字列はこんな感じです。
; ChaSen
node-format-chasen = %m\t%f[7]\t%f[6]\t%F-[0,1,2,3]\t%f[4]\t%f[5]\n
unk-format-chasen  = %m\t%m\t%m\t%F-[0,1,2,3]\t\t\n
eos-format-chasen  = EOS\n
chasen2という身も蓋もない名前の引数を指定すると「include spaces」、つまり半角スペースを無視せずに扱います。下記の結果では、「眠い」という言葉の前の半角スペースが無視されずに解析結果に入っています。
$ echo もう 眠い | mecab -Ochasen2
もう	モウ	もう	副詞-一般		
眠い	ネムイ	眠い	形容詞-自立	形容詞・アウオ段	基本形
EOS
下はchasen2のフォーマット文字列です。chasenが「%m」にしている箇所が「%M」になっています。
; ChaSen (include spaces)
node-format-chasen2 = %M\t%f[7]\t%f[6]\t%F-[0,1,2,3]\t%f[4]\t%f[5]\n
unk-format-chasen2  = %M\t%m\t%m\t%F-[0,1,2,3]\t\t\n
eos-format-chasen2  = EOS\n
yomiは本当にシンプルに読みだけを出力します。
$ echo もう眠い | mecab -Oyomi
モウネムイ
フォーマット文字列はこんな感じです。
; yomi
node-format-yomi = %pS%f[7]
unk-format-yomi = %M
eos-format-yomi  = \n
wakatiは単純に文字をスペースで分割しただけの結果を返します。
$ echo もう眠い | mecab -Owakati
もう 眠い
dumpは言葉の通り、実行結果のダンプを出してくれます。へー、これだけ処理してるんだ、という感覚を掴む為の勉強になります。
$ echo もう眠い | mecab -Odump
0 BOS BOS/EOS,*,*,*,*,*,*,*,* 0 0 0 0 0 0 2 1 0.000000 -5.983542 0.000000 0
3 もう 副詞,一般,*,*,*,*,もう,モウ,モー,, 0 6 1341 1341 34 6 0 1 -3.912857 -2.070693 0.999993 3652 0:3652:0.999993
2 も 動詞,自立,*,*,五段・ラ行,体言接続特殊2,もる,モ,モ,も/盛, 0 3 811 811 31 6 0 0 -11.365714 -10.379019 0.000000 10608 0:10608:0.000000
1 も 助詞,係助詞,*,*,*,*,も,モ,モ,, 0 3 285 285 16 6 0 0 -6.233571 -11.548766 0.000008 5818 0:5818:0.000008
7 う 動詞,自立,*,*,五段・ラ行,体言接続特殊2,うる,ウ,ウ,う/売/賣, 3 6 811 811 31 6 0 0 -16.561792 -6.377543 0.000000 15458 2:12280:0.000000 1:9640:0.000000
6 う 形容詞,自立,*,*,形容詞・アウオ段,ガル接続,うい,ウ,ウ,う/憂, 3 6 12 12 10 6 0 0 -15.224633 -4.668724 0.000001 14211 2:9711:0.000000 1:8393:0.000001
5 う 感動詞,*,*,*,*,*,う,ウ,ウ,, 3 6 3 3 2 6 0 0 -13.632860 -5.450216 0.000002 12733 2:6453:0.000000 1:6915:0.000002
4 う 助動詞,*,*,*,不変化型,基本形,う,ウ,ウ,, 3 6 531 531 25 6 0 0 -13.771323 -4.489350 0.000005 12878 2:5645:0.000000 1:7060:0.000005
<以下略>
長いので途中で省略しました。「もう」という言葉を解析するだけで、これだけのパターンを試しています。
各項目はハードコーディングされてるのでソースを参照してください。私が見た時は「writer.cpp」の「Writer::writeDump」にそれらしき記述がありました。
出力内容は以下のようなフォーマットになっているようです。大半はNodeのdumpです。
[ダンプされる項目]
0 : NodeID(内部ID)
1 : surface
2 : feature
3 : 文字の始端(int)(surface - str)
4 : 文字の終端(int)(surface - str + node->length)
5 : rcAttr(右文脈ID)
6 : lcAttr(左文脈ID)
7 : posid(形態素ID:pos-id.def参照)
8 : char_type(文字種情報:char.def参照)
9 : stat(普通:0,未知語:1,BOS:2,EOS:3)
10 : isbest(bestなら1)
11 : alpha(forward log確率)
12 : beta(backward log確率)
13 : prob(周辺確率)
14 : 単語生起コスト
15～ : 左NodeのID:cost:prob
左Nodeの内部ID:cost:probは複数ある場合は全て出力します。上記の実行例の最終行(ID:4)では、「う」という言葉の左Nodeとして「2:5645:0.000000」と「1:7060:0.000005」が選ばれています。「う」は「も」を左辺として持つ為、解析結果の中の「も = 1と2」が左辺として設定されているわけです。
(int)(surface - str) と (int)(surface - str + node->length) は文字の位置になります。実行例では、「も」は「0,3」、「う」は「3,6」、「もう」は「0,6」に設定されています。辞書がUTFなので1文字で3バイト取ってるようです。アルファベットをdumpすると、1文字の長さは1になります。
MeCabのコマンドライン引数一覧とその実行例 | mwSoft
