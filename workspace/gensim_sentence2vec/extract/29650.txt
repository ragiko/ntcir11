1. リクエスト処理全体の流れ今回は、クライアントからのリクエストがWebサーバーやWebサーバー・プラグインを経由し、WebSphere Application Server (WAS)
に送信されて処理されるという一連の流れや仕組みについて説明します。なお、Webサーバーの前段に負荷分散装置が配置されるシステム構成の場合もありますが、今回は、負荷分散装置については対象外とします。1.1. クライアント～Webサーバー図1のように、まず初めに、クライアントからのリクエストはWebサーバーに送信されます。そして、Webサーバーに送信されてきたリクエストは、全て一度Webサーバー・プラグインで処理されます。Webサーバー・プラグインとは、WASのコンポーネントの1つです。Webサーバー・プラグインはWebサーバーと共に動作し、Webサーバーで受け取ったリクエストのうち、必要なものを後方のWASへ転送します。Webサーバー・プラグインは、割り振り先のアプリケーション・サーバーの定義を記述したプラグイン構成ファイル(plugin-cfg.xml)を読み込み、送信されてきたリクエストがWebサーバー上で処理するものか、WASに転送するものかを決定します。例えば、Webサーバー上の静的コンテンツへのリクエストであれば、そのままWebサーバー上の静的コンテンツがクライアントに返されます。一方、クライアントからのリクエストがWAS上のアプリケーションあるいはWAS上の静的コンテンツへのリクエストであれば、Webサーバー・プラグインからWASへと転送されます。クライアント～Webサーバーのリクエストの流れに関する詳細は、2章で説明します。図1:クライアント～Webサーバーのリクエスト処理の流れ1.2. Webサーバー～WAS図2のように、クライアントからのリクエストがWAS上のアプリケーションへアクセスするものであれば、Webサーバー・プラグインは、プラグイン構成ファイルの定義にしたがって割り振り先のアプリケーション・サーバーを決定します。割り振り対象となるアプリケーション・サーバーが複数存在している場合、Webサーバー・プラグインは、まず、リクエストのURLに基づいて、送信されてきたリクエストをどのアプリケーション・サーバーに転送すべきかを決定します。次に、初期リクエストであるかセッション・アフィニティー(同一クライアントからのリクエストはHTTPセッション情報を保持している特定のアプリケーション・サーバーに転送し続けるという機能)を使用するかを判断し、どのアプリケーション・サーバーで処理させるかを決定し、リクエストを転送します。Webサーバー～WASのリクエストの流れに関する詳細は、3章で説明します。図2:Webサーバー～WASのリクエスト処理の流れ1.3. WAS図3のように、クライアントからのリクエストがWASに転送されると、リクエストされたサーブレットやJSP、EJBといったWAS上のアプリケーションが実行され、必要に応じてデータベースやメッセージング・サービスなどの外部リソースへのアクセスが行われます。そして、その処理結果がWASからWebサーバーに返され、Webサーバーからクライアントまで返されます。WASでのリクエストの流れに関する詳細は、4章で説明します。図3:WASのリクエスト処理の流れ以上のように、クライアントからのリクエストは、Webサーバー・プラグインやWASの定義情報により各サーバー上で処理が行われたのち、その結果がレスポンスとしてクライアントに返るという流れになります。次章以降で、クライアント～Webサーバー、Webサーバー～WAS、WASそれぞれにおけるリクエスト処理の流れに関して、より詳細な仕組みや処理フローについて説明します。
上に戻る2. クライアント～Webサーバーにおける処理この章では、クライアント～Webサーバーにおけるリクエスト処理の流れに関して、詳しく説明します。2.1. クライアントからWebサーバーへのリクエスト送信Webブラウザ等のクライアントからWeb上のコンテンツに対してリクエストを送信する際は、その場所を特定するためにURL(Uniform Resource
Locator)が使用されます。URLのデータおよびそれぞれの意味は、以下の通りです。 ① プロトコルプロトコルは、表示する情報の種類を特定するものです。HTTP(Hyper Text Transfer
Protocol)は、Web上のコンテンツにアクセスするためのプロトコルです。更に、安全に情報をやりとりするためのデータ暗号化機能が付加されているのがHTTPS(Hyper
Text Transfer Protocol over Secure Socket Layer)です。② ホスト名.ドメイン名ホスト名はサーバーに付けられた名前です。ドメイン名は、Web上の国や組織、サーバーを識別するための名前です。③
ポート番号ポート番号は、接続先サーバーが提供しているサービス固有の番号です。通常、HTTP通信先となるWebサーバーのポート番号は80であり、well-known
portとして決められているため、URL入力時に省略することができます。同様に、HTTPS通信の際のポート番号は443であり、こちらもwell-known
portとして決められているため省略することができます④ PathPathは、接続先サーバー上のアプリケーションの配置場所やコンテンツ名を表しています。詳細は4章で説明します。図4のように、このURLの中のドメイン名により、接続先となるWebサーバーが決定されます。Web上の通信にはIPアドレスが使用されていますが、人間が覚えやすいようにURLにはドメイン名が使用されています。そして、DNSサーバーによって、このドメイン名とIPアドレスが対応づけられ、クライアントからのリクエストは該当するWebサーバーに送信されます。図4:リクエストがWebサーバーへ送信されるまでの流れ2.2. Webサーバー・プラグインによる処理コンポーネントの決定Webサーバーに送信されてきたリクエストは、Webサーバー上のコンテンツに対するものであっても、全て一度Webサーバー・プラグインへと転送されます。そして、Webサーバー・プラグインはあらかじめ読み込んでおいたプラグイン構成ファイルの情報に基づいて、送信されてきたリクエストがWebサーバー上で処理するものか、WASに転送するものかを決定します。プラグイン構成ファイルはXML形式のファイルで、WASで設定したアプリケーションの情報や割り振り先のアプリケーション・サーバーの定義等の情報が記述されています。WASの管理コンソールにおける設定箇所とそれに対応するプラグイン構成ファイル内の記述に関して、例を挙げて説明します。図5のWAS管理コンソール画面では、アプリケーション「DefaultApplication.ear」に仮想ホスト「default_host」が指定されています。仮想ホストとは、単一のホストマシンを複数のホストマシンに見せかけて使用できるようにする定義情報です。仮想ホストは複数のWebモジュールに関連付けることができますが、各Webモジュールは1つの仮想ホストにしか関連付けることができません。図5のWAS管理コンソール画面では、仮想ホスト「default_host」のホスト別名には、「aaa.com:80」が定義されています。これは、アプリケーション「DefaultApplication.ear」に対するリクエストが送信されてきた際に、リクエストURLの中のドメイン名とポート番号の組み合わせが「aaa.com」と「80」であれば、アクセスを許可するということを意味しています。「aaa」と「80」、「zzz.com」と「80」、「aaa.com」と「81」といった組み合わせの場合はアクセスが許可されません。デフォルト設定では、仮想ホスト「default_host」のホスト別名には「*:80」が定義されているため、「aaa.com」と「80」の組み合わせや「bbb.com」と「80」の組み合わせの場合でもアクセスは許可されます。例えば、アプリケーションAは「http://aaa.com:80/xxx」というリクエストのみ、アプリケーションBは「http://bbb.com:80/xxx」というリクエストのみを受け付けたいという場合は、2つのアプリケーションそれぞれに別々の仮想ホストを関連付けておき、それぞれのホスト別名に「aaa.com:80」と「bbb.com:80」を定義しておく必要があります。多くのケースでは、デフォルトで定義されている仮想ホスト「default_host」のみで十分ですが、既述の通り、単一のホストマシンをクライアントから見て複数のホストマシンに見せかけてアクセス制御したい場合には、仮想ホストを追加する必要があります。また、ある仮想ホストに関連付けられたWebモジュールと他の仮想ホストに関連付けられたWebモジュールは、データを共有することはできません。これは、両者の仮想ホストが物理的に同じマシンで同じアプリケーション・サーバーを共有している場合でも同様です。図5:WAS管理コンソールでのアプリケーション設定画面(WAS
V8.0環境)以下は、仮想ホストとWebモジュールの関連付けに関する定義情報が記述されている部分を抜粋したデフォルトのプラグイン構成ファイルです。アプリケーション「DefaultApplication.ear」には、「/snoop」や「/hello」、「/hitcount」といったURIを持つWebモジュールが含まれており、それらがプラグイン構成ファイルのUriGroupディレクティブ内に記述されています。プラグイン構成ファイル(plugin-cfg.xml)の抜粋
・・・(略)・・・
<VirtualHostGroup Name="default_host">
<VirtualHost Name="*:9080"/>
<VirtualHost Name="*:80"/>
<VirtualHost Name="*:9443"/>
<VirtualHost Name="*:443"/>
</VirtualHostGroup>
・・・(略)・・・
<UriGroup Name="default_host_TestCluster_URIs">
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="/snoop/*"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="/hello"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="/hitcount"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="*.jsp"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="*.jsv"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="*.jsw"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid"
Name="/j_security_check"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid"
Name="/ibm_security_logout"/>
<Uri AffinityCookie="JSESSIONID" AffinityURLIdentifier="jsessionid" Name="/servlet/*"/>
</UriGroup>
<Route ServerCluster="TestCluster" UriGroup="default_host_TestCluster_URIs"
VirtualHostGroup="default_host"/>
・・・(略)・・・
図6のように、Webサーバー・プラグインはリクエストURLとプラグイン構成ファイルの情報のマッチングを行い、リクエストを処理するコンポーネントを決定します。Webサーバー・プラグインは、受け取ったリクエストURLの中のドメイン名とポート番号の組み合わせやPathを確認し、プラグイン構成ファイルの各Routeディレクティブの仮想ホストやURIに適合するものがあるか検索します。適合するRouteディレクティブが存在しない場合には、Webサーバーでリクエストを処理するものと決定して、Webサーバーに処理を戻します。適合するRouteディレクティブが存在する場合には、WASにリクエストを転送するものと決定して、Webサーバー・プラグインで後続の処理を実行します。例えば、「http://hostabc/wasapp」というURLでリクエストが送信されてきた場合、UriGroupの中の「/wasapp」という条件にも適合し、かつ、VirtualHostGroupの中の「*:80」という条件にも適合しているRouteディレクティブが存在しているため、Webサーバー・プラグインは、このリクエストをWASに転送すると決定します。
ここで、リクエストURLで指定されるPathは、アプリケーション開発時に設定することができます。Pathは、コンテキストルートとWebモジュールのサーブレットURIの組み合わせで表されます。図6の例では、コンテキストルートとして「/wasapp」が設定されており、サーブレットURIとして「/servlet」が設定されています。このコンテキストルートは、通常、アプリケーション開発時に開発者によって設定されるものですが、WASにデプロイした後に、WAS管理コンソールから変更することもできます。WASにリクエストを転送するものと決定したあとのWebサーバー・プラグインによる後続の処理に関しては、3章で説明します。図6:Webサーバー・プラグインによる処理コンポーネント決定の流れこのように、管理者がWASにアプリケーションを導入し、仮想ホストの設定を行い、プラグイン構成ファイルの作成を行っておけば、あとはWebサーバー・プラグインがプラグイン構成ファイルの定義情報をもとにリクエストを処理するコンポーネントを決定します。管理コンソールでアプリケーションの導入や仮想ホストの設定を行った上でプラグイン構成ファイルを作成すると、プラグイン構成ファイルにはそれらの定義情報が反映されます。また、プラグイン構成ファイルはXML形式ですので、必要に応じて手動で編集することもできます。2.3. Webサーバーにおける処理Webサーバー・プラグインによって、Webサーバーでリクエストを処理することが決定されると、リクエストURLのPathに応じて、Webサーバー上のコンテンツがクライアントに返されます。Webサーバーでは、どのようなリクエストであれば受け付けるか、リクエストURLのPathに応じてどのコンテンツを返すか、といったことが構成ファイル上に定義されています。以下に、WebサーバーとしてIBM
HTTP Server(IHS)を例に、構成ファイル(httpd.conf)の抜粋と各ディレクティブの意味に関して説明します。IHS構成ファイル(httpd.conf)の抜粋
WAS虎の巻: 第5回「リクエスト処理の流れ」
