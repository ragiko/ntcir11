
GUI(Graphical User Interface) でもなくCLI(Command Line Interface) でもない。
それが CUI (COBOL User Interface)と私が勝手に名前を付けたユーザインタフェースです。
CUI は GUI の持ち味である機械的でイージーな操作感を無視し、
CLI の玄人好みな柔軟で高効率な操作感を無視します。
美しいユーザインタフェースと芸術的なウイジットを求めている私にとって、
この CUI デザインコンセプトとの出会いは衝撃的であり、怒りと絶望で頭が真っ白になりました。
私と CUI との出会いは比較的最近になります。
それは知人のノートPCにインストールされていたとあるデータ管理システムでした。
地元の凄腕プログラマに委託して作らせたカスタムアプリケーションだそうで、
統計データの計算間違いやDBの破損等、数々のバグを抱えているアプリケーションだそうです。
以降登場するアプリケーションは私が"似せて"作った架空のアプリケーションです。
システム名、団体名等は全て架空のものです。
巨大なプッシュボタンウイジットに"画面" という言葉が特徴的です。
アイコンの見た目から判断すると Microsoft VisualBasicで作られているようです。
(私の"模擬"アプリケーションは C# と WindowsFormsで作りました )
試しに"賄賂受付画面"をクリックしてみましょう。
贈賄者は3件しか登録できません。
実に固定長な仕様です。
3件以上のデータを入力する際は 3件入力登録3件入力登録という作業を延々と繰り返さねばなりません。
しかも空白を「999」で埋めるというファンタスティックな仕様です。
999円贈賄したら永遠に登録出来ないです。
"恩赦予定"には マニュアルの規定通りのフラグを入力するようです。
マニュアルには「規定外のフラグを入力するとシステム異常やDB矛盾を起こします。」と書かれていました。
入力ミスでDBの内容が矛盾するという事は、入力データのチェックは行っていないようです。
未チェックのパンチデータをDBに格納するなんて入門書のサンプルコード並かそれ以下です。
それ以前に、"フラグ"が原因で内容が矛盾するDBって、どんなDBなんでしょう?
さぁ、元ソフト屋の私としては運用テストをしてみたくなって仕方が無くなってしまいました。
とりあえず何も入れずに"受付完了"ボタンを押してみます。(当然、データのバックアップを取得後に行います)
こんなトンデモなシステムではオペミスをしない方が不自然です。
ミスってやりましょう。私はエンドユーザですから。
激しいエラーコード「E9999」に壮絶なエラーメッセージ「DBエラー」が登場しました。
何のエラーなのかさっぱりわかりません。
そして、入力をミスったら地元の凄腕プログラマを呼び出さねばならないようです。
こっちは真面目に仕事したいんですからギャグで作ったジョークソフトなんざ納品しないで欲しいものです。
エラーコードは全角です。
どうやらハードコーディングされているエラーコードのようです。
仕様変更の際はどうする気なんでしょうか?
試しにデータを入力してみます。
贈賄者は私です。
お金がないので 999円を贈賄します。
マニュアルに「当日の年月日を入力してください」と"だけ"書いてあったのでちょっと悩みました。
とりあえず私は日本人なので和暦で入力します。当然の事ながら開発者の大好きな全角です。
恩赦予定はマニュアル通り0をセットします。
他の項目は空白なので「999」で埋めます。
どうでもいいですが、タブオーダが滅茶苦茶です。
Tabキーを押すと予想も付かない位置にフォーカスが移動します。ビンゴゲームをやってるわけじゃないんですから。
マウスポインタでフォーカスを移動させつつデータの入力が完了しました。
合計12回以上マウスのボタンを押しました。かなり入力効率が悪いです。
またエラーが出ました。
エラーコードは全て「E9999」固定のようです。
エラーメッセージの「UKTK_YMD」の文字を見た瞬間。嫌な記憶が蘇りました。
そう、私も身に覚えがあります。
これは間違いなく"UKeTsuKe Year Month Day"の略です。
COBOL 屋特有のネーミングセンスにピンと来ました。
設計者は間違いなく COBOL 屋です。
そういえばウインドウのタイトルバーの"WUG0001"も COBOL の臭いがプンプンします。
"Wairo Uketsuke Gamen 0001"の略に違い有りません。
散々貶しましたが、このアプリケーションの完成度がジョークソフト並なだけで、
普通の COBOL 屋はプロ意識を持って誠実にプロの仕事をしています。
しかしながらこのアプリケーション。
中学生に仕様書を渡して作らせた方が遙かにまともな物が納品されそうな気がしますが。
このアプリケーションでは、ウインドウの事を"画面"と表現していました。
そして、最初から件数が打ち決めされた入力フィールド等、自由度の低いユーザインタフェースを搭載しています。
この CUI デザインと"画面"という表現の起源はメインフレームにあります。
メインフレームというのは銀行等で使われている大型汎用コンピュータの事です。
銀行等では大型汎用コンピュータの莫大な処理能力を活用し、大量のオンライン端末を接続して入力/参照業務を行います。
ATMも大型汎用コンピュータとやりとりをするためのある種のオンライン端末です。
データ入力等に使われるオンライン端末はキャラクタベースの端末です。
CUI はキャラクタベースのオンライン端末のデザイン概念をそのまま GUIの世界に持ち込んでしまったのです。
このアプリケーションをオンライン端末風にするとこんな感じになります。
商店等で働いた事のある方は見覚えのある画面かもしれません。
見たい情報が表示される画面を選択し、情報を参照したり
入力画面を表示させて情報を入力し、ホストコンピュータに送信したりします。
丁度 Webブラウザで Webページを参照したりフォームに情報を入力して Webサーバに送信するような感覚です。
このキャラクタベースの画面を設計していた感覚そのままで GUI を設計すると CUI が誕生します。
GUI の理念や利便性なんざ関係ありません。
オンライン端末のようにデータが入力できればいいのです。
ここで一つ、CUIの概念を使ったアプリケーションを作ってみたいと思います。
御題は "税込価格算出プログラム" です。
まず仕様を纏めましょう。
このプログラムは、ユーザに税抜き価格を入力させ税込み価格を計算し、表示します。
税抜き価格領域に「999」を入力して計算ボタンを押下するとプログラムを終了します。
このプログラムは CUI プログラムであり、言語は C# を用いて開発します。
本プログラムの有効期限はリリース後3年とします。
まずはフローチャートを記述します。
ダサいとか UML とか言わないでください。
フローチャートを書けと言われたら書くのです。
フローチャートエディタは Dia がお勧めです。
UML等を書いてはなりません。 フローチャートを書きなさい。
(このフローは Linux 上の Dia で作成しました)
処理はこんな感じで行われます。
必要ならば事務フローや組織図も作成してください。
次に画面を設計しましょう。
必要なのは "入力受け付け領域"、"計算実行ボタン"、"計算結果表示領域"、"終了ボタン"です。
メニューバーなんざ邪道です。
画面設計には Microsoft Excel を使用します。
"X" で示されるエリアはユーザからの入力を受け付けないエリアです。
"D" で示されるエリアはデータ表示領域。
"I" で示されるエリアはデータ入力領域です。
さぁ、処理手順と画面が纏まりました。
実際の処理に利用するプログラムを考えます。
後の拡張に備えて、プログラムを"モジュール"という単位で作成する事にしましょう。
必要なモジュールは
プログラム本体である "スタートアップモジュール"。
税込み価格を計算する "税込価格計算モジュール"。
最低限この二つが必要になります。
コーディングに入る前にコーディング規約を纏めましょう。
厳格なコーディング規約はソースの可読性を向上させ、仕様変更に強いコードを生み出します。
1.モジュール名称
モジュール名称は M[用途の先頭一文字][4桁のモジュール番号]とする。
2.サブルーチン名称
サブルーチン名称は [モジュール名称]_[サブルーチン番号]とする。
但し、エントリポイントは"START_ROUTINE" とする。
3.変数
変数名称は [利用区分]_名称とする。
利用区分は
I - 入力データ
O - 出力データ
W - 一時データ
規約はこれ位にしておきましょう。
さらに厳しい規約を求める方は追加して頂いても構いません。
また、作成した規約を弁護士に審査させ、法律的な弱点と矛盾点を潰しておくのも有効です。
さて、今回のコードは C# ですので名前空間を定義する必要があります。
名前空間はプログラム名称にしましょう。
まず、"税込価格算出プログラム"をローマ字表記にします。
"Shohizeikeisan puroguramu."("プログラム"もローマ字表記でなければなりません)
このローマ字表記から母音を取り去り、適度にアレンジしてCOBOL名を作り出します。
完成した名前は "ZKMK_KSN_PRG"。 これを名前空間として利用します。
重要な事ですが、クラスのサブルーチン(メンバ)は全て static サブルーチンにしてください。
さらに全てのサブルーチン及び変数は public にしておいてください。
隠蔽などという下劣で非常識で野蛮な行為は禁止すべきです。
コンストラクタは必要ありません。
CUI
