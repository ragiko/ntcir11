オブジェクト指向技術の浸透や,反復型開発の広がりなど,システム開発を巡る状況が大きく変化している。見積もり方法も,従来のやり方では通用しないケースが増えてきた。反復型開発における見積もりの基本的な考え方や,ユースケース・ポイント法の活用手順について解説する。
オブジェクト指向開発の普及に伴い,ソフトウエアを段階的に繰り返して開発していく「反復型開発(イタラティブ開発)」を採用するプロジェクトが増えている。反復型開発は従来のウォーターフォール型開発とは基本的な考え方やフェーズの分け方が異なるため,従来型の見積もり技法を適合できない面がある。
そこで第4部では,反復型開発における見積もりの基本的な考え方と,現在,一般的に用いられている「ユースケース・ポイント法」を中心とした見積もり技法について解説する。なお,システム開発のプロセスは反復型開発において最も標準的な「統一プロセス(Unified Process)」に沿うものとする。
本題に入る前に,反復型開発のプロセスを簡単に紹介しておこう。プロセスは4つのフェーズから成る。すなわち,開発範囲やアーキテクチャの候補を決定する「方向付け」,アーキテクチャを決定し重大なリスクを軽減する「推敲」,アーキテクチャをベースにしてアプリケーションの最初の実用可能なバージョンをリリースする「作成」,ユーザー教育を行い,最終的にアプリケーションを稼働させる「移行」——である。
アーキテクチャとは様々な意味で使われるが,ここではアプリケーションの共通基盤を指す。具体的には,アプリケーションを開発するにあたって守るべき構造(フレームワーク,共通メカニズム,共通コンポーネント,レイヤー構造,パッケージ構造など)のことだ。
(表1)に,反復型開発の各フェーズの作業内容を示した。ウォーターフォール型の開発では,フェーズを「要件定義」,「基本設計」,「詳細設計」,「実装」,「テスト」と大きく分けているが,反復型開発ではこれらをひとまとまり(「基本ワークフロー」と呼ぶ*1にし,各フェーズの中で目的に応じて各作業に重みを付けて繰り返していく。
「機能」からユースケースへ
見積もりを行う際は,まず方向付けフェーズでプロジェクト全体の概要,つまり工数と総コスト,期間を算出する*2。工数と総コストを見積もる法としては,米国の研究者であるグスタフ・カーナー氏が提唱した「ユースケース・ポイント法」を用いるのが一般的だ。
反復型開発の大きな特徴の1つとして,システムに求められる機能を「ユースケース」で表現し,分析,設計,開発といった作業をすべて,ユースケースに基づいて進めていくことが挙げられる。そこで,従来のウォーターフォール型開発では「機能」が見積もりのベースになっていたのに対し,反復型開発ではユースケースを見積もりのベースとする。
ユースケース・ポイント法ではLOC(Line of Code)法やファンクション・ポイント法などと同様に,特定の係数を用いてシステムの規模を算出し,生産性係数をかけて工数を算出する。
「粒度」の統一がカギ
ユースケース・ポイント法による見積もりの手順は,大きく8つのステップから成る(図1)。図に沿って説明していこう。
上流工程-見積もり - 反復型開発における見積もりの実際:ITpro
