概要
本記事では視覚障害者の利用を想定した、
漢字をふくむ日本語文字列を読みがなだけで検索するシステムを提案する。
本手法は bi-gram と動的計画法をもちいて、漢字を含む文字列を
すべての可能な読み方で効率的にインデックス、および検索することを可能にする。
試験的な実装により、本手法が大規模な文書検索に応用可能であること、
また純粋な読みがなだけの検索では不十分な場合があることを示す。
1. 背景
2. 基本的な機構
2.1. 検索の流れ
3. インデクシングのアルゴリズム
4. マッチングのアルゴリズム
5. 辞書ファイルの最適化
6. 点字規則の追加
7. 評価実験
7.1. 実装
7.2. 実験に用いた文書集合
7.3. インデクシングの効率
7.4. 検索の効率
8. 残された課題
8.1. 検索結果のランキングおよびフィルタリング
8.2. 読みがな以外による表記のゆれ
8.3. 検索効率の改善
1. 背景
現在の視覚障害者は、おもに点字ディスプレイまたは
音声合成をもちいた画面読み上げソフトウェア (スクリーンリーダ) を用いて
コンピュータにアクセスしている。しかし現在普及している点字は
ほとんどが表音文字であり (注: 点字をもちいて漢字を表現する 
6点漢字あるいは 8点漢字という手法も提案されているが、
広く普及するには至っていない)、
画面読み上げソフトウェアもまた音声に頼っていることから、
視覚障害者が日本語の漢字表記に触れる機会は晴眼者に比べて少ない。
このことは、コンピュータを使って大規模な文書検索をおこなうさいに
問題となる。現在普及している、文字列一致による検索システムでは
ユーザは検索したい単語がどのような綴りなのか、あるいはそもそもそれが漢字
(あるいはカタカナ) によって表現されているのかどうかを
あらかじめ知っている必要がある。
さらに複数の単語からなる文や句全体を検索する際には、
ユーザはそれが (一般的な かな漢字変換ソフトウェアを用いて) どのように
漢字に変換されるかもある程度予測できていなければならない。
このようなことは、漢字表記を普段からあまり意識していない
視覚障害のユーザーにとって困難である。高齢の視覚障害者の場合、
ユーザは漢字をほとんど知らないこともある。そこで、
本記事では漢字 (あるいはカタカナ) を含む文字列の「読み」だけで
大規模な文書集合を効率よく検索できるような機構を提案する。
検索システムを設計する立場から考えると、この問題は検索対象となる
文字列に含まれる漢字すべてに正しい読み方を付与すれば解決できるように思われる。
しかし、すべての漢字、とりわけ日本語の固有名詞に対して
一意の読み方を付与することは難しい。固有名詞は同じ漢字表記であっても
さまざまな読み方が存在し、適切な文脈情報なしには読みを決定することは
不可能である。たとえば「新山」という文字列には、
「にいやま」「しんやま」「あらやま」
「しんざん」などの可能な読み方が存在する。
また、たとえ正しい読みが付与できたとしても、ユーザがその読み方を
知らないこともありうる。なぜなら一般的な音声合成技術を使っている
現在のスクリーンリーダは、まさに上で示した理由により、固有名詞を正しく
発音しない場合が多いからである。
そこで本記事で提案する検索システムでは、ある漢字かな混じり文字列を
可能なすべての読みで検索できるようにすることを目標とする。
しかし、伝統的な手法を用いてこのような検索を実現しようとすると
計算量およびデータ量の増大という問題が発生する。
たとえば「日本の祭事」という文字列を考えてみよう。
「日本」という文字列は「にほん」とも「にっぽん」とも読めるし、
また「祭事」は、「さいじ」あるいは「まつりごと」とも読めるので、
少なくとも「日本の祭事」に対しては「にほんのさいじ」「にっぽんのさいじ」
「にほんのまつりごと」「にっぽんのまつりごと」の 4種類の読み方が存在する。
このような読み方をすべて列挙すると、一般的に可能性のある読み方は
連続する漢字の数に応じて指数的に増えてしまう。
本記事では、2-グラム (bi-gram) と動的計画法 (dynamic programming) を
もちいて、これらの可能な読みをすべて現実的な計算時間で処理する
手法を提案する。また、この機構を既存のオープンソース
検索システムである 
Fooling
に実装し、簡単な性能評価をおこなった。
本手法は、文書をすべてひらがな (あるいはカタカナ) による
読みで検索するが、オプションとしてローマ字入力による検索も可能である。
したがって、この手法は将来的に文字入力のためのキーが限られている
携帯デバイスなどからの文書検索システムにも応用できるかもしれない。
2. 基本的な機構
本システムでは、文字列の検索は 2つの段階に分けられる。
ひとつは、検索の絞りこみのためのデータ構造 (インデックス、index) を
検索対象となる文書集合からあらかじめ作成しておく「インデクシング」であり、
もうひとつは実際に与えられた検索要求 (読みがな) に
適合する文書を抽出する「検索処理」である。後述するように、
本システムでは検索処理はさらに 2つの段階
(「絞りこみ」と「マッチング」) に分けられる。
一般的な文書検索システムにおいては、インデックスは
ユーザが入力する各検索語をふくんだ文書集合を対応づける写像に
なっている。インデックスは、すべての可能な検索キーワードに対して、
それらが含まれる文書の集合を対応づけるような写像であるが、
返される文書が必ずしもすべて検索結果に完全に一致する必要はない。
インデックスは検索要求に一致する可能性が (他の文書に比べて) 
十分に高いようなものを、適当な数にまで絞りこむために使われる。
本システムはこのアイデアにもとづき、インデックスのキーとして
読みがなの bi-gram を使う。読みがなの bi-gram とは、日本語の
読みがなのうち連続する 2文字をそれぞれ取り出したものである。
たとえば「明後日」という文字列に対応する読みがなは、
「あさって」であるが、これは
「あさ」「さっ」「って」という 3つの bi-gram に分解できる。
本システムでは、このような読みがなの対応は辞書ファイルによって与えられる。
なお、実際には本システムではインデックスする単位は文書ではなく、各文書中の
文である。システムはインデックスする文書を個々の文に分解し、
これらの文から bi-gram を取得してインデックスする。
したがって、実際のインデックスには、
「あさ」が含まれるすべての文、
「さっ」が含まれるすべての文、
そして「って」が含まれるすべての文が、
それぞれの bi-gram に対応づけられて格納されている
(注: 実際に格納されているのは文の文字列そのものではなく、
各文への参照IDである)。
2.1. 検索の流れ
例として、「あさっては」という読みが含まれる文:
視覚障害者のための読みがなによる全文検索システム、その提案と実装
