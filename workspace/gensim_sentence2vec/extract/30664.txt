
の三つになるが、外部からは送金前と送金後のいずれかの状態しか観測できない。
永続性[編集]
永続性あるいは持続性と呼ばれる。トランザクション操作の完了通知をユーザが受けた時点で、その操作は永続的となり、結果が失われないことを指す。これはシステム障害に耐えるということであり、DBMSは整合性制約をチェック済みでありトランザクションを中止してはいけないということである。多くのデータベース実装では、トランザクション操作を永続性記憶装置上にログとして記録し、システムに異常が発生したらそのログを用いて異常発生前の状態まで復旧することで永続性を実現している。
実装[編集]
トランザクションによる状態の変更は、例えばデータ自体に加えそれに付随するインデックスの更新のように、複数の変更によって構成される場合が多く複雑である。また、厳密にACIDを実装しようとすると、広範囲なロックを取得したり、多くのデータを複製するなどといった、性能面での劣化が大きくなりすぎることがある。ACIDを厳密に実装することは難しい。
また、ACIDを実現する手続き自体がシステム要因にて失敗してしまう場合もあり、その失敗要因を回避した後に復旧できるような対処を取る必要がある。例えば、UNIXのファイル実装に関して、ジャーナルファイルシステムによるファイルの一貫性の保護や、データのフルバックアップなどの対処など、多くの改善と処理の工夫が取り入れられている。
ACIDはデータベースが全ての処理を一度に処理できることを要求している。実際にはこの処理の手筈を整えるのは難しい。しかし、これを行うのにログ先行書き込み(英: write ahead logging)とシャドウページングという2つの一般的なテクニックが存在する。どちらの場合でも、読み書きする情報全てに対してロックを取得しておかなくてはならない。ログ先行書き込みの場合、データベースへの実際の書き込みが行われる前にすべてのredo リドゥとundo(アンドゥ)の情報がログに書き込まれることで、アトミック性が保証される。シャドウページングの場合、更新はデータベースのコピーに対して行われ、トランザクションがコミットされたときに新しいデータベースがアクティブ化される。このコピーは全体をコピーするのではなく、変更のない部分は古いバージョンのデータベースへの参照という形で行われる。
複数のトランザクションを並行実行するときは、独立性の実現に注意するべきである。実際には、完全な独立性の実現はコストが高いため、実現するトランザクション分離レベルを設定し、実装することとなる。また、分離レベルの実装はデッドロックやライブロック等に注意して行うべきである。例えばツーフェーズロッキング等が一般的に利用される。
トランザクションに関わる参加者が複数の場合、例えばツーフェーズコミット(2PC)が一般的に利用される。ツーフェーズコミットでは各参加者がトランザクションのコミットに同意するか否かについて一致することを保証する。
トランザクションを考慮したファイルシステム[編集]
VSAM
トランザクションNTFS
Apache Commons Transaction
その他のモデル[編集]
ACIDとは対照的に、結果整合性 (BASE[4]) という整合性モデルも考案されている。
脚注[編集]
^ ISO/IEC 10026-1:1992 Section 4
^ Andreas Reuter
^ Theo Härder
^ 英: basically available, soft state
関連項目[編集]
データベース
ACID (コンピュータ科学) - Wikipedia
