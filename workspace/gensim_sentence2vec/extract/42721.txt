変数を使用する
一般的な変数の設定と参照
変数に値を設定する
VAR1=123456
VAR2=hogehoge
VAR3=" a b c d e f g "
他のプログラミング言語と同様に「=」を使用する。
シェルスクリプトでも C 言語などと同様に「=」を使用することで変数に値を設定することができる。
だが、C 言語とは違い「=」の前後にスペースがあってはいけない。
また、変数名の大文字と小文字は区別されるため変数 VAR と変数 var は別物として扱われる。
さらにシェル変数に「型」は存在しないので、文字列や数値を区別なく設定できる。
コマンドの実行結果を変数に設定する
VAR=`command`
画面に表示されるコマンドの実行結果(標準出力に出力される文字列)を全て変数に設定する。
計算結果、文字列の編集結果、等を変数に設定したい場合は、「``」(バッククォート)を使用する。
ただし、この方法で変数に設定されるのは標準出力に出力されたコマンドの実行結果のみで、
標準エラー出力に出力されたコマンドの実行結果は変数には設定されない。
結果的にコマンドが正常に実行された場合は結果が変数に設定され、エラーが発生した場合は画面上にエラーが出力されることになる。
$ VAR=`date`
$ echo $VAR
2007年 5月 26日 土曜日 02:06:23 JST
コマンドの実行結果を、エラーも含めて変数に設定したい場合は次のようにする。
VAR=`command 2>&1`
標準出力に加えて標準エラー出力に出力されるコマンドの実行結果を全て変数に設定する。
リダイレクトを指定することで、エラーが発生した場合もコマンドの実行結果を変数に取得することができるようになる。
この指定方法だとコマンドの実行結果は画面上には一切出力されないことになる。
$ VAR=`ls hogehoge`
ls: hogehoge: そのようなファイルやディレクトリはありません
$ echo $VAR
※コマンドの実行結果が標準エラー出力に出力されているため、変数には何も設定されていない。
$ VAR=`ls hogehoge 2>&1`
$ echo $VAR
ls: hogehoge: そのようなファイルやディレクトリはありません
※標準エラー出力を標準出力にリダイレクトすると、標準エラー出力も変数に設定されるようになる。
バッククォートと同様の機能は「$(command)」でも実現可能。
VAR=$(command)
実行結果はバッククォートを使用した場合と同じになる。
$ echo $VAR
2007年 5月 26日 土曜日 03:01:30 JST
※バッククォートと同様に標準出力への出力が変数に設定されている。
$ VAR2=$(ls hogehoge)
ls: hogehoge: そのようなファイルやディレクトリはありません
$ echo $VAR2
※標準エラー出力への出力は変数に設定されない。
$ VAR2=$(ls hogehoge 2>&1)
$ echo $VAR2
ls: hogehoge: そのようなファイルやディレクトリはありません
※バッククォートの場合と同様に、リダイレクトを使用することで標準エラー出力への出力も変数に設定できる。
このようにコマンドの実行結果、つまりコマンドが標準出力に出力する文字列を変数に格納したい場合は、
「``」(バッククォート)もしくは「$()」を使用する。
変数の値を参照する
・変数の値を表示
# 変数 VAR1 の値を表示
echo $VAR1
# 変数 VAR の値と「1」を表示
echo ${VAR}1
# 変数 VAR2 の値と変数 VAR3 の値を表示
echo ${VAR2}${VAR3}
・変数の値を他の変数へ設定する
# 変数 VAR に変数 VAR1 の値を設定
VAR=$VAR1
# 変数 VAR に変数VARの値と「1」を設定(変数 VAR の値の最後に「1」を付加する)
VAR=${VAR}1
# 変数 VAR に変数 VAR2 と変数 VAR3 の値を結合した値を設定
VAR=${VAR2}${VAR3}
変数の値を参照するには変数名に「$」を付ける。
変数の値を参照する場合は変数名の頭に「$」を付ける。参照する変数を明確にする場合は「{}」(中括弧)で変数名を囲む。
例えば上記の「 $VAR1 」と「 ${VAR}1 」は違う変数を参照する。前者は変数 VAR1、後者は変数 VAR を参照となる (※ 変数 VAR と変数 VAR1 の両方が定義されている場合)。
また、変数を「{}」で囲むことはシェルスクリプトの可読性を高めることにも有効である。
「 ${foo}${bar} 」のように複数の変数を同時に参照する場合などは、「{}」を使用した方が個々の変数を区別しやすくなる。
$ VAR1=123456
$ VAR2=abcdefg
$ VAR3=" a b c d e f g "
$
$ echo $VAR1
123456
※変数 VAR1 の値を表示する。
$ echo ${VAR}1
1
※変数VARの値と「1」を表示する。上の結果と比較すると、「$VAR1」と「${VAR}1」は別物であることが分かる。
また、変数 VAR は値が設定されていないので「""」(空文字)に置き換えられる。
$ echo ${VAR2}${VAR3}
abcdefg a b c d e f g
※変数VAR2と変数VAR3の値が連結して表示される。「echo $VAR2$VAR3」と書いても結果は同じになるが、
シェルスクリプトを書く場合は、可読性を高めるためにも上記のように「{}」で囲むことが望ましい。
変数の特殊な参照方法
変数の状態に応じて振る舞いを変える特殊な参照方法。
変数に値が設定されていない場合に一時的に値を与えて参照する、などの特殊な参照が可能である。
だが、これらをむやみに使用するとシェルスクリプトの可読性が低下し、
思わぬバグを生む可能性があるので、あまり多用はしないほうがよいだろう。
特殊な参照方法一覧表
参照方法
参照結果
変数を使用する - UNIX & Linux コマンド・シェルスクリプト リファレンス
