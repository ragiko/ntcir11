grep型とインデックス型
全文検索を行うにはさまざまな方法があります。大まかには「grep型」と「索引(インデックス)型」です。「grep型」は事前に索引ファイル(インデックス)を作成せずに、検索実行時に順次文字列パターンと対象のテキストデータをつきあわせて一致する箇所を見つけ出すため、検索対象の増加によって検索速度が低下する特徴を持っています。また、インデックス型では、あらかじめ検索対象となるデータの索引データを作成する前処理を行います。索引データとは、書籍の索引のように見出し語と見出し語が使われている該当のページ番号から構成されているデータです。検索時には索引から見出し語を見つけ、その見出し語が使われている該当ページのリストを取得するだけとなるため、高速に検索が行える仕組みとなっています。多くの検索エンジンはインデックス型を採用しており、検索エンジンが高速な理由です。
索引方式
日本語は英語と違い単語と単語の間がスペースで区切られていないため、日本語では文章の中から見出しを切り出す索引方式として、形態素解析方式やN-gram方式がよく利用されます。それぞれの方式は基本的には見出し語をどのように作成して検索させるかと言った点が大きく異なります。
形態素解析方式
形態素解析を使用して見出し語を作成する場合、日本語の文章の中から意味のある最小単語を抽出して見出し語を作成します。日本語では文章の中から正しく単語を切り出すと言う処理は意外と大変なため、一般的には日本語用の形態素解析エンジンを利用します。中国語など日本語意外にもスペースで区切られていない言語はありますが、中国語を形態素解析で分かち書きするには中国語用の形態素解析エンジンが必要になるように、形態素解析は検索対象の言語に依存した検索方式といえます。
形態素解析による検索方法には、ノイズを減らすと言った特徴があります。
サンプル文書
文章1: 東京都の天気は晴れです  東京/都/の/天気/は/晴れ/です
文章2: 京都の天気は晴れです   京都/の/天気/は/晴れ/です
文章3: 天気予報は晴れです    天気予報/は/晴れ/です
インデックス例
東京    文章1
都     文章1
の     文章1,文章2
天気    文章1,文章2
は     文章1,文章2,文章3
晴れ    文章1,文章2,文章3
です    文章1,文章2,文章3
京都    文章2
天気予報  文章3
上記の例では、2つの文章を形態素解析によって、インデックスを作成した例です。「晴れ」と言う文字列を検索すると、文章1と文章2、文章3が見つかります。さらに、「京都」と「晴れ」と言う2つの文字を含む文章を探す場合、「京都」と「晴れ」の検索結果のAND条件で合成すると、文章2と言う結果が得られます。文章1には、「京都」と言う文字列は含まれていますが、インデックス作成時に文章1からは「京都」と言う見出し語は作成されないため、「京都」と言う検索では、ノイズとなってしまう文章1は含まれないことがわかります。
ここで注意したいのが、「天気」で検索した場合、利用者が期待する検索結果は、文章1,文章2,文章3ですが、文章3は「天気予報」と言う部分が1語として処理されてしまっているため、結果は文章1と文章2となってしまいます。先ほどの「京都」の例では、形態素解析のノイズを減らす良い結果でしたが、「天気」の検索例では、検索漏れを発生する悪い結果となっています。これが形態素解析で作成した索引を使った検索ロジックです。
N-gram方式
形態素解析が最小単語単位で見出し語を抽出するのに対して、N-gram方式は、文章を文字列の並び順にN文字を見出し語としてインデックスする方法です。日本語や中国語など形態素に比べて言語に依存しない見出し語作成が可能な方式といえます。
N-gram方式では、検索漏れを少なくする特徴を持っています。以下は2gramの例です。
サンプル文書(2gram)
文章1: 東京都の天気は晴れです  東京/京都/都の/の天/天気/気は/は晴/晴れ/れで/です
文章2: 京都の天気は晴れです   京都/の天/天気/気は/は晴/晴れ/れで/です
文章3: 天気予報は晴れです    天気/気予/予報/報は/は晴/晴れ/れで/です
インデックス例
東京    文章1
京都    文章1,文章2
都の    文章1,文章2
の天   文章1,文章2
天気    文章1,文章2,文章3
気は    文章1,文章2,文章3
は晴   文章1,文章2,文章3
晴れ    文章1,文章2,文章3
れで   文章1,文章2,文章3
です    文章1,文章2,文章3
予報    文章3
形態素解析では検索漏れが発生していた「天気」の検索では、N-gram方式を利用することで、期待通り文章1、2、3が検索結果として取得できます。ただし、「京都」で検索した場合には、文章1と文章2が検索結果として見つかるため、ノイズが多くなる検索結果となります。
まとめ
形態素解析とN-gramでは、どちらが優れている検索方式と言うものでなく、目的や用途に応じて使い分けることが重要です。また、気をつけたいのが両方を併用する場合、適合率を向上(ノイズを減らす)させるための形態素解析と、再現率を向上(漏れを減らす)させるためのN-gram方式では、目的が相反しているため(適合率を上げれば、再現率は下がります。逆に再現率を上げれば適合率は下がります。)、どちらかをメインの検索方式として採用し、部分的なサポートとして異なる方式をを併用するような設計をお進めしています。例えば飲食店などの店舗情報を検索させるインデックスを作成する場合、検索漏れを少なくしたい店舗名称はN-gram方式を採用し、お店の特徴や、メニュー紹介説明などの雑多な文章は形態素解析を採用しノイズを減らすなど。
N-gramと形態素解析 | 検索デベロッパー ブログ
