
次の例を見てください。
int num = 10;
boolean b;
b = !(num > 20);
この場合、まず「num > 20」について判定します。結果はfalseです。そして!演算子によっての式「!(num > 20)」はtrueとなります。
なお!演算子は優先順位がかなり高いので必要に応じて括弧を使って下さい。
判定される順番
&&演算子や||演算子では左辺及び右辺の値を使って全体の判定を行いますが、どちらの演算子もまず左辺から判定します。
左辺 && 右辺
&&演算子の場合で考えてみると、まず左辺を判定します。ここで左辺がfalseだった場合には全体がfalseと確定するため右辺の判定は行いません。
左辺 || 右辺
||演算子の場合もまず左辺を判定します。ここで左辺がtrueだった場合には全体がtrueと確定するため右辺の判定は行いません。
ここで順番を何故気にするのかと言えば、まず左辺から先に判定されるため左辺と右辺のどちらに何を記述するのかによって処理効率が変わる場合があります。左辺だけで結果が確定する場合が多いようにしておけば、右辺を判定する必要がなく効率的です。
また左辺で結果が確定した場合に右辺は判定されませんので、右辺にインクリメント演算子を含む式が記述されていた場合など式そのものが処理されない場合もあります。次の例を見てください。
int num1 = 30;
int num2 = 25;
boolean b;
b = num1 > 10 || ++num2 < 40;
この場合、||演算子の左辺だけで全体がtrueとなることが確定するため右辺はまったく処理されません。その為変数「num2」の値も1増えることはありません。もしも左辺がfalseだった場合には右辺も判定されるため変数「num2」の値が式を判定後に1だけ増加します。このように論理演算子を使用する場合には注意が必要となります。
サンプル
では簡単なサンプルで試してみます。
JSample12_1.java
class JSample12_1{
public static void main(String args[]){
int num = 30;
System.out.println("num = " + num);
System.out.print("num > 5 && num < 20  --> ");
System.out.println(num > 5 && num < 20);
System.out.print("num > 20 || num < 10  --> ");
System.out.println(num > 20 || num < 10);
System.out.print("!(num < 20)  --> ");
System.out.println(!(num < 20));
}
}
コンパイル後に実行すると次のように表示されます。
論理演算子 - 演算子 - Java入門
