
モデル[編集]
関係モデル(リレーショナルモデル)における基本的な前提は、あらゆるデータは n 項(n-ary)の関係(リレーション)で表現されるということである。 数学における関係は二項関係をいうが、関係モデルでは関係の概念を n 項に拡張している(nは0もしくは正の整数)。 一つの n 項の関係は、n個の定義域(ドメイン、後述する)の直積集合の部分集合である。
数学モデルでは推論は二値の述語論理で行う。 すなわち個々の命題について真か偽かのいずれかの評価を行う。 数学の命題は真か偽かの二値であり「未知の値」(unknown) や「不適切な値」(not applicable) のような第三の値は無い。 なおコンピュータ科学では「未知の値」や「不適切な値」はしばしばnullに対応づけられる。
関係モデルにおいては、二値論理が関係モデルの重要な要素であり三値論理を許容すべきでないと考える人々と、三値論理を関係モデルで許容できると考える人々がおり、研究者の間で見解が分かれている。
関係モデルではデータ(関係)の演算は関係代数あるいは関係論理(関係計算)を使って行う。 関係代数と関係論理は同等の演算能力をもつ。
関係モデルを活用することにより、関係データベースでデータベースを設計(データベース設計)する人はデータベースに格納する対象となる情報を、整合性を備え論理的に表現することができる。情報の整合性は、データベース設計で制約の宣言を行うことで実現することができる。
ここでいうデータベース設計は論理設計(スキーマ)と呼ばれることが多い。
関係モデルの理論には、関係の正規化という過程がある。 関係を正規化することにより、関係データベースであるデータベースの設計から、論理的に同等でありかついくつかの意味でより望ましい特性をもつデータベース設計を、導き出すことができる。一方で、アクセスプランの算出やその他関係モデルの実装、データ演算の詳細は、関係データベース管理システム(RDBMS)のエンジンにより制御されるのであって、論理設計は関知しない。論理設計は、関係データベース管理システム(RDBMS)でパフォーマンスチューニングのためによく行われる実践とは、水準が異なる。ただし、こうしたパフォーマンスチューニングでは論理設計の変更を必要とすることも多い。
関係モデルの基礎的な要素は定義域; instance(ドメイン; domain)である。定義域はデータ型と同じ意味と考えて良い。現在は型(タイプ; type)と略されることも多い。
属性(attribute)は、属性名と型名(定義域名)のペアから構成される。属性の名前と値のコンポーネントの順序づけられていない集合を組(タプル; tuple)という。属性値は、属性の定義域に適合する具体的な値である。属性値は、スカラ値もしくはより複雑な構造をもつ値である。
関係(リレーション; relation)は、見出し(heading)と本体(body)から構成される。 見出しは順序づけられていない属性の集合である。本体は順序づけられていない組の集合である。n 項の関係の本体は n 組の集合から構成される。ある関係の見出しはその関係に含まれる組の見出しでもある。
関係は n 組の集合として定義される。数学の文脈においても、関係モデルの文脈においても、集合とは順序づけられていない要素の集まりである。
ただし一部のRDBMSと称するシステムは、データに対して順序づけを強制している。[要出典]こうしたシステムは、関係モデルに準拠していないとして批判されることがある。数学では、組に含まれる要素間には順序が存在し、要素の重複は許容される。
関係モデルを考案したエドガー・F・コッドは、当初はこの数学上の定義を使って組を定義していた[1]。 後に組の概念は変更されたが、組という概念名は変わっていない。この優れた組の概念により、直ちに重要な帰結として、関係モデルの関係代数の直積演算において交換法則が成立した。
現在、表(テーブル; table)は関係の視覚的表現として広く受け容れられている。組は表の行(row)の概念に似ている。 データベース言語 SQL では、表の列(カラム; column)が順序づけられていることに注意する必要がある。SQL は関係モデルに準拠していないとして批判されることがあり[誰?]、こうした順序づけの存在は批判の根拠の一つとなっている。
関係変数(リレーション変数; relvar; relation variable)は、特定の関係型の名前つきの変数である。どの時点においても、関係変数にはその型に対応した何らかの関係(関係値)が割り当てられている。関係が含む組の数は0の場合もある。
関係モデルの基本的な原理は情報の原理である。あらゆる情報は関係に含まれるデータとして表現される。この原理から導き出されることとして、関係データベースは関係変数の集合であり、関係データベースに対するあらゆる検索の結果は関係として表現される。
関係データベースには整合性が強制的に適用される。関係データベースで論理スキーマの一部として整合性の制約が宣言され、RDBMS によって関係データベースにアクセスするあらゆるアプリケーションソフトウェアに対して強制的に適用される。関係データベースにアクセスするアプリケーションソフトウェアに関係データベースの整合性の規則を実装する必要があるわけではない。一般的に、制約は関係比較演算子を使って表現される。整合性制約を記述するには、理論的にはただ一つの関係比較演算子「—は—の部分集合である」(⊆) だけで十分である。実際には、便利ないくつかの短縮記法を使うことができるであろう。その中でもとりわけ重要なのは、候補キー(candidate key; 実際にはスーパーキー superkey)、外部キー(foreign key)の各制約である。
述語論理での解釈[編集]
関係モデル(リレーショナルモデル)の理解を深めるためには、関係の別の解釈、すなわち述語論理での解釈を理解することが、一つの方法である。このことについての説明をクリス・デイトの著書から引用する。[2]
まず、すべての関係変数には述語が関連づけられており、その関係変数の関係変数述語と呼ばれる。
関係変数 R が述語 P を持つとすれば、ある時点で R に含まれる組 t はすべて、特定の命題 p を表すものと考えることができる。この命題は、t に含まれている属性値を引数として、その時点の P を呼び出す(またはインスタンス化する)ことによって得られる。
そして(非常に重要だが)このようにして得られた命題 p は、慣例として、それぞれ真に評価されると想定される。
このように実体化した組は真と評価される命題とみなすことができる。なぜかというと、関係の本体にその組が登場するからである。これに対し逆に、見出しが関係の見出しに適合するが関係の本体に存在しない全ての組は偽と評価される命題である。
この一つ前の文の根底にある仮説は閉世界仮説として知られており、関係モデルは閉世界仮説に依拠している。
関係の本体は述語論理の文脈では「外延」と呼ばれる。これは関係の本体が関係変数述語の外延として表現されると解釈できることが理由である。
データベースへの適用[編集]
関係データベースにおける典型的な定義域は、整数型、文字列型、論理型などである。定義域の名前は、"int"、"char"、"boolean" など一連の名前が規定される。
属性は関係のデータ構造の一部として宣言され、属性の宣言ではその属性名と定義域の名前を指定する。組はデータベース言語として SQL を採用しているデータベースでは基本的に行と同じ概念である。
属性名の例は "name" や "age" などである。属性値は、特定の組の特定の属性に含まれる具体的な値(エントリ)であり、例えば "John Doe" や "35" などである。
関係は表に似たデータ構造の仕様でありまたデータ(本体)を含んでいる。見出しは関係のデータ構造の宣言である。本体は関係のデータ構造に含まれるデータである。
他のデータベースモデル[編集]
関係モデル(リレーショナルモデル)以外のデータベースのモデルとしては、階層型データモデルやネットワーク型データモデルがある。 これらの古いアーキテクチャを使ったいくつかのシステムが、現在もデータセンターで使われており、大容量のデータを扱う必要がある場合や、既存のシステムが非常に複雑であるために関係モデルを採用したシステムに移行するには多大な費用を要する場合などに、使われている。
新しいデータモデルとしてはオブジェクト指向のデータモデルがあり、近年ではオブジェクトデータベースを使うことができるようになっている。 2009年現在では関係データベースと比べると使われる事例は少ないものの、少しずつ採用され始めている。 オブジェクトデータベースの有用性については見解が分かれている。 オブジェクトデータベースにはオブジェクト指向プログラミング言語との親和性が高いという特長がある。 一方で一部の人々は、オブジェクトデータベース管理システム (ODBMS) の多くは正統的な DBMS(データベース管理システム)というよりもむしろ DBMS 構築キットであるとして、あまり有用な技術とは認識していない。
関係モデルは形式化された最初のデータモデルである。関係モデルが定義された後に、非形式的なデータモデルが、階層型データベース(階層型データモデル)やネットワーク型データベース(ネットワーク型データモデル)を記述するために作られていった。階層型データベースとネットワーク型データベースは、関係データベース以前に既に存在していた。しかしそれらがモデルとして記述されたのは、関係モデルが定義された後のことであり、その目的はデータモデル間の比較をするための基礎を確立するためであった。
歴史[編集]
関係モデル(リレーショナルモデル)はエドガー・F・コッドによりデータの一般モデルとして考案された。その後クリス・デイトやヒュー・ダーウェンなどの人々によりモデルの修整と開発が行われている。彼らは著書 The Third Manifesto(第1版は1995年に出版された)において、関係モデルがその基本原理を損なうこと無く望ましい形でオブジェクト指向機能に対応する技法を提示した。
関係モデルの重要な基礎をなすものとしては、ゲオルク・カントール (1874) と D・L・チャイルズ (1968) の業績がある。カントールは19世紀のドイツの数学者であり多数の論文を公表し集合論を考案した。チャイルズはアメリカ合衆国の数学者であり論文 "Description of a Set-Theoretic Data Structure" は、コッドの画期的な1970年の論文 "A Relational Model of Data for Large Shared Data Banks" で引用された。 チャイルズの考案した集合論データ構造は、集合論をデータ検索の基礎として使っていた。このデータ検索では和、交わり、定義域、範囲、制限、濃度、直積などの集合演算を使っていた。集合と集合演算を採用することにより物理的データ構造からの独立性が実現された。これは当時としては先駆的な業績であった。
SQL標準[編集]
SQL(Stuructured Query Language)は、最初に関係データベースの標準言語となったが、いくつかの面で関係モデル(リレーショナルモデル)から逸脱している。SQLは、これらの関係モデルからの逸脱を根拠として批判されることがある(Date C. J. "Database in Depth" 参照)。2008年現在、ISO SQL 標準は、関係モデルに言及しておらず、関係モデルの用語も概念も使っていない。しかしSQLを使って関係モデルに適合するデータベースを構築することは、いくつかのSQLの機能を使わなければ、可能である。
まずSQLの用語とそれに相当する関係モデルの用語の対応関係を示す。
SQLの用語と関係モデルの用語の対応関係
SQLの用語
関係モデルの用語
関係モデル - Wikipedia
