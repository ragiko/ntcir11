 LINQを使って文字列のコレクションを処理するとき、SQLのLIKE演算子を使いたいと思ったことはないだろうか? SQLなら例えば「LIKE '%ぶた%'」と指定することで、文字列中のどこかに「ぶた」と入っている文字列を選択できる。同様なことをLINQで実現するにはどうしたらよいだろうか? 本稿ではその方法を説明する。
LINQ to SQLの場合
LINQ to SQLではSqlMethodsクラス(System.Data.Linq.SqlClient)のLikeメソッドを利用すればよい。本稿では、この説明は省略する。
SqlMethods.Likeメソッドは、LINQ to SQLのコンテキスト以外の場所で使うと、実行時にSystem.NotSupportedExceptionが発生する。では、そのような一般的なLINQのコンテキストではどうすればよいだろうか? 以降ではこの方法を解説する。
C#/VB共通の方法
「LIKE検索」を実現するには、LINQのWhereメソッド(System.Linq名前空間のEnumerableクラスに定義された拡張メソッド)に与えるラムダ式を工夫する*1。Stringクラス(System名前空間)のContains/StartsWith/EndsWithメソッドを使うか(それぞれ「%」を検索語の前後に付加/「%」を検索語に後置/「%」を検索語に前置に対応する)、Regexクラス(System.Text.RegularExpressions名前空間)を利用して正規表現によるマッチングを行えばよい(次のコード)。
using System;using System.Collections.Generic;using System.Linq;using System.Text.RegularExpressions; // Regexクラスを使用するclass Program{  // コンソール出力用のメソッド  static void WriteItems(string header, IEnumerable<string> items)  {    var output = string.Join(", ", items.ToArray());    Console.WriteLine("{0}: {1}", header, output);  }  static void Main(string[] args)  {    // サンプルデータ(文字列の配列)    string[] sampleData = { "ぶた", "こぶた", "ぶたまん", "ねぶたまつり",                             "ねぷたまつり", "きつね", "ねこ", };    WriteItems("sampleData", sampleData);    Console.WriteLine();    Console.WriteLine("Stringクラスのメソッドを利用する");    // LIKE '%ぶた%':String.Containsを使う    var 前後パーセント = sampleData.Where(item => item.Contains("ぶた"));    WriteItems("LIKE '%ぶた%'", 前後パーセント);    //  LIKE '%ぶた%': ぶた, こぶた, ぶたまん, ねぶたまつり    // LIKE 'ぶた%':String.StartsWithを使う    var 後パーセント = sampleData.Where(item => item.StartsWith("ぶた"));    WriteItems("LIKE 'ぶた%'", 後パーセント);    //  LIKE 'ぶた%': ぶた, ぶたまん    // LIKE '%ぶた':String.EndsWithを使う    var 前パーセント = sampleData.Where(item => item.EndsWith("ぶた"));    WriteItems("LIKE '%ぶた'", 前パーセント);    //  LIKE '%ぶた': ぶた, こぶた    Console.WriteLine();    Console.WriteLine("正規表現でのマッチングを行う");    // LIKE 'ね_たまつり':正規表現の「.」ワイルドカードを使う    var regex1 = new Regex("^ね.たまつり$");    var 任意文字一致 = sampleData.Where(item => regex1.IsMatch(item));    WriteItems("LIKE 'ね_たまつり'", 任意文字一致);    //  LIKE 'ね_たまつり': ねぶたまつり, ねぷたまつり    // LIKE '[か-こ]%':正規表現の文字クラスを使う    var regex2 = new Regex("^[か-こ]");    var 文字範囲一致 = sampleData.Where(item => regex2.IsMatch(item));    WriteItems("LIKE '[か-こ]%'", 文字範囲一致);    //  LIKE '[か-こ]%': こぶた, きつね#if DEBUG    Console.ReadKey();#endif  }}
Imports System.Text.RegularExpressions ' Regexクラスを使用するModule Module1  ' コンソール出力用のメソッド  Sub WriteItems(header As String, items As IEnumerable(Of String))    Dim output = String.Join(", ", items.ToArray())    Console.WriteLine("{0}: {1}", header, output)  End Sub  Sub Main()    ' サンプルデータ(文字列の配列)    Dim sampleData As String() = {"ぶた", "こぶた", "ぶたまん", "ねぶたまつり",                                  "ねぷたまつり", "きつね", "ねこ"}    WriteItems("sampleData", sampleData)    Console.WriteLine()    Console.WriteLine("Stringクラスのメソッドを利用する")    ' LIKE '%ぶた%':String.Containsを使う    Dim 前後パーセント = sampleData.Where(Function(item) item.Contains("ぶた"))    WriteItems("LIKE '%ぶた%'", 前後パーセント)    '  LIKE '%ぶた%': ぶた, こぶた, ぶたまん, ねぶたまつり    ' LIKE 'ぶた%':String.StartsWithを使う    Dim 後パーセント = sampleData.Where(Function(item) item.StartsWith("ぶた"))    WriteItems("LIKE 'ぶた%'", 後パーセント)    '  LIKE 'ぶた%': ぶた, ぶたまん    ' LIKE '%ぶた':String.EndsWithを使う    Dim 前パーセント = sampleData.Where(Function(item) item.EndsWith("ぶた"))    WriteItems("LIKE '%ぶた'", 前パーセント)    '  LIKE '%ぶた': ぶた, こぶた    Console.WriteLine()    Console.WriteLine("正規表現でのマッチングを行う")    ' LIKE 'ね_たまつり':正規表現の「.」ワイルドカードを使う    Dim regex1 = New Regex("^ね.たまつり$")    Dim 任意文字一致 = sampleData.Where(Function(item) regex1.IsMatch(item))    WriteItems("LIKE 'ね_たまつり'", 任意文字一致)    '  LIKE 'ね_たまつり': ねぶたまつり, ねぷたまつり    ' LIKE '[か-こ]%':正規表現の文字クラスを使う    Dim regex2 = New Regex("^[か-こ]")    Dim 文字範囲一致 = sampleData.Where(Function(item) regex2.IsMatch(item))    WriteItems("LIKE '[か-こ]%'", 文字範囲一致)    '  LIKE '[か-こ]%': こぶた, きつね#If DEBUG Then    Console.ReadKey()#End If  End SubEnd Module
.NET TIPS:LINQ:文字列コレクションで「LIKE検索」(部分一致検索)をするには?［C#、VB］ - @IT
