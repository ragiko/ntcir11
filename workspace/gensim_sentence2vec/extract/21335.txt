標準ストリーム(英: standard streams)は、UNIXおよびUnix系オペレーティングシステムや一部のプログラミング言語インタフェースにおいて、プログラムとその環境(通常は端末)を実行前から接続している入出力チャネルである。現在では3つの入出力があり、標準入力 (standard input)、標準出力 (standard output)、標準エラー出力 (standard error) と呼ばれている。かつては通信回線に対応する標準補助入出力 (stdaux)、帳票印字を出力する装置に対応する標準プリンタ出力 (stdprn)も用意されていた。
背景[編集]
UNIX以前の多くのオペレーティングシステムでは、プログラムは明示的に適当な入出力に接続する必要があった。多くのシステムにはOS固有の複雑な事情があり、環境設定をしたり、ローカルなファイルテーブルにアクセスしたり、必要なデータセットを指定したり、カードリーダー、磁気テープドライブ、ディスクドライブ、ラインプリンタ、カードパンチ、対話型端末などを正しく扱うといったプログラミング以前のハードルが多数存在した。
UNIXはこの状況に対していくつかの重要な進化を遂げている。その1つが「抽象デバイス (abstract device)」である。これはプログラム自体がやり取りするデバイスに関する知識を持たなくて済むようにしたものである。古いOSでは、プログラマはレコード構造を知っておく必要があり、直交性のないことが多いデータ意味論やデバイス制御を扱う必要があった。UNIXはデータストリームという概念によってこのような複雑さを排除した。データストリームとは、逐次的なデータバイト列であり、End Of File までリード可能である。プログラムはまた、好きなだけバイト列を出力でき、事前にバイト数を宣言しておく必要もないし、それらがどのようにグループ化されているかを宣言する必要もない。
もう1つのUNIXの成し遂げたブレークスルーは、自動的に入力と出力を関連付けることであり、典型的な入力-処理-出力型プログラムでは入出力の設定を何もする必要がない。対照的にそれ以前のOSでは、複雑なジョブ制御言語を使ってコネクションを確立するか、それとほぼ同等のことをプログラム本体で行う必要があった。
UNIXが標準ストリームを提供したことで、そのC言語実行環境もそれをサポートするようになった。結果として、多くのC言語実行環境(および派生言語の実行環境)はOSが何であっても同等な機能を提供するようになっている。
標準入力 (stdin)[編集]
標準入力はプログラムに入ってくるデータ(テキストが多い)である。プログラムは read 操作を使ってデータ転送を要求する。全てのプログラムが入力を要求するわけではない。例えば dir や ls プログラム(ディレクトリ内のファイル名を表示する)は、標準入力からのデータを使わないで処理を行う。
リダイレクトしない限り、標準入力はプログラムを起動した端末のキーボードになっている。
標準入力のファイル記述子は0(ゼロ)である。POSIXの <unistd.h> では STDIN_FILENO と定義されている。対応する <stdio.h> での変数は FILE* stdin、<iostream> での変数は std::cin である。
標準出力 (stdout)[編集]
標準出力はプログラムが書き出すデータのストリームである。プログラムは write 操作を使ってデータ転送を要求する。全てのプログラムが出力を要求するわけではない。例えばファイル改名コマンド(mv、move、ren など)は何も出力しない。
リダイレクトしない限り、標準出力はプログラムを起動した端末のディスプレイになっている。
標準出力のファイル記述子は1である。POSIXの <unistd.h> では STDOUT_FILENO と定義されている。対応する <stdio.h> での変数は FILE* stdout、<iostream> での変数は std::cout である。
標準エラー出力 (stderr)[編集]
標準エラー出力は、エラーメッセージや診断メッセージを出力するためのもう1つの出力ストリームである。標準出力とは独立しているため、一方だけをリダイレクトすることができる。デフォルトでは端末(のディスプレイ)になっており、標準出力がリダイレクトされていて画面に表示されなくとも、エラーメッセージだけはユーザーが目にするようになっている。例えば、パイプで出力が他のプログラムの入力に接続されている場合でも、標準エラー出力は直接端末のディスプレイに届く。
標準出力と標準エラー出力を同じ出力先(端末など)にリダイレクトすることもよくある。バッファが関与しない場合、メッセージはプログラムが書いた順序で現れる。典型的な例として、標準エラー出力がバッファリングされておらず、標準出力が行単位でバッファリングされている場合、後から標準エラー出力に書かれたメッセージが先に端末上に表示されることがある(標準出力のバッファが満杯になっていない場合)。
標準エラー出力のファイル記述子は2である。POSIXの <unistd.h> では STDERR_FILENO と定義されている。対応する <stdio.h> での変数は FILE* stderr、<iostream> での変数は2つあり std::cerr と std::clog である。前者はバッファリングされておらず、後者はC++の他のストリームと同様にバッファリングされている。
多くのシェルでは、標準出力と標準エラー出力を同じファイルにリダイレクトする場合、以下のように記述する。
>& filename
Bourne Shell 系のシェルでは、標準エラー出力を標準出力と同じようにリダイレクトする場合、次のように記述できる。
2>&1
歴史[編集]
1950年代: FORTRAN[編集]
FORTRANにもUNIXのようなファイル記述子があり、UNIT=5 が stdin、UNIT=6 が stdout を表す。
1960年: ALGOL 60[編集]
ALGOL 60 には、標準ストリーム(ファイルアクセス)の概念が存在しない。
1968年: ALGOL 68[編集]
ALGOL 68 では、入力 (input) と出力 (output) をあわせて transput と呼ぶ。Cornelis H. A. Koster はtransput 標準を定義した。この標準には stand in、stand out、stand error、stand back がある。
例:
# ALGOL 68 example #
main:(
REAL number;
getf(stand in,($g$,number));
printf(($"Number is: "g(6,4)"OR "$,number)); # OR #
putf(stand out,($" Number is: "g(6,4)"!"$,number));
newline(stand out)
)
入力:
出力:
標準ストリーム - Wikipedia
