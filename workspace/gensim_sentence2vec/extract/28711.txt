文字の幅ってのはフォントによって決めるべきもの
ではないんですかね。従来の US-ASCII:JIS X 0208 =
1:2 が欲しいなら、そういうフォントを使えばいいの
では…
従来の文字幅が欲しいなら kterm を使えばいいわけだし、
どうでもいいじゃないですか。
フォントだけでは決まりません。XFree86 XTerm の実装では、半角用フォントと全角用フォントのふたつを用意して、文字ごとにどちらかを使うというふうになっています。文字幅が重要なのは、たとえば tcsh の漢字サポート版では、漢字を入力した後に BS キーや  キーを押すと、2 文字分のカーソル移動コントロールコードが出力され、kterm や rxvt などの動作とマッチするようになっています。つまり、すべてのプログラムで統一した解釈になっている必要があります。もし現在のその統一された動作が変だから変更しようというのなら、世界中のプログ
素朴な疑問。
UNIX統一仕様の一部である端末制御仕様の X/Open Curses では多カラム文字のための処理が定義されていて、
そこでは明らかに、locale DB によるカラム数情報を参照
することが意識されてるんだけど、そういった情報と
連動させるとかそういった話はないのかしらん?
特定の文字が端末において何カラムになるかというのは、
ロケール情報の一部であり、UNIX標準では wcwidth(3) 
で取得可能です。
まっとうな実装なら、端末も Locale 対応にして、
幅設定するには Locale DB を改変してねってことに
なると思うんだけど、Unicode だし固定だ!とかいわれる
として、そのときのそれぞれの幅をどう するかって
話になるのなら、たとえば Solaris が wcwidth を
実装してるから、例えば en_US.utf-8 の時のその
データをもってこれが標準だ! と、示すってのは
どーでしょう。
Solaris のデータが腐ってたりして(わら
はい。wcwidth(3) は知ってます。実際、
Robert Brady
さんパッチを改良したぼくのパッチでは、wcwidth(3) 
を使っています。
これの最初の「不具合」は、
「en_US.UTF-8 ロケールでは wcwidth(3) の定義がいいかげんなので
自前でデータベースを持ったほうがいい」というもので、
そんなの、ロケール定義を実装すればしまいだろ、とか
思ったものです。が、それは無視するとしても、
wcwidth(3) そのものが移植性に乏しいとか
(BSD なみなさん、がんばってください)、
リモート環境ではうまくいかないとかの問題が指摘されています。
ですので、
wcwidth(3) が正しく動くことは必要なことではありますが、
だからといってロケール定義を好き勝手にしてもきちんと動くという
わけではないです。
ぼくはそれでも、リモートでない場合とか、自分で分かっててやるぶんには
かまわないだろうと思うのですが...
あと、この XTerm に固有の問題ですが、
wcwidth(3) は wchar_t を引数にとる一方、
XTerm は内部コードとして Unicode を採用しているために
変換が必要になる、という問題があります。
Unicode とワイド文字の間の変換を、
移植性よく、効率よく書くにはどうすればいいのでしょうか?
いちおう、上記のぼくのパッチには、それらしきコードが書いてありますが。
XTerm + luit のアプローチだと、XTerm そのものは
エンコーディング変換を一切やらない建前だし
(そうすることで
XTerm 本体の保守性を保つのだとか。ぼくがメンテするのではないので、
そう言われると反論しにくい)、かといって
luit はロケールを使わずに ISO-2022 をそのまま解釈する構造になっていて、
やはりワイド文字とかマルチバイト文字とかとはなじみが悪いです。
というわけで、wcwidth(3) に基づいた文字幅を実現するのは
このままではなかなか難しそうです。
ところで、合成文字や bidi の場合は、wcwidth(3) はどのように動作すべきと
定められているのでしょうか?
コメント#36943 | 国際化された XTerm を目指して | スラッシュドット・ジャパン
