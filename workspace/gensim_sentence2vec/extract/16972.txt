
テーブルの構築
テーブルを作成し、データを流し込んでみましょう。標準的なスキーマを以下に記します。もっと効率の良い格納法等を各班で工夫する事は問題ありません。余裕があれば挑戦してみましょう。(ただし、この後の説明も読んでからにしてください。)
CSVファイルを読み込む命令: http://dev.mysql.com/doc/refman/4.1/ja/load-data.html
上記のCREATE文では、キーで指定されたIDにしてインデクスが作られません。試しに以下のSQLで問い合わせしてみましょう。
前者はインデクスが張られているため、高速に結果が返ってきたと思いますが、後者は時間がかかりましたね。これがインデクスの威力です。MariaDBは主キーに対してデフォルトでB-treeでインデクスが作成されます。それを使って検索するため高速に結果が返ります。(アルゴリズムとデータ構造Iの演習を思い出しましょう。)
一般的にインデクスが作成されているフィールドを検索する際MariaDBは自動でインデクスを使用して検索しますが、強制的にインデクスを使用しないという指示もできます。それにはSELECT文にIGNORE INDEX句を追加します。
インデクス使用の有無に関するMySQLリファレンスへの関連リンク
インデクスヒント構文
SHOW INDEX 構文
インデクスの構築
緯度経度や撮影時刻、タグを条件とした検索を効率良く行うために、必要なインデクスを作成してみましょう。インデクスを作成すると、検索は速くなりますが、インデクスの分だけSSDの容量が消費される事に注意しましょう。
インデクスを作成する前に、テーブルが消費しているデータ量をチェックしておきましょう。データ量はinformation_schemaというDBのpartitionsテーブルに保存されています。
ではインデクスを作成してみましょう。1000万件のB-treeの作成ですので、1つあたり5分程度かかります。
ではもう一度、テーブルが消費しているデータ量を見てみましょう。
インデクスサイズが増加した事が分かります。ディスク容量は無限ではありませんので、やみくもにインデクスを貼ると、早期にディスク資源を食い尽くす事に繋がります。ただ、インデクスを貼らないと検索が実用的な時間に返って来ない事にも繋がります。理想的にはコストと性能をバランスさせる事が重要ですが、今回の様な大きなデータを扱う際は、これはとても悩ましい問題です。
インデクス作成に関するMySQLリファレンスへの関連リンク
CREATE INDEX構文
最終課題の概要(重要!)
最終課題は以下の要件をWebアプリケーションで実装します。
任意のタグを持つ写真の撮影時刻・緯度・経度・URLの一覧を撮影時刻順で出力するプログラム
任意のタグはハードコーティングせず、ユーザが(Webブラウザを通じて)指定できる用な形で実装してください。
では、続く手順を熟読し、最終課題に取り組んでください。
最終課題の手順
最終課題 STEP 1
まず以下のgitリポジトリからサンプルプログラムをcloneしてください。index.html、progA.php、progB.php、progC.phpと4つのファイルが入っています。最終課題はこのprogA～Cを改造しつつ進めていきます。index.htmlはprocA～Cを呼び出すためのインタフェースです。
https://github.com/abarth500/CSexp1-Last.git
まずはindex.htmlをブラウザで表示して、動作を確認してください。
動作を確認したら、データベースを使わずCSVファイルをプログラムから読み込んで処理する方法で、以下の仕様を満たすプログラム【実装A】を実装してください。
【実装A】
機能要求
以下の条件を満たす写真をブラウザに表示する
ユーザの入力したタグに合致するもの
結果が100件を超える場合は最新のものを100件
結果の表示には以下の情報を含めなければならない
写真
緯度・経度
撮影時刻
結果の表示順は撮影時刻の降順
仕様
progA.phpとして実装する
$_REQUEST["tag"]にユーザが入力したタグが入っている
index.htmlでその設定はすでにされています。
ヒント
何も遅いPHPで全てを実装する事はありません。
PHPからプログラムを実行する事が出来ます。
exec関数
system関数
passthru関数
インデクスの独自実装はOKとします。
最終課題 STEP 2
実装Aと同じ仕様のプログラムを、今度はデータベースを使って実装しましょう。ただし一部のインデクスを使わないで実装しましょう。progB.phpとして実装してください。
【実装B】
追加条件
データベースを使う
ただしi_tagインデクスを使わない
ヒント:SELECT * FROM tag IGNORE INDEX(i_tag) WHERE tag like 'beach';
仕様
progB.phpとして実装する
$_REQUEST["tag"]にユーザが入力したタグが入っている
index.htmlでその設定はすでにされています。
題意の「任意のタグを持つ写真のリスト」はSELECT文1文でできるはずですが、インデクスを使わない場合は、クエリを分割したり、一部をSQLではなくプログラム側で処理する方が早く実行できるかもしれません。そこら辺の工夫も含めて課題とします。
最終課題 STEP 3
実装Bのインデクスを使うバージョンのプログラムを作りましょう。SELECT文から「IGNORE INDEX」を削除するだけでOKです。これをprogC.phpとして実装しましょう。
【実装C】
追加条件
データベースを使う
ただしインデクスを使う
仕様
progC.phpとして実装する
$_REQUEST["tag"]にユーザが入力したタグが入っている
index.htmlでその設定はすでにされています。
これで、自作プログラムによる問い合わせ(実装A)、データベースを使うがインデクスを使わない問い合わせ(実装B)、データベースもインデクスも使う問い合わせ(実装C)と、三種類の同じ動作をするプログラムが出来ました。一般的には、実装Aの動作速度は実装B以上、実装C以下である事が期待されます。ただしデータベースには処理のオーバヘッドもあるため、理想的には実装Cよりも実装Aが高速で動く事も十分に可能なはずです。続く課題で、ベンチマークをして動作速度の計測を行いましょう。
最終課題 STEP 4
abコマンドを使って実装A～Cのスループットを計測してください。
計測条件
検索するタグはfiat
検索するタグは以下の様にURL中のクエリストリングとして指定します。
http://192.168.0.200/~username/directory/progA.php?tag=fiat
担当講義/情報科学実験I/課題プログラムの実装 - 静岡大学 横山研究室
