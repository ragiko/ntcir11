概要実験設定実験環境コーパス実験結果 概要Darts と Darts-clone 0.32g を比べるために,辞書の構築時間とサイズ,および検索にかかる時間を計測しました.大雑把にまとめると,辞書のサイズ,検索時間ともに Darts-clone の方が優秀ということになります. Darts-clone による検索が高速な理由としては,辞書が小さくなることによって,キャッシュの利用効率が向上したことが考えられます.このことは,辞書がキャッシュに収まるかどうかという状況において Darts と Darts-clone の違いが顕著になっていることから確認できます.また,キーをランダム順に検索したときの所要時間からも確認できます. もう 1 つの理由として考えられるのは,終端ノードの有無をフラグとして各ノードに持たせていることが挙げられます.このフラグは,終端文字による遷移の確認を省略するための工夫であり,特に commonPrefixSearch() において高い効果を発揮します. ただし,Darts-clone ではオフセットやラベルの取り出しに論理演算を必要とするため,わずかながらオーバーヘッドが大きくなっています.また,traverse() を繰り返し呼び出す場合,traverse() をインライン化できず,検索時間が悪化することがあるようです. 注意:検索時間については,辞書とキャッシュのサイズ,キャッシュとメモリのレイテンシ,検索するキーの偏り,コンパイラによるインライン化など,影響する要素がとても多く,環境によっては大きく変化する可能性があります. 実験設定実験では,いくつかのキー集合に対する辞書を Darts と Darts-clone により構築し,サイズと構築時間を調べた後,各キーを辞書順に検索するのに要する時間と,ランダム順に検索するのに要する時間を計測しました.traverse() については,各キーを 1 バイトずつ traverse() に渡して探索するのに要した時間になっています. ※ 計測には Darts-clone に付属のツール darts-benchmark を使用しました. 実験環境実験環境の OS は 64-bit 版 Ubuntu 9.04 で,コンパイラは gcc 4.3.3 です. 

