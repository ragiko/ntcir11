【変数】
値(もしくはデータ)にアクセスする手段を提供するものです。変数を用いると、その名前で値にアクセスすることができます。
int x = 10;
こうすると x という名前で 10 という値にアクセスすることが出来ます。続けて、
int* p = &x;
こうすると、p という名前で変数 x のアドレスにアクセスすることができます。また、 *p という式で p が指すint 型のメモリ領域、つまり変数 x の内容、にアクセスすることが出来ます。
変数は値に対するアクセスの手段を提供している関係上、必ず型が規定されます。また、変数は式の中で用いられます。
【式】
何らかの値を決定するための記述。
2 * a
これは 2 × a を C言語で通じるようにした式です。値は 2a になります。
f()
これは、関数f を呼び出して、その戻り値を得るという式です。値は f の戻り値になります。
(void)f()
これは非常に特殊な式ですが、「値無し」という値(?)を得る式です。C/C++ プログラマの一部がもつ習慣ですが、関数 f が値を返しているけれども、それを無視しますよという意思表示のために使っています。lint という構文チェッカーがありまして、それでこの lint から、「戻り値を無視している」の警告が多数出力されたという経験を持つプログラマの場合は、自然と、この習慣が身に付いたものです。
【文】
分岐や繰り返しといった制御構造を規定するための if , for, while , switch といったキーワードがありますが、それによって表現される一つの処理単位を文(statement) と言います。
if (a == 0)
b = 0;
これで一つの文となります。また、a == 0 が成立した場合に実行される b = 0; ですが、これも文となります。つまり、ある文の中に他の文が含まれる形ということです。なお、if () の括弧内には式が入ります。
それと、複文(compound statement) というものがありまして、これは構文上一つの文を記述する箇所に、複数の文を押しこむためのもの。{ と } で囲まれた区間に複数の文が書けるわけですが、これでひとまとまりとなり、一つの文と同じ扱いとなります。
if (a == 0) {
x = 0;
y = 1;
};
このような形となります。
制御構造ではないのですが、式にセミコロンを続けると、それだけで立派な文となります。
f();
ここで、f() は「関数呼び出し式」という式。それにセミコロンが付いて、「式の文」ということになります。
【型】
値の解釈を規定するものです。値が 5 だとして、それが整数のゼロなのか、int 型のメモリ領域のアドレスなのか、ある種の関数のアドレスなのか、といった解釈を与えるのが型です。なので、型が無いと、値を適切に取り扱うことが出来ません。
char x = 5;//変数 x は char 型の5という値を保持。
int* p = (int*)5;//変数 p は int型のデータが格納されたメモリ領域の先頭アドレスとしての 5 を保持。
int (*q)() = (int(*)())5;//変数 q は int f() という形式の関数のエントリポイント(先頭アドレス)としての5を保持。
なお、コンパイラが自動的に判断して型を調節(あるいは判断)してくれるケースもあります。
f(5 + .1);
関数 f に double 型の値を渡しています。なぜならば 5 は整数ですが、 .1 が実数だから。コンパイラはこれを double 型に変換してくれます。
if (p == 0)
p が何らかのポインタ型だとして、ポインタと 0 の間に == 、 != の演算子を適用するのは合法です。コンパイラはポインタとしての 0 であると解釈してくれます。
以上、参考になりましたでしょうか。
C言語における変数、式、文、型ってなんですか?個々の説明とそれらの関係も... - Yahoo!知恵袋
