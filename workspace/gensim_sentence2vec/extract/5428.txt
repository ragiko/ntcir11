はじめに
エンタープライズソフトウェア開発においてテストの実施は不可欠な要素である。最重要とは言わないまでも、ソフトウェア開発ライフサイクル(SDLC; Software Development Lifecycle)のさまざまな段階と同等に重要な要素である。しかし、エンタープライズアプリケーションのテストは口で言うほど簡単ではない。いくつかの制約によって、プロジェクトにおけるテスト労力が大きな課題となる。これらの制約は通常2つのカテゴリに分類される。フレームワーク関連の制約とプロジェクト方法論関連の制約である。 
フレームワーク関連の制約の一例に、J2EEアーキテクチャモデルがソフトウェア開発の一環として単体テストの側面を考慮に入れないことが挙げられる。コンテナ(アプリケーションサーバー)はJ2EEランタイムアーキテクチャのコアコンポーネントであるため、コンテナ外で、J2EE APIをベースに構築されたアプリケーションをテストするのは困難である。単体テスト(コンテナ外)は、高いテストカバレッジを実現するために不可欠である。また、アプリケーションサーバーの設定やコード配備のオーバーヘッドなしに、多くのエラーシナリオを容易に再現できる。テストを迅速に実行できることがプロジェクトの開発または生産支援段階において重要であり、不可欠である。単体テストを使用してコードを検証することにより、コードを変更するたびにアプリケーションを配備する非生産的な待ち時間が削減される。 
従来のJ2EEアプリケーションのコードはアプリケーションサーバーに大きく依存しているため、アプリケーションがJ2EEコンテナ内に配備されている場合にのみ、その機能を完全にテストできる。しかし、コンテナ内テストは、特にプロジェクトが比較的大きくコードアーティファクト(javaソースファイル)の数が多い場合に、時間がかかりすぎて開発者の生産性に与える影響が大きすぎる。 
ソフトウェアテストを開発プロセスに統合する強力なサポートを提供するよう、徹底的に構築されたJ2EEフレームワークがいくつかある。Spring(サイト・英語)は、そのようなjavaエンタープライズアプリケーション開発フレームワークの1つである。
先日、私は、妻が地元のTier-One (一次下請け)の自動車部品会社のために取り組んでいるエンタープライズjavaアプリケーションについて専門的な助言をした。そのプロジェクトとは、顧客の会社のプロファイルを追跡するための「顧客プロファイル管理システム」を作成することであった。このアプリケーションのアーキテクチャには、Hibernate 3.0、Spring 2.0、およびJBoss 4.0テクノロジーが組み込まれた。プロジェクトチームは、1週間のイテレーションで要件を実現するアジャイルソフトウェア開発手法に従った。データアクセス層とサービス層のアプリケーションコードのテストには、Springフレームワークで提供される統合テスト機能を使用した。我々はこのフレームワークで提供されるテストサポートが非常に気に入った。Springフレームワークは、テストを大幅に簡素化し、1週間という集中的な開発イテレーションを可能かつ管理しやすいものにする。 
この記事では、単体/統合テストの分野でSpringフレームワークが提供するサポートの概要について説明する。一般的なJava EEアプリケーションでのアジャイルテスティングフレームワークの実装と、Springテストクラスを使用したアプリケーション機能のテスト方法について、読者の方の参考となるように、ローン処理のWebアプリケーションの例を取りあげる。 
アジャイルソフトウェアテスト
ソフトウェア開発プロジェクトには、優れたテストプラクティスだけでなく優れた設計とアーキテクチャプラクティスを組み込む必要がある。アプリケーションは非常に優れたアーキテクチャ、設計、およびコードを採用していたとしても、十分にテストされていない場合、成功した製品としてみなすことはできない。製品の品質は企業(ソフトウェアサービスベンダー)の生命を左右するため、こうした企業が成功するにはテストの実施が非常に重要となる。 
アジャイルソフトウェア開発には、ソフトウェア開発において俊敏性と品質を達成するための包括的なテスト戦略が必要である。アジャイルテストには、単体テストと統合テストが含まれる。つまり、我々ができるだけ迅速にテストを実行できなければならないことを意味している(俊敏性を達成する方法の1つは、アプリケーションサーバー外でテストを実行することである)。テスト駆動開発(TDD; Test Driven Development)(source)は、アジャイル開発プロセスの主要な要素の1つである。Springおよびその他PicoContainer(サイト・英語)やHiveMind(サイト・英語などの軽量コンテナは、テスト駆動ソフトウェア開発を強力にサポートする。 
次に、一般的なJava EE開発プロジェクトにおける単体/統合テストの重要性と各テスト手法の目的および制約に少し目を向けてみよう。 
単体テスト
単体テストは、アプリケーション内の特定の単位(クラス)を対象としたテストである。単体テストは、メソッドのすべての例外パスを含め、クラス内のすべてのメソッドをテストするように記述する必要がある。単体テストの目的は、サーバー設定、サービス設定、およびアプリケーション配備に伴うオーバーヘッドや追加時間なしで新しいコードまたは既存のコードの変更を迅速にテストすることである。開発者の単体テストは、ソフトウェア開発ライフサイクルの後半ではなく初期の段階(コーディング段階および単体テスト段階)でより安く容易にバグを発見して修正できるため、非常に重要である。 
JUnit(サイト・英語)は、単体テストの記述に使われる有名なテスティングフレームワークである。JUnitテストでは、コンテナのJNDIリソースやリソースプーリングなどのJ2EEサービス、JDBC接続プール、およびJMSキューを気にする必要なく、単純にnew演算子を使ってオブジェクトのインスタンスを作成する。また、モックオブジェクト(source)のようなテスト技術を使用して、コードを独立した形でテストできる。単体テストでは、アプリケーションサーバーあるいはデータベースサーバーのインフラストラクチャを設定する必要がない。
単体テストにはいくつかの制限がある。単体テストは、アプリケーションの機能的要件のテストには対処せず、アプリケーション内の各モジュールのテストのみを対象とする。また、アプリケーションサーバーの内部に設定されたJMSメッセージキューを必要とする非同期サービスのようなシナリオもテストできない。しかしそれでも、できるだけ多くのアプリケーション機能を単体テストし、コンテナ外でテストできない機能にのみコンテナ内テストを使用できる必要がある。 
統合テスト
単体テストは、モジュールまたはクラスを独立した形でテストするのに非常に役立つ。しかし、各種モジュールが統合環境でアセンブルされるとどのように連携して動作するかを確認するために、アプリケーションの統合テストを実施することも重要となる。機能がモジュールレベルでは良好に動作しても、アプリケーション内で他のモジュールと統合されると正常に動作しない場合がある。このシナリオは、複数の開発者がアプリケーションの異なる部分の開発を同時に進め、定期的に(一部の開発チームでは毎日)コードの変更をマージする必要があるアジャイル開発環境において、非常に現実味がある。統合テストには、アプリケーションのクライアント層とサービス層の間の往復呼び出しのテストが含まれる。統合テストの多くは通常、コンテナ内で動作する。しかし、真の意味で俊敏(アジャイル)になるには、少なくともいくつかの統合テストを、コードをコンテナに配備せずに実行する必要がある。 
統合テストは、DAOインターフェースの実装を効果的に単体テストできないDAO層で役立つ。この他の統合テストの目的は、リモートサービス、ステート(セッション)管理、Webフローおよびトランザクション管理などの状態をテストすることである。統合テストにもいくつかの制約がある。これらのテストの実行には長い時間がかかる。アプリケーションをJava EEコンテナ内に配備する必要があるため、サーバーのセットアップと構成のオーバーヘッドがテストの実行に伴う。 
統合テストは単体テストの代用ではなく補足的なテストであるということに注意しなければならない。開発者はまず、高いコードカバレッジを達成するためにアプリケーション内の各javaクラスに対して十分な単体テストを記述する必要がある。同時に、単体テストではテストできないアプリケーションのさまざまなユースケースシナリオを網羅する、十分な統合テストを記述する必要がある。 
単体/統合テストのほか、数種類のテストがある。次の表に、さまざまなテスト戦略とその目的を示す。 
表1. Java EEのテスト戦略 
テスト戦略
目的
Spring Frameworkによるソフトウェアテスト
