 条件分岐
1、条件分岐を使おう
条件分岐とは、文字列(環境変数)の比較やファイル存在有無によって、バッチファイル内での処理を変える機能です。前の章でご紹介いたしましたユーザーからの入力を渡す方法と組み合わせて用いれば、バッチファイル実行中にユーザーの入力にあわせて対話的にバッチ処理を行ったり、オプションを指定することのできるオリジナルコマンドを作成したりできます。バッチファイルを使いこなすためには必修ともいえる機能ですので、ぜひマスターしていって下さい!
2、文字列比較による条件分岐(基本編)
まずはじめに条件分岐の基本ともいえる、文字列同士を比較することによって処理を分岐させる方法について、ご紹介いたします。文字列比較による条件分岐で最も基本的な形は、次のようになります。   if "[文字列1]"=="[文字列2]" [コマンド] この構文では、文字列1と文字列2が等しい場合にコマンドを実行します。例として、アプリケーションを対話式に開くバッチファイル(applimenu.bat)を作成してみましょう。   @echo off   echo ************  アプリケーションメニュー  ************   echo   [1] : メモ帳   echo   [2] : ペイント   echo   [3] : 電卓   echo **********************************************   set /p NUM="起動したいアプリケーションを選択してください >"   if "%NUM%"=="1" notepad   if "%NUM%"=="2" mspaint   if "%NUM%"=="3" calc このバッチファイルは、メニューを表示してから、ユーザーに起動したいアプリケーションの入力を求めて、対話式にアプリケーションを起動することのできるバッチファイルです。 2〜6行目は『echo』コマンドでアプリケーションメニューを表示しています。7行目は『set /p』コマンドで、ユーザーからの入力を環境変数(NUM)に渡しています。そして8〜10行目は『if』文で、渡された環境変数(NUM)を使って条件分岐を行っています。ここでは環境変数が1ならメモ帳(notepad.exe)、2ならペイント(mspaint.exe)、3なら電卓(calc.exe)を起動させています。 このように if 文を用いれば、バッチファイルで対話的な処理が可能になります。しかしながら上の例のように、if 文のみを用いた条件分岐では単純な処理しか行うことができません。
3、文字列比較による条件分岐(応用編)
そこで if 文を用いた条件分岐で複雑な処理を行うために用意されているのが、goto 文とラベルです。goto 文とは、バッチファイルの中でラベルを指定した行に制御を移すためのコマンドです。以下のように、goto 文の後にはラベル名を指定し、ラベルにはラベル名の先頭にコロン(:)を付けて指定します。   goto [ラベル名]   :[ラベル名] この goto 文とラベルを if 文と組み合わせれば、条件分岐で複雑な処理を行うことが可能になります。例として goto 文と if 文を組み合わせて、UNIXコマンド ls を模擬したバッチファイル(ls.bat)を作成してみましょう。   @echo off   if "%1"=="-a" goto A   if "%1"=="-lF" goto LF      rem オプションがない場合の処理   dir /w %1 | find /v "ドライブ C のボリューム ラベル" | find /v    "ボリューム シリアル番号は" | find /v "のディレクトリ" | find /v    "バイト"   goto END      rem オプションが -a の場合の処理   :A   shift   dir /w /a %1 | find /v "ドライブ C のボリューム ラベル" | find /v   "ボリューム シリアル番号は" | find /v "のディレクトリ" | find /v    "バイト"   goto END      rem オプションが -lF の場合の処理   :LF   shift   dir /q %1 | find /v "ドライブ C のボリューム ラベル" | find /v    "ボリューム シリアル番号は" | find /v "のディレクトリ" | find /v    "バイト"   goto END      :END 例えば ls *.txt のようにオプションを指定せずに実行した場合、引数(%1)は *.txt となるので、2行目と3行目の goto 文は実行されずに、4行目以降に制御が移ります。その結果、5行目の『dir /w %1』で dir /w *.txt のようにコマンドが実行されて、カレントディレクトリのすべてのテキストファイルが表示されます。その後、6行目の『goto END』が実行され、ENDのラベルがある最終行に処理が移され、バッチファイルが終了します。 また ls -lF *.html のようにオプションを指定して実行した場合、1つ目の引数(%1)は -lF で、2つ目の引数(%2)は *.html となります。その結果、3行目の条件分岐で『goto LF』が実行され、LFのラベルがある17行目に制御が移ります。 そして18行目の『shift』コマンドが実行されます。このコマンドは、代入されている引数(%0〜%9)を1つずつずらす働きをします。つまり元々は -lF が1つ目の引数(%1)に、*.html が2つ目の引数(%2)に代入されていましたが、shift コマンドが実行されると、-lF は引数(%0)に、*.html は1つ目の引数(%1)に移動します。 このため19行目の『dir /p %1』では dir /p *.html のようにコマンドが実行されて、カレントディレクトリのすべてのHTMLファイルが詳細表示されます。その後、20行目の『goto END』が実行され、ENDのラベルがある最終行に処理が移され、バッチファイルが終了します。(もちろんこれは省略可能です。) このようにgoto 文とラベルを if 文と組み合わせを応用すれば、かなり複雑な処理でも実行できることがお分かりになったと思います!
※画像をクリックすると説明が表示されます
4、ファイルの存在有無による条件分岐
条件分岐には、文字列比較による方法以外にも、ファイルの存在有無によって条件分岐を行う方法があります。ファイルの存在有無による条件分岐で最も基本的な形は、次のようになります。   if exist [ファイル名] [コマンド] この構文では、ファイル名のファイルが存在する場合にコマンドを実行します。例として、簡単なバックアップを行うバッチファイル(backup.bat)を作成してみましょう。   @echo off   if "%1"=="" goto ERROR   if exist "C:\backup\." goto PROCESS1   if not exist "C:\backup\." goto PROCESS2      rem 引数が指定されていない場合   :ERROR2   echo Usage : backup [フォルダ名]   exit /b      rem バックアップディレクトリが存在する場合   :PROCESS1   xcopy "%1" "C:\backup\" /s > nul   exit /b      rem バックアップディレクトリが存在しない場合   :PROCESS2   mkdir "C:\backup\"   xcopy "%1" "C:\backup\" /s > nul これは、引数に指定したフォルダの内容を丸ごと C:\backup\ にコピーするバッチファイルです。2行目の『if "%1"=="" goto ERROR』は、引数が入力されていないときに6行目に制御を移して、7行目の『echo Usage : backup [フォルダ名]』でエラーメッセージを表示しています。また8行目や12行目の『exit /b』は、バッチファイルを終了させるためのコマンドです。 3〜4行目では C:\backup というフォルダが存在しているかを判断しています。フォルダの存在を判断させるときには、『C:\backup\.』のように指定すると良いでしょう。 上の判断の結果、バックアップディレクトリが存在する場合には10行目、存在しない場合には14行目に処理を移しています。xcopy コマンド後の『> nul』はコマンド実行時に余計なメッセージを表示させないために使われるリダイレクトです。これは結構良く使うテクニックなので覚えておくと便利です!
BACK    NEXT
Last updated on Nov. 8, 2003
Copyright (C) 2003 Chitose , All Rights Reserved. 
ご意見・ご感想・ご質問等はこちらまで
E-mail : hono_prompt@yahoo.co.jp
炎のコマンドプロンプト入門/バッチファイル/条件分岐
