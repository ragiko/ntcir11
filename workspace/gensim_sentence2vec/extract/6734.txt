ファジィ制御
なぜファジィ制御を用いるのか
現在では、様々なところでファジィ制御が使われています。家電製品から、プラントの制御、地下鉄の自動運転まで様々な応用がされています。では、なぜ「ファジィ制御」を使うのでしょう。
このように書くと誤解を招くかもしれませんが、一般にファジィ制御が大きな成果をあげているものの多くは、今まで人間が行っていたことを新たに自動化するといったものです。では、従来の制御ではこれらのことができないのかというと、多くの場合そんなことはありません。ファジィ制御の特色は、IF−THEN形式で記述されたルールにより、推論を行うことで制御を行うことです。この形式の利点は、人間の経験的な知識を表現しやすいことです。つまり、ファジィ制御の最大の利点は、人間が経験的な知識で操作するようなことを(比較的)簡単に自動化できることではないでしょうか。この点は、人工知能の研究の成果であるエキスパートシステムと似ています。
もう一つの特色として、あいまいさを扱えるため、きめの細かい操作が可能になります。つまり、一つのルールでも、比較的広い範囲に対応した操作ができるのです。ファジィ制御では、この特色を生かしてお互いに範囲が重なり合うようにルールを設定します。こうすることで、複数のルールがお互いを補完するような関係を作れるため、たくさんあるルールのうちの一つが多少まずくても、他のルールがその分を補って結果として正しい出力を出すことができるのです。また、時間がたって制御したい対象が老朽化などのため、初めに作ったときと多少違った挙動をするようになっても、同じ理由で、ある程度は追従して制御することができます。
それでは、先程少し出てきたように、従来の制御で同じことをするにはどうしたらいいでしょうか。従来の制御では、制御対象に応じて制御器(コントローラ)を設計して、式として求めてやる必要があります。しかし、人間の経験的知識というものは普通、「こういう場合には、こうする」といったような知識の集まりなので、この知識を分析して重複しているところや矛盾しているところを直して、定式化する必要があります。また、ルールの種類によっては定式かができないような場合もあります。このような場合には、全く別なアプローチから、制御対象を分析していかなくてはなりません。このような作業には、大変な時間と労力がかかります。つまり、コストが高くついてしまうわけです。
ファジィ制御の考え方
ファジィ制御は前節で紹介したファジィ推論により制御を行います。センサからの情報を前件部とし、出力される制御量(操作量)を後件部とします。そして、各ルールでそれぞれ出力された制御量の重心をとって、実際の制御量とします(これを非ファジィ化と言います)。つまり、演算自体は前節の図5.3で示したような演算を行っているわけです。ただし、演算方法は、計算量の問題などから、代数積−加算重心法や、簡略化推論法が用いられることも多いです。
感覚的に説明すると、用意されているルールごとに最適な出力を求め、その値の重心(平均値と考えるとわかりやすいかもしれません)をとることで制御を行います。一つのルールを一人の専門家と考えると、すべての専門家の意見を聞いてその中でうまく折り合いをつけて答えを求めているような感じです。
ファジィ制御の最大の特徴はなんといっても、対象のモデル化を行っていないことではないでしょうか。つまり、応答さえわかれば、対象が完全なブラックボックスでも制御できるということです。しかし、その応答の基本的な挙動がわからなければIF−THENルールを生成することはできませんから、全く予想もできない対象を制御することはやはり難しいのではないでしょうか。
ファジィ制御の方法
それでは、実際にシミュレーションを行った例に沿って説明していきたいと思います。
まず、例題を説明します。この例では、図6.1(a)のようなRLC回路の出力電圧(コンデンサの電圧)の制御を行っています。この回路は全く制御を行わない場合は図6.1(b)のような出力になります。制御の目的は素早く、定常状態に持っていくことです。
図6.1 RLC回路
図6.2 制御をしていないRLC回路の応答
それでは制御の手法ですが、出力電圧を早く1Vに持っていくために、ファジィコントローラが現在の出力電圧を測定し、IF−THENルールと照らし合わせて、RLC回路への入力電圧を操作することで制御しています。つまり、フィードバック制御の形をとるわけです。理想的な操作としては、はじめは出力は0Vですから、大きめの電圧を入力し、1V(目標)に近づいてきたら入力電圧を下げてやればいいわけです。また、もし出力電圧が目標値をオーバーしたら入力電圧を1Vよりも小さくして、出力電圧を下げてやります。
以上のような動きをするファジィコントローラのIF−THENルールを作ります。ファジィ制御のIF−THENルールは表6.1に示す形で与えられます。
SoftComputing lab.
