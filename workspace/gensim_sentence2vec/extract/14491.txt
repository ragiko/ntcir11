
こんばんは、五十川です。
ご存知の通り、5月以降に発売開始されたNTTドコモの携帯電話の殆どには、新しいiモードブラウザ 2.0が搭載されています。iモードブラウザの大幅な仕様の拡張はi-XHTMLの登場以来ということになりますが、iモードの登場から10年経って登場した新しいブラウザは、i-XHTMLのときよりも遥かに大きな、過去最大の変化を遂げています。
iモードブラウザ 2.0の詳細は、ドコモ公式のiモードブラウザ 2.0にまとめられています。以下では主要な変更点を確認していこうと思います。
キャッシュ容量拡大
1画面あたり読み込めるデータの最大量が、従来の100Kバイトから500Kバイトに、大幅に拡大されました。ご存知の通りiモードの場合この値は、画像などの外部リソースもすべてひっくるめた値ですが、iモードブラウザ 2.0では、新たにCSSファイルやJavaScriptファイルも外部から読み込めるようになりましたので、これらのデータ量もこの制限の対象になります。
なお従来は、最大データ量を超過した場合には、単に警告が表示されるだけというのが一般的だったと思いますが、iモードブラウザ 2.0搭載機種では、機種によるのかもしれませんが、「フルブラウザに切り替えると見れます。切り替えますか?」といった旨のダイアログが表示されるようになっているようです。
なお、サーバサイドでブラウザのバージョンを判定する必要がある場合は、User-Agent文字列中のキャッシュサイズを示す箇所の値が&ldquo;500&rdquo;(以上)であるかどうかで行います。
Cookie対応
これまではCookieが利用できなかったため、ドコモ端末に対応したウェブアプリケーションでは、セッションIDをURLに付与する実装が広く行われてきました。他のキャリアはCookieが使えるため、ドコモのみ他と異なる実装が必要で、かつセッションフィクセーションなどの攻撃に対して細心の注意を払う必要がありましたが、ついにCookieがサポートされたことで、iモードブラウザ 2.0を搭載した端末に限っては、他のキャリアと同様の実装が行えるようになったということになります。
iモードブラウザ 2.0のCookieの仕様は以下のようになっています。
端末で有効無効の設定可能(デフォルトは有効)
1件あたり4Kbytesまで、1ドメインあたり20件まで保存
SIM単位
余談ですが、これまでドコモユーザは、Cookie利用を前提とした海外のケータイサイトを利用できず、一方日本のケータイサイトは、攻撃に対する安易な防衛策として、IPネットワークによるアクセス制限が広く実施されてきました。個人的には最大手キャリアのこの仕様が、日本のケータイサイトの、いわゆるガラパゴス化の一因であったのではないかと思っているので、今回のCookie対応は望ましことではないかと考えています。いや、時既に遅しな気もしますけどね。
Referer対応
これはiモードブラウザ 2.0で最も注意しなければならない変更です。
Cookieの項でも述べた通り、ドコモ対応のウェブアプリケーションではセッションIDをURLに付与する実装が広く行われてきました(iモードIDを利用することでこれを回避できますが、iモードIDが登場したのは比較的最近で、それ以前は、公式サイト以外では、URLにセッションIDを付与するか、すべての遷移でUTN属性を使用した個体識別番号の取得を行い続ける以外に、持続的なセッションを管理する方法はありませんでした)。セッションIDが第三者に漏れるとセッションフィクセーションなどの攻撃に晒される危険が生じるわけですが、これまでのiモード端末はRefererを送出しないため、少なくともこれによるセッションIDの漏洩の危険はなかったわけです。しかし、Refererを送出するiモードブラウザ 2.0に対してもセッションIDを含むURLにアクセスさせている場合は、RefererによるセッションIDの漏洩の危険が生じますので、Cookieを利用する(あるいはiモードIDを利用する)ように変更する必要があるかもしれません。
Refererの送出も、Cookieと同様に端末で有効無効の設定が可能です(デフォルトは有効)。
VGA対応
ブラウザ画面のVGAサイズでの表示が可能になりました(以下、ドコモの記述に合わせてVGA/QVGAという表現を使いますが、従来もQVGAが必ずしも240×320ピクセルではなかったのと同様に、VGAと言っても必ずしも480×640ピクセルというわけではありません)。
表示モードは、サイト側が以下のようなMETA要素を記述することで決定します。
<meta
name="disparea"
content="{qvga|vga}"/>
content属性値が&ldquo;vga&rdquo;であれば、VGAモードになります。値が&ldquo;qvga&rdquo;であるか、このMETA要素がないHTMLはQVGAサイズで描画されます。
三大キャリの中でいち早くVGAに対応したソフトバンクでは、VGAかQVGAかはユーザが端末で設定して切り替えますが、ドコモの場合はユーザが変更することはできません。これは、従来との互換性を最大限保つために決定された仕様なのでしょう。
しかし、この画面サイズの変更によって問題が生じる場合もあります。
画面サイズの管理
ひとつは画面サイズの管理です。ご承知の通り、auやソフトバンクと異なり、iモードブラウザはHTTPヘッダに画面サイズ情報を含まないため、画面サイズを特定する必要があるケータイサイトでは、端末ごとの画面サイズを独自に管理する必要があり、これはiモードブラウザ 2.0でも同様です。しかし、これまでブラウザの画面サイズは、原則1端末あたり1種類でしたが、iモードブラウザ 2.0では、VGAとQVGAの2種類の画面サイズが存在するため、サイトが対応する画面サイズに応じて、適切な値を管理しなければなりません。
携帯端末の判別を行うライブラリとしては、PerlではHTTP::MobileAgent、PHPではNet_UserAgent_Mobileがよく利用されているかと思われますが、いずれも現時点での最新バージョン(HTTP::MobileAgentは2009年7月7日付けの0.28、Net_UserAgent_Mobileは2009年6月23日付けの1.0.0)に含まれる画面サイズは、iモードブラウザ 2.0搭載端末のものはVGAのもののみとなっているようです。
以下は、Net_UserAgent_Mobile 1.0.0の構成ファイル中、画面サイズデータを管理しているNet/UserAgent/Mobile/DoCoMo/ScreenInfo.phpの、P-07Aの箇所ですが、縦横のサイズはそれぞれ1種類、VGAのもののみとなっています。
...
// i-mode browser 2.0
'P07A3' => array(
'width'  => 480,
'height' => 662,
'depth'  => 262144,
'color'  => 1
),
...
従って以下のようなコードでは、画面の幅を返すNet_UserAgent_Mobile_Display->getWidth()は、VGAの値である&ldquo;480&rdquo;を返します。
// As of Net_UserAgent_Mobile 1.0.0
$mobile  = Net_UserAgent_Mobile::singleton('DoCoMo/2.0 P07A3(c500;TB;W24H15)');
$display = $mobile->makeDisplay();
$display->getWidth(); // 480
もしこれらのライブラリを利用しているウェブアプリケーションがQVGAサイズを想定したものである場合は、これらの値を独自にメンテナンスする必要があるかもしれません。幸いどちらのライブラリも、クラスファイルに直接手を入れる必要はなく、別途にXMLファイルで画面サイズを管理できるようになっているので、サイトがQVGAに対応したものであれば、QVGAの値を入れたXMLファイルを用意すればよいでしょう。
あるいはもし、アプリケーションがVGAとQVGAの両方をページによって切り替えるようなものである場合は、これらのライブラリの現時点での実装では要件を満たせないかもしれません。
横画面のサイズ
もうひとつの問題は横画面のサイズです。これまでにも横画面をサポートした端末は存在しましたが、その画面サイズはいずれも240×240ピクセルでした(画面の横方向に余白があり、そこには時計などが表示されていました)。つまり、縦画面でも横画面でも、画面の幅はいずれも240ピクセルだったわけです。しかしiモードブラウザ 2.0搭載端末の横画面サイズは、従来と同じ240×240ピクセルのものもある一方で、そうではないものも登場しています。iモードブラウザ 2.0の仕様は下位互換性の維持に極力留意されていますが、この点はそうではありません。
例えばP-07Aの場合、QVGAの画面サイズは、縦画面では240×331ピクセル、横画面では427×178ピクセルと、単純に幅と高さが入れ替わった値ですらありません。
従って、画面の横幅を必要とするケータイサイトは、横画面にも対応しなければならない場合は改修が必要かもしれないのですが、困ったことに、サーバサイドのプログラムだけで、アクセスしてきたケータイが横画面であるか縦画面であるかを区別し、その画面サイズを特定するのは容易ではありません。
サーバプログラムが画面の縦横を判定する手がかりとなる、つまり端末から送られてくる情報の中で、画面の縦横で変化するのは、唯一User-Agentに含まれる、表示可能な文字数の値です。従って、この値に、それぞれの画面サイズを紐付けて管理しておけばよいわけですが、悪いことに、この値はユーザが端末で設定するフォントサイズによっても変化します。
縦/横User-Agent文字サイズ設定
unoh.github.com by unoh
