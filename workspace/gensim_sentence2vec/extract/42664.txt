
小文字を文字列や原文語に使用できる。
ただし、文字定数や絵記号として使用した場合は例外である。各小文字は、対応する大文字と等しいものとする。 
このCOBOLシステムは、上記の文字集合に制限されている。しかし、文字定数、注記行、注記項、データの内容には、 COBOL 翻訳集団の文字を入れることができる。(付録の文字集合と文字の照合順序 を参照。)  
2.2 言語の構造 
個々の文字をつないで、文字列または分離符とする。分離符には他の分離符または文字列をつなぐことができる。
文字列には分離符だけをつなぐことができる。文字列と分離符をつないでいくことにより、
翻訳集団の本文ができる。 
2.2.1 分離符  
分離符(separator)は、1つ以上の句読文字をつないだものである。分離符の構成に関する規則を、以下に記す。
句読文字の空白は、分離符となる。空白を分離符または分離符の一部として使用する場合、1つ以上の空白を続けてもよい。分離符のコンマ、セミコロン、終止符の直後に続く空白はすべて、その分離符の一部であるとみなされ、独立の分離符とはみなされない。 
句読文字のコンマまたはセミコロンの直後に空白を続けたものは分離符となる。この分離符は、分離符の空白を使用できる箇所であれば、どこでも使用できる。ただし、PICTURE文字列の中に使用されているコンマは分離符ではない。 
句読文字の終止符の直後に空白を続けたものは、分離符となる。この分離符は、完結文の末尾を示すため、または形式に示された場合にだけ使用する。 
句読文字の左かっこおよび右かっこは、分離符とする。 左かっこと右かっこは一対として、添字、 
関数の引数リスト、部分参照、算術式、条件を囲むときだけ使用する。ただし、仮原文の中で使用するときは、例外である。 
句読文字の左右の引用符は、分離符となる。 
左右の引用符において、アポストロフィまたは引用符を引用記号文字として使用できる。
句読文字の左側の引用符とは、以下のいずれかである。 
引用符記号 
次の引用符付き文字のいずれか:G"、G'、H"、H'、N"、N'、X"、X'
句読文字の右側の引用符とは、以下のいずれかである。
引用符記号 (左側の原文区切り記号が引用符記号 の場合) 
アポストロフィ(左側の原文区切り記号がアポストロフィの場合)
左側の引用符の直前は、空白、左かっこ、仮原文区切り記号のいずれかとする。右側の引用符の直後は、分離符の空白、コンマ、セミコロン、終止符、右かっこ、右側の仮原文区切り記号のどれかとする。左側の引用符の直前、および右側の引用符の直後のこれらの分離符は、分離符としての引用符の一部を構成するものではない。
仮原文区切り記号は分離符となる。左側の仮原文区切り記号の直前は空白とする。右側の仮原文区切り記号の直後は、分離符の空白、コンマ、セミコロン、 終止符のいずれかとする。 
左側の仮原文区切り記号の直前の空白は、省略可能。 
仮原文区切り記号は一対として、仮原文
および動詞記号 
を囲むときだけ使用する。 (翻訳指示文の原始文操作および 
Micro Focus COBOL OO言語拡張のメソッドインターフェイス定義の章を参照。)
COBOL キャラクタのコロンは分離符となり、一般形式で表示される場合は必要となる。ただし、起動演算子の一部となる場合を除く。 
分離符の空白は、すべての分離符の直前に置くことができる。ただし、以下の場合を除く。 
正書法に指定されている場合。(COBOL 翻訳集団の概念の章の正書法の節を参照。) 
分離符としての右側の引用符。この場合、引用符の直前の空白は文字列定数の一部と解釈され、分離符とはみなされない。 
左側の仮原文区切り記号の直前。この場合、分離符の空白を必ず置かなければならない。
分離符の直後には、分離符の空白を置いても置かなくてもよい。ただし、左側の引用符の直後は例外とする。この場合、引用符の直後の空白は文字列定数の一部と解釈され、分離符とはみなされない。 
PICTURE文字列(データ部 - データ記述のPICTURE(形式)句の章を参照。) 
または数字定数中の句読文字は、PICTURE句の文字列または数字定数を指定するための記号であり、句読文字とはみなされない。PICTURE句の文字列は、分離符の空白、コンマ、セミコロン、終止符によってのみ区切られる。 
分離符の構成に関する規則は、文字定数、注記項、注記行の中の文字には適用しない。 
2.2.2 文字列 
文字列(character-string)はひとつながりの文字であって、COBOLの語、定数、PICTURE文字列、注記項を形成する。文字列は分離符で区切る。 
2.2.2.1 COBOLの語 
COBOLの語(word)は30字以内の文字列であって、翻訳指示語、コンテキストセンシティブ語、利用者語、システム名、予約語、関数名に使用する。特殊文字を含まないCOBOLの語は文字と数字とハイフン 
と下線から構成される。 
非特殊文字語においては、ハイフン  
または下線 
を先頭または末尾に置いてはならない。小文字は対応する大文字と等しいものとみなされる。. 
. 
文字列は31文字含むことができる。 
原始要素内では、下記の規則が適用される。 
LENGTH, RANDOM, SUMを除くすべてのCOBOLの語に関して、 
予約語の集合は利用者語、システム名、関数名の集合と重なり合ってはならない。 
利用者語、システム名、関数名のそれぞれの集合は重なり合ってもよい。つまり、同じ語を利用者語とシステム名と関数名に使用してもよい。その場合、使用された語がどれに属するかは、文脈によって判定される。 
COBOLの語LENGTH, RANDOM, SUMに関して、 
LENGTH, RANDOM, SUMは予約語にも関数名にも含まれる。同じCOBOLの語であるLENGTH, RANDOM, SUMを予約語としても関数名としても使用してよい。その場合、使用された語がどちらに属するかは、文脈によって判定される。 
COBOLの語であるLENGTH, RANDOM, SUMは利用者語およびシステム名とは別の集合に属する。したがって、どのような文脈においても、COBOLの語のLENGTH, 
RANDOM, SUMは利用者語としてもシステム名としても使用してはならない。 
利用者語:利用者語(user-defined 
word)はCOBOLの語であって、句や文の書き方を満足するように利用者が指定するものである。利用者語の各文字は下記の一連の文字の中から選択する。
実際の利用者語には以下の種類がある。 
符号系名(alphabet-name)  
オブジェクト指向用の字類名(class-name) 
真値提案用の字類名(class-name) 
条件名(condition-name) 
定数名(constant-name) 
データ名(data-name) 
ファイル名(file-name) 
関数プロトタイプ名(function-prototype-name) 
指標名(index-name) 
インターフェイス名(interface-name) 
レベル番号(level-number) 
登録集名(library-name) 
メソッド名(method-name) 
呼び名(mnemonic-name) 
段落名(paragraph-name) 
パラメータ名(parameter-name) 
プログラム名(program-name) 
プログラムプロトタイプ名(program-prototype-name) 
プロパティ名(property-name) 
レコード名(record-name) 
報告書名(report-name) 
手順名(routine-name) 
画面名(screen-name) 
節名(section-name) 
区分番号(segment-number) 
分割キー名(split-key-name) 
記号文字(symbolic-character)r 
原文名(text-name) 
型定義名(typedef-name)
利用者関数名(user-function-name)
1つの原始要素の中では、利用者語が次に示すように互いに重ならない種類に分かれる 
符号系名 
オブジェクト指向用の字類名 
真値提案用の字類名(class-name) 
条件名、 
定数名、
データ名、
プロパティ名、 
レコード名、
分割キー名、
型定義名
ファイル名 
関数プロトタイプ名 
指標名 
インターフェイス名 
登録集名 
メソッド名 
呼び名 
段落名 
パラメータ名 
プログラム名 
プログラムプロトタイプ名 
報告書名 
手順名 
画面名
節名 
記号文字 
原文名 
利用者関数名
区分番号およびレベル番号を除く利用者語はすべて、上記の互いに重ならない種類のうちのただ1つに属する。更に、同じ種類の利用者語は、一意参照の節で指定されたものを除き、すべて一意でなければならない。 
段落名、節名、レベル番号、区分番号以外の利用者語はすべて、最低限1文字の英字、 
またはハイフンを1つ含まなければならない。 
区分番号およびレベル番号は一意である必要はない。区分番号およびレベル番号は他の区分番号やレベル番号と同じであってもよいし、段落名や節名とも同じであってもよい。 
下記の利用者語は操作環境に対して外部化される。 
他のプログラムに含まれないプログラムのプログラム名、 
クラス名、 
関数プロトタイプ名、
インターフェイス名、
メソッド名、 
プログラムプロトタイプ名、
利用者関数名
EXTERNAL属性を 付して記述された項目のデータ名、ファイル名、およびレコード名
これらの名前のいずれかの代わりに、またはそれに加えて、定数を指定した場合、その定数の内容が操作環境に対する外部名となる。そのさい、大文字と小文字は区別される。定数を指定しなかった場合は、小文字を大文字に変換して外部名が作成される。コンパイラ指令のFOLD-CALL-NAMEを使用すると、外部名化したクラス名、インターフェイス名、プログラム名を大文字にするか小文字にするかを制御できる。コンパイラ指令のOOCTRLを使用すると、外部名化したメソッド名を大文字にするか小文字にするかを制御できる。+Fと-Uを指定すると、メソッド名は小文字にされるこれが省略時の解釈である。 
条件名:
条件名(condition-name)とは、データ項目がとるすべての値の組の中の、特定の値または値の組または値の範囲に付けた名前である。条件名を付けたデータ項目を条件変数(conditional 
variable)という。条件名は、データ部または環境部の特殊名段落の中で定義できる。特殊名段落では、実行時スイッチのオンの状態、オフの状態、または両方の状態に命名する。 
条件名を使用するのは、次の場合だけである。 
RERUN(再開)句。 
ここで条件名を使用することによって、比較条件を簡略に書き表わすことができる。比較条件の中で条件名を使用して、条件名が割り当てられている値の組の1つに対応する条件変数が等しいかどうかを表わす。 
対応する値が条件変数に移されることを示すSET文。
定数名:  
定数名(constant-name)とは固定的な値に付けた名前である。 
呼び名: 
呼び名(mnemonic-name)は、作成者語(implementor-name)に利用者語を割り当てるものである。この指定は環境部の特殊名段落の中で行う。(環境部の章の特殊名段落の節を参照。) 
段落名: 
段落名(paragraph-name)とは、手続き部の段落に付けた名前である。段落名が等しいと判断されるのは、同じ数の数字または文字が同じ順序で並んでいる場合だけである。 
節名: 
節名(section-name)とは、手続き部の節に付けた名前である。節名が等しいと判断されるのは、同じ数の数字または文字が同じ順序で並んでいる場合だけである。 
その他の利用者語 
その他の利用者語の定義については、用語集を参照。 
システム名: システム名(system-name)とは、操作環境との連絡に使用するCOBOLの語である。 
システム名には、最低1つの英字を入れるか、 
または1つのハイフンを入れる。
システム名には、以下の3種類がある。 
計算機名(computer-name) 
作成者語(implementor-name) 
言語名(language-name) 
1つの処理系の中では、システム名のそれぞれの種類は互いに重なり合わない。1つのシステム名はただ1つの種類に属する。 
上記のシステム名は、それぞれ用語集に定義を記載してある。 
関数名: 関数名(function-name)は、COBOL原始 
要素の中で使用できる語のリストの1つである。 
関数名と同じ語を利用者語またはシステム名として、原始要素中の別々の文脈において使用できる。ただし、LENGTHとRANDOMとSUMは例外で、利用者語またはシステム名としては使用できない。 
(手続き部 - 組み込み関数の章の関数の定義の節を参照。) 
予約語: 予約語(reserved word)とは、COBOL翻訳集団の中で用いる語のうちの、予め予約されていて、利用者語またはシステム名としては翻訳集団中で使用できないものである。予約後は、一般形式での指定に従ってのみ使用される 
(付録の予約語を参照。)  
予約語には、下記の種類がある。  
必要語(key word) 
補助語(optional word) 
特殊レジスタ(special register) 
表意定数(figurative constant) 
特殊文字語(special-character word) 
定義済みオブジェクト一意名
必要語: 
必要語(key word)とは、 翻訳集団の中である書き方をするときに、必ず書かなければならない語である。それぞれの一般形式の中で、必要語は大文字で記し下線を引いてある。 
必要語には、下記の3種類がある。
ADD(加算)、READ(読み込み)、ENTER(導入)などの動詞 
文や記述項の書き方に現れる必要な語 
NEGATIVE(負)、SECTION(節)などの機能的な意味をもつ語
補助語: 
補助語(optional word)とは、それぞれの一般形式の中で、大文字で記してあるが下線を引いてない語である。補助語は書いても書かなくてもよい。補助語を書いたか書かなかったかによって、COBOL 
原始要素の意味が変わることはない。 
特殊レジスタ: 
特殊レジスタ(special register)とは、COBOLの特殊な機能に関連する情報を記憶しておくために、COBOLコンパイラによって作成される記憶領域である。特殊レジスタには名前を付け、その名前によって参照する。これらについては、この節の特殊レジスタの項で後述する。 
表意定数: 
表意定数(figurative constant)とは、特殊な定数値に予め付けた名前である。この名前によって、値を参照する。具体的な表意定数については、この節の表意定数の値の項で後述する。 
特殊文字語: 
特殊文字語(special-character word)とは、特殊な文字の予約語である。 
定義済みオブジェクト一意名: 
あらかじめ定義されたオブジェクト一意名などの予約語である。以下のものがある。 
SELF 
SUPER 
SELFCLASS  
文脈依存語: 
文脈依存語は、一般形式に指定されているようにだけ予約されるCOBOLの語である。同じ語を、関数名、利用者語、システム名として使用できる。文脈依存語および予約された文脈については、付録の文脈依存語を参照。 
2.2.3 名前の適用範囲 
ある原始要素の中に別の原始要素が、直接的または間接的に、含まれることがある。各原始要素は、他の原始要素によってまったく同じに名前を付けられた利用者語を使用することができる。 
(COBOLの語の節の利用者語の解説を参照。) このような場合、ある原始要素で参照した名前は、違う種類の利用者語であってもその原始要素に記述されているものを指すのであって、他の原始要素中に記述されている同じ名前のものを指すのではない。 
利用者語のうちの下記の種類に属するものは、利用者語を宣言した原始要素中の文または記述項においてだけ、参照できる。  
段落名 
節名
利用者語のうちの下記の種類に属するものは、どのCOBOL原始要素からも参照できる。  
登録集名 
原文名 
利用者語のうちの下記の種類に属するものは、それらが構成節の中に宣言されている場合、その構成節を含む原始要素またはその原始要素に含まれる原始要素中の文または記述項からだけ、参照できる。 
符号系名 
字類名(真値提案用) 
条件名 
呼び名 
記号文字
上記の条件に該当しない場合、利用者語のうちの下記の種類に属するものには、宣言および参照に関して、特別の表記法が適用される。  
字類名(オブジェクト指向) 
条件名 
データ名 
ファイル名 
関数プロトタイプ名 
指標名 
インターフェイス名 
メソッド名 
プログラム名 
プログラムプロトタイプ名 
レコード名 
報告書名 
画面名 
型定義名 
利用者関数名
2.2.3.1 プログラム名に関する表記法 
プログラムのプログラム名は、プログラムの見出し部のプログラム名段落で宣言される。プログラム名を参照できるのは、CALL(呼ぶ)文、  
CHAIN文、  
CANCEL 文、 
SET文、および  
プログラム終了見出しから1つの実行単位を構成するいくつかのプログラムに付けられたプログラム名は、必ずしも一意であるとは限らない。しかし、1つの実行単位中の2つのプログラム名が同じである場合、少なくとも一方のプログラムは、もう一方のプログラムを含まない別のプログラムの中に直接的または間接的に含まれていなければならない。 
プログラム名の適用範囲を規定する規則は、下記のとおり。  
共通属性がなく、他のプログラムに直接的に含まれるプログラムのプログラム名は、親プログラム中の文からだけ参照できる。 
または、プログラムに再帰的な属性がある場合は、そのプログラム自体の内部から参照できる。
共通属性をもち、他のプログラムに直接的に含まれるプログラムのプログラム名は、親プログラム中の文、および親プログラムに直接的または間接的に含まれるプログラム中の文からだけ参照できる。 
ただし、共通属性をもつプログラムおよびそのプログラムに含まれるプログラムからは、そのプログラムが再帰的な属性を持つ場合を除き、そのプログラム名を参照できない。 
他のプログラムに含まれないプログラムのプログラム名は、実行単位中の他のどのプログラム中の文からも参照できる。ただし、このプログラムに直接的または間接的に含まれるプログラムからは例外とする。 
2.2.3.2 条件名、データ名、ファイル名、レコード名、報告書名、
型定義名に関する表記法 
原始要素の中に条件名、データ名、ファイル名、レコード名、報告書名、
および型定義名
が宣言されている場合、これらの名前はその原始要素の中でだけ参照できる。ただし、これらの名前のうちのいくつかが大域的に使用され、その原始要素中に他の原始要素が含まれる場合は、含まれる他の原始要素からも参照できる。 
単一の原始要素の条件名、データ名、ファイル名、レコード名、報告書名、 
および型定義名 
に付けた名前の一意性に関する必要条件については、前述COBOLの語の節の利用者語の解説を参照。 
ある原始要素の中で、その中に含まれる原始要素中に宣言されている条件名、データ名、ファイル名、レコード名、報告書名、  
および型定義名 
は参照できない。 
大域名は、それが宣言されている原始要素の中、あるいはその原始要素に直接的または間接的に含まれている原始要素の中から参照できる。 
原始要素Aに原始要素Bが直接的に含まれている場合、両方の原始要素で条件名、データ名、ファイル名、レコード名、報告書名、 
および型定義名 
をそれぞれ同じ利用者語を使用して設定できる。両方の原始要素中に存在する名前を原始要素B中で参照した場合、下記の規則に従って、どちらのものを指すかが判定される。 
原始要素A中に定義されているすべての大域名、および原始要素A及び原始要素B中に定義されているすべての名前が、参照された名前がどちらの原始要素に属するものかを判定するために使用される。そして、通常の修飾規則および参照の一意性に関するその他の規則が適用されて、該当するものがいくつか見つけ出される。 
該当するものが1つしか見つけ出されなかった場合、それが参照されたものである。 
該当するものが2つ以上見つけ出された場合、原始要素B用の名前は2つ以上はあり得ない。原始要素B用の名前をもつものがないかまたは1つある場合、下記の規則を適用する。 
参照された名前が原始要素Bの中で宣言されているならば、原始要素B中のものが参照されたとする。 
これ以外の場合、原始要素Aが他の原始要素に含まれているならば、下記のように判定する。 
参照された名前が原始要素Aの中で宣言されているならば、原始要素A中のものが参照されたとする。 
参照された名前が原始要素Aの中ではなく、原始要素Aを含む原始要素中で宣言されているならば、原始要素Aを含む原始要素中のものが参照されたとする。更に上位の原始要素があるならば、単一の有効な名前が見つかるまで、この規則を順次上に適用する。
2.2.3.3 指標名に関する適用規則 
大域的属性をもつデータ項目が指標名を記述した表を含む場合、その指標名も大域的属性をもつことになる。したがって、指標名の範囲は、その指標名によって名付けられる指標を持つ表に名前を付けるデータ名のものと同じであり、データ名用の名前の範囲規則が適用される。 
指標名を修飾することはできない。  
指標名は修飾することができる。	
2.2.3.4 クラス名(オブジェクト指向の場合) 
およびインターフェイス名の適用規則 
ソース要素内で参照されるクラスのクラス名は、それを含むクラス定義の名前であるか、またはそのソース要素またはそれを含むソース要素の 
またはクラス管理段落 
内に宣言されていなければならない。 
該当のクラス名に関して翻訳集団内で定義できるクラス定義は1つだけである。その翻訳集団内に定義がなくともかまわない。
ソース要素内で参照されるインターフェイスのインターフェイス名は、それを含むインターフェイス定義の名前であるか、またはそのソース要素またはそれを含むソース要素のリポジトリ段落内に宣言されていなければならない。
該当のインターフェイス名に関して翻訳集団内で定義できるインターフェイス定義は1つだけである。その翻訳集団内に定義がなくともかまわない。
COBOL 言語の概念
