でそれでですねどういう評価してみたんですけども
まず
すいません
前の図で絵のこのここの開発
コーパスの時に
フィラーをいっぺん取り除いてもう一度フィラーの挿入をやりました
ですから
ここんところでどのぐらいフィラーが
正確に
再現されたかというのが重要になってくるわけで
で
その再現のどれぐらい
精度良く再現されたかというのは
目標としては
この話し言葉コーパスもともとフィラーを除去する前のコーパスがあります
このコーパスは
完全に正解データのはずですから
このコーパスを使って
言語モデルを作りまして
その言語モデルを作って得られる性能というのが我々の目標値っていうことになると思い
でそうしましてもう一度この表を見て頂きたいんですけれども
この一番下の行
に書いてあるものがですね
開発コーパス
ＣＳＪの五百講演から
フィラーをまったく除去せずにトライグラムを作成した場合の性能です
でその場合テストセットパープレキシティーが七十六．七になりましたこれが我々の研究の目標値になります
でそれに対しまして
その開発コーパスから一旦
フィラーを取り除きます
その上でフィラーを取り除いた上で
フィラーが例えば十分の一の確率でフィラーが発生するよっていうことでしたらその十分の一の確率でランダムにフィラーを挿入します
でそうしたコーパスを作ってやりまして
でそのコーパスから作った言語モデルっていうのが八十六．二というテストセットパープレキシティになりまして
こちらがベースラインになります
でそうしましてじゃあ我々のやつはどうなっていますかといいますと
提案手法その一はですねＣＲＦで
かつ
直前二形態素直後二形態素および現在の形態素を素性として予測モデル挿入モデルを学習しますとテストセットパープレキシティの七十七．二という値が得られました
つまりこれはどういうことになっているかといいますと
ベースライン
アトランダムにコンテキストを考えずにフィラーを挿入した場合に比べますと
結構よろしいと
でかつ
その開発コーパスで達成される一番良い値に対しても結構近いと
ということでですね我々の提案手法はかなり良い感じでフィラーを再現することができるよということになっております
でもう一つ音声認識ていう課題を考えますと
今後オンラインでやらなければいけないかもしれませんので
で
後ろの
直後の形態素というのを考慮しなくても
考慮しなかった場合どうなるかということが興味あるところだと思いますけれども
そちらをちょっと見てみますと七十九．四という形になりまして
で
これは当然のことながら
直後の形態素を見た方が当然性能は良いんですけれどもそれなりに
ベースラインに比べると結構良い性能を保って再現することができると
というわけでこの表では我々の提案手法というのは
ベースラインに比べると結構良い性能が達成できるよとでかつ目標値に結構近い値だよということが主張できると思います
