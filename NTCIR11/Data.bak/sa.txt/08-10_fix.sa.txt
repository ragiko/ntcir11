はいそれでは
神戸大学のですニュース検索タスクにおけるシステム要求と雑談の判別と
いうタイトルで発表させていただきます

まず本研究の背景なんですけれども
まずなぜニュース検索タスクをやるかというところの背景としましては
映像コンテンツが相当増大してきまして
ユーザの視聴行動も変化してきていると
例えば
今までだとテレビ
今やっているテレビのニュースを見るだけだったのが
ハードディスクレコーダーに録りためたものを後から検索してみたいだとか
インターネット上のニュースをみるというようなことが行われるようになってきています
で相当大量のニュースが存在することになりますので
まあ順番にみていくのではなくて気軽に簡単に検索できればいいだろうということで
音声インターフェースによる検索システムの構築
いうものを行っております
で特にちょっと今回の発表では本来はあのハードディスクレコーダーに対する検索というのもやっているんですけれども
ちょっと今回はインターネット上のニュース
に対する検索とちょっと限定させてお話させていただきます
でこの
インターネット上のニュースに対する検索のシステムとしまして本研究室では
ネットテレビ特にネットニュースに対するものに関してはネットニュースというようなシステムを構築しております
でこのシステムではネット上のニュース映像を集めてきてその
リンクをずらーっと並べると
でこのネット上のニュースに対して音声によって検索だったりたとえば
映像の操作を次の映像にいくとかボリュームをそうさするというようなことが
行えるようになっております
でちょっとこのネットニュースの中身についてはまた後で説明さしていただきます
で今回の発表自体の目的としましては
その検索のところをどうこうするというわけではなくて
音声インターフェースを使う上では今までは例えばロボットを操作する上で
雑談とロボットに対する要求と雑談の判別をしたいということをやってたんですけれども
ニュース検索タスクにおいても
スイッチレスでシステム要求か雑談かを判別したいということを目的としておりますで従来のロボットとの相違点としましては
検索のためのキーワードがまあ日々入れ替わっていきますので
その表層のキーワードを例えばそのですね雑談か要求かの素性にしてしまうと
日が変わると使えなくなってしまうというような問題がありますのでそのあたりへの対応がちょっと今回の発表のポイントとなります
でちょっとここで発表の構成なんですけども一応研究と背景と
研究背景と目的は説明さしていただきまして
でこの後ニュース検索システムの先ほどのネットニュースの概要を
簡単に説明させていただいた後に
ブースニングによる要求検出の手法それから評価実験と
そのあとにちょっとデモ映像を見ていただこうと思っています
でニュース検索システムなんですけれどもこれはまあネットから映像を沢山拾ってきて映像データベースを構築すると
いうシステムになっております
でちょっと今回のワークショップの趣旨からすると本来ならその映像の中身の音声を解析して
でということをやるべきと思うんですけれどもちょっと今回はそこまで出来ていなくて

例えばこれはヤフー動画の例なんですけれどもこの動画と一緒に簡単なテキストの説明が
付与されておりますのでこのテキストの情報を検索のためのキーワードに利用しております
でこのテキストの中から

ＴＦＩＤＦで重要語を抽出しましてこの赤字になっているような部分を
検索のためのキーワードとしてこう言うようなキーワードがあれば
この動画を再生するというような
仕組みになっております
でここで検索
検索自体も音声で行いますので先ほどの漢字が沢山あると思うんですれけども
先ほどの検索キーワードを音声認識出来るようにしないといけないということで
先ほどの検索キーワードを音声認識辞書に登録しまして
茶せんにより読みを付与するということを行っております
茶せんが読みを付与できないような新しい単語については
ウィキペディアやはてなキーワードから
読み拾ってきて付与するということを行っております
でここで辞書を構築する構築する際に例えばオバマとオバマの上院とか上院議員といったものがバラバラに
形態素として抽出されるんですけども
連続するこういう名詞の組み合わせは全てセットにして
辞書に登録するようにしておりますこれでオバマ
のニュースというオバマの上院議員のニュースというのが何でも検索できるようにするということになっております
でここでちょっとなんですけれども今回はニュースだけを対象にしておりますので
ニュース自体がどんどん日々入れ替わっていきますので
古い検索キーワードをどんどん捨てていくというような形で
辞書のサイズが大体今で四千単語くらいなんですけども
四千くらいで安定して
いてまああんまり辞書がである程度認識性能が維持できているのかなっというふうに考えています
ちょっと例なんですけども最近だとちょっとイージス艦の事故に関連して
海洋調査船なつしまというものがあるんですけれども
このなつしま
のニュースといったときに

まつしまあると色々と混同してしまうんですけど
もうまつしまに関するような古いニュースは捨ててしまっているので
それなりに
上手くヒットしてくれるというようなことになっております
または問題としましては映像は存在しないと
辞書がそもそも存在しないことになりますので
認識もできない
いうことになります
でこういうようなシステムを使って
ユーザが何々のニュースが見たいとか
何々って何とかまあ次の映像を見せてというような操作を行うんですけれども
これ一人で使っている場合はこれでいいんですけれども
だれか別の人がやってきて雑談をし始めると
いうことがありますので
このときにこの雑談はすべてリジェクトしたいということがあります
で今までこのリジェクトする手法としてブースティングによる手法を提案してきました
で基本的にはこのまま用いるんですけれども表層の単語そのまま学習に用いてしまいますと
検索キーワードに依存してしまって
検索キーワードが入れ替わると使えなくなってしまうということがありますので
ここで検索キーワードは例えば太陽系というのが検索キーワードだとすると
これは何かラベルに置き換えておいてそれで学習すべきだろうということを行っておりますちと今回の提案手法というかこれだけのことなんですけれども
これで
そのブースティングによる手法が大体どのくらい動くのかということをチェックして
いうことになります
でちょっとブースティングのおさらいなんですけれどもブースティングは
沢山の弱識別機による重み付き投票による識別機ということになっております
で入力は例えばこれって何とかのニュースというように聞いているような場合だとこれはたぶん雑談
ということになると思うんですけれども
沢山の弱識別機が用意されていて
でこれという単語があればあ すみません黄色が雑談
黄色がある場合は雑談に投票する緑がある場合は
システム要求に投票するというモデルになっているんですけれども
これがあるのでちょっとマイナスで雑談に投票してると
これも
雑談に投票してるというような形で
例えばキーワードがこれちょっと一番先頭にマッチするという意味なんですけれども
キーワードが先頭にある場合はシステム要求なんですけれどもこの場合はないので
雑談に投票するというようなことを行って最終的に本当はもっと百個くらいあるんですけれども
最終的にゼロ以上かマイナスかで
雑談かシステム要求かを判別するというような手法になっております
でこの弱識別機はもちろん人が準備するわけではなくて
コーパスから自動的に学習するということになっております
で今回この弱
識別機の学習に用いたコーパスなんですけれども

まず音声を収録しておりまして
ちょうどこのような形で胸元に接話マイクを設置して
あまり大規模ではないんですけれども大体三十分くらいの短いコーパスを収録しております
で二人で雑談を行いながら
なんかニュースを見たいときに何々のニュースを見せてというとでニュースについて普通に雑談を交わすというようなコーパスになっております
で
すみません
で
この
収録した音声を書き起こして
言語モデルは
作るんですけれども
ブースティングの学習自体は
でこの書き起こしから作ると言うよりは音声認識結果を使ってもう作成しております
でちょっとこの下がコーパスの例なんですけれども
キーワードのニュース
というこのキーワードのニュースを見せて省略しても
リクエストとして解釈する
最新情報リストというとニュースの一覧が出てくる
というのをリクエストとして解釈する
キーワードって場合は雑談だとかというようなラベルを付与しております
でこれは今ユニグラムの情報だけをちょっと表示してるんですけれども
これは
その返し記号とキーワードのバイグラムにしたものなども
すべて追加して学習データとしております
でちょっと認識がまだ上手くいっている例だけを持ってきたんですけれども
実際はもっと酷い認識で
かなり認識誤りも多いようなコーパスになっております
で先ほどのコーパスを使ってブースティングを行ったところ
学習された素性の例なんですけれども
例えばこの終端これが終端記号なんですけれども
ニュースで言い終わっているような場合にはシステム要求であるとか
この見せての見せですかね見せ
だとか
キーワードで言い始めている場合などは
システム要求に評するというような素性が得られています
で雑談の場合はべーだとかなーだとかあまりはっきりしないような
素性が選ばれると
いうようなことになっております
でキーワードは
両方の素性に入っていまして
検索のためのキーワードがあるからといってシステム要求か雑談かということは
一概に言えないんですけれども
キーワードが最後に出てくるとか最初に出てくるとか
もしくはキーワードと何々ある単語特定の単語が一緒に出てくる場合には
識別のために有効に働くというようなことが学習されております
で
先ほども学習したブースティングの手法で評価実験を行っております
で評価方法は学習データを十個に分割して
そのうちの九個で九というかはいそうですね九個で
学習を行って一つを評価するという方法でやっております
でシステム要求がうまく検出できたかどうかいう意味でのリコールプレシジョンとその平均であるF値での評価を行っております
で評価対象は一応四つあるんですけれども
一応従来手法として一番下にあげております信頼度の平均
を用いておりますこれは認識結果の各単語の信頼度の平均が閾値より上か下かで
要求か雑談かを判別しております
で上の三つなんですけれども一番上のものは
システムの上限値をはかるという意味で
書き起こし人手による書き起こして学習を行って
人手による書き起こしを識別したというようデータになっております
で
真ん中のものがこれはミスマッチと書いてあるんですけれども
これは学習は書き起こしを行って認識結果をしきべつすると

いうデータになっています
でこれが三つ目が一応今回のメインなんですけれども学習も識別も両方とも
認識結果を用いて行うと
いうことになっております
で結果なんですけれども
あーすいませんそのに
音響分析条件がこんな感じで
ＨＭＭはまた音節ＨＭＭを用いております
音響モデルはCSJをベースにこれは完全にクローズのＭＬＬＲマップ適用を行っております
言語モデルは書き起こしから学習するんですけれども発話も半分に分割しまして
一応オープンになるように言語モデルは作成しております
ただし辞書の方は未知語がないように
すべての単語を与えております
で
その書き起こしのすべての単語は大体四百語くらいなんですけれどもそれに検索用のキーワードが
大体四千三百語くらいでそれは先ほどのオバマ
オバマ上院オバマ上院議員というようなすべて含めて四千三百語くらいになっております
でこのような
条件で音声認識しましてその結果をブースティングで識別した結果なんですけれども
一番左が書き起こしでこれは一応システムの上限値ということになります
システムの上限値で0.95ぐらい

になっております
で
このミスマッチと書いてある
ですねー
0.76ぐらいなんですけれどもこれが
書き起こしで学習して認識結果を
識別した場合
ですので認識誤りが沢山含まれているために少し性能が低下すると
いうような結果になっております
でこの緑の部分が
学習も識別も認識結果を
用いて行ったもので
認識誤りの傾向認識誤りを起こしにくい単語などが
素性として選択されるために
ミスマッチのデータよりは性能がよくなるというような結果になっております
でこのときで大体性能は0.
F値で0.83ぐらいいう結果が得られており
でこれが要求か雑談かというだけのF値なんですけれども
これをさらにちょっとなんか
これをちょっとさらに中身を見てみますと
何々のニュースを見せてというような
検索キーワードを含むような要求とそれ以外の例えば最新情報リストを見せてとか
次の映像を見せてとか前の映像を見せてといったような操作に関係するような
部分なんですけれどもこちらは
その検索キーワードを含まない要求となっております
で検索キーワードを含まない
検索キーワードを含む要求では
こちらの含まない要求に比べてやはり少し性能が低下してしまうと
いう結果になっております
でこちらの検索キーワードを含まない場合では
0.九近くの高い性能
が得られております
でここでちょっと大体実際どんな感じで動いているのかという
デモをご覧いただきたいと思います

あれ
すい
選択再生されないみたいなんですが


はいすみません直接再生してもらえますか
ブースティングという方なんですけど
はいすいません


その音が出てないみたいなん

ちょっとだけ映像だけ見ても
全然とんですけれども
音出てますね



すいませんちょっとどうも音が出ないみたいなので

そうですねかなり結構激しく雑談を行いながら
時々最新情報リストと言ったり

なんとかのニュースを見せてと言ったりしてる所なんですけれども
雑談の感じが全くわからないのでこう動いているのかどうなのか全然と思うんですけれども

見てもらった感じだとほとんどわきださずに動いてるところが
まあなんとなく思うんですけれども


んっとー音でない

ここっちだと出るんですけどね


マイク拾いましょう
これ両方
はい

大体こんな感じの雑談なんですけども







一応ちょっと神戸大のニュースみたんですけど







はいじゃあちょっと

はいちょっと失礼しました
で彼の理論が正しいかちょっと



じゃあちょっとすいません考察だけ
結構湧き出さないところをちょっと一応見ていただけたと思うんですけれども
まずわき出さない理由一つはやっぱりちょっと振幅
による切り出しのちょっとレベルを高めに設定しているので
ぼそぼそと喋っているようなものは
その時点ですべてカットされているということが一つあります
でそれからブースティングでシステム要求の素性と
雑談素性というのを作っているんですけれども
雑談素性のこのでーとかなあとかまあとかやんなんかなんかとかこの辺が
あ結構よく
いろんな単語吸い込みやすいというかこれがうまくガベージモデルのような形で
働いているんだろうということが考えられます
もう一つは
雑談中に例えばこう惑星がなんとかかんとか言った場合でも
雑談中は結構乱暴なしゃべり方をしていますのでこれ

うまいことというかうまく認識を誤ってしまってくれてると
そのためにあまりわきださないということがま考えられるかなあと
考えておりますすいませんちょっと色々発表は以上です
