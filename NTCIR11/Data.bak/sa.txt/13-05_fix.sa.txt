はいそれでは距離付き音節Ｎグラムインデックスを用いた音声入力による音声ドキュメントの検索語検出法の評価と題しまして
豊橋技術科学大学のが発表させていただきます
まず研究の背景としまして
音声を含んだマルチメディアコンテンツの増加に伴いこれらを効率的に検索する手段が近年望まれています
しかし音声ドキュメントを自動で書起す際に
認識誤りが発生したり
未知語は書起されないといった問題があります
そこで我々は今までに
認識誤りや
未知語に頑健かつ高速な音声ドキュメント手法の提案というものを
行ってきました

今回目的といたしまして
従来テキスト入力で音声けん
さくを
行っていたものを
今回音声入力といたしまして
クエリ入力の高速化
利便性の向上を目指しました
更に従来トライグラム
のみ用いていた検索をバイグラムとユニグラムを組み合わせることによって距離計算を厳密化し

すみません検索性能の向上を
目指しました
次にシステムの概要について説明させていただきます
まず
一番最初に
検索語の入力が行われます
今回はフーリエ変換といった検索語を例にとって説明させていただきます
これをトライグラムごとに分割いたします
今回の例の場合はふうりと
えへんとんかんに分割されます
これらを三番目でそれぞれいんでっ
ぷから検索していきます
このインデックスの中身は音声ドキュメントの認識結果が登録されています
これは出現位置とトライグラムと
距離の組み合わせとなっております
でこちらの距離についてはあとで説明させていただきたいと思います
で四番目っに


インデックスから


検索されたトライグラムの連結をチェックします
そしてこちらの連結が
うまくいったクエリに関しまして
距離としきい値を比較し距離がしきい値より小さければ検出といったようになっています
次にインデックスの作成方法について説明させていただきたいと思います
こちら黒い部分が音声ドキュメントの認識結果となっていましてこちらの青い部分がトライグラムインデックスとなっています
認識結果の各位置でトライグラムを作り
索引に登録していきます
すべてこのように順番に
ずらして
登録しおわったら
あとで二分探索で高速に検索できるようにトライグラムを辞書順にソートしておきます
これが
簡単ですがトライグラムインデックスの作成方法となります
我々の手法では認識誤り対策としまして四つの
対策をおこなっています

一つ目としまして置換誤り対策の一つ目で
認識結果の複数候補をマージしてインデックスに登録しておくことにより
認識候補にクエリの音節が含まれていれば
検出が可能となっています
置換誤り対策の二つ目としまして
任意の音節に対応したダミー音節というものを用いておりまして
これによって認識候補にない音節も
検出可能となります


次に挿入誤り対策
についてですが

認識結果の音節を一つとばして
インデックスに登録しておくことにより
認識結果に音節が挿入されている場合も検出可能となっています
脱落誤り対策に関しましては

挿入誤りが認識結果の音節を一つとばっしていたのにたいし
こちらはクエリの音節を一つとばしてトライグラムを作り検索を
おこなうことで対策を
おこなっています
これに関しましてそれぞれ対策をおこなったトライグラムに関しまして厳密な距離を定義しています
こちら
距離について従来は固定値を用いていました
順番に説明させていただきます
置換誤り対策の一つ目の
複数候補のマージについてです
こちらインデックスに登録されている
トライグラムだとします

こちらＤ一ＸＤ二
ＹＤ三Ｚとなっていますがこちらの一二三という数字は出現位置を表していてＸＹＺは認識候補の何番目かを表しています
そして置換距離は
このように定義されます
これは認識候補の第一番目
との音節とのバタチャリヤ距離
をとったものとなっています
こちらそれぞれ
一音節目二音節目三音節目に対応した距離となっています
こちら具体例で説明させていただきます


こちら一ベスト認識結果の三ベストをマージさせる例なんですが
一ベスト
だけ用いた例だと

こちらふえきという

トライグラムしか
出現位置一では作成できません
しかし
三ベストをマージすることでふうりといったトライグラムが作られます
でこのとき置換距離としましては
ふとふこちら一ベストの

ふと
実際に用いた音節のふ
えとう
も同様にきとりも同様に定義してあります
そしてクエリがふうりえだった場合はふうりといった
トライグラムができますが

ふえきでは検索できないものの違う
そうですね
三ベストをマージしたトライグラムふうりでは検索できるようになります
次に置換誤り対策の二つ目としてダミー音節を用いた例について説明させていただきたいと思います


こちらが先ほど同様にインデックスに
登録する
音節になっておりまして
こちら
真ん中にダミーが使われている例になっています
こちらが
クエリの音節となっています
こと時Ｄ一エックス
と
Ｑ一Ｄ三ＺとＱ三が同じ音節であるとき
こちらのトライググラムがヒットします

このときのダミーに関しましての
距離は

認識候補の第一番目の音節とクエリの音節とのバタチャリヤ距離を採用しています
厳密にはこちらの距離に関しまして
ラムダ倍
＋イータというペナルティを加えて
います

でこちらについても具体例で示させていただきたいと思います

こちら三番目の位置を
ダミーとした場合の例となっていまして
ふうダミーをトライグラム
インデックスに登録した例になっています
このとき置換距離としましては
ふとふの距離
とうと認識結果の一ベストえの距離が先に登録されています
クエリ検索時に
こちらの

トライググラムではヒットしないもののダミーを用いた
トライグラムには
ふうりがヒットできるようになり
このようにヒットした際にダミーの距離としましてこちら認識結果のダミーの位置の一ベストき
ですね
きと
そして実際にヒットしたクエリの
音節り
の距離を取っています
次に挿入誤り対策と脱落誤り対策について説明させていただきたいと思います
さきほど一音節をＤや
Ｑで説明したん
ですが
こちらは子音と母音で
表現させていただいています
で
こちらがトライグラムＣ一Ｖ一Ｃ二Ｖ二Ｃ三Ｖ三といった
トライ
グラムになっておりまして

Ｃ二Ｖ二を挿入または脱落誤り
脱落した音節とみなします
このとき挿入距離脱落距離に関しましては以下のような式を採用しておりまして
これは
こちらのＣ二Ｖ二の右隣の音節との距離
右隣あっすみません左隣の音節との距離

左隣の母音との距離
右隣の音節との距離
の最小をとったものとなっています
これについても具体例で説明させていただきます
こちら挿入誤り対策をおこなった例となっていまして

こちら二番目の出現
位置の音節を
とばしています
例えばインデックスにふうり
登録されてい
た例です
でこのとき
まっ挿入
距離には

こちらふとての距離うとての距離てとうの距離といって
こちら

申し訳ありませんてではなくて
つですね
つこちら一ベスト
抜かすときの一ベストの距離との左隣右隣の距離となっています


次に脱落誤り対策についてですが
こちら検索語がさきほどと同じようにふうりえの場合は
こちら
ふ
のクエリを一つ
とばして
トライグラムを作成した場合は
うりえっといったようになります
でこのように音節を一つずつ
とばして
作ったトライグラムが
この三つになりまして
まっもとのトライグラムがふうりとなります
このときの脱落距離は
まっさきほど述べましたように
例えばふりえの例でしたら
ふとううとううとりの最小なのでうとうの
距離を採用している
っといったようになっています
これも検索の例で示しますと
このように上から順番に複数回トライグラムインデックス

に
検索していきます
このように順番に検索していきますが
脱落させた
トライグラムが
うまくヒットしもとのふうりでは
ヒットできないようになっています

次に今回新しく採用した方法としてトライグラムバイグラムユニグラムを組み合わせた手法について説明させていただきます
従来トライグラムのみでしたら
フーリエ変換は
ふうりとえへんと
んかんに変換されて検索されて
くる
といった方法になっていましたが

トライグラムとバイグラムを組み合わせることによって
ふうりとえへんと
かん
に分割され
このんの部分が重複していてこのぶんの距離は二重に計算されていたんですが
それがなくなり
厳密に距離を計算できるようになりました
次に
評価実験について説明させていただきたいと思います検索語としましては音声ドキュメント処理ワークグループの
コアデータテストコレクションのドライランの未知語五十種類既知語五十種類について

用いました今回は未知語だけの結果のみ示します
これをテキスト入力および音声入力させています音声入力の場合は
六名が各クエリに対して二回ずつ発話しその認識結果の一ベストをとっています
検索対象は日本話し言葉コーパスのコアデータ約四十四の講演音声を用いております
でこちらに対しては認識結果の５ベストを用いているものと書起しを採用しており書起しは音声入力
について
認識結果を検索した場合との比較のために用いています

でまず最初にベースラインについて説明させていただきます
ベースラインはＤＰ法を用いていますが
従来こちらのＤＰ一のこちらの傾斜制限有りのパスで挿入脱落
置換に関しましてバタチャリ
ヤ距離を用いて
いるようなＤＰマッチングを採用していました
しかし今回
こちらの傾斜制限なしのパスでそれぞれ編集距離を用いたもの
こちら傾斜制限有りのパスで
バタチャリヤ距離を用いている
まではこちらＤＰ一と同じなんですが
こちらの一番のパス挿入のパスに関しまして
重みを二分の一していたものを一倍に
したもの
との比較を行いました
こちらは認識結果の五ベストを用いて
一番距離が小さくなるような
音節を採用しています
こちら比較の結果となっています
もともとの
ＤＰ一と比較しますと

ＤＰ三が良くなっていまして
パスを
にん
一倍からあっすみません二分の一倍から一倍したことにより
性能が上がっていることが分かります

ＤＰ二は

編集距離と単純なパスでしたが
性能が一番悪く
こちらはベースラインとして
使えない
という結果になりました
そこで一番良かったＤＰ三の性能について
もっと詳しく調べるためにＤＰ三で
さきほどまでは
五ベストを用いていましたが一ベストのみを用いた
ものもやってみましたこれに関しましては
ＤＰ三と
比較しまして
性能が若干ですが下がっておりまして五ベストをマージすることに
マージというか用いることにより
性能が上がっていることが分かります
そこでまっベースラインとしてはＤＰ三を
採用
することにしました
次にトライグラムバイグラムユニグラムを
組み合わせた提案法の評価実験について説明させていただきます

検索語と検索対象の組み合わせは以下の三つを試しておりまして
テキストクエリと音声ドキュメントの認識結果五ベスト音声クエリと音声ドキュメントの認識結果五ベスト
音声クエリと音声ドキュメントの書起し
といった組み合わせとなっています
以下全て未知語の検索実験について説明していきたいと思います
こちらが
一番目のテキストクエリと音声ドキュメントの認識結果の五ベストを用いた結果となっています
こちら一番がＤＰ法
二番が
トライグラムのみ用いていた方法
三番が組み合わせた方法となっていまして
二番と三番を比較しますと

性能が向上しており組み合わせたことによって
有用
性が確かめられました
また
ＤＰ法と比べて二つとも
性能が上回っていることが分かりますがＭＡＰに関しましてはＤＰ法のほうが高くなっています
これはＤＰ法のほうがリコールののびが良いためと考えられいますが
こちらプレシジョンが

低い
部分でのリコールののびですので
実用的ではないと考えられます

次に音声クエリと音声ドキュメントの認識結果五ベストの組み合わせについての結果となります

こちらも二番と三番を比較しますと性能が向上していることが分かります
更に
二番から三番に向上したことで一番のＤＰ
の性能を上回ることができました
こちらはさきほどのは音声クエリの話者の平均をとったものだったのですが
こちら話者別の結果を
示したものとなっています
こちらがクエリの認識率でこちらが検索性能となっています
こちらクエリの
認識率が
低いコレクトアキュラシーが低い一と四の話者に対して
検索性能も低くなっていますので
なんらかの相関があるのではないかと考えられます
次に音声クエリと音声ドキュメントの書起し
の組み合わせです
こちらも二番と三番
を比較しますと性能が向上しています

こちらは二と三は音声クエリと
認識結果の組み合わせと比較して
性能が向上しましたが
ＤＰについては逆に下がってしまいました
この原因については
今検討中です
検討というか

はい
検討中です
次に行ったのが三ベストと五ベストの比較です
検索速度を向上させるために認識結果の五ベストから三ベストまで減らしてインデックスを作成し
その比較と
もとのＤＰベースラインであるＤＰとの比較をおこないました
この結果がこのようになっていまして
五ベストと三ベストを比較しますと
音声クエリもテキストクエリも性能は下がっていますがそこまで差がないことが分かります
更に三ベストとＤＰを比較しますとＦ値に関しましては三ベストのほうが
上回っているといった結果となっています

でこちらが検索速度です

いずれも
五ベストから三ベストに変
更することで
約
三分の一まで
検索速度を減らすことができました
更にＤＰ法と比べて三ベストは
約五十倍ほど速くなっています
インデックスサイズは五ベストから三ベストにすることで
一．八ＧＢｙｔｅから〇．四ＧＢｙｔｅまで減らすことができました
まとめといたしまして
音声クエリで音声ドキュメントに対し
六人の話者平均で
〇．三六八のＦ値を得たトライグラムユニグラムバイグラムを組み合わせることで性能が向上した
などがあります今後の課題は以下のようになります
