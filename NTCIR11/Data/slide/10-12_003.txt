はいそれでそのＳＰＯＫＥＮ ＴＥＲＭ ＤＥＴＥＣＴＩＯＮに関する関連研究ですけどもまとめますとだいたいこういった手法が提案されています
で一番ベーシックな基本的な方法は連続ＤＰマッチングで解こうという方法です
ただ連続ＤＰマッチングですと検索対象の文章全部なめないといけませんので効率が悪いと
でそこで
索引付けをすることによって効率化しようという手法がいくつか提案されてます
で一つ目の代表的な手法これはほとんどの人がこちらなんですけどもインバーテッドファイルを使いましょうという方法です
でこれはテキストでもよく使われる方法でいわば辞書を作っておきましょうということですね検索したい
ものの辞書を作っておいてその辞書に載っているものに関してはその位置を
すぐに引けるというような索引を作っておきましょうと
いう必要が
そういう符丁になってます
でこちらの方は辞書が必要でそこに載ってないものはもう検索されないわけですね
だそこが
ちょっと音声ドキュメント対象にする場合は問題で
音声ドキュメントだとゆれがありますので必ずしも全ての
文字列をここに載せるというのは必ずしも容易ではないと
で昨日のの発表はこちらの方で
そこの索引付けの方をいろいろと工夫されて
いろんなパターンを載せてるというようなこと発表だったと思います
でもう一つの方法は
サッフィクスアレイを使うという手法でこれは
昨日ご発表がありました
の発表に相当します
でこちらの方は
どういう手法かというとその検索対象のドキュメントの方を
圧縮しまして
ドキュメントの共通部分をＴｒｅｅ状に圧縮して
同じところはまとめて検索できるようにすると
いうことでその上でＤＰマッチングをしてやろうという手法ですね
で
ただこの方法だと音声ドキュメントの場合やはり
認識に揺れがあるというところが
大きな
問題になりまして
テキストの場合だと一意に決まるのでそこで圧縮がうまくいきますけれどもおそらくいろいろな認識法たくさんの認識方法がある中で
その中で共通部分を見つけるというような
かなり扱いは難しいであろうと
いうふうに想像できます
でまたいずれの手法ですね従来のいずれの手法も
検索の問題に対しては閾値を使っていると
検索したいものがどのぐらい
誤りが許されているかという閾値を設定してその閾値内の
距離を持つような候補を出すというような問題を
解いてるという手法になっています
はいで
