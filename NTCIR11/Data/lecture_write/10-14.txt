はいそれでは複数のサブワード言語モデルを用いた音声中の検索語検出の高精度化と題しまして
岩手県立大学のが発表いたします
まず研究背景ですけれどもこれまでの発表にありましたように
マルチメディアデーターのような 音声を含んだデータが増えてきていてそのための検索機能というのが求められており
 それに対し
音声中の検索語検出が注目されていて
いるということになります
 代表的な音声中の検索語検出方式について
簡単に述べたいと思います
まず検索対象の音声ドキュメント
を 単語ベースの音声認識とサブワードベースの音声認識を用いて単語系列とサブワードモデル系列
に認識をしておきます
  このようなイメージとなります
検索語が既知語の場合は単語系列から未知語の場合はサブワードモデル系列からといったように
検索語のこの既知語
既知か未知かによってこの
系列を 変えるというか 二つの系列を併用するという方式が
代表的であるという風に考えます
既知語の場合なんですが転置索引等を用いることで
高速で既知語ですので高精度に検出が可能であるというふうに考えます
しかし未知語の場合なんですが
既知語と比べて通常劣るというふうにされています
原因は 認識誤りが多く起こるためで
サブワード認識誤りに対する頑健性が求められます
そこで本研究では
サブワードを用いた検索方式における誤認識に頑健な
検出の実現を目的としております
これまでに私たちの研究室ではいくつか
サブワードの方式についていくつか提案をさせていただいておりま について紹介をしたいと思います
１つ目ですが新しいサブワードの提案ということで
この二分の一三分の一音素あとＳＰＳというものを提案してきておりました
こちらのスライドでちょっと説明をしたいと思いますまず二分の一音素ですが
これトライフォンを二分割した形で
トライフォンを前半部分と後半部分に分ける形となっております
三分の一音素は同様にトライフォンを三分割して
この中心部分をですねモデル化した形となります
ＳＰＳなんですがこちらは
音素の中心部分とあとは音素間の
遷移部分わたりの部分をモデル化しているという形になります
さらに
破裂音ですねの直前にでる無音部分
についてもモデル化をしているということになります
これらのサブワードの検索性能を
示したいと思います実験データについては後で示したいと思います
こちらを見ますと従来の
 モノフォンやトライフォンと比べまして性能がよくなっているということが分かります
次に検索方式
としてすでに提案しているものとして
複数のサブワードの検索結果を統合による検索方式
というものを提案しておりますこちら 先ほど示しました各サブワードの検索結果
の統合による検索方式で
統合することによって検索結果に含まれている誤検出等を総合的にカバーすると
いう方式となります
こちらの表を見ていただきたいのですがこちらは
検索語ごとの検索性能になります
先ほど示した性能が一番下となっております
こちらは平均的な性能となっております平均的な性能では二分の一音素が一番高い
のですが検索語によってはトライフォンですとか三分の一ＳＰＳが高い
というようなことがあってこの表に示すとおり検索性能にばらつきがみられます
この結果をみると多様な結果がサブワードごとに得られているということで
統合することによって検索精度が改善するのではないかということが予想できます
本研究においてもこのサブワードの
複数サブワードの統合方式を用いております
この統合方式の概要について述べたいと思います
まず検索対象の音声ドキュメントは発音区間ごとに分割をしておきます
その区間ごとに各サブワードでサブワード認識を行いまして
このようモノフォン系列トライフォン系列
二分の一といったような形で保存をしておきます
検索語は変換規則テキストで与えて
変換規則に従いまして同様にモノフォントライフォン二分の一といったように変換を行います
同じサブワード間で
連続ＤＰでマッチングを行います
その結果この発話区間とそのＤＰ距離がこのように得られます
このこの図に示すように複数のサブワードでの検索結果が得られます
それで例えば
すいません統合する場合なんですがこちらの式を用いて
ある区間この場合はAですがモノフォンの ＤＰ距離
にアルファという重みを掛けて
掛けるというようなかたちで線形結合のかたちで統合を行います
その結果このように
すいませんちょっと見づらいんですがラージＤといことで統合距離
としていますがこの距離に従って再度発話区間が順位付けされてユーザーに提示されるというかたちになります
重み先ほどアルファとしていましたがその設定方法として
事前に定めておいた重みを設定して統合する方式ということで単純この方法を単純線形統合と呼んでおります
例えばモノフォンとトライフォンを統合する場合
モノフォンに零．三トライフォンに零．七といったかたちで与えます
この方式ではすべての発話区間において
同じ
重みを与えるかつ固定の重みを与えるという方式になります
ただこの発話区間すべてに対して
この重みが適切最適であるとは限らないという風に考えます
そこで
私が昨年音響学会で発表させていただきましたが
信頼度を用いて重みを決定する
という方法を提案しております
こちら先ほどと同じ状況で
この認識の信頼度の大きさに従って
重みを動的に変えるというやり方となりますこの場合ですと
モノフォン
の信頼度とトライフォンの信頼度を比較して
トライフォンの信頼度が高いのでトライフォンにこの区間Ａでは
大きな重みを与えると
ゆうやり方になります
Ｂではその逆で
モノフォン認識の信頼度が高いのでモノフォンに大きな重みを与えるとうやりかたとなります
このように区間ごとに信頼度に基づいて動的に重みを設定します
そこで発話区間における信頼度を区間信頼度として定義します
このような状況を仮定します検索語はＡＢＣとして与えられているとします
この検索語と発話区間のサブワードモデル系列を
連続ＤＰでマッチングするとこの対応区間として
要は検索語と最も類似している区間が得られます
この対応区間のサブワードモデル系列がＡＤＢＥだったとします
このふたつのサブワードモデル系列間をＤＰ法でアライメントをとります
その結果このように
ＤＰアライメント結果が得られまして一番は検索語で対応区間対応区間にそれぞれ
デコーダーから与えられる信頼度が付与されております
この結果から
検索語と一致するものを正解一致しない置換誤りですとか
あとは対応区間のみに現れる挿入誤りあとは検索語のみにある
脱落誤り
等を決定します
その結果からこのような式を用いて区間信頼度を計算します
まず分子の第一項が正解モデルの信頼度の総和です
こちらの括弧の中ですが置換誤りと挿入誤りモデルの信頼度の総和こちらペナルティとして
用いていましてこの置換誤りですとか挿入誤りが高い場合には
その区間にはその検索語以外がある可能性があるのでそれはペナルティとして減算をします
分母が正解置換挿入脱落の数で平均をとるようなかたちとなります
こちらのベーターがペナルティの影響を変化させるケースとして
用いております
こちらの
この区間信頼度の大きさに応じて重みを決定をいたします
ここから本研究での提案する内容になるんですが
複数音響言語モデルの検索結果統合の検討ということとなります
今まで複数のサブワード検索結果統合ということで説明をしてきました
これはサブワードごとに得られる多様な検索結果を統合することによって性能改善を図るというものでした
そこで本研究でもその多様な検索結果を得るために
複数の音響モデルや言語モデルを用いることを考えます
ここで
その多様な結果を得るためにはどうすればいいかというかそういうことを考えますこちらに示しているのがサブワード検索の枠組みとなります
このサブワード検索結果
ですがはこちらはこのサブワード認識結果
に依存して結構変わってくる
と考えられます
この認識結果ですがこちらは認識の際の音響モデルですとか言語モデルに影響を受ける
変わってくると考えられます
そこでそちらの学習データが異なれば
多様な検索結果が得られるのではないかと期待できます
そこでこの図に示すように学習データをたくさん用意しまして
それらで音響モデル言語モデルを学習しますそれぞれで サブワード認識と照合を行いまして
こちらに示すように多様な
結果が得られるとします
こちらの
結果を統合することによって
精度の改善を図るというかたち
になります
これを
この方式を複数のサブワードの場合に適用しまして
単一のモデルを用いる場合よりも高い精度を
を目指します
予備実験といたしまして言語モデルを変更した場合の検索性能について調査をしました
モノフォンモデルを用いましてＪＮＡＳとＣＳＪでそれぞれ言語モデルを学習しております
この結果すいません一番下が平均的な性能でそれほど変わらない結果となっております
こちらの結果を見ますと
その検索性能にばらつきが見られまして
多様な結果が得られていると
いうことがわかります統合によって相補効果が期待できるのではないかと
考えられます
 そこで本研究では言語モデルに着目しまして
複数サブワードと複数言語モデルの検索結果統合というものを検討いたします
用いる言語モデルですが
この三つのデータを用いて構築いたします
 一つ目ががＪＮＡＳ
となります二つ目がＣＳＪ
三つ目がＷＥＢ辞書ということで百二十万単語の辞書の読み系列を用います
これはＷＥＢから収集された単語から構築しております
評価実験に移りたいと思います
音響モデルはＪＮＡＳで学習しまして言語モデルはバイグラムと後ろ向きトライグラムをそれぞれ作っております
検索対象はＣＳＪの約十三時間のデータで検索語は五十件
専門用語など五十件を用います
評価指標は平均適合率の平均値を用いています認識エンジンはＪｕｌｉｕｓを用います
 評価実験の方法なんですが
クロスバリエーションにより評価を行います
単純線形統合における重みの組み合わせとあとは区間信頼度におけるパラメータとしてベータがありまして
こちらの最適な値で
評価を行うためです
検索語五十件あるんですが
五分割をして
評価を行っております
 まず初めに言語モデル別の検索性能を示します
こちらを
 それぞれＪＮＡＳＣＳＪＷＥＢ辞書の結果となっております
 こちらを見ますと
二分の一音素と三分の一音素とＳＰＳトライフォンモノフォンの順で性能が高くなって
います
次に
ＣＳＪの言語モデルを用いて複数のサブワードの検索結果
を統合した場合の性能について示します
 
一番上にあるのがサブワード単体での
最良の性能となります
こちらを見ますと単体の場合と比べて統合することによって検索性能が改善しているということが分かります
さらにその単純なやり方ではなく信頼度を用いることで
ちょっと変わらない場合もあったんですがほとんどの場合で約一二％程度の性能が改善されております
このことからその統合の効果
ですとかあとは区間信頼度を用いることの効果というものを確認できます
またその組み合わせの数が多いほど検索性能が改善する傾向がありました
上三つが二つ統合する場合で
こちらが三つ四つとなるんですが
その組み合わせの数が多くなるほど性能が改善する傾向が
ありまして
数が多いほど相補の効果が大きくなる
と考えられます
次にサブワード一つでＪＮＡＳと言語モデルとＣＳＪの言語モデルの検索結果を統合した場合の性能
を示します
こちらの単体最良とありますのがＪＮＡＳとＣＳＪでの
最良値となります
こちらの単体最良値と比べますと統合することによって一から四％程度ですね
の性能が
改善しております
この結果から
複数の言語モデルを用いることで
性能を改善しているということが分かります
さらにＷＥＢ辞書 の言語モデルを追加した場合の性能ですが
単体最良は先ほどと同じで 三つの言語モデルでの最良値となります
こっちの白いところが ＪＮＡＳと CS先ほど示した結果になります
色がついているのがＷＥＢ辞書を追加した場合の性能です
まず単純線形統合の場合なんですが
すいません半数以上の組み合わせでではなくてサブワードで一％前後改善
しております
また信頼度を用いた場合にはすべてのサブワードで改善がありまして
最大でトライフォンの場合ですが三％程度改善しております
次に複数のサブワードに
適用した場合の性能について示します
言語モデルは ＪＮＡＳとＣＳＪになります
 こちらがサブワードの組み合わせなんですが
トライフォンの場合ＪＮＡＳの性能がちょっと低かったので今回はＣＳＪのみを統合しております
こちらを見ますと
まず単純線形統合では
半数以上の組み合わせで一％程度改善をしております
ＣＳＪのみの場合と比べて
一％程度改善しております
 信頼度を用いた場合にはすべての組み合わせで一から二％程度改善
となっておりまして
この結果から複数のサブワードの場合でも複数の言語モデルを用いる
ことの効果を確認できました
次にＷＥＢ辞書を追加した場合の性能になります
こちらの場合も同様にトライフォンはＣＳＪのみを用いております
まずＪＮＡＳとすいません単純線形統合の場合ですが
ＪＮＡＳとＣＳＪのみと比べまして比較しますと
性能はほぼ同じとなっておりますこの原因といたしまして
今回単純線形統合では重みを零.一きざみで設定してまして
さらに重みがゼロを含む組み合わせは除外して実験を行っております
つまりこの場合ですと
検索結果を十個使っていることになるんですが
全て零．一という
均等な重みなっていて性能はそれほど
改善しなかったのではないかというふうに考えて
思っております
次に信頼度を使った場合
ですが ちょっと変わらない場合も
ほとんど変わらない場合もあるんですが
最大で一％程度
改善する結果となりました
 この原因といたしまして信頼度で
その信頼性の高いところのみを統合していったためであるというふうに考えます
 最大で今回八十二．八九％ということで性能が得られまして
サブワード単体の最良値よりも七．四％改善をしまして
言語モデル単体の最良値よりも二．零％改善する結果となりました
最後に検索時間について述べたいと思います
 こちらがサブワード単体の検索時間 こちらのグラフが統合処理のみに要する時間となります
信頼度を用いる場合このアライメントですとかその
発話区間ごとに重みを計算するので
やや
性能
検索時間掛かるですが
掛かりますアライメントは照合時間の平均すると約二割程度の増加で
増加ですのでそれほど大きな
ウエイトではないかなというふうに思っております
仮に二分の一三分の一音素ＳＰＳについて
言語モデルを三つ用いまして区間信頼度を使って統合する場合一件当たり四
約四秒程度
検索に時間がかかることになります
これの対策といたしまして
ＣＰＵをたくさん用いまして処理を並列化することを考えます
今回仮に三つ言語モデルを用いますので三つのＣＰＵで並列化することで
三分の一程度に抑えられるのではないかというふうに考えます
 まとめます
本研究では複数のサブワード複数言語モデルの検索結果統合による音声中の検索語検出において
高精度化する方式の提案を行いました
 最大で八十二．八九％の検索性能を得ることができサブワード単体と比べ
て七％程度
言語モデル単体と比べて二％程度性能が改善しまして
提案方式の有効性というものを確認出来ました
今後の課題なんですが検索性能の高精度化ということで
今回三つ用いましたがそれ以上の数の言語モデル
を用いることあと音響モデル今回できなかったので複数の音響モデル特にＣＳＪを用いる
ということを今後
進めていきたいと思っております
またサブワード認識処理の負荷が
その数を増やすごとに大きくなっていくので
少数最良での結果が得られるような
サブワードですとか言語モデルの選択方法の検討も行っていきたいと考えております
以上で発表を終わります
