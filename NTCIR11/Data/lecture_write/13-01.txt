はいそれではサフィックスアレイを用いた高速音声検索における検索閾値の付与法の改良と題しまして豊橋技術科学大学のが発表致します
近年インターネットの高速化やスマートフォンの普及などにより音声や動画像のコンテンツを利用する機会が増えてきていますこのような大量の音声や動画像のコンテンツを効率的に利用するためには大規模な音声データベースに対する高速なキーワード検索の技術が必要になりますこうした背景から我々はサフィックスアレイという
データ構造を用いた高速音声検索語検出の提案をしてきました
サフィックスアレイとは主に文字列検索に
データ構造です
テキスト中のすべてのサフィックスを辞書順にソートして配列にしたものをいいます
図に表示されているのは
アブラカダブラ
という文字列を
文字列のサフィックスアレイを示しています
右のインデックスは
左のサフィックスがテキスト中のどの位置から始まるかというのを示しています
サフィックスアレイの特徴としては
任意の文字列を効率的に検索をすることができるという点があります
例えばブラという
文字列を検索する場合
サフィックスアレイを二分探索することで
インデックスの八と一の位置に
出現することが分かります
また実際には
辞書順に並べられたインデックスの並びだけを保持していれば良いため
必要なデータ領域が小さいという特徴もあります
しかしオリジナルのサフィックスアレイは完全位置検索を
想定しています
音声の認識誤りに対応した検索を行うためには
何らかの
曖昧検索を導入する必要があります
そこで我々は
らが
提案したサフィックスアレイを用いたテキスト曖昧検索を導入しています
この手法では
サフィックスアレイを木構造に見立てて
ＤＰマッチングを行いながら探索を行うことで
文字の誤りや類似性を考慮した検索を行うことが可能となっています
また探索ノードまでのＤＰマッチングの距離が閾値を超えた場合
それ以降の探索を打ち切ることで
効率的に木を探索することが可能となっています
ここで
サフィックスアレイの探索に使用するＤＰマッチングの
累積距離の定義について説明をします
定義式はご覧のようになっています
音声認識では音素によって
誤りやすさが異なるため
ＤＰマッチングにおける局所距離には
局所距離をこれに対応させる必要があります
そこで我々の検索手法では
音素弁別特徴を利用しています
音素弁別特徴とは
調音特徴という
調音様式と調音位置から音素を分別したものを
物のことをいいます
各音素間でこの
素性のハミング距離を求めることで
ＤＰマッチング局所距離の
局所距離としています
しかしサフィックスアレイ
に対してＤＰマッチングを
行って検索を行う手法は
閾値に対して処理時間が
指数関数的に増加してしまうという問題があります
閾値は検索キーワードの長さに比例して増加させる必要があるため
検索キーワード長に比例して処理時間が
指数関数的に増加してしまうという問題があります
そこで我々は
検索キーワードを分割して検索を行うことでこの処理時間の爆発を防いでいます
この手法ではキーワードを分割して検索した場合に
キーワードを分割せずに検索した場合の
検索した場合と同様の検索結果が得られるように
四つのステップで検索を行っています
まず
キーワードを分割します
次に
分割した各分割キーワードで
サフィックスアレイの探索を行います
次に検索で得られた
交互の出現位置が
音素列上で
近い
組を見つけます
最後に見つかった出現位置
において
元の検索キーワードとのＤＰマッチングを行って
その累積距離が閾値以下ならば最終的な検索結果として出力しています
また二番目の検索の際に
各分割キーワードの閾値は元の検索キーワードの
閾値を等分割した
値に設定しています
つまり各分割キーワードに
与えられる閾値は等しいということになります
また
我々の検索手法では
閾値を
低く設定して検索をした場合
短い処理時間で
精度の高い検索結果が
得られます
一方で閾値を大きくした
大きく設定して検索を行った場合
多くの検索結果が得られますが
長い処理時間
が掛かってしまうという特徴があります
そこで始めは低い閾値で検索を行って
精度の高い
検索結果を即座にユーザーに提示して
ユーザーがその結果を確認している間に
閾値を上げて再び検索を行うことで
レスポンス性に優れた
検索を行う
行うことを実現しています
この手法とキーワード分割の
手法
によって高速な音声検索語検出を実現しています
しかしキーワード分割検索の検証のステップにおいて
一つ問題点があります
今スライドに示しているグラフは
十音素から十八音素の
検索キーワード
三十個
を使って検索した時の
各ステップの処理時間の割合とその合計
を示しています
グラフからわかるように
一音素当たりの閾値が上がるにつれて
検証の処理時間の割合が増加していることが分かります
検証の処理時間は
二番目の検索のステップで現れる
候補の数に依存しています
候補の数だけで検証を行う必要があるため
この検索の際に
大量の候補が現れた場合
検証の処理時間が
飛躍的に増大してしまうという問題点があります
現在の検索の手法では
各分割キーワードに与える閾値は
等しく与えられています
しかしこの場合
現れる候補数にばらつきが生まれる場合があることが分かりました
このため
一部の分割キーワードで大量の候補が得られてしまい
検証のステップで
処理時間が増大し
結果として全体の処理時間が
大きくなってしまう
という問題がありました
そこで今回は
検索時に得られる各分割キーワードに現れる候補数のばらつきを抑えることで
合計の
候補数の総数を抑えて
検証にかかる処理時間を削減することで
より高速な音声検索を
検索語検出を
目指すことを研究目的としています
では次に
候補数を削減する手法について
図の例を使って説明をします
この図は
キーワード全体の閾値をｑとして
分割数を
三とした場合の検索
です
上の図は従来の
閾値を等しく与えて
検索した場合
下は
新しい手法で
閾値を調整した場合
の図を示しています
上の図では
豊という
分割キーワードには候補数があまり
現れていません
一方で
市という
分割キーワードでは大量の
候補数が現れています
そこで
豊の閾値を
多めに与えて
市の閾値を
少なめに与えることで
候補数のばらつきを抑えることを考えます
結果として合計の候補数は
百四十から百に
減り検証の時間が
減らせることが分かります
このように
今まで
分割キーワードに与える閾値を
等しく与えていたものを
各分割キーワードに個別に閾値を与えることで
候補数のばらつきを抑えることを考えます
しかし
そこで
候補数
閾値を設定する場合にどのように
閾値を設定すればいいのかという問題があります
そこで我々の検索手法では
反復深化的探索アルゴリズムを用いていることから
まず
低い閾値で検索した場合の
候補数の
出現数
出現数から
次の
検索で現れる
候補数を推測します
この推測した値に基づいて閾値を
設定することで
現在の検索での
候補数のばらつきを抑えることを考えます
では
候補数を
どのように
ということを考えます
サフィックスアレイの探索で得られる候補数は
サフィックスアレイの探索範囲に
比例すると考えられます
サフィックスアレイの探索範囲は
閾値に対して指数的に
増えていくため
次のような式で表わされると考えます
次に各分割キー
ワードに現れる候補数
のばらつきを抑えるためには
この式
この式が同一になるように
閾値を設定すればよいため
次のような式が現れます
最後にキーワード分割の
キーワード分割検索の結果が
分割せずに検索した時の結果と
同様となるための条件式
を使ってこれらの式を使って
各分割キーワードに与える閾値を調整することを
考えます
しかし
この手法では候補数の
推測の精度が不十分であることが分かりました
理由としては
サフィックスアレイの探索の際に使用するＤＰマッチングの距離の定義が
二種類
あることが
原因だと考えられます
まず一つ目は
置換誤りの
距離の定義です
これは弁別特徴のハミング距離に基づく定義で
基づいて定義しています
次にｉとｄ
の挿入脱落ペナルティの値です
これらは
最も検索性能が良くなる値に
値になるように実験的に決定しています
こうした二種類の
定義があるため
先程の式では一つの式で
候補数を推測しようとしたために正確な推測が
出来なかったということが考えられます
そこでこの二種類の距離定義を考慮した候補数の推測
をすることを考えます
まず
最初の括弧一の
このように変更します
まず第一項は
挿入脱落のみの
候補数の推測の式になります
そして第二項の式は
置換誤りを含んだ候補数の推測になります
このように二種類の
候補数に分けて推測することで
推測精度を上げることを考えます
この括弧一の式に
の変更に伴って括弧二式の
二式はこのように変更になります
括弧三の式に関しては変更ありません
これらの式は原稿に
詳しく記述されているのでそちらをご覧ください
このような手法を用いて
評価実験を行いました
実験環境はご覧の通りとなっています
検索対象の音声データは
ＣＳＪの男女話者六百四時間を使用しました
また音声の
音声認識器にはＪｕｌｉｕｓを用いています
検索に使用したキーワードのセットは
ＮＴＣＩＲ９の
スポークンドックテストコレクションの
ＳＴＤオールタスク用検索セットの内
キーワード分割が必要となる十音素以上の検索語三十個を使用しました
またＪｕｌｉｕｓにより音声認識では
言語モデルにウェブから学習した語彙数六万のモデルを
音響モデルに
不特定話者ＰＴＭのトライフォンモデルを使用しました
またＤＰマッチングの際の挿入脱落ペナルティは
それぞれ三と設定しています
実験方法としましては
まず閾値を
均等に調整して検索を行った場合
そして
推測した候補数に基づいて
閾値を調整して検索を行った場合
最後に候補数を二種類に分けて
閾値を調整して検索を行った場合
で検索をそれぞれ行いました
そしてその結果から
検索時間
候補数
そして候補数の推測精度について評価を行いました
まず候補数についてですが
今示している表が三つの手法での
合計の候補数の比較
の表になっています
表からわかるように
従来の
閾値を均等に
調整して
検索を行う手法に比べて
候補数を推測して閾値を調整する手法が
候補数を大きく削減できていることが分かります
また
推測方法二の
手法では推測方法一の
手法に比べても
候補数を
削減できていることがわかり
次に
検索時間の
評価です
これも
同様に
均等に
閾値を調整する手法に比べて
二つの推測を
候補数に基づいて推測を行う
推測した候補数に基づいて閾値を調整する
手法が
良い結果が得られていることが分かります
特に
閾値一．二から
一音素当たりの閾値一．二から一．八
の結果は均等手法に比べて
推測方法二の手法が
約三十％検索時間を
短縮できていることが分かりました
このような結果から
候補数を推測して
閾値を調整する手法は効果的である
といえます
しかし
個々の検索結果を見てみると
候補数が増加して
検索速度が低下してしまった場合もありました
この理由としては
候補数の推測があくまで統計的なデータから求めたものであるため
その統計から大きく外れるようなキーワードは
適切に推測できていない
ということが考えられます
このため
より精度の高い
推測を行うためには
キーワードが含む音素列に基づいた候補数の推測をする必要があると考えられます
次に候補数の推測成分
についての評価です
表からわかるように
推測方法一に比べて推測方法二の
結果が
推測精度が高いことが分かります
特に閾値
推測値分の実測値の対数というのは
実際に
実際に現れた候補数
の対数と
すいません
実際に現れた候補数
候補数と推測値
の比率の対数
となっています
分散はその分散となっています
従って値が両方とも〇に近いほど
検索の精度が
高いということが分かります
そして推測値分の実測値の対数に関しては
閾値一．四から一．八で推測方法二の
方が
高い結果を示しています
また分散に関しては
どの音素当たり閾値でも
推測方法二が上回っています
また推測方法二の手法を詳しく見てみると
挿入脱落のみの候補数の推測精度が
精度の方が置換誤りを含む
候補数の推測精度より
高い精度を示していることが分かりました
これは挿入脱落ペナルティ
挿入脱落のみ
の候補数というのが
閾値の倍数の時のみ
変化するという特徴があるため
安定して高い
推測を行うことができたためだと考えられます
最後にまとめはこのようになっています
以上で発表を終わります
ご清聴ありがとうございました
