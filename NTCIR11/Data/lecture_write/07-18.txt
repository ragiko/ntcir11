神戸大学のですと引き続きまして発表させて頂きますタイトルはブースティングを用いた野球実況中継に対するメタデータの作成というふうになっております
研究の背景はまた先ほどと同じなんですけれども
すいません
こんどは構造化ではなくてメタデータを生成しようということになっております
メタデータなんですけれどもこれは先ほどのストライクだとかアウトだとかとは違いまして
と今は実況しているのかそれとも解説者と
会話をしているのか
もしくは実況の中身としてストライクと言っているのかボールと言っているのかアウトと言っているのかといったようなことを
ラベルを付与していこうと
いう風になっています
でラベルは教師ありのコーパスを作りましてそこから学習を行っています
認識結果からメタタグの種別を推定する問題となりますので
一種のテキスト分類問題となるかなというふうに思います
でテキスト分類の手法なんですけれどもベイズを使うもしくはサポートベクターマシンを使うまいろんな方法が考えられると思うんですけれども
十二月のＳＬＰでアダブーストを用いたシステムを要求識別ということで
雑談を行いながら時々システムに対してなになにをしてとか写真を撮ってとかっていうようなことを
スイッチを使わずに音声認識結果から
識別すると
いう発表したんですけれども
まーこの研究において適合率再現率ともにだいだい零点九以上のかなり高い値が得られていましたので本研究でもこのブースティングを用いた手法というものが
使えるのではないのかということで
ブースティングを用いたメタデータの生成ということになっております
でブースティングの概要なんですけれどもブースティングは複数の識別器を組み合わせるアンサンブル学習の一つとなっています
で基本的に識別はその重み付き投票によって
クラスもプラス一かクラスのマイナス一か二値の識別を
行う手法です
でこの
重み付き投票なんですけれども
まず全体に
弱識別器というそれほど一つ一つは
精度の高くない識別器が無数にありまして
でその中から
例えば
Ｂがある場合Ｂがある場合Ｂがあればクラスの真のクラスに
投票すると
Ｂが
ない場合ですねこれが否定されるような場合には
Ｂと偽のクラスに
投票するというような
識別器になっています
で逆にまここでＢがないというものを選択した場合には
ない場合にはプラス一に投票しある場合にはマイナス一に投票すると
いうような感じになります
でこん時に一票づつ投票するわけでなくて例えば零点五とか一点なんぼとか
いうような重み付き投票を行い
でブースティングではこの弱識別器とたくさんある中からどれを使うということと
例えばある弱識別器を用いた場合に
どのくらいの重みで投票を行うかということを学習する手法になります
ブースティングを用いたテキスト分類というものも提案されていましてこの中ではディシジョンスタンプという弱識別器が用いられています
ディシジョンスタンプは単純で高速な手法と
言えると思います
ディジョンスタンプの中身というのは
非常に
単純な手法でして
単語ある単語Ａが
有るか無いかというこの二つだけによって識別を行います
有るという弱識別器を選択した場合には
あればプラスプラス一に
無ければマイナス一に無いというものを選択した場合には
無ければプラス一に有ればマイナス一に投票すると
いうふうになっています
でディシジョンスタンプ
をと弱識別器として用いる場合には
注目する単語Ａとしてどの単語を使うかということと
この投票を行うときの重み
を学習すればいいということになり
でここでちょっと学習の手順を簡単に説明したいと思います
でこれがコーパスでしてＡＢというのがある単語だというふうに考えてください
でこのプラスとマイナスというのはクラスになっています
でプラスのクラスとマイナスのクラスがありまして
でそれぞれ単語ＡＢＣＤＡＣＥＤＣＣＥで
で構成されています
でまずそれぞれのサンプル
で学習データもそれぞれの発話に対して
重みを与えるんですけど
最初は全て均等な重みを与えておきます
でそこで最初は均等な重みなので
この中で
分類誤りを最小化するような
を一つ選択します
例えばここでまＡが有れば
プラスであるというような
弱識別器を選択した場合
このこれはＡがあるのでプラスＡが無いのでマイナスＡがあるのでプラス
ＡがないけどもプラスＡが無いのでマイナスということで
これ以外については正しく
分類を行うことができると
いうことで
ここで分類を間違ったものの重みを大きくして分類が正しくできたものの重みというのを相対的に
小さく
小さくします
でこれを繰り返しまして次はこの重みの中で重み付きの
分類分類誤りを最小化するような素性を選択している
いうふうになりますこれを何度繰り返すことによって
識別器を構成すると
いうふうになります
ブースティングというは基本的に二値の分類手法ですので本研究では
だいたい二十一個の
クラスがありますのでクラスに拡張します
でこれは単純にワンバーサスレスト法を用いて
拡張を行っています
ワンバーサスレスト法はまずクラスＡかそれ以外かクラスＢか
それ以外かというふうに
識別器をクラスの数だけ構成しまして
まず識別器Ａの中だけで
分類を行い投票を行います
でまた識別器Ｂにおいても
クラスＢかそれ以外かで投票を行います
で最終的にこの
以外のほうは無視しまして
クラスＡクラスＢクラスＣとこの中で得票が最大のクラスを
選択することで
マルチクラスの識別を行っています
で比較手法としましてＳＶＭも上げたんですけれども
従来手法というよりは一応これもやってみたという感じになっています
サポートベクターマシーンでは
ブースティング先ほど述べましたようにディシジョンスタンプによって単語ベースで
判別するのに対しまして
ＳＶＭでは単語単位ではなくて文章全体の
入力の文章とサポート
サポートベクターとなっている文章の
全体の
特徴ベクトルの内積をベースにして
分類を行いますので
単語ベースというよりは文章ベースの判別手法であると言えるかと思います
で実験に用いたコーパスなんですけども先ほどと同じコーパスなんですが
でラジオ音声実況中継音声でこれは約二千二百発話になっています
でこの二千二百発話は
書き起こしコーパスの句点で分割して
二千二百個のファイルを作って認識を行っています
発話時間はトータルで
約一時間半で異なり単語数は３千単語となっています
でメタタグ情報メタデータのプラスの数なんですけども二十一種類となっていまして
二十一種類ちょっと全部書けなかったんですけどおもなタグとしましては実況一般というのは普通の
実況ですね
でそれと解説者との会話それからピッチャーが投げたという
瞬間
それからバッターが打ったり
して何かしらのイベントが起こっていると
いう四つをあげています他には
ストライクカウントが増えるとかボールカウントが増えるとかファールになったとか
アウトになったとかと
いったようなタグがあります
でここで
実況一般と会話のこの二つだけ全体の発話の約半分ぐらいを
占めるというふうになっています
でこの中はなかなか細かくタグを付けにくくて
まとめた全てまとめたタグになっています
で
そのタグも発話例なんですけれども実況一般としましては
ヤクルト二十三回戦この甲子園球場ではなんたらという続くような発話は
先頭バッターを打ち取りましたというような実況があります
で会話
の例としましては
これは解説者に
先ほどの球は速いですかというような質問をおこなったりとか
文句なしの立ち上がりですねというような
発話がみられました
で投球に関しては第一球を投げたとか三球目とかそのような発話になっています
イベントも打ちました一二塁間破ったといったような発話になっています
ホームラン
など
タグを
付与しやすいものについては
イベントには含めずに個別のタグを設定してます
実験なんですけれどもまずはその音声認識結果ではなくて書き起こしテキストがありますのでそのクリーンのノイズの含まれていない書き起こしテキストに対して
識別実験を行います
アダブーストの弱
識別器としては
ディシジョンスタンプなんですけれどもユニグラムが存在するかどうか
もしくはバイグラムが存在するかどうかというものを素性として学習を行っています
アダブーストのユニグラムの場合の
素性の例ですけれども
例えば実況一般であればのがあるとかますがあるような場合には実況一般でこの赤くなっている部分は
これがなければ実況一般という
素性になっています
ねがない場合
またがある場合というのは実況一般であるとこの後にもまだとたくさん ずらっと続くんですけどだいだい
だいだい代表して四つくらいをあげています
会話の場合であればえーとかたはい
それから投球の場合も
ねがない
いうような特徴があります
このねがないという部分なんですけれども
だいたい実況のなかではなになにですねという発話はあまり見られませんでして
その解説者との会話の
中で多く
なになにですねという
発話が多く見られましたそのため
実況一般や投球のなかではねがなければという条件が含まれているものと考えられます
全体で異なり単語数三千語のうち約四百五十語くらいが
この識別に関与する素性として選択されていました
でＳＶＭ
については
二次の多項式カーネルを用いて
特徴量は単語の頻度ベクトルとしています
ここでは全部一か零になっているんですけれども二回単語が現れればここは二になるというふうにしています
でテンフォルドの交差検定により評価を行いました
その結果なんですけどもまず全体の正解率というのが全ての二十一種類のタグが正しく付与できているかどうか
という正解率になっています
でこれがだいたい全ての手法において零点
九
零点九三から零点九四ぐらいの値となっています
で実況一般会話それほとんどの
ほとんどのタグについて
約九割程度の精度が得られています
特に投球についてはかなり高い値が得られています
でこの先ほどのクリーンの結果をだいたいの上限値としまして音声認識結果に対する判別を行いました
音声認識の条件は
でこれも先ほどと同じになっています
ただし認識自体は通常のＪｕｌｉｕｓを用いて
普通に認識結果をワンベストで出しています
で音響モデルはＣＳＪをベースに話者適応してもので
オープンとクローズドと両方やったんですけども
オープンのものでも一応話者は同じというふうになっています
言語モデルは書き起こしから学習しています
で未知語はとりあえずは未知語なしのもので実験をおこなっています
言語モデルをオープンにした場合クローズにした場合
音響モデルオープンの場合クローズドの場合で
に単語正解制度と
キーワードのＦ値を
あげています
こちらが左側が単語正解精度なんですけども両方オープンの場合で
零点六五と六十五パーセントくらい
両方クローズにした場合で七十八点三パーセントぐらいというふうになっています
ただし全体の単語認識単語正解精度は
六割から八割くらいなんですけどもキーワードのＦ値については八割から九割ぐらいの値が得られています
でここでキーワードというのがすいませんちょっと戻りますけれども
ここのこのクリーンのテキストで
クリーンのテキストを判別するときに得られた
アダブーストの素性全て四百五十語をキーワードとしてます
すいませんちょっと忘れていました
とりあえずは両方オープンの
場合に注目して実験を行いました
で先ほどと同じようにテンフォルドの交差検定により評価しています
全体の正解率が先ほど九割ちょっとあったのが八割
八割五分から八割七分
ぐらいまで低下しています
一応ちょっとわかりやすいように先ほどの結果をこの薄いピンクで
重ねてみると
だいたい
少し下がっているかなというのがわかると思います
ただし右端のイベントというところについては
大幅に低下がみられました
でこれはそのイベントというのが打ったとか
ゴロが転がったりだとか
ちょっと
ボールが遠くに飛んでいくような
場合の発話ですので
アナウンサーがかなり興奮して発話を行うために
音声認識精度が著しく低下しているのが原因であると考えられます
考察先ほどですけれどもだいたい音声認識結果でも
八割以上場合によっては八割五分くらいの
高い性能が得られています
ただし実況では少し程度が
少し大きく性能が低下していると
いうような結果が得られました
でブースティングを用いた場合でもＳＶＭでも用いた場合でもそれほど精度は変わらないかなと
いう感じになっています
一応
実験で得られた結果としてはアダブーストのバイグラムの場合が
一番いい結果だったんですけれどもＳＶＭの場合はカーネルのパラメータとの調整がかなり多数ありますので
まその辺を
細かく探せば
もっといい場合はあるかもしれないと
ということは言えると思いますただし学習はブースティングのほうがかなり高速ですので
ブースティングのほうが簡単に使えるかなという感想です
で次にこのシステムがどのくらい頑健に動くのかという点について
評価を行いました
評価は二種類で認識性能が低下した場合に
正しく動くのかということと
未知語が増えてきた場合に正しく動くのかといいう点二点について
評価を行いました
で認識性能の低下に対する頑健性については先ほどの言語モデル音響モデルのオープンとクローズの表があったと思うんですけれども
あの四つを使いましてクローズクローズの場合から順番にオープンオープンまで下げていって
どのくらい精度が保てるかという点について調査しています
未知語については
認識辞書からランダムに単語を十パーセント二十パーセントという割合で削除しています
ただし識別に関連しない単語だけを削除していまして
ブースティングによって得られたキーワードについては削除しないようにしています
で
削除した後の識別なんですけれども
削除した後認識を行ってそこでもう一度学習をするわけではなくて
未知語なしのモデルで
ブースティングの学習を行いまして
その後
未知語を
未知語を作って
認識した後未知語なしのモデルを使って識別を行っています
まず認識への低下に対する頑健性について結果を述べます
単語正解精度とメタタグの正解率なんですけども横軸が単語正解精度で縦が
認識率となっています
これは全体の認識率になっています
認識結果が
七十八から六十五まで下がっても
このピンクの認識結果を用いて学習した場合はほとんど下がっていないということが言えると思います
でクリーンテキストで学習した場合に
クリーンテキストで学習しておいて
認識した場合認識結果を認識した場合なんですけれどもこれについては
低下していく傾向見られました
ただし
認識結果で学習した場合もこのあとずっと見ていけば下がっていくだろうとは思うんですけれども
ここまでは
かなり保てているのかなと
いうふうに言えると思います
ただしキーワードのＦ値を見てみますと
一番いい場合では零点八八一番悪い場合でも零点八ぐらいのキーワードＦ値が得られていますので
キーワードについてはそういうほど低下していないのかなというふうに考えられます
次に未知語率と正解率についてです
ここで横軸が未知語率なんですけどもこれ通常の未知語率とは少し違うで辞書から何パーセントの単語を削除したかということになっていますので
たとえば
ここで削除しているような単語というのはキーワードとして選択されていない単語ですので
それほど出てくる頻度の高い
単語は削除されていないのかなというふうに考えています
それでも
五十パーセント辞書から半分の単語を削除してしまった場合でも
かなり高い
正解率が得られていると
言えると思います
メタタグの正解率青のほうですけれども
メタタグの正解率もほとんど低下しないと言ってもいいのではないかと思います
それから未知語が
どのくらいキーワードに湧き出して認識されているか
についてですけれども
これは
未知語率を上げていくほど
性能が良くなるという結果になっているんですけれども
これは
誤差のと
いう感じはしています
未知語率が十パーセントのときで約三百単語五十パーセントのときで
千五百単語ですので
未知語の数が多くなるにしたがって実験の精度がちょっと良くなって正確な値に近づいたのかなというような感想を持っています
以上いやまとめの考察ですけれども
頑健性についても単語正解精度が多少低下しても
未知語じゃない
すいません
メタタグの推定はかなり頑健に行われていると言えると思います
ただし単語正解精度は六十五位まで低下するんですけれどもキーワードについては零点八位を保っています
未知語が増えた場合についても頑健に推定することができていると考えられと思います
これは識別に関与しない単語というものが三千語のうち
二千五百語ぐらいが識別に関与しない単語になっているんですけれども
この
これらの単語がガベージモデルとして
働くことによって
頑健に働いているのかなというふうに考えれています
全体のまとめですけれども
ブースティングを用いてメタデータを作成致しました
音声認識結果を利用して作成したんですけれども
単語認識精度が六十五パーセント程度のタスクにおいて
メタタグの識別率が零点八四個別タグのＦ値は零点八から零点九ぐらいと
高い値が得られています
認識性能の低下や未知語に対しても頑健に推定を行うことができていました
今後の課題としましては
と実況のイベントの部分のついてはかなり性能が大幅に低下してしまっていたので
そこについて
何らかの改善が
得られればいいなということと前の発表
ちょっと関連するんですけれども
その状況の推定という部分に応用して
音声認識精度自体の改善につなげられればいいか
いうふうに考えております
以上です
