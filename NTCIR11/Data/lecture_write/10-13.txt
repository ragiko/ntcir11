はいそれでは複数音声認識システムに基づいた音声中の検索語検出方法の検討と
ＣＳＪテストコレクションでの評価という題目で山梨大学のが発表させていただきます
まず本研究の背景と目的ですが先生のほうからも言われたようにＳＴＤの需要というものがあります
それに対していくつかの問題点がありましてそれに対する方法が色んな方面から
検討されています
本研究では
複数の音声認識システムを利用して
このＳＴＤの性能を改善させていこう
というふう
な
形で研究を進めております
本研究のＳＴＤのタスクについて簡単に説明します
本研究では
音声データに対して複数の音声認識システムによって音声認識を行います
その結果に基づいて
形態の違う
異なる
インデックスを数種類構築しておきます
でこれらのインデックスに対しまして検索語はテキストベースで
与えられます
でそれぞれの形態にそれぞれのインデックスの形態に合いました
形式で検索を行い結果として出力する
こういった感じのタスクになっております
はい今回報告させていただく要点について説明します
まず本研究では複数の音声認識システムを利用しております
で実際にこの認識複数使うことがどれだけ
効果的であるかそれを
音声認識率で
評価したところ高い認識性能が得られた
得られましたのでこれらを使って検索用のインデックスどういったものが良いかというものを検討しました
これらのインデックスからどういった方法で検索すればいいかということを検討し
実際に
ＣＳＪのテストコレクションにて
性能を評価しました
結果から見てみます
と未知語に対して大変有効であることが確認されました
有効であると言いましても
リコールにおいての評価になります
特にコンフュージョンネットワークを利用したインデックスにおいて
リコールが八十％
これは未知語に対して八十％ということになりますが
これだけの性能が得られました
まず複数の音声認識システムの
概要について説明します
本研究ではデコーダにＪｕｌｉｕｓを利用して
各モデルを替えることによって複数の音声認識システムを用意しました
本研究では言語モデルを五種類音響モデルを二種類
組み合わせによって
計十通りの音声認識システムを用意しました
言語モデルの方の説明をしますが
一番上の
かな漢字単語単位のトライグラムモデル
これは一般的な音声認識で使われているような
言語モデルになります
続きましてひらがなの単語単位のトライグラムモデル
これは見ていただいたようにすべての単語というものが
ひらがなで表記された
言語モデルになります
続きましてひらがな文字単位の単語ひらがな文字単位の
トライグラムモデルです
これは
ほんとここの例に示してあるように一文字単位で構築された言語モデルになります
次が
ひらがな数文字単位のトライグラムモデル
これが
上と何が違うかといいますと
この単語単位よりも短く一文字文字単位よりは長いという
こういった形の言語モデルになっています
最後に学習なしといったモデルを用意しましてこれはＪｕｌｉｕｓを利用して
擬似的に連続音素を音節認識を行うために用意したものです
音響モデルには
モーラ
タイプのモデルとあとトライフォンタイプのモデルこの二種類を用意しております
これらのモデルなんですがすべて
ＣＳＪのコア以外の講演から学習を行っております
実際に音声認識性能がどの程度改善されたか
ということを示します
音声認識対象の
調査対象の音声ですがＣＳＪのコア講演音声によって
調査を行いました
ちなみにこの音声に対する単語レベルの認識率が
コレクトで七十六．六八％アキュラシーが七十一．九三％という性能になっています
これに対しまして複数の音声認識モデルの結果を音節レベルで評価しました
音節認識率がこちらに示すようになっております
一番左から十種類
音声認識システムを用意しましたのでその中のワンベスト出力で最も良いもの
青いものがその十種類のテンベスト出力で
最も良いもの
青いその隣りの白いものですが
これが十種類のワンベストの出力を組み合わせたときの認識率になっています
一番右の黒いものですがこれは十種類のテンベスト出力を組み合わせたもの
になっています
認識結果が増えるに従ってリコールが改善されてプレシジョンは
下がっていくというような傾向が見られましたが
同じ個数認識結果の個数ですね
ここで言うとテンベストと
十種類のワンベストこれは両方とも十個の
出力によって評価を行うんですが
それを比較しますとリコールだと大体五％以上の
差が出てくる
ということが得られました
これからこの結果から見ますと音節の正解率が向上しましたので
任意のキーワード
見つけられる可能性というものは高くなります
ただしこちらにアキュラシーの方が示しておりますように大量の挿入誤りが発生しております
そのため多くの湧き出し誤り検出が発生する可能性というものが
出てきます
続きましてＳＴＤ用のインデックスを構築しました
本研究ではこのインデックスは六種類用意しております
構築したインデックスはこちらに示すようになっていますが
このインデックスというものは
サブインデックスというものから構成されております
サブインデックスというものなんですがこれは単一の認識結果から生成されます
で
ＳＴＮというものは
異なるインデックスという形態になっておりまして
評価ですがそういうそのこれらのインデックスからの評価ですが
いずれかのサブインデックスで検索語が検出された場合に
評価を行う
こ
一つのインデックスの中でサブインデックスいくつかあるんですが
このサブインデックス
の
二箇所二つのサブインデックスで同じ場所を検出するとそれは一箇所という形で評価は行います
それぞれが含んでいるサブインデックスなんですがこちらに示すような
形になっています
サブインデックスの構成
を説明します
このワード形式ワードというものですが
とテンＳｙｌｌというものですが
これは認識結果をそのまま用いたインデックスになっております
それぞれの形態ですがワードは文字列レベル
Ｓｙｌｌは音節レベルのインデックスとなっております
テンＣＮとＳＴＮですがこれは
それぞれ十個の音節認識結果をコンフュージョンネットワーク化したものになります
これの違いですが
テンＣＮの方は
テンベストの出力単一の認識システムのテンベストの出力を
それぞれコンフュージョンネットワーク化したもの
それが認識システムの数だけある
というのに対してＳＴＮは
十種類の認識システムのワンベストの出力を
コンフュージョンネットワーク化したものという形になります
コンフュージョンネットワークとＳＴＮのイメージですが
一般的なコンフュージョンネットワークのような形にこういった形になっています
このアークに入っている情報ですが今回は音節と
その音節が認識された
音声認識のシステムの種類というものが格納されております
ＳＴＮの構築例を示します
これは音声データがコサインシータという音声を入力した例ですが
十種類の音声認識システムで認識させその出力を
ＤＰマッチングを利用したマルチプルアライメントをとった結果
ここのテーブルに示すような形になります
この得られたテーブルから
この一つの列をアークとして登録していく
最終的な検索用のインデックスが構築される
こういったイメージになります
テンＣＮのほうのコンフュージョンネットワークですが
ここの認識の認識されたシステムの部分というものが
単純にワンベストからテンベストまでという形になります
続きましてこれらが
インデックスを用意しましたので
これらからの検索方法を
どういったものがいいかということを
検討しました
まず用語の検索ですが一般的に用いられるというか一番最初に思いつかれるのが完全一致というものになります
これはワードスポッディングと同じような形になるのですが
ワードレベルでは単純な文字列で個々のコサインというものを見つけてくる
音節レベルのインデックスからでは音節系列を完全一致で見つけてくる
ネットワークからは
初めのほうから見ていってコサ
ときてＮＵＬＬ遷移でい
でＮＵＬＬ遷移んというこういう経路を見つけて
検索を行う
といった方法になります
ですが完全一致ですとやはり探索の限界というものが存在しますこれはコンフュージョンネットワークの例なのですが
実際にこことコサインという
音節系列が存在するんですがここに
ＮＵＬＬ遷移が無く
うまく検索が行えないといったパターンが存在します
単純な認識結果においてもここに挿入誤りが存在して検出が行えないといったパターンは多々あります
これらに対しまして本研究では
キーワードの音節系列でのミスマッチを許容する
といった方法をとります
実際どういったどようどのレベルのミスマッチを許容するかといいますと
音節数四に対して一つだけミスマッチを許容する
といった方法をとりました
ここでいうミスマッチですがこの挿入誤り以外にも置換や脱落誤りに対応しております
認識誤りに対応することによって検出
自体は
良くなるのですが
大量の湧き出し誤りが発生してしまいます
それに対しまして
抑制をする必要があります
今回はコンフュージョンネットワークを利用したインデックスＳＴＮに対しましてこの
フィルタを構築しそれを
それによって検索を行ってみました
パラメータ
湧き出し誤り抑制用の
パラメータとしましてはＳＴＮの探索パラメータと利用しました
このパラメータですが
すべての探索経路における認識したシステムの数というものと
あとは認識したシステムの数による信頼度というものを
これ以外のデータから学習しまして学習というか調査しまして
設定をし
フィルターを構築しました
実際に構築したフィルターですが
探索経路の
多数決信頼度の相乗平均というものが既知語の場合は〇．二〇以下
未知語
の場合には〇．二五以下というものを調査
設定しました
また
すべての探索経路において認識したシステムがひとつの場合は
除くといった
これをＡＮＤ
ＡＮＤで設定した
フィルタリングになってます
このパラメータですが
調査データが講義音声
から調査しまして設定しております
実際にＳＴＤの性能を比較してみましたその条件を示しますが
対象の
音声データはＣＳＪのコア講演音声これは先生のほうで使われたデータと同じものです
検索キーワードセットも同様のものになります
内訳ですが
未知検索語が二十八種類で
音声中には八十九箇所
既知検索語が五十種類で七百六十九箇所となっております
このテストコレクション制定時には本来この未知検索語が五十種類だったのですが
言語モデルが変更になった
テストコレクションを制定するための言語モデル変更になりましたので
このテストコレクション中に既知語が
発生するようになってしまいました
そこから完全な未知語を抜き出したところ二十八種類という形になっておりますのでこれを用いて評価を行っております
評価尺度としましてはリコールとプレシジョンあとＦ値
またＮＩＳＴのほうで評価尺度ＳＥＤの評価尺度として利用されています
ＡＴＷＶというものを用いました
本研究では特にＯＯＶ未知検索語と
リコールに
よって評価を行う
検索時間についてはあまり考えた評価は行っていない
検索時間に対しましては評価を行っておりません
検索用のインデックスと検索方法の組み合わせですが
表に示すような形になっております
実際にこのテンＳｙｌｌ音節レベルのインデックスから未知語を検索した場合の結果がこちらに示すようになっています
リコールがこのような形になっておりまして
完全
完全一致でも
誤りをミスマッチを許容する場合においても
サブインデックスの数が増えれば増えるほど
リコールは増えていくそんな傾向がみられました
完全一致による検索ですと
リコール以外のプレシジョンやＦ値ＡＴＷＶにおいても同じような傾向
サブインデックスの数が増えれば増えるほど検索性能はよくなるそういった傾向が見られました
ですが四分の一
四音節に対して一個だけミスマッチを
許すような場合ですと
Ｆ値は高くなるんですげどそれ以外の性能はあんまりよくない
サブインデックスの数は増えるほど
ちょっと悪くなってくるそういった傾向がみられました
続きましてコンフュージョンネットワーク形式のインデックスから検索した場合になります
リコールの比較ですがこちらに示すような形になりまして
一番左が
本研究では十種類コンフュージョンネットワークを用意してますので
その十種類の中で最も良いもの
その十種類全部使った場合
本研究で提案してきているＳＴＮ
の結果になります
このテンＣＮとＳＴＮ
まあたいして完全一致だとリコール
変わってないのですが
ミスマッチを許容することによってだいぶ差が出るようになってきました
このことから複数の異なる
形態の認識システムを組み合わせることでリコールは大幅に改善するということが示されるかと思います
ただリコール以外の評価尺度でみてみますと
ちょっとＳＴＮは悪い部分があるかなと
またミスマッチを許容する場合だとそれがもっと顕著に出てきてしまっている
ということがありました
結局未知語に対してはどういったインデックスがいいかということですが
完全一致における検索ですとどのインデックスも大して変わらない
このインデックスといいますか単純な音声認識結果から構築したインデックス
音節レベルのインデックスと
あとはコンフュージョンネットワーク足したものまたＳＴＮでは
大した変わらない
ですが
誤り
認識誤りに対応することで
ＳＴＮというものがこれだけリコールが他のに比べて上がっている
このことからも
複数の
認識システムの結果を組み合わせるというのが
リコール改善には
効果がある
ということが示されます
で他の性能に関してみてみますすとやはり
ＳＴＮというものがちょっと悪いかなという面があります
これは大量の湧き出し誤り検出が発生しているため
ということになっています
既知語に対しての結果がちょっとグラフが多くて申し訳ないのですがこのような形になっています
リコールに関してみますと十個のコンフュージョンネットワークを利用したインデックスが
一番
良くなっております
ただやはり
湧き出し誤りが増えている
ために
プレシジョンのほうはあまり良くないといった結果が
ありました
リコール以外を考慮しますと単純な
音節レベルでのインデックスが効果的なのではないか
という結果が得られました
未知語に対してＳＴＮが有効ということが
示されましたので
フィルターを適応した結果
というものをこちらに示します
見ていただくと分かるんですがフィルターの効果というのは殆ど無かった
という結果になっております
この原因としましてはこのフィルターに設定したパラメータというのが
ＣＳＪのコア講演音声ＣＳＪの音声ではない講義音声から設定したもの
そのため
だと考えられて考えれます
実験結果をまとめますと
こちらはリコールにおけるまとめなんですが
まあ
未知語に対してはコンフュージョンネットワーク化したもののインデックスが効果的特にＳＴＮが有効
既知語は音節認識結果ベースのインデックスが有効ということが
ありました
ですがいずれにしても大量の湧き出し誤りが発生しているのでこれを抑制する必要があります
まとめさせていただきますと
今回はＳＴＤタスクに置いて複数の音声認識システムを利用することのメリットというか有効かどうかということを調査しました
今回六種類のインデックスによってＳＴＤの性能を比較しまして
結果から見ますと既知未知検索語に関わらず複数の音声認識システムを利用するということは
ＳＴＤに有効であることが示されました
今後の課題としましては
今回は単純な検索用のインデックスを用意しています
なので処理時間やメモリ使用量といったものは一切考慮していません
なのでもっとより良い検索用のインデックスを構築する必要があります
これは不要な部分の調査であったり
性能改善のためにＪｕｌｉｕｓのコンフュージョンネットワークの出力を統合する
あとは
ＳＴＮのテンベストを構築してリコールを更に上げるそういった方法が考え
そういった方法を今現在検討しています
で更に
これらのインデックスからの湧き出しを抑制する
パラメータ
というものを調査していき
検索方法自体も改善していく必要があります
これらや
ですと
検索パラメータを利用したＳＶＭや決定木といったものを
使おうと考えています
更に
検索語に対しまして
異なるインデックを使用した方が
ＳＴＤの性能は上がるということなので検索語に対して
インデックスの検出方法どれがよいかということを判断する必要があります
それを判別する方法を検討していく必要が
ある
かと思います
以上ですありがとうございました
