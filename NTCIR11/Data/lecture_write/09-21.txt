名古屋大学の大野です本日はリアルタイム字幕生成のための音声ドキュメントへの改行挿入というタイトルで発表させていただきます
まず背景ですけれども
聴覚障害者や外国人等による講演内容の理解を支援するためにこのような講演者の発話内容を
字幕ページ字幕
を内容の字幕を提示するような
字幕生成システムの開発
ということが今進められていますし盛んに研究されてるかと思います
で我々講演内容を
を字幕化したいと考えてるわけなんですけれども一方でその講演文というのは
非常に一文が極端に長くなってしまうようなことがありますので
それを単にですね文字化して
字幕として提示してしまうと例えばこれ全体で一文なんですけれども
非常に見にくい字幕になってしまうということが
読みにくい字幕になってしまう
そこで適切な位置で改行を挿入してやることで
非常に見やすい字幕を作ることができるんじゃないかと
思いました
そこでちょっと
関連研究についてちょっと調べてみたんですけれども
字幕の改行位置に関する改行位置を自動的に
挿入する同定するような
技術
研究っていうのは例えばこの門間さんらの
ものがありまして
この
研究ではテレビのクローズドキャプションを対象にした
ものでして
クローズキャプションていうのは二行がこう一度に切り替わるような先ほどもご説明ありましたけども切り替わるような
ものですので一行にできるだけ文字を詰め込むことが重要視されてるような
ものでしてこの研究ではあんまり読みやすさというのは考慮されていない
かなと感じてます
で一方で
それに対して昨年の十一月のＮＬ研のほうで我々
発表させていただいたんですけれども
日本語講演音声の書き起こし部に対して改行挿入手法を
提案しました
この手法で
意味的なまとまりを考慮しまして読みやすさを
考慮した字幕が字幕の生成というのを
一応実現しております
ただこの手法では
文境界が既知であることを前提としておりまして
さらにその
実際リアルタイムに
音声を文字化したものを受け付けて
改行をして字幕を出力すると考えますと
同時性遅延時間が長くなってしまうというようなことが
ありました
でそこで本発表では
音声ドキュメントへの漸進的な音声といいましても
今回は日本語講演の音声テキストを利用してますけども
それへの漸進的な改行挿入手法を提案いたします
アプローチとしましては
節境界を検出する毎に機械学習を用いて
改行位置を同定するような手法となっています
アウトラインとしてはこのような
四段階で説明させていただきました
まず本研究で想定する字幕の提示環境というものを
説明します
で我々ではこのように講演者の横で字幕のみが提示して表示されるようなディスプレイが設置されているようなことを
想定しておりまして
複数行がこのようにスクロール形式で
表示されていくようなことを考えております
でその上で
我々の問題設定なんですけども字幕における読み易い改行挿入をするにあたっての問題設定としましては
改行挿入は文節境界のみを対象とすると
ということを考えましたこれは文節というのは
意味のまとまりとしては日本語の中では最小の単位ではないかと考えたためです
でまた当然ですけれどもディスプレイには大きさの制限がありますので
その文字数最長文字数を設定しましてそれよりも
一行の長さが短くなるように
改行を挿入する
そのうえそういう二つの条件の下でできるだけ読み易い字幕を作ると
いうことを考えてる
本研究では二十文字を設定しておりますこれはですね
パワーポイントで
三十六ポイントの文字でこう横に並べるとちょうど二十文字ぐらいになるので
それぐらいやったら後ろからでも見えるのではないかと考えまして二十文字
いう
値を設定しております
次に漸進的な改行挿入手法について説明します
簡単な流れなんですけどもまず入力としては一講演全体の
文節
列というものを考えてまして
文節がこう入力される度に
節境界解析を行います
でここではＣＢＡＰというツールを用いまして
各文節境界に節境界があるか否かを判定しております
で一度
節境界が見つかりますと次のページに行きまして
節内部の係り受け解析というものを行います
これは以前我々が提案していた解析手法を用いて
解析しており
で次に
今度は
節末の文節
が直後の直後の文節に係るか否かということを判定します
でこれはですね本来は節末の文節の係り先というものも解析したいんですけれども
節末の文節の係り先というのは
いつ来るかわからないということがありまして
それを待っていては同時性を
損なってしまう
いうことがありますので
同時性を損なわない範囲で出来る限りの係り受け情報を獲得したいと
いうことから
節末上文節に関しては直後に係るか否かだけを
判定すると
いうことを行っています
これの判定手法については
この上の係り受け解析手法とほぼ同じような
手法を
素性を用いて
最大エントロピー法によって
判定するということを行っています
ここまで来ましたらこれだけの情報を使って
各文節境界に節境界が入るか入らないか
いうことを判定して
それまでに入力された文節をこの
改行の挿入判定の結果に従って
字幕として出力する
ゆうような手法となっています
同様に
節境界が検出されたら
内部を解析して
節末に関しては直後に係るか否かを解析して
改行が入るか入らないかゆうような
判定を行っています
それでは次にここに改行挿入の判定手法について次に説明します
改行挿入の判定ではですねその時点で
入力された
文節までの各文節境界に対して
その位置に改行を挿入するか否かを同定する
判定するということを行っています
簡単に定式化しますと
文節列ＢがＢ１からＢｎというのが与えられた時に
この条件付確率を最大にする
改行
結果
ＲというものをＲというのはＲ１からＲｎまでの系列なんですけども
計算します
でＲｉていうのは文節Ｂｉ直後に改行が挿入されるか否かの
０１の二値として取ります
でここで最大とするような改行結果を選ぶときに
制約を二つ設けますそれはすでに
改行挿入判定済みの結果は覆さない
例えば先ほどの例ですと
今七文節目まで入力されているとして
一から三まではもう文節は入力されてて
その間の
改行挿入判定はされてますのでこの結果を覆さな
覆さない
さらに
一行あたりの文字数が最長文字数以下となるような
制約の下で
様々なこの
組み合わせ
改行挿入されるされないの組み合わせを
考えましてそれで最尤のものを
この尤度この条件付確率が最大となるようにも選ぶと
いうことにして
先ほどのこの条件付確率の計算なんですけれども
これはあの色々こう
色々定式化できるんですが
この辺の詳細は省きますけれども
基本的にはこの条件付確率を展開してですね
各文節の
直後で改行されるか否かっていうのは直前の改行箇所
に依存する
逆にその他の改行箇所とは独立であるというふうに仮定することによって
えーとですね
このような式を展開できまして
結局この条件確率は各文節
の直後で改行される確率もしくはされない確率の積で
計算することができます
でこの各文節の
直後で改行が挿入される確率されない確率っていうのを
最大エントロピー法で推定する
いうようなことを行っている
なおこの構造この条件付確率を最大とする
Ｒというものは
動的計画法によって効率的に計算していく
で最大エントロピー法で用いた素性なんですけども
まずこの今の状態でこの文節の直後に改行が挿入される確率を求める時の
時に用いた素性の説明です
形態素一つはこの文節の形態素情報
修辞であるとか受け
さらに節節境界情報として
この位置に
節境界があるかないか
また
節境界がある場合はその節境界のラベル種類ですね
あとはポーズの情報を入れます
これはこの位置にポーズ時間
この
文節の直後のポーズがですね
この四つの種類のどれに該当するかということを
分類しますこれはですね
事前に
ちょっと分析については時間の都合上省いてるんですけども分析データを作りまして分析した結果
例えば三秒以上であれば必ず文末
の位置に相当しているということがあって必ず改行が挿入される
とかそういうような
統計分析結果に基づいてこのような分類をしております
さらに
この赤い線というのは改行が挿入されているという
ことを意味しているんですけれども
その行頭からの
行頭からその文節までの文字数が
それぞれ何文字かというようなこともこれも分析の結果に基づいて三分類しております
三分類した結果を素性として用いています
さらに係り受け情報を利用しています
それはこの文節が直後の文節に係ると
また
この文節が直前の文節から係られるか否か
さらにこの文節が
連体節の節末文節から
係られるか否か
さらに
この文節がこれは節内部である場合この文節が節内部の文節である場合に限るんですけれども
節末の文節に係るか否か
さらにこれもこの文節が節内部の文節である場合に限るんですけれども
これがですね
行頭からの最大表示文字数以内の文節に係るか否か
いうような素性を用いています
すみません最後に
この行頭からこの文節までで係り受けが閉じているか否か
いうような素性を用いている
実験の
次に改行実験について説明します
実験に用いたデータとしましては名古屋大学の同時通訳データベースを
用いまし
名古屋大学同時通訳データベースの中の日本語講演話者がしゃべっている日本語音声を
書き起こしたデータが十六講演ありましたのでそちらを利用してます
でこの書き起こしデータに対して形態素
文節境界節境界係り受け改行位置の
正解データを人手で
作成しております
このデータを用いて交差検定を行います
一講演をテストセット残りを学習セットとして
回してます
ただしちょっとちらっと言ったんですけども分析に二講演分だけ利用してまして
そのニ講演は評価から除いて
十四講演を使って評価を行っています
まず実験結果に対して読み易さ
を評価しましたその指標として
正解データに対しての再現率というものを先ず
評価しました
これは正解
の改行数の内
正しく挿入された改行数
さらに適合率として今回自動解析結果の
改行数の内正しく
挿入できていた改行数の数
そしてＦ値を
計測します
その結果がこちらになってまして本手法
では７７．０６というようなＦ値になってます
でちなみにですけれどもこれＮＬ研の
で発表した文単位の改行手法の結果が
このような形になってまして
ただそのＮＬ研で発表した時は係り受け自動で係り受け解析を付与した時はそのＣａｂｏＣｈａを利用しているので
ちょっと参考程度の値となってるんですけれども
こういった値になっています
本手法は
文単位の改行手法と比べて
精度悪いんですけれども
文単位の手法と比べて文境界が既知でないということ
さらに漸進的に改行を
同定しなければいけないという二点のハンデを持つことから
それほど大幅な低下
低下していないのかなというような
思いを
している
でこれが実際に改行結果の例です
でこれが本手法でこっちは人手で作った正解
の例です
でどこが変わっているかと言いますと
この赤色の場所でして
例えば今日ご出席の皆様方私
普段から親しくさせて頂いておるとあるんですけれども
この私が前にあるか後ろにあるかっていうのは
前で改行されるか後ろで改行されるかっていうのは
ちょっと
人によって別にどっちでもいいんじゃないかと思う人もいるのかなという気がします
ただ例えば
キーノートスピーカーというよりはキックオフをさせていただくという
感じで
お話をさせていただきたいと思いますというところに関しては
正解データのほうが意味的なまとまりを捉えてるという意味ではこちらのほうが確かに
若干いいのかなという気がしててこの辺は本手法が出てきていないのかなと
いうような印象があります
で一つ
まだ本手法がどれぐらい
の結果を分析するに当たって一つ
ポイント
を作って分析してみたんですけれども
それは文境界に対して必ず改行を入れることができているかどうかと
いうことを見てみました
でこの点線が一応その文境界になるんですけれども
一応この例では文境界に対して改行を付与できている
いうことが言えます
ただ他のみますと
例えば
私の考えでは
もう一つの種類の平和主義があると思いますそれはと
いうふうに文境界で
改行を挿入できていない例もいくつかあります
で実際どれぐらいできているのかというのを見てみますと
本手法では
全体の文文末に
対して八十九％ぐらい
で改行を実際に正しく挿入できている
いうこと
になってます
で高いか低いかっていうのはちょっと
まだ検討してみないといけないかなと思ってます
で実際にここで
改行が付与できていなかったものをまだ数例しかちょっと実際見てないんですけれども
見た結果
ポーズの時間が非常に短い
というようなことが一つあります
でさらにその文末の言い回しがですねですます調とかでないとか
あとは
倒置
のようなものが起こってて
文文末というのを捉え切れてないというようなことがありました
次に同時性というのを評価してみました
これは
遅延時間を測定しましたそれはそれぞれの文節に対して入力時間と出力時間の差を
計測しています
各文節の入力時間というのは今回書き起こしテキストを用いているんですけれども
音声データもありますので
Ｊｕｌｉｕｓを用いてですね音素列に対して時間を振ることができますので
それを用いて実際の文節の入力し終わった時間というのを計測しています
でただ出力時間に関しては今回は解析時間というのはちょっと無視してやっています
どういうことかと言いますと
例えば先ほどの例で
四と五と六と七の文節っていうのは七が入力された時点で
出力されるということになるんですけれども
例えば四の遅延四の文節の遅延時間っていうのは四が入力し終わった時間から
時間と七が文節の七の文節が入力された
され終わった時間の差で
遅延時間を今回はちょっと
近似的に計っています
でその結果が
こちらになってまして
この表は
この表グラフは
横軸に遅延時間縦軸にその累積割合と
なってをとってます
例えば
四秒未満で
遅延時間が四秒未満で出力される文節の割合っていうのが本手法では九十％ぐらいは
四秒未満で出力されるのに対して
文単位の手法っていうのは五割程度しか四秒未満では出力できないといったようなグラフになってます
で平均の遅延時間を測定
計算してみますと
本手法では１．５８秒
文単位の手法では
七秒ということで
遅延時間を大幅に改善できているのではないかと考えております
まとめますと
音声ドキュメントへの漸進的な改行挿入手法を提案しました
実験により
本手法の有効性を確認しました
今後の課題としましては実験結果の詳細な分析まだ実験をですね
終わったばっかりでしてその分析をまだ
あまり詳しくできていないというのが現状ですので
詳細に分析したいと思っております
さらに
実際にですね字幕を出力時間
ていうのを
その出力時間に実際に字幕を出力するというような
動画を作ってですね
主観的な評価というのを
行いたいと考えております
で今回は書き起こしテキストに対して実験を行ってますので
できれば
長年けれども音声認識結果への
適用というものを考えて実験をしたいと
思っております
以上で発表を
