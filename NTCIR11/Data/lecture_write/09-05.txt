いただきます。
よろしくお願いします。
近年ウェブ上の動画、や音声などの
コンテンツ、の利用機会が増加しています。
また、そのコンテンツ自体の数も、急激に増加しいます。
これらを、効率的に利用するには、音声に対するキーワード検索技術が
必要となってきます。
しかし
従来の研究は、検索性能の向上に主眼を置いたものが多く
高速検索、高速性の
向上を目指したものは少なくなって、います。
近年では、高速な音声検索の研究もいくつか、行われて
いますが、これらは大規模な索引データベース
を構築する必要があり
、高速に、アクセルするためには、高速な二次記憶装置が、必要となっています。
そこで本研究では、高速かつデータ領域の、小さな音声検索手法の実現を目指しています。
そのアプローチとしましては
コンパクトな、検索用データ構造であるサフィックスアレイを、用いまして、音素単位のマッチングを行うことで
音声検索を行います。
ではここで発表の流れについて、説明します。
まず始めに従来手法であるサフィックスアレイを用いたテキスト、曖昧検索、について説明を行います。
そのあと、この手法を、音声検索に適応するための、提案手法について説明します。
最後に提案手法の評価実験について、説明を行います。
それでは、従来手法であるサフィックスアレイを用いたテキスト曖昧検索の説明に入ります。
サフィックスアレイとは、文字列検索用のデータ構造のことで
テキスト中の、全てのサフィックスを、ソートした、ものです。
右の図がサフィックスアレイの例、なんですが
この例では
アブラカダブラ、というテキストに対してサフィックスアレイを構築しています。
この下側の
部分がサフィックスアレイ
なっていまして、
この部分が、ソートされたサフィックス、で
この、右側のインデックスというのは、サフィックスがテキスト中のどの位置から
始まるかを、表しています。
サフィックスアレイの特徴としましては
任意の文字列を、効率的に検索できるというものがあります。
例えば、このサフィックスアレイから、ＢＲＡという、文字列を検索したいと
思ったときに、二分探索を行いまして
この位置に、ＢＲＡ、が
出現する、ということが、わかります。
インデックスを見ますと八と一となっているのでテキスト中では
八、の一と、一、の一の位置にＢＲＡが出現する、っていうのが
検索、できます。
またもう一つの特徴としましては必要な領域が小さい、というのが、あります。
このサフィックスアレイは実際には
このインデックスの並びだけを保持していれば良いので、
必要なデータ領域が小さくて済みます。
それではこのサフィックスアレイを用いたテキスト曖昧検索について説明します。
曖昧検索とは、誤りや類似性を考量した検索のことで
この、手法はらが提案している、ものです。
サフィックスアレイを木構造と見立てまして、ＤＰマッチングを行いながらこの木構造を探索します。
その際に、枝刈りを行うことで、効率的に木を探索します。
この枝刈りというのは、探索ノードまで
の、系列、と
検索キーワードとの、ＤＰ距離を計算しまして
その距離がある閾値を超えたら、探索を打ち切る、という、処理、です。
実際に、アブラカダブラから、ＢＲＡ
を探索する場合、を例、としまして
アルゴリズム、の説明を
行います。ここで枝刈りの閾値
は、Ａ一、とします。
まず、ルートノードから
探索を始めまして
ノードを一つ
たどる度に、ＤＰ距離を
計算して、いきます。
そして、その距離が、閾値を超えたら
そこで、枝刈りを行いまして、それ以上深くは、探索を、行いません。
、同様にして、距離を計算し、枝刈りを行いながら
探索しまして
枝刈りが、行われずに
足したノードの
位置を
検索結果として出力、します。
この手法ですが
音声検索に、提供するにあたってはいくつか問題点が、あります。
まず一つ目は、テキスト用の検索アルゴリズムであるということです。
そのままでは音声データの検索に用いることは、できません。
もう一つは、枝刈りの閾値の増加に対して
処理時間が、指数的に増加するという問題があります。
これは
サフィックスアレイの探索範囲が指数的に広がるため、です。
ここに示して、います木構造を、サフィックスアレイ
と考えますと
閾値一
で、検索したときにこの深さまで
探索が、必要だったとしますと、閾値、を増加させ
ると、閾値二ではこの
範囲、閾値三ではこの範囲というふうに
探索範囲が指数的に、広がります。
そのために
閾値、
それから、閾値、は検索キーワードの
長さに
比例させる必要がありますので
そうしますと、検索キーワードの長さに対して、処理時間が
指数的に爆発する、という問題が
起こります。
これらの問題を、解決するための提案手法を、これから説明します。
まず音声検索への適応ですが
これは音素単位、のマッチングを行うことで解決します。
音素、を用いることで、音声をテキストとして扱うことが
できます。
検索対象の音声データはあらかじめ、音声認識処理により、音素列へと変換しておきます。
そして
音声認識、の結果得られた音素列に対してサフィックスアレイを構築し
検索を行います。
ただこの音声、認識、の処理は音素によって誤りやすさが
異なります。
ですので
探索の際のＤＰマッチング
で用いる局所距離には、音素間の音響的距離を適切に
表すものを、用いる必要があります。
そこで本研究では
音素弁別特徴、の距離を
利用することとしました。
音素弁別特徴というのは、らが、提案しているもので
調音様式や
調音位置を表す
十五次元の素性で音声を弁別しています。
この素性というのは例えば、下の位置が高いか低いか
や、
有声
音であるか、そうでないか、など、があります。
、この素性
の、ハミング距離を、音素間の距離として定義します。
例えば
ＰとＢ、という音素の距離、は
Ｐ、のこの素性、の系列と
Ｂのこの素性の系列の
ハミング距離をとりまして、二というふうに定義されます。
同様にＰとＪでは
Ｐと、Ｊの、ハミング距離と出まして、八というふうに
定義されます。
次に
、検索キーワード長に対して処理時間が爆発する問題について
の解決方法を、説明します。
この問題に対しては、キーワード長、キーワードを分割して検索を行うことで、解決を図ります。
検索を開始しますと、キーワードを、固定長の分割キー
に、分割しまして、この分割されたキーワード、それぞれに対して
サフィックスアレイを検索、します。
ただ
音素
キーワード中の音素認識の誤りは一様
ではないので、分割
キーの一部が、検索結果に
検出されない、という
可能性があります。
そこで
検索結果として
得られた位置を、候補としまして
その前後に、検索キーワードとのＤＰマッチングを行うことで
その
候補の位置に本当に検索キーワードがあるかどうか、というのを検証します。
ただ全て候補に対して検証を行うと回数が膨大になってしまい処理時間が
、大きくなってしまいますので
ＤＰマッチングを行う前に、この候補数を削減することを
考えます。
その方法としましては
複数の分割キーで検出されている候補を、見つけ、まして
それ以外の候補をふるい落とします。
ただこれを、行うには
正解箇所で少なくとも、二つの分割キーを検出できる必要があります。
現在の閾値設定では正解位置で、最低一つ、の
分割キーが検出できます。
例えばキーワード全体で閾値が三、であ
ったとすると、
これを三分割すると、分割キーの
閾値はそれぞれ一、になります。
これで検索しまして、結果
二つが
閾値をわずかに超えて検索結果から落ちて
しまっても、全体で、閾値
以内、キーワード全体で
閾値以内、であれば
残りの一つは、検出することができます。
もしも、三つとも
、検索結果から、落ちてしまった場合は、それは
キーワード全体でも閾値を超えて、その位置には
検索キーワードは出現しない、ということに、なります。
す
現在の閾値の設定は、先程のようになってるんですが
これ
を、分割キーの閾値を増やすことで、最低二つ
の分割キーを、検出できるようにします。
これには、
ここにあります
式を用いて音素あたりの閾値を、変化させます。
この式中のＰは分割の数で、Ｔはもとの閾値です。
先程の、例
に対してこの、式を、適応しますと分割キー
の閾値は一．五、になります。
そしてそれで検索を行いますと、一つが閾値をわずかに超えて
検索結果から落ちても、全体で閾値内であれば、残りの二つの
分割キーは
検索、できます。
検出できます。
もし、二つ
が、
閾値を超えて
落ちる場合には、それは、全体でも、閾値を超えて
その位置にはキーワードは出現しない、ということに、なります。
ただ、分割数が二、の場合
この式を適応しますと
音素あたりの閾値は元の二倍、になってしまいます。
そうしますと
分割キーの閾値がもとのキーワード全体と同じになってしまい、分割しない場合よりも処理時間が増加
してしまいます。
そこで
三分割以上の場合にのみ、分割を行うことに
します。
例えば、六音素で分割する、場合ですと、六音素十二音素のキーワードは分割せずに
十八音素以上の場合にのみ、分割を行います。
次に
検索における閾値の設定について
説明します。
音素あたりの閾値に対する特製としては
、閾値を低くしますと
サフィックスアレイの検索
の範囲が狭くなりますので
処理時間が短くて済みます。
また
より、
検索キーワードに近い
結果しか、検索されませんので、検索精度が、高くなります。
逆に閾値を高くしますと
この処理時間と検索精度は、犠牲になりますが
より、誤りを多く、許容した、結果を
得ることが、できます。
そこで実際の検索においては、低い閾値で
始めは検索を行って、正確な結果を高速に、ユーザーに提示します。
そしてユーザーが結果を確認している間に
高い閾値で
検索を行って、より多くの結果を
提示する、反復検索の方法を
を
とります。
ここで、提案手法のまとめを行います。
提案手法では、音声認識処理結果の音素列に対してサフィックスアレイを
適応しました。
音素間の距離では音素弁別特徴の距離を、利用します。
検索キーワードの分割、検索法を導入しました。
それから低い、音素あたりの閾値から、反復して検索を行う
こととしました。
では次に
この提案手法の、評価の実験について説明します。
実験の
環境は、この通り、です。
音
検索対象のデータには、ＣＳＪの、男性話者三百九十時間分の音声データを
用いました。
これを
音声認識、する
のには、Ｊｕｌｉｕｓを用いました。
その、音声認識の結果得られた、音素列に対してサフィックスアレイを
構築したところ、約五十二ＭＢｙｔｅ、となりました。
このサイズであれば十分にオンメモリで処理が、できると
言えます。
次に
キーワードの分割サイズですが、予備実験の結果六音素で分割する場合がもっとも高い性能を示しましたので
以降の実験では六音素、で分割を行っています。
それでは検索性能の評価、の
実験
の説明を行います。
この実験では、検索結果のリコールとプレシジョン、および処理の時間を計測しました。
音素あたりの閾値を〇から一．四まで
変化させて
検索キーワード、には、六音素十二音素十八音素二十四音素の名詞、を
用いて検索を行いました。
ここで音素あたりの閾値の目安について、説明します。
この図は、一人暮らし、という
音素列の誤りの、例を
示しています。
この部分が誤り、の
例で、その左側の数字は
この、誤り、を許容できる、、音素あたりの閾値、を表しています。
ですから
音素あたりの閾値を〇、として検索した場合ですと、この結果が、得られます。
〇．六ですと、この範囲の結果が
一．〇、だと、この範囲の結果が
、検索結果として得られます。
では、実験の結果、です。
この
図は
左上から、六音素のキーワード十二音素のキーワード十八音素二十四音素
のキーワードを、検索した場合の結果で
各グラフの横軸は、閾値、になっています。
グラフ中の曲線は
三角印がリコールで、四角
印が、プレシジョン
で、波線、が、
処理時間
を表しています。
この結果を見ますと
低い閾値、では
処理時間が非常に短く
ですんで検索
くが、行えています。
閾値で、〇の場合では二ｍ秒、閾値〇．二
だと、二十ｍ秒以下で、全ての場合
検索できて、います。
また
十二音素以上、のキーワードでは
高い正解精度を
保っています。
このことから
低い閾値の結果から提示するという手法は、有効であると、言えます。
また〇．二までに限らずもう少し
閾値を上げた場合、〇．八ぐらい上げた場合でも
十分に高速に、検索が行えています。
ただ、それ以上
閾値を上げますと
一八音素二十四音素の場合では
六音素十二音素に比べまして、急激に
処理時間が増加しています。
これらの違いは何かといいますと、分割を行っているか行っていないか、といった違いがあるのですが
これだけを見ますと、分割を行わない方が
、いいのではないかというふうに
見えます。
そこで、実際に分割をせずに
検索した場合についても計測を行いました。
その結果が、この、グラフ
ですが
見ていただけ
たらわかるとおり、実際には分割を行った方が、処理時間は短くて
済んでいます。
このことから、やはり分割検索は有効、であると
ことが確認できました。
次に
さらに、
検索対象の時間を、増やしまして一万時間分の音素列、を作成して
検索を行いました。
この一万時間分の音素列ですが
このような長い
音声の収録時間を持つコーパスというのは存在しまして
存在していませんので
先程の実験で用いましたＣＳＪの
音素列のサイズをもとに、新聞記事のデータを、変換して、作成しました。
この一万時間分の音素、列から
二千時間四千時間六千時間八千時間一万時間、分の音素列を
切り出しまして、それぞれを対象として、検索、の実験を行いました。
その結果が
この下に示しているグラフです。
左のグラフから
、閾値が〇．二の場合、〇．六の場合、一．〇の場合の、結果です。
グラフの横軸は、検索対象の、データの長さ、で
グラフ中の曲線は
検索キーワード
ごとの、処理時間を表しています。
これを見ますと
〇．二の、閾値で、一万時間を検索した、場合
最も時間がかかっている二十四音素の場合でも、百二十ｍ秒程度で
検索が行えて、います。
また
この
結果全体を見ますと
検索対象のデータ長に比例して、処理時間が増加している、ということがわかります。
この理由ですが
検索
処理の時間の内訳を調べたところ
サフィックスアレイの検索、よりも、検証のＤＰマッチング
に要する、時間が支配的となっていました。また、この検証のＤＰマッチングの
対象の候補の数は
検索対象のデータ、の長さに比例して増加
して、いました。
このことから
全体の処理時間が、検索対象のデータの長さに比例していると、考えられます。
最後にまとめとしまして、本研究では、サフィックスアレイを用いた
高速な音声検索手法を、提案しました。
検索キーワード長に対する処理時間の増大の問題を
キーワードの分割検索法、の導入により、解決しました。
また実験により、高精度な、検索結果を短時間でユーザーに提示可能
であることを、確認しました。
、また
こちらも実験により
処理時間が、検索対象に比例して増加
する、ということが、わかりました。
今後の課題としましては、等しい、大きさで分割できない場合の分割方法
や、分割検索の
検証のＤＰマッチングの高速化、が、あげられます。
発表内容は以上です。
ありがとうございました
