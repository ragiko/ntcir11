それでは複数音節の事前検索結果を利用した音声中の検索語検出の高速化
と題しまして岩手県立大学のが発表させていただきます
まず研究背景です
近年
ハードディスクレコーダーやブルーレイディスクなど大容量記録媒体の普及により
マルチメディアデータを保存視聴する機会が大変増加してきています
またウェブ上では動画投稿サイトが一般的に用いられるなど
膨大なマルチメディアデータを取り扱う機会が増加してきています
そのため
その膨大なマルチメディアデータから目的の特定区間を検索する機能に対するニーズというものが高まってきています
そしてこれに対して音声中の検索語検出ＳＴＤｓｐｏｋｅｎｔｅｒｍｄｅｔｅｃｔｉｏｎが有効であるとされ
現在研究が盛んに行われており
アメリカではＮＩＳＴによる
ＮＩＳＴによる評価型ワークショップであるＴＲＥＣが
開催されています
また国立情報学研究所が主催する
ＮＴＣＩＲワークショップナインが日本にて開催され
ＳｐｏｋｅｎＤｏｃタスクとしてＳＴＤの評価が行われました
ＳＴＤにおいて
未知語への対応は非常に重要な課題となっています
そのため我々は未知語の検索に頑健なシステムを目指し
サブワード検索結果を用いることで未知語の
未知語への対応をし未知語の検索性能の改善を図っています
ここで我々のサブワードベースＳＴＤシステムについて解説をします
まず検索対象となる音声ドキュメントこれはサブワード認識を行うことでサブワード系列へと変換した後にデータベースとしてあらかじめ保存しておきます
そしてクエリはテキストで与えられるものとされテキストで与えられたクエリはサブワード系列に変換し連続ＤＰなどによってサブワード系列データベースと照合することで
クエリが発話されている区間の抽出を行います
そして現行の我々のシステムの検索性能と検索時間です
ここではモデル数を三千五百に集約したトライフォンを用いています学習にはＣＳＪの偶数データこれはコアを除きますを学習していますデコーダはＪｕｌｉｕｓを使用しています
そして検索の対象検索対象データはＣＳＪのコア百七十七講演
と
ＮＴＣＩＲのＳｐｏｋｅｎＤｏｃタスクで行われた
対象データと同一のものを用いていますクエリもＳｐｏｋｅｎＤｏｃタスクと同一のものです
そしてその条件において現行の我々のシステムでは
ＭＡＰが七十五．六に
そして一クエリ当たりの検索時間は
〇．九五三秒となっています
これは四十四時間のデータの検索に対して一クエリ当たり約一秒掛かるという計算になります
そして我々のシステムでは
検索時の局所距離に
サブワード間音響距離を用いているため
全てのデータに対して照合を行う必要があります
そのため
検索対象のデータが増加するとともに一クエリ当たりの検索時間も線形に増加していくため高速な検索手法が必要であると考えます
そこで提案手法です
我々は
複数音節による事前検索結果を利用したＳＴＤの高速化方式というものを提案します
これは
あらかじめ
全てのＮ音節系列に対して事前に検索対象データと照合を行いこれを事前検索結果として保持しておきますそしてクエリが与えられた時にクエリをＮ音節単位
に分割して
事前検索結果の
事前検索結果を参照することでを選出します
そしてここで選出した候補間のみに対して連続ＤＰによるスコアリングを行うことで検索性能の低下を抑えた上で検索時間の短縮を図ります
ＳＴＤの高速化には様々なアプローチが行われていますがその多くは認識結果に対するインデックス付けが主と
主となっています
我々が提案する方式ですとあらゆる検索語への対応を想定し
全てのＮ音節系列で検索していくことで高速化を図ります
また
提案手法ですと検索対象のデータが後から追加された場合などに対しても
追加データに対してのみ
事前照合の行いは対応できるというメリットもあります
また
この提案手法は複数の認識結果を有するシステムなどにおいても有効に働くものと考えられます
そしてＮ音節事前検索結果について解説します
クエリが発話されている発話区間というものは
クエリ中の音節列が包含されている区間であると還元することができます
ここでは岩手県
というクエリを例にしますと
音声ドキュメントのとある区間において岩手県
という
フレーズが発話されているとすればそれは
イワテ
ワテケ
テケン
これらの三音節フレーズが全て発話されているもの
というふうに還元ができます
そのため岩手県というクエリを検索する時に
イワテ
ワテケ
テケン
これらをあらかじめクエリとみなして検索しておき
クエリが与えられた時にこれらの事前検索結果を参照することで
岩手県というクエリの検索が可能となります
このようにＮ音節列の全ての検索結果をあらかじめ保持しておき
クエリが与えられた時に
クエリのＮ音節列をクエリをＮ音節列単位で分解し
各Ｎ音節列の分割クエリの事前検索結果を参照します
これによりクエリを
クエリが発話されている区間を選出することが可能となります
Ｎ音節事前検索システムの処理手順について解説します
まず音声ドキュメントは
サブワード認識を行いサブワード系列に変換した後にデータベースとして保存しておきます
そして
Ｎ音節列ここではＮ＝三を例にしますそのためあああああいああうこれらの三音節列全てに全てに対してデータベースと照合を行いこれを
事前検索結果としてあらかじめ保持しておきます
そしてクエリが与えられますとクエリをＮ音節単位で分割しますそして分割されたそれぞれの分割クエリに対して
事前検索結果と照合することで一次候補発話区間ということで最初の
最初の候補区間を選出しますそしてこの一次候補発話区間に対してのみ
連続ＤＰによるスコアリングを行うことで最終的な検索結果を提示します
この事前検索結果からの一次候補区間
の
の抽出について解説します
まずクエリの
ここでも岩手県というクエリを例としますが
イワテワテケテケン
それぞれの事前検索結果がこのようにありますその時にこれらのこれらの論理和を取ることで一次候補区間とします
この事前検索結果
ですが
これは
事前検索結果の作成に時間を要することまたインデックスサイズが大きくなりますここでＮを二と三そして事前検索結果を上位五千位までを保持した場合を例にして説明しますとＮ＝二とした場合では計算時間は約十八時間そしてインデックスサイズが
約二百八十四ＭＢです
これをＮを
三にすることで計算時間は百九十二日そしてインデックスサイズは
七十二七十二ＧＢと大変大きい値となってきます
しかしＮを増やすことで
一次候補区間の
候補数候補数そのものを削減することができまた
事前検索結果そのものそのものがより厳密なものとなるためＮを増やすメリットがあることもまた事実ですそのためここで二音節事前検索結果から擬似的な三音節事前検索結果を作成する手法を
合わせて提案します
擬似三音節事前検索結果の作成手法について解説します
イワテという三音節列は
イワ
とワテこの二つの二音節列からなります
そのため
イワの事前検索結果とワテの事前検索結果それぞれを参照し
これらの論理積を取ります
そして双方に共通して出現している候補発話区間の距離値の平均値を取ることでこれをイワテ
の擬似的な三音節事前検索結果として扱います
ここでは
イワの後にワテが来るなどといった時間上の連続性は考慮していません
そしてこの擬似三音節事前検索結果を作成する段階で
候補数インデックス候補数を削減するインデックスサイズを削減するために
この算術平均を取った時の距離の値
が
閾値以上であれば棄却するというフィルターを設けます
ここでは閾値を九．九八七としましたこの値の根拠としましては連続ＤＰの時に局所距離として用いるサブワード間音響距離
の最大値の三分の一の値となっています
そしてこの
二音節事前検索結
果を用いる場合と擬似三音節事前検索結果を用いる場合の検索性能と検索時間についての考察を行いますここではサブワードはモデル数を三千五百に集約したトライフォンを用います
学習データはＣＳＪのコアを除く偶数データを用います
そしてデコーダはＪｕｌｉｕｓを用い
検索対象データ検索クエリ
などは
ＮＴＣＩＲ−９のＳｐｏｋｅｎＤｏｃタスクと同一のものを用います
まず二音節事前検索結果に
についてです
この棒グラフは検索性能のＭＡＰとなっています
そしてこちらの折れ線グラフ
こちらは一クエリ当たりの検索時間となります
そして横軸これはトップＫ上位何位までを保持しているかという値何位までがこのＫの値となります
まずここの
そしてこのＡＬＬというものは
全てのデータに対して
連続ＤＰによる
照合を行った場合の検索性能と検索時間で
そしてこのＡＬＬと五千をまず比較して頂きたいのですが検索性能は
全くの同一となっています一切の劣化は見られませんでした
そして検索時間に
つきましては
これが尺度の問題で折れ線グラフが振り切ってしまっているのですが
ＡＬＬでは〇．九五三秒です
それがトップ五千を参照することで
〇．四〇四秒まで検索時間を削減できています
これは
五十七．六％の検索時間の削減を
性能低下無しで実現しています
そして
Ｋ＝千まで
を見ますと
検索性能の劣化は
劣化幅は
そこまで大きい値とはなっていません
そしてその検索性能の低下を大きく抑えた上でトップ五千値よりもさらに検索時間と
削減を実現しています
この
と今回の実験条件下ではＫ＝千において
最高で八十八．一五％
検索時間を削減できてました
そしてＫ＝五百につきましては
検索性能の
低下はＫが千の時などよりは大きくなってきていますが
それに
その代わり検索時間の削減幅もより大きいものとなっています
Ｋを五百とした場合では検索の検索性能の低下が二ポイント以下
を抑え
検索を九十三．五九％
高速化しています
これらの結果から
この二音節事前検索結果を用いる手法では検索性能の低下を抑えた上で高速化を実現できるものと考えます
そしてこの二音節事前検索結果を用いる場合ですが
候補数を絞り込むことで検索時間を削減しています
これは
クエリが含まれている可能性が低い区間を棄却することで
検索精度の劣化を抑えた上での高速化を図っていますそのため
事前検索結果の距離値に対して
閾値を距離の閾値を設けます
これにより二音節事前検索結果との類似度が低い区間を棄却することでクエリが
二音節事前検索結果の類似度が低いということは
クエリが含まれている可能性が低いと判断
し判断し棄却するというものです
この基準を設けることでトップＫ以内であっても距離値以上となれば棄却されますそのため順位上は上位であっても類似度が低い区間
を棄却することができます
これにより更なる候補数の削減を図ります
ここでの距離の閾値は最大値を九．九八七に設定しましたこれは連続ＤＰの時に用いるサブワード環境距離の最大値の三分の一の値となっていますそして九．九八七の他に九八七六についても調査を行います
Ｋの値は五千三千千五百について調査を行いました
そして距離閾値を設けた場合の各条件下における検索性能と検索時間がこちらの表となっています
棒グラフは検索性能折れ線グラフは検索時間
そして横軸は閾値の閾値となっています
一番左端の閾値無しは距離閾値を設けなかった場合ですそして棒グラフは
左から
トップＫのトップＫの閾値を設けない場合
Ｋ＝五千
Ｋ＝三千Ｋ＝千Ｋ＝五百
となっています
そして折れ線グラフも上から
ＫＫ閾値無しＫ＝五千三千千五百となっていますまずこの閾値無しと距離閾値を設けた場合について
比較を行います
距離閾値を
与えた場合と与えていない場合とでは
検索性能を
に違いは一切見られません
よって距離閾値を儲ける距離閾値は適切な値を用いることで
検索性能の低下は
厳しく抑えることができます
そして検索時間の削減ですが
閾値九．九八七においては
トップ五千
Ｋ＝五千において〇．〇四秒の
僅かな検索時間の削減のみとなりました
そして閾値の幅を少し広げますと閾値七．〇までにおいては検索性能の低下はそれほど大きいものとなっていません
そして検索性能の低下を抑えた上で
検索時間の削減を
それぞれ
特にＫ＝五千Ｋ＝三千において大きく
検索時間を削減することができています
そしてＫ
Ｋ
を設けずに距離閾値のみ
を用いた場合と
ＫＫと閾値を設けた場合
の二つ
の比較も
ここで一緒に行いますがそれはこれはそれぞれの条件下において検索性能に差異は見られませんでした
検索性能に差異は見られませんでしたが
検索時間はＫＫを与えず距離閾値のみ
よりも
Ｋを与えた上で距離閾値を与えている
方が検索時間は軒並み削減できています
そのため距離閾値のみでデータの削減を行うメリットは極めて薄いものと考えます
これらの結果から
距離閾値を設けることで
検索時間を削減することができ検索性能への影響は極めて薄いものということが確認できました
そして閾値を七閾値が七．〇以上であれば
検索時間を削減した上で検索性能の低下は〇もしくは僅かそして
この距離閾値の効果はトップＫの値が大きいほど
検索時間削減効果が大きいものとなりました
これらの結果から
距離閾値を導入適切な距離閾値を導入することは検索性能の低下を抑えた上で更なる検索時間の削減を図ることができるものと
考えますそして最後に
擬似三音節事前検索結果を用いた場合の
について考察を行います
棒グラフはＭＡＰの検索性能折れ線グラフは検索時間そして横軸はトップＫですそして
こちらのピンク色のグラフが比較用の
二音節
事前検索結果の場合の
結果です
距離
擬似三音節結果を用いる際に九．九八七の閾値を用いる
を用いているためこの二音節事前検索結果を用いた場合も距離閾値九．九八七を用いた場合の値を
参考として出しています
そしてこれらを比較しますと
検索性能につきましてはそれほど有意な差は見られませんでした
そして検索時間ですが
今回擬似三音節で擬似三音節事前検索結果を作成するというステップが新たに追加されていますので
その処理の分
二音節二音節照合結果を用いた時よりも検索時間が掛かっています
しかしこの擬似三音節結果を作成するというステップを
除いた純粋な照合のみの時間では
二音節事前検索結果を用いるよりも擬似三音節事前検索結果を用いる方が軒並み検索時間を削減できているということが分かります
これらの結果から
照合のみでは
擬似三音節事前検索結果を用いる方がより検索時間を削減することが可能であるということが確認できました
そしてより厳密に絞り込むことで検索性能を抑え更なる高速化を図ることができると考えますまとめです
ここではＮ音節単位で事前検索事前に検索を行った結果を利用するＳＴＤの高速化方式を提案し
検索性能の低下なしでは六
六十六％の検索高速化これは約三倍です
そして検索性能の低下を二％
ト未満に抑えた上で九十三．五九％これは約十五倍の検索速度が十五倍となっています
そして
擬似三音節事前検索結果を用いることで
二音節事前検索結果よりも高い検索性能を維持した上で高速な検索が可能であるという
考察も行いました
今後の課題です今回擬似三音節結果を作成する段階において時間軸上の整合性を考慮していないため
これを考慮することで更なる厳密な検索が行えるものと考えます
そして今回検索対象がＣＳＪコア百七十七講演でしたのでこれを全講演を
対象とした場合の検証についても行う必要があるかと考えますまた事前検索結果を作成する時に時間を要するという問題点につきましては出現確率が〇と想定されるＮ音節ここでは例としておおおを挙げますがこれらを除外する
また大規模テキストコーパスなどを用いて
必要な組み合わせ数を検討することで
検索時間を削減していきたいと
事前検索結果作成時間を削減していきたいと考えています
また
三音節列事前検索結果での評価も行っていきたいと考えます
以上で発表を終わりますご静聴ありがとうございました
