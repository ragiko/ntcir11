それでは書き言葉を対象とした言語処理のための音声ドキュメントの文境界推定としまして豊橋技科大のが発表いたします
既存の自然言語処理の研究の多くは文が認定されている文章を対象としています
これらの研究によって得られた成果というものを音声から書き起こされた文書にも適用したいと考えた場合このようなこの音声から書き起こされた文書では
この文の境界が明確でない場合が多いといった問題があります
そこで本研究の目的として話し言葉で記述された文書の文境界の検出を行いたいと考えました
今回対象とする文書っていうのは独話を人手で書き起こした文書としました
この文書なんですけどもポーズ情報以外の韻律情報は持っていません
なんでポーズ情報だけを用いたかといいますと他のこの話し言葉で記述されたような文書を考えた場合ポーズ情報だけは残っている場合が多いです
例えば小説とか
この話し
音声部分
なんですかねそこの部分ですと
ポーズ情報っていうのは三点リーダや読点といった形で残っている場合が多いですと
ということで今回ポーズ情報だけは用いることにしました
また今回できるだけ汎用的な方法を考えようと考えましたと
そこでとりあえず今回形態素解析や係り受け解析などを一切用いずにどこまで文境界を判別出来るかっていうものを
確認しました
この様な研究は当然過去かなり数多くやられていますがとりあえず英語を対象とした研究として
研究なんですけれども
英語っていうのは当然日本語のように文末に特徴のある言語ではありませんので基本的には係り受け解析などが必要ですと
また英語っていうのはこの
字種情報がなければ人手でも
その文末っていうものが結構ぶれるということがわかって
以上より本研究
とはちょっと違うよということです
こちらが本研究のになるんですけれども日本語を対象と研究
としましてはこれらの
ものがありますと
一つはテンプレートマッチングを用いる方法です
もう一つは学習データを用いる方法といったものです
日本語を対象とした研究をもう少し詳しく見てみます
一つ目のテンプレートマッチングによる方法なんですけどもこちら非常に高い適合率と再現率を達成しています
しかし
テンプレートの作成を人手によって行っていますので
この人手によるテンプレートの作成は非常にコストが高いといった問題があります
また学習データを用いる方法
なんですけどもこちらはテンプレートマッチングによる方法と比較して非常に汎用性が高いといった利点がありますと
しかし当然なんですけども学習を行った文書の分野に依存すると考えられます
今回の場合ですとこのらの研究ですと
対象はＣＳＪですので
やはりその独話や講演といった
そういったものに
どうしても依存してしまうと考えられます
また当然ですが学習データを準備するコストというのは高いと考えられ
以上をふまえまし
て提案手法
について簡単に説明
提案手法っていうのは連続する文字間がどの程度文境界らしいかというものを
指標を求めて
その値が高いものを文境界とする方法です
特徴としましては人手で準備するデータを極小数にしようと
または学習データを必要としない汎用的な手法であるということ
最後外部ツールまでは
形態素解析などを用いなくても実行可能な方法ってものを考えました
ここでこの文境界らしさというもの表す指標を今回文境界スコアと呼び
この値を求める関数を文境界関数と呼びます
ここでちょっと提案手法についての捕捉です今回ちょっとこれから説明する方法っていうのは予稿集掲載の手法を少し改良してあるものですと
具体的な改良点なんですけどもとりあえず非流暢区間の存在を仮定したということと
予稿集のほうでは文末らしさのみから文境界をらしさを求めていたんですけども
今回文頭らしさも考慮にいれるようにしてあります
今回提案手法が仮定している文末文境界周辺の
モデルですね
を説明しますと今回このように
なものを仮定しましたと
とりあえず文末があったあとに
文境界があってそのあとに非流暢区間というものがあったあとに文頭があるといったものですと
非流暢区間というものはあってもなくてもいいものとし
具体的な例ですけどもこのようになりますと
たとえばなんちゃらですときて
ポーズが入って
しかし
この場合ですとですまでが文末となって
ポーズまが
非流暢区間しかしが文頭となり
ここで今回
非流暢区間っていうものは文境界付近にのみ存在するとは限らないので
今回提案手法では文境界らしさというものをこの文末らしさと文頭らしさの
を足し合わせたものと
しました
具体的に文境界関数というものを説明します
文境界関数ていうのは結局文末らしい表現の集合文末表現集合と
非流暢
区間らしい表現の集合非流暢表現集合と
最後に文頭らしい表現の集合の文頭表現集合の三つを使いますと
とりあえずそれぞれ表現ていうのがあってそれぞれに重みが割り当てられるとします
このとき
この赤い線で
が引かれている点
赤い線から引かれている境界
の文境界らしさっていうものは
このように計算されますと
こちら側のですと
非流暢区間をとばしてしかしですね
この場合ですと二＋二で四となります
このような場合ですねですねときてそのあとの
文境界らしさっていうのは単純にですねのみですので二．五となります
今のものを式に表すとこのようになり
ようするに文
それぞれの表現集合中で
一致する最も大きな重みを持つものっていうのをそれぞれ足し合わせたものとなり
この提案手法
提案手法はその文がどのようにして文頭表現や文末表現ていうのものを増やしていくかってことの方法を簡単に説明します
今回とりあえず最初に
人手でこれはしかしというものを与えたとしますと
そこで提案手法ではとりあえず
しかしっていうものを対象の文書から検索します
すると今回
なんちゃらですポーズしかしとなんちゃらで×ですポーズしかしってのがあったとします
この情報から
このですの部分を抜き出して
文末表現としてですっていうのが加わります
で今度は逆に
このですっていうのものを対象文書からまたさらに検索をかけますと
すると今回
さきほどの
△ですと
×ですのほかに□ですと◯ですといったものが
加わったとしますとそこで現れるのがそしてですと
このそしてっていうものはまた文頭らしいだろうと仮定してそしてを文頭表現集合に加えますと
そしてさらにこのそし
そし
しかしそしてで今度はまた
対象文書は検索を行います
その結果このようになったとしますと
すると新たにますっていうものがとれますよと
これをひたすら繰り返すことで
どんどんどんどんこの文頭表現集合と文末表現集合を増やしていくといったものが提案手法の
概要となりますと
図で表すとこのように
人手で用意した少数の文頭らしい表現の集合ってものを用意し
例えば先程の例で挙げたようなしかしですね
これを使って文頭らしい表現からは文末らしいへ拡張するとで逆に文末らしい表現からは文頭らしい表現へ拡張すると
でまた戻って文頭らしい表現から文末らしい表現に拡張ひたすら繰り返すといった処理
でこのようにして結局それぞれの表現集合を求めてそして文境界関数ってものを
作った後に
スコアを決定して文境界を決定するといったものが提案手法となります
これはいわば一言特徴を表しますと少数の文頭表現から次々と文末表現を増やしていくブーストラップ的な方法ということができ
と言えます
もう少し具体的に見ていきま
とりあえず
この文頭表現から文末表現を拡張する
方法について説明します
先程も例に挙げましたしかしで説明します
最初文頭表現しかしがあったとします
こちらを対象文書から検索します
するとこのような
△ですと□ですが見つかったとします
その後文頭表現の直前のＷ文字っていうものを得ますと今回の場合ですとこの
Ｗっていうの四に設定されていると
仮定しますとでこのＷっていうのは事前に設定しておくべきパラメータです
とするとこのようになりますと
でその後
この集めてきた
取り出してきたのをこの
直前の何文字か
からこのような木を構成します
でこのとき
に根を含む全ての部分ですね
根を含む全ての部分木っていうものを取り出してそれを展開することで
とりあえず文末表現の候補っていうものを作り
今回の場合ですとこれはこの五つになります
でこの処理は今回しかししか
やっていませんので先程の例ですとしかしとかそしてとか
文頭表現集合に含まれる全ての表現に対してこの処理を行って
文末表現候補をつなぎ合わせた点集合を
とりあえず文末表現候補の集合文末表現候補とします
そしてこの次にその文末表現候補の重みっていうものを求めますとこのような式で表されます
ようするに
数多く出現しかつ文字数の多いものほど
値が大きくなるような設定にしてあります
でその後この重みを求めた後その
その重みが平均以上のものばかりをとりあえず集めてきて
さらに平均
以上の表現候補の中で
文頭表現に含まれていないもの現在とりあえず文末表現を決めようとしてるんですけども文頭表現に含まれていないものを文末表現に加えますと
文頭表現に加えもうすでに加わっているものがどういうものかといいますとようするに非流暢表現である可能性が高いという
ことですので
ようするに文頭表現と文末表現両方に含まれてしまったものっていうものはとりあえず非流暢表現に加えまして
さらにその
すでに入ってしまっている文頭表現側から
その表現を削除するといった処理を行います
でこんどは逆に文末表現から文頭表現の拡張を行うのですがこちらは今説明した文頭表現から文末表現の拡
張の
文頭と文末という言葉を入れ換えた手法
処理となります
そしてその後文境界
求めたその表現集合を用いて文境界スコアってものを計算して文境界の決定を行う
ステップで
こちら非常に単純なルールです
でしてとりあえず全ての連続する文字間全ての境界で
文境界スコアを全て求めますと
そしてスコアが平均より大きい境界を集めてきてとりあえず集合を作ります
で集合中の最も高い
境界を文境界と認定しますと
でさらに認定した境界と周囲ＷこのＷってのは先程でてきましたが考慮する文字数です
事前設定パラメータの一つです
でそちら周囲Ｗにある境界を集合から削除する
これはちょっとわかりにくいのでどういうことか説明しますと
まだＷが四のときです
例えば
今回このですま
ですがですポーズてところが境界に認定されたとしますと
でこの場合ですとこの周囲四つにある
境界がもし集合に含まれていたら
これとこれも含めた合計この九つを集合もとの境界候補の集合から除去するといった処理
でこのように除去していってまだ集合に境界が残っていたら二に戻るとまた最も高い境界を文境界と認定するといった処理を
ひたすら繰り返して全ての境界を認定するといった方法です
以上が提案手法なんですけども提案手法の有効性を確認するために簡単な実験を行いましたと
今回対象とした文書は
大学講義こちら情報工学分野ですね
の音声を人手で書き起こしたドキュメントですこちら約四万文字で構成されています
で評価のほうなんですけどもこちらまず文書の四分の一に対して三名の被験者により
文境界を決定してもらったものを正解データとしましたと
この三名は全員同じ領域を
評価しています
でこの人手によって
正解データが作られている部分のみを今回
評価の対象としました
と手法自体はこの四万文字全てに適応して
ようするに手法自体はこの四万文字全てに適応して
と評価は一万文字で行うといった方法になります
まず最初に提案手法にはいくつか設定するべきパラメータがありますのでそちらの影響を調べましょうということです
一つめサイクル数Ｌこれはようするに先程の
文頭から文末文末から文頭といった処理を何回繰り返すか
こちらをどんどん変化させていった場合
他のパラメータはこんな
で考慮する文字数
こちらも同じ様に
一から十まで変化させて
他のパラメータはこのように
最後初期値として与える文頭表現の数について調べました
こちら最初に候補としてＩＰＡ辞書に登録されている接続詞百七十個の中の対象文書に一回以上出現した
三十七個を順々に増やしていった
ときの結果っていうのを調査しましたと
このとき出現頻度順に昇順に加えていった場合と降順に加えていった場合の両方を調査しました
あとここで一回以上出現したと言いましたけどもこれはあくまで形態素として一致するわけではなく文字列が一致したものを一回出現したとカウントしています
まずサイクル数の影響ですと
このように二サイクルも
最大性能になってしまっていまして
なってしまっていますとこれはようするに提案手法の表現がかなり爆発的に増えるといったことを表しています
続いて考慮する文字数です
こちらは
三ぐらいで大体
三以上ならほとんど変わらない性能になっていますと
この三っていうのが何故かっていうのを考えたんですけども
ＩＰＡ辞書に含まれている終助詞
の平均文字数っていうのをカウントしたところ一．七でしたと
これと
さらにポーズを踏まえた＋一した数すなわち二．七以上あればおそらく
結構高いほとんど
終助詞のパターンは取れてこれてる
ってふうに仮定できますのでおそらく結果がこれに反映されたのではないかと考えられます
でこちら
初期値として与える文頭表現の
出現頻度の降順のパターン
このように
ちょっと数にあてにならない
結果になってしまっています
今度は逆に
昇順に与えていった場合はこのように
これ
は昇順と降順の両方の結果から
初期値として与える文頭表現っていうのは別に単に頻度が高いものから
順に与えていったとかそういうことは関係なくて
うまいことちゃんと
かんっていっちゃ変ですけどうまいことちゃんと定める必要があるっていったことが分かる
で
次の実験として被験者ごとの結果ってのを調査しましたととりあえず各被験者ごとの適合率と再現率とＦ値の測定を行いましたと
でさらに
各被験者ごとの結果の
積集合と和集合を調査しましたと
積集合っていうものはどういうものかといいますと
被験者全員が境界と判定したものを正解としたものですと
和集合っていうものは被験者のいずれかの被験者が文境界と判定したものを正解としたものとなる
でパラメータってのは経験的に設定しましたと
これはサイクル数と考慮する文字数ってのは先程の結果を考慮して三と五としましたと
初期文頭表現っていうのはとりあえず今回
かんでだからとところがと例えばを用いました
結果がこれです
とこのように
再現率の比較的高い結果となっていますと
被験者ごとによる性能の変化っていうのはそれほどないっていうことが分かりました
以上を踏まえまして今回とりあえず人手で準備するデータはほとんどなかったのですがそれなりに性能がでてると考えられ
またこのループ数と考慮する文字数っていうものはおそらく文書に依存しないだろうと考えられますと
それぞれ三と五ループ数は三考慮する文字数は五で固定して問題ないと考えられますと
しかし初期値として与える文頭表現というものは
完全に文書依存ですので
こればかりは最初に適切に定める必要があるということがわかりました
がしかしまだまだ再現率適合率が低いですので
そこに改良の余地があります
と最後に今後の課題ですと
まず最初にまだやはり今さっき言いましたけれども再現率適合率が非常にちょっとまだ低いですのでそれを向上することを
を考えなくてはなりません
とりあえず方法としてこれらが考えられます
今回
また何も使わずにやっているのですけれども
やはりちゃんと最低限形態素は使わないとまずいだろうと考えますので処理単位を文字から形態素に変更した場合ってのを考え
また
現状の方法ではどうしても倒置法や体言止めっていうのは検出できませんのでそれを検出するために
とりあえず
提案手法を適用した後に
係り受け解析の結果を用いて
その文境界の位置を補正するといった方法が考えられます
また提案手法っていうのは対象文書
のサイズに大きく依存しますと
ようするに今回
の文書は四万文字で結構あったから
それなりの精度がでたんですけども
対象文書が非常に少ない場合千文字とかっていわれた場合ですとおそらくちゃんと文境界を推定することはできませんと
それに対応対処するために他の文書から同じ分野の他の文書から
文境界関数
表現集合ってものをと
ってきてそれを用いて
対象としている小さいサイズの
文書に対して適応したらどうなるかってのを調べたいと思っています
また
話し言葉を対象とした研究っていうのは多くはＣＳＪを対象にしていますので
それらに適用して比較実験を行う必要があると思います
以上で終わります
