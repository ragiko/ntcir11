はい最初にご連絡しておきますけどもバスのこの
ワークショップ終わった後のバスの時間ですけども十六時九分
に
大学の門のところから出ますので
私の発表に構わずにお帰り下さい
でなるべく早く終わるように致します
はい
それで
この発表ですけども
ちょっと音声ドキュメント
処理ワークショップの音声とはちょっと音声全く使ってない話でそういう意味で合わないんじゃないかという
ように思われるかもしれませんけども私の中ではこれは音声ドキュメント処理であると
いうふうに考えておりますそう思ってちょっと聞いていただければなあと思いますでタイトルは思考のライフログを目的とした
操作ログ認識システムの開発というタイトルです非常に大げさなタイトルを付けてますけども要はメモを効率的に
取るというようなシステムを作りましょうというのを目指したと
いう話です気軽に
聞いていただければなと思います
はいそれで研究の背景と目的ですけどもいろいろ研究されている方だといろいろある瞬間にハッと
ひらめくことはいろいろあると思いますでそれその時にひらめいてもそれを
記録してあとから思い出すのはなかなか難しいわけですね
でメモを書いたりといろいろな方法使われてる方いると思いますけども
これをですね
なるべくというかそういう思考をですね常に記録し続けて
で必要な時にあとからいつでもですね参照可能とするようなシステムがあれば
うれしいなあと常に思っておりまして
そういう
思考をライフロギングするとそういうシステムを構築すると
いうのが目的になります
でそこで
いろんな記録の方法ってのはありますけれども代表的なところをちょっと考えてみました
で一つは昔からよく使われるのは手書きメモでメモを持っていてそこでするという記録方法があります
だけれども手書きの時にはやっぱり書いてるとこ
手元に目を落とさなきゃいけないというところがちょっと思考の妨げになると
であるいはその書いたものを
電子化するというところがやっぱり
困難であとから参照する時になるべく検索とかですねいつでもパッと見れるようにしたいと
でＯＣＲの技術も発展してき
てるけども電子化に関してはちょっと困難であろうと
いうふうに考えてますね
でであるいは最近ですと携帯電話とかですね持ち歩いててこれを
片手でパッパッパッとメールとか書いて打ってる人ってのは最近非常に多いと思います
そういう携帯電話とかでキイでキイで打って記録を残そうというようなことが
考えられますあるいはこういう会議の場合ですとその場にパソコンを持ってますからそこでタイピングをしてこれを
これでメモを取っている人という人も多いかと思います
だけどもやっぱり
記録の時に目により確認が必要であると特に日本語の場合はその変換がありますのでメールをこう打ってもですねそのあとなんか確認の作業でここで考えなきゃいけないわけですねそこで
ちょっと記憶が遮られてしまうだろうという問題点があるかと
思います
でそこで
音声の
有効に使おうというのが
できれば良いんですけれども音声だと気楽に自分の思考を表現できるメディアですので
非常に良いんですけれども
音声は
使える状況ってのはかなり限られるわけですね
私も最近ロギングにはライフログは結構興味を持っていて自分の考えていることとか車の中ではＩＣレコーダ持ち歩いててよくよく記録とかしてるんですけれどもこれ車ん中だからできることで
会議の場とかですね思いついたことそこで喋ろといってもそれはできないわけですね
でそういう周りに人が居るとかオフィスの場とかですねそういうところで
使いにくいというのがあります
で
あるいは音声認識も精度が上がりましたけども
テキスト化する時にはその録音環境とかそういうものに左右されてしまうと
いう問題がありますで以上のことをまとめますと
手書きメモとかキー入力が確認が必要になってくるというところが問題で
手書きメモは特に電子化が難しいと
で
だから利用場所は制限無いという利点はあると
で音声の方は
確認は必要無いけれども
利用場所がちょっと制限されるという問題があります
そこでここの
キー入力と音声認識とここの
良いとこ取りをしましょうというのがアイデアです
つまりキーキイで入力すると携帯電話とかですねあるいは
あたしの場合だとＩフォン
で入力するとここに
キーボードのイメージを想定して
そこそこのイメージしたキーボードの上でこうなんか
操作の
シークェンスを
なんか入力するというのをイメージしてるんですけども
そういうキー入力を
記録時には常に確認無しに記録し続けると
いうことで思考を記録しましょうということをやっていきます
だから
とにかくその場で思いついたことはそこで
キー入力としてそれが思考を表してるものとしてどんどんどんどんどん記録し続けと
いうことですねこうやって喋ってる間に
タイプし続けるということをやります
で
そこで記録するものはその操作のログですねタイプの
ログを記録し続けるということをやりますで入力の端末は特に別に何でも良いと思っていてパソコンのキーボードでも良いし携帯電話のテンキーでも良いしＩフォンのタッチパネルみたいなのでも変わらないと
で確認をすることなく入力をし続けるということをします
そして
それがだからＩＣレコーダには音声録音と
同じように考えるわけですね
でそうやって記録したものをあとで音声認識的に
あとから認識をしましょうと
その記録した操作ログ系列から
もともとどういうものを入れたかったのかというその意図をですねそれを文字列として
復元をすると
あるいは検索を可能にするとそういう
この全体としてのシステムを
作りましょうと
いうことを考えました
でこのこういうシステムの
一つの特徴としては
ここで記録するものっていうのは
非常にパーソナルなものなんですね自分に関するものを入れているので
復元の時には普通の一般の音声認識の時のように
いろんな適応の条件ていうのは考えなくて良いっていうか手がかりはリッチなんですね
ユーザー自身が何を記録しようとしてたかっていうのは
ある程度覚えてるはずなのでユーザー自身が
時間をかければ
手がかりをいくらでも与えられるられることができるというそういう環境にありますので音声認識よりも
少し有利な条件で復元ができるだろうと
いうふうに考えてます
はいこれがシステムのイメージ図なんですけれどもなんか考えてる時に
とにかくここで入れ続けると
いうことをやります
でそれをそう記録するのはあくまでもこの
操作ログのシーケンスを記録し続けます
そして
このこれに対して後から参照できるように検索システムとか
変換システムですねもとの
アイデアの表現これを元に戻すというようなシステムで
記録した記録したものを利用できるようにサポートしましょうとこういう全体のシステムを考えましょうということをやります
でさっきの特徴と言ったのは
ここですね変換システムとか
検索の時も使えるかもしれませんけれども
ここをここを変換する時には
ここ何回も何回も繰り返せるんですね自分が
こうこれ出てきた結果に納得いかなければそこに
あん時はこのこういうトピックについて喋ってたんだということを
キーワードで伝えたり
あるいは誤りをですね具体的に指摘をしたりとかして要は適応がいくらでもできると
いう状況ですね
そういう理知な
後からの適応環境がありますので
そこでうまく変換できるであろうと
いうふうに考えております
でこれが全体の構想なんですけども今日の話はこのうちの
変換システムですね操作ログから変換
音を復元するとここの部分を作りましたというところ
をやりましたのでそこの
お話をします
で
ここは
非常に音声認識に近い
問題を解くということになりますつまり問題としては
操作ログのシーケンスが溜まっていると
でそこからもとの日本語文の
候補ですねこれを
これこれこの条件付きですねこれこれを
最大化するような
日本語文というのを復元するという問題を解けば良いと
いうことになります
でこれを音声認識の時と同じようにベーズで逆転しまして
さらに今回の場合ちょっと近似を入れていくつかの変換モデルのシーケンスとしてモデル化するということをやります
何段階の変換を経てもとの
今のキーシーケンスが出たと
いうようなモデルを作って
これで認識をしましょうということをやります
で
ですね
でこれを解こうと
で今回はこの各モデルを作る時には
重み付き有限状態トランスデューサこれで
インプリメントをしましてこの最大化の問題を解くということをやりました
で作ったトランスデューサはこちらのように入力モデル誤り対策モデルカナ変換モデル辞書モデル
言語モデルとこういったモデルで
構成されております
はい
で重み付き有限状態トランスデューサというのは
最近音声認識とかですね言語処理で非常に広く使われているものですけれども
簡単に言いますと
入力主力重みによって構成されるような状態製品モデルで
入力とシークエンスの対応付けの
モデルが状態繊維で表現されたというようなものになっております
で
強力なのはコンポーズという操作によって
一つのモデルの入
出力を
他の
モデルの入力に対応付けて二つを合成したトランスデューサを
作ることができるとこういうアルゴリズムが知られています
でこのコンポーズ操作によって今回はいくつかのモデルを作ってそれを合成して
今の変換モデルを
作りましょうということを
やりました
で実際に作ったモデルはまず入力のキーシークエンスを表す入力モデルと
そこに今回の場合はとにかく確認無しに入れるから誤りがあるわけですねその誤りに対応するような誤り対策モデルとのその間に
その後に入れます
でその後は
普通の仮名漢字変換と同じような流れになるんですが
キーシークエンスからカナシークエンスに変換するモデルと
カナシークエンスから
漢字カナ交じり漢字に変換するような辞書モデルですね単語に変換するモデルですね
それを入れてそのあと単語の
Ｎグラムモデル言語モデルを通すと
でこういうシークエンスで
復元しましょうと
いうことをやります
でそこの各モデルについて
ごく簡
単に見ていくと入力モデルはそのままですね
これこれは要らないのかもしれませんけども
キーログからそのまま
トランスデューサ化したようなモデルになってると
いうことです
はいそれでその次に
カナ変換モデルというものを通しますこれは
今回はローマ字入力を想定しましたけども
ローマ字から元のカナに変換するというモデルを
作ると
でこれも同じように重み付きトランスデューサで表現することができます
で次に辞書モデルというのを入れま誤り対策ちょと抜けましたけどそれはあとでちょっともう一回戻ります
で
カナ漢字のカナのシークエンスから今度は辞書に変換するというのを入れますこれもトランスデューサで辞書をそのまま表現
できますね
トライ
構造辞書と同じような構図を持ってると
こういうモデルを次に入れます
でちょっと図が無いんですけどそのあと言語モデルですねいわゆる
Ｎグラム言語モデルを
有限状態トランスデューサに変換したようなモデルをこのあとに入れると
いうことにします
でこれで
あとはこれこれらで作ったモデルを
最後にコンポーズすることで最終的なトランスデューサができると
いうことに
なります
こういった方法で今回は
この変換システムもとの復元システムですね
そこのキーログの
操作ログの認識システムを実装しました
でちょっと説明を飛ばしました誤り対策モデルですけどもここはどういった誤りがあるのかというのをちょと分析をしましてそれに対応するようなモデルをこの間に
キー入力とカナカナ変換その間に入れました
でそのために操作ログの取得実験をですね
行い今回パソコンで全部やったんですけどパソコン上で
講演を聞いてでそれその講演で思ったことをこう
入れてもらったりそういった
実験をやって操作ログを
いくつかとりました
でそこを見てどういったユーザが誤りをするのかというのを
実際に見て分析をしてみました
でその時の多かった誤りなんですけれども
連続した
キイの入力を多めに打ってしまうとか少なめに打ってしまうとか
近いキイですねそのキイの配置の近いキイを押し間違えてしまうとか
これは
スワップですね
よくある
キー入力の次に逆に入れてしまうというようなものとか挿入誤り脱落誤りとかこういう
エラーがあると
で今回はちょっとこの中で多かった二つについて対策をすると
いうことにしましたすなわち近いキーへと押し間違えると
いうようなモデルの導入と
挿入誤りですね余計な木を入れてしまうというところに対策をするというモデルを入れました
でもうこれも同じように
トランスデューサで表現できましてこういった形ですね
こういった形で近くのキーの
新たなパスを入れてそこにちょっとコストを高めに入れてやるとか
挿入誤りの方は
スキッ
プするこれ挿入誤りで良いのかな脱落じゃないんですか良いのかなちょっと
良いのかな
なんかこんなのを入れたと
いうことです
はいそれで
最後にかなり早かったですね
評価実験を行いました
で評価実験は
評価実験のために特別にちょっと条件を用意して
つまり正解がないとそれあとで評価ができませんので
正解があるような
状況でキーログを取得してそれがどれだけ復元できるのかと
いう状況を作って実験をしました
でどういうことをしたかというとこういう原稿を見せるわけですね
画面にこういう原稿を見せて
で原稿は見せるけどもそこの
入力の時の手元は見ないとつまり入れながら確認をするっていうことは無しにキーシークエンスだけをこれ
これを入れるキーシークエンスだけを入れてもらうと
いうような実験を
やりました
で今回は全部パソコンでやったということです
でこうこれを入れて
キーログとしては
キーコードですね入力したキーコードと
入力時間と
キイキイのプレスした時間とキイをリリースした時間ですねこの三つ組みを
常に記録
し続けるとそういう
プログラムを書きまして
こういうキーのシークエンスを取り続けると
いうようにここにあったかなこういうことですね
キーコードと
押した時間と離した時間ですねこの三つ組みを常に記録し続けると
こういう
プログラムを作りましてこれを
記録し続けたと
いうことです
はいそれで
評価実験ですけども
完全なキーログと今回正解あるので
比較対象のためにこの今
正解ですねこれに対する完全なキーログというものも作りました
でそれとも比較したと完全なキーログと
あと実際に被験者四人について
今のタスクをやってもらったと
いうことですねそれで日本語文を復元すると
いう実験をやりました
で評価指標としては
単語誤り率ですね音声認識と同じ尺度で
評価尺度を使いました
で比較対象として
マイクロソフトの
オフィスに付いてるやつですかねＩＭＥ二千七という仮名漢字変換システムでこれでキーシークエンスをシミュレートして
どのぐらい変換最後に変換っつっててどのぐらい変換できるのかと
でそれとの比較を行いましたで
これですねで実験結果ですけれども
これは一番上が
誤り対策無しの変換モデルトライグラムって書いたりますけども
誤り対策無しの今回の実装者システムです
そこに
二種類の誤り対策をそれぞれ入れた結果が並んでますで一番下がＩＭＯの
ＩＭＥの
変換結果になってます
でこれを見ますと誤り対策をしていない場合は
やはり市販のですねＩＭＥはよくできていて
今回作ったものよりも
ワードエラーレートはどの場合も
低く
変換できたということに
なりました
だけれども
誤り対策を入れると
人によってはですね
良くなってるということですね
挿入誤り対策をしてやる
と
良くなってますね全部が良くなっているとＩＭＥに比べて
改善してると
いう結果になっています
で同じように
押し間違いも
人によっては
改善してると
いう感じになっています
で今回これ両方入れたっていうのはちょっと実験できなかったんですけども片方だけでもそれなりに
効果があると
いうことが
わかりました
はい
以上で最後まとめますけれども
入力端末への操作ログ系列を記録してそれをあとから参照するような思考のライフログシステムというのも
提案しました
でシステムのうち操作ログから日本語文を復元するというような認識システムを
実装しましたこれはいわゆる音声認識システムみたいなものを作ったということです
そいで
誤りを含んで実験をしまして誤りを含んでいる操作ログに対して
ＩＭＥを上回る精度で復元を行うことができたということを確認しました
でまだ誤り対策に関してはまだ
まだ不十分な状態ですので他の誤り対策を
入れてより精度を向上させていきたいと
いうふうに考えております
はい以上で発表を終わります
