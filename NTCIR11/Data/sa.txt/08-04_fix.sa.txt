音声対話システムと質問応答システムの連携による質問応答対話システムの実現と
対話対話シナリオの検討と題しまして
豊橋技術科学大学のが発表させて頂きます
よろしくお願いします
近年人間とコンピュータのコミュニケーションというものがとても注目されていましてその中で人間にとって自然な振る舞いをするシステムというものが一つ注目を集めています
そのそのような人間にとって自然な振る舞いというふうなものに注目しますと
一つに例えばマルチモーダル対話システムＭＭＩシステムであるとか質問応答システム
ＱＡシステムが挙げられると思っています
こちらのＭＭＩシステムというものは音声対話やジェスチャーを交えた対話が可能となっています
これはただ単に音声だけを用いた対話よりも
ジェスチャーを用いるであるとか
つまりそういうふうな色々な情報を使いますので
人間とってはとても直感的なコミュニケーションがとれます
また
質問応答システムについてはどうかと言いますと

一般のやっぱり情報検索システムであれば

入力として与えられるものは
クエリと呼ばれますのでつまりこれは自然言語とは限らない
しかもグーグルであるとかヤフーであるとかの検索エンジンを使って出てくるものは
やはり回答そのものではなく
出てくるのはあくまで回答を含んでいるであろう文章が返ってきてしまう
それはやはり人間にとっては扱いにくいものですので
その点自然言語の質問文を入力しそして回答そのものを返してくれるという質問応答システムは
直接的なやり方でやり取りができますので人間にとってとても普通
扱いやすいシステムである
と言えます
ここで我々がやろうとしてることはこのＭＭＩシステムとＱＡシステムを連携させたシステムを作ろうというところです
これによって得られる恩恵というものは
ＱＡシステムというものが肝を持っていますので
質問応答
を
対話的に行うシステムというふうになります
便宜上ちょっと質問応答対話システムというふうに書かせていただいていますが
これはＭＭＩシステムとＱＡシステムがそれぞれ人にとって優しい

インターフェースなどを持っていますので
人間にとって自然なコミュニケーションがとれるシステムとなるだろう
そしてＱＡっていうのは
単純にいけば一問一答というふうに言い換えることもできてしまうんですけども
これにＭＭＩシステムの対話というものを組み合わせることで対話的な質問応答が行えるのではないか
というふうなことが考えられます
そして構築するだけではなくこれは実際どのような効果をもたらしてくれるのかということも確認したいと思っています
このＭＭＩシステムには我々の研究室が開発してきましたＧａｌａｔｅａｆｏｒＷｉｎを使います
ただしＭＭＩシステムとはいえ今回は音声対話を
メインとしてますので音声対話システムとして利用します
またＱＡシステムの方は先程のさんの
研究室の方で公開されていますタイニークエスチョンアンサリングシステムを使わせて頂きました
ではＭＭＩシステムというものはどういうものかというのを改めて説明させて頂きたいと思います
ＭＭＩシステムのＭＭＩとはマルチモーダルインタラクションの略でして
複数の感覚を組み合わせて行う対話ということができます
先程も言いました通り言葉仕草表情などを交えて対話を行うことができます
人間同士ではいたって普通に行われていることなんですけれども
これを実演するコンピュータで実現するのは中々難しい
例えば
どこかでマクドナルドとかでハンバーガーを二つ買おうとした場合に

店員さんにハンバーガーを二個くださいと言ってもいいですけれど
もしかするとカウンターにメニューがあるんであれば
ハンバーガーの図を指してこれを二個くださいと言ってもいいわけですね
つまりこの少なくとも今言った二種類がぱっと出てくるんでこの二種類に対して
コンピューターはそれぞれ対応しなくてはならない
そういうふうなことをそういうふうなものを
実現するシステムを一般にＭＭＩシステムと呼びます

実際に人間とコンピューターの
という間
そうふうなものを行おうとすると多種多様な入出力が必要となります
ＭＭＩシステムが実現できたのであればそのシステムは多種多様な入出力が可能であると言えます
そして
このＭＭＩシステム研で作ってきたと言ったんですけれども我々の作ってきたこのＧａｌａｔｅａｆｏｒＷｉｎというシステムは
フロントエンドと対話制御部の二部構成で構成されているシステムです
この構成がどのようなメリットを持っているかといいますと
フロントエンドをプラットフォームごとに実装し直すことで


失礼しました
移植性がとても高いシステムであると言えます
実際に
フロントエンドが人間との会話を行いそして対話制御部によって対話の進行を管理するというふうな構成になっていまして
そして対話制御部というのものは外部のＣＧＩを呼び出すことができましてこれによって外部システムと連携したＭＭＩアプリケーションが実現できます
このような
アーキテクチャーになっているんですけれども
実際に

フロントエンドの所見てもらえばわかる通り入力と出力は完璧にフロントエンドが

担当します
そして入力されたデータは全て今度は対話制御部の方へ送られましてそこで解釈が行われます
出力
に関しても出力内容を決定するのはやはり対話制御部で
結局の所
ユーザーに伝えることユーザーから受け取ることというものは
全て対話制御部で解釈をされる
ということになります
そして

外部のシステムのＣＧＩを呼び出すのも対話制御部
そしてまた実際にどのような対話を行うのか
というものが対話シナリオというのものに記述するんですけれども
それも外部のドキュメントサーバーからダウンロードし
対話制御部で
実際に実行させる
つまりフロントエンドというものさえ
とにかく作ってしまえばどのような場所からでもウェブを介して
マルチモダルインタラクションが可能となる
というものになっています
ここまででＭＭＩシステムの概要を終わりまして
そして改めて簡単にＱＡシステムについて説明を軽くさせて頂きたいと思います
端的に言えば情報検索システムの上位システムであるというふうに言えてしまうと思うんですけれども
何より一番大きいのは自然言語を入力できることとそして回答そのものが返ってくることあと
思います
それを可能としているのはこの構成している三部の内の一番始めの質問解析
最後の回答抽出
一般的にこの言葉が使われているかなというぐらいで
大体の質問失礼しました
ＱＡシステムでは
似たような構成になっていると思いますが
真ん中の部分で情報検索を行いそして
第一第一の質問解析と回答抽出で
人間に優しい
インターフェースを提供するというふうな構成になっています

実際に使わせていただいたタイニークエスチョンアンサリングシステム便宜上ＴＱＡと呼ばせていただきます
こちらのシステムは
ウェブサーバー上で公開されていましてＣＧＩにアクセスすることで

扱うことができます
そして入力には質問文をもちろん自然言語で入力させることができ
そして必要に応じて質問タイプ意味カテゴリーと捉えて
いいと思いますけれども
これは指定することができます
初期状態は指定なしなんですけれども
指定しないというものを
除いてパーソンロケーション
オーガナイゼーションネイムデイトクォンティティの六種類
そしてもし指定をしなかった場合は
質問文から自動的に認識して
くれるというシステムです
実際にそのバックグラウンドで使われているものは新聞記事が十一年分結構大きいコーパスになると思いますがそれとニュース記事こちらの方は音声ドキュメントのものとなっています
色々検証する際には実際に新聞記事の方使わせていただいて最終的にニュース記事に対応したシステムを
にＭＭＩシステムと組み合わせた
システムを構築するというふうな
路線を取ってまいりました
この
このシステムの出力というものは
普通であれば単語だけを返すのが質問応答システムであるだろうというふうに言われてしまいそうなんですけれども
実際にちょっと他のシステムと連携させるという点で色々な情報を提供して
くれています
一つは

質問タイプを指定しなかった場合
に質問文に
からどのような
カテゴリーを認識したのか
というもの
そして
回答の上位五位については

回答の単語そしてその前後の表現そしてコンテキストスコアタイプスコア総合スコアなど
その他多種のスコアが提供されます
実際にこの
ＭＭＩシステムとＱＡシステムをどのように
連携させるのかという話なんですけれども
このＭＭＩシステムＧａｌａｔｅａｆｏｒＷｉｎの方はＣＧＩの呼び出し機能を持っていてそしてかつＴＱＡの方はＣＧＩとして提供されている
つまりこの二つを単純に結び付けてしまえばいいんですけれども

ただ一つ一つフォーマットの問題があります
実際ＭＭＩシステムの方はマルチプラットフォーム失礼マルチプラットフォームを謳っていますが
移植性が高いという
反面あまり
複雑な処理は行えません
ですのでこのタイニークエスチョンアンサリングシステムの
出力がもしちょっと複雑なものだったとしたら
ＭＭＩシステムではちょっと扱えないというふうなことになってしまいます
それで実際にタイニークエスチョンアンサリングシステムの出力はどのようなものかと言いますと
基本的に人が見て解釈できるようなもの
つまりコンピュータに直接解釈するのが難しいものだと思っていました
ですので
実際にそれのＴＱＡの出力をＸＭＬ形式に変換するＣＧＩを実装しましてこれを構築してＴＱＡと

ガラテアフォーウィンを連携させるというふうな
手法をとり手段をとりました
もう一つの問題に
処理速度の問題があります
実際にどんどんどんどんコンピュータも速くなっていますし
それに応じて質問応答ももちろん速くなっているんですけれども
実際にかなり重い処理をして
いらっしゃいますので

実際に対話に組み込もうとした場合にはどうしても処理速度の問題が出てきてしまいます
これをＸＭＬトランスコーダのＣＧＩにキャッシュ機能も付けまして高速化を図りました
実際に構築したものはこのような感じになります

一番順を追って説明しますと一番左のユーザーが質問文を音声ないしはテキストでフロントエンドに対し
入力します
そしてフロントエンドでは
ここでは
Ｊｕｌｉａｎを使ったＪｕｌｉａｎ使いたい
実際ディクテーションも行っていますので
フロントエンドから対話制御部へは
質問文はテキストの形で送信されます
そして対話制御は
ＸＭＬトランスコーダを通しＴＱＡに質問を質問応答の問い合わせを行います
そしてＴＱＡの方で得られた質問という
実際に返ってくる回答というのが一部抜粋してあるんですが右上のちょっと小さいやつですけれども
ＨＴＭＬで返ってきます
それをＸＭＬトランスコーダを受け取って
実際ＸＭＬ形式に変換しそして対話制御部でＸＭＬ形式の

質問応答の結果を受け取る
そして対話制御部は
こっちの方で想定した対話シナリオに沿って例えば一番上のものだけをユーザーに示す
であるとかそいふうな処理を行っていきます
実際にそのような対話をどのように進めていくかという話なんですけれども
今回は簡単に連携させるというふうなことがまず第一目標でしたのでとても簡単なものになっています
プログラムを開始するとまず質問文の初期化だけを行いユーザーの質問文を受け付けます
受け付けた質問文はそのままＴＱＡに問い合わせを行い
そしてその結果返ってきたものは
もし回答履歴にある回答が含まれているなら
ならば削除します
この回答履歴というのはあとでもう一度説明しますが初回時には全くありませんので
一番始めの場合はＴＱＡから返ってきた答えをそのままユーザーに示すということになります
実際にこの回答候補の表示はどのように行っていくかというと

回答は丸々です
というふうにまず単に答えてしまいます
もしこれが先程ＴＱＡから返ってきたスコアを参照しましてもしタイプスコアが低いようならば質問タイプを指定してください
コンテキストスコアが低いようならば質問文を言い換えてください
総合スコアが低いようならもう始めからやり直した方がいいですよ
というなことを進言するようにしています
このような
システムからの発話システムからのプロンプトを受けと
プロンプトを受け取り
ユーザーがどのような
行動を起こすかというのが次にあります
まずここで一つ質問を回答を一つ示されていますのでまず示された答えは回答の履歴に追加する
それはシステム側の処理ですけれども
そして実際にユーザーが何をしたいのか

まず何か回答を示されてそれがその回答で満足したのかそれとも
それで満足しなかったのか
それともやはりシステムに言われた通りに質問文とかを入力し直すのか
というふなもので分岐します
回答に満足した場合はそのままありがとうございましたとシステムが発話して実際に質問応答タスクは終了回答に不満があれのであれば別の候補を表示
そして入力をし直すのであればもうシステムごと初期化してしまう
というふうな簡単なものになっています
このような対話に沿って実際に
構築したシステムのデモンストレーションのムービーを再生流したいと思います






これで質問者の方は満足しましたので質問応答は終了となります
若干ちょっとノイズとかが大きくて聞き取りにくかったかもしれませんので少しだけ簡単に説明します
ちょっと物騒な質問文で申し訳ないんですけれども
一番始めの質問文はオウム真理教が関わった事件は何ですかというふうな質問です
実際にシステムが問い合わせて一つ目にあがってきたものが監禁致死事件です
ですが質問文を言い換えることでより良い
回答が得られるかもしませんよろしいですか
つまりこれはコンテキストスコアが低かったということを表していまして
実際にもしかするとここで何か質問文を言い換えてもう一度問い合わせをすると
一発目でいい答えがあがるかもしれません
実際ちょっとこの監禁致死事件というものも実はオウム真理教が関わってる事件なんですけれども
実はちょっと
質問者は
この答えは本当に正しいのかどうかわからないもっと違うのあったんじゃないかというふうな感じで
正答かどうかは別として満足はしなかった
ですのでここで
違い違うと思います
というふうに発話をしています
そしてこれで第一位の答えはすでに答えていますのでその第二位の答え弁護士一家殺害事件ですよろしいですか
そういうふうな事件もあったなということでユーザーは満足してはいと答えます
最後に
一応そのどういうふうなことを決定したのかどういうふうなことがこのやりとりで決まったのかというものを
最後に表示して終わります
今のものはニュース記事を使ったものですね
そして新聞記事を使った方でも同じようなシステムを構築しました
こちらの方は何も対話というか

一つ目に答えたものをはいそうですわかりましたと答えているだけですのであまり変わりはないですけれども同じようなシステムが構築できています
このようなシステムを構築したんですけれども
ただ実際にこの質問応答を対話的に行ってどのような恩恵が得られるだろうかというふうに考えたんですけれども実際にこのユーザーがどうも満足できなかったときに質問文を実際に本当に言い換えてしまう例えば口語表現から文語表現に極端に言い換えてしまうなどを行った場合
実際にちょっと正答率が上がる
正答率が上がると言いますか正答を見つけることができるケースがいくつか確認されました
ですので言い換えというものは実際にもう有効であるというふうなことが示されているんですけれども
実際に機械的にどれぐらい
機械的に言い換えを行って
どれぐらい有効なのかなというふうなものを検証しました
とても簡単なものですけれども同義語類義語への言い換えまたは複合語の生成というものを行ってみました
実際に正答率の向上に向けた従来研究というのは質問応答システムでは結構進められていると思うんですけれども
その中の代表的ものの一つに意味カテゴリの細分化というものがあります
これはこれは正答率というよりは適合率を向上させるタイプで例えば５ベストの正答率とかはこれはとても有効な働きであろうと考えられます
しかし質問文を言い換えた場合どのようなことになるかというと
どちらかというとより多くの回答候補を取得するのが目的になりますので
適合率ではなく再現率を向上させるというふうな方向になると思います
実際に形態素解析や類似語辞典などを使い機械的に言い換えた結果です

ちょっとそれぞれ三つ試したんですけれどもそれぞれちょっと質問文がサンプルが全部違うんですけれども
まず同義語類義語を用いた言い換えは三十五質問言い換えのなかった言い換えしなかった場合純粋にＴＱＡだけを使って５ベストの答えの中に正答があるかどうかを判断した結果が
五十七．一四％
これに対し同義語類義語に言い換えを行ったケースが
正答率七十一．四三％結構高くなったと思います
そして複合語の生成これは
ただ単に質問文を形態素解析して助詞を抜き取って
一つの単語にまとめてしまおうというだけのものなんですけれども
言い換えしなかった場合は四十四％

この言い換えを行った結果
正答率が五十二％に向上
同じ
この下の二つは同じ質問の集合を使ったんですけれども
今度はもう
機械的にするのはやめて人間にやらしてみたらどうなんだろうとやった結果が正答率六十八％
結構言い換えというものは
かなり有効に働くものであるということが確認されました
ただ問題がありまして
機械的に行った場合同義語類義語というものは
類義語辞書というものを使うと

狭義語広義語類義語とか色々
分類はあるんですけれども
色々なものを網羅しようとすると
一つの単語に七十個近くの同義語があるとか
そういうふうなケースがありまして
場合によっては一つの質問文を類義語にどんどんどんどん言い換えていくと軽く百を超えてしまうようなもあります
また複合語の生成の方は実際に展開される個数は少ないんですけれども

実際にちょっとログを見てみると引用されてる記事が変わらないこれは質問応答システム
の特性でもあるかもしれませんが
一般的に検索結果はあまり変わらないような感じになっています
ただ

ＴＱＡが５ベストであるのに対し言い換えを行うことによっていくつかの

別の
回答候補が得られるという意味では
一応候補正答率が向上しているということが言えます

ここまでの検証は実は新聞をコーパスとして扱ったものでして実際にこれを音声認識したコーパスを使ったらどうなるか
というふうなものをやってみると
今度は恐らくは
どのような質問の仕方をしても
コーパスの中に正答がなかったものというのも多く含まれてると思うんですけれども
言い換えなしの場合十七％言い換えありで
十九％

質問の個数から言ってしまえばただ単に一問だけ正答が導かれたという
ちょっと残念な結果になってしまいました
これの原因としてはコーパスの規模の問題がまず一つあるだろうと考えられます
新聞をコーパスとした場合は十一年分の記事がありましたが
ニュースニュースの場合は
数字の上では一年分恐らくはもう少し少なかっただろうと思うんですけれども
実際ちょっとそれだけの差がありますので
その中での正答率というものは中々上がるものではないだろうというふうなことがあります
もう一つは質問文質問文の音声の認識率がありましてこちらは十分なものではないと言えます
ではまとめに入ります

さておきＭＭＩシステムとＱＡシステムの連携により人間にとって自然な応答をするシステムが構築できました
直観的なシステム操作も自然な対話もある程度は実現できたと思っています
しかし
より自然な対話シナリオの設計つまりユーザーのシステムの発話をもう少し吟味ししてみたりするのとか
あとは
適宜質問応答システムに切り替えて扱うようなことができればもう少し
実用的なシステムとしてリリースできるのではないかなと思います
発表は以上になります
ありがとうございました
