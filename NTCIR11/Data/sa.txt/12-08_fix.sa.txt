それでは部分距離空間上の索引を用いたＳＴＤ
ＳＴＤにおける距離順検索の厳密化と非直線検出への拡張と題しまして
豊橋技術科学大学のが発表いたします
まず研究背景としまして近年ウェブ上で音声や動画像を利用する機会が増加してきました
そこで音声を含むデータの検索要求も高まってきました
その要求のひとつとして音声データから検索語を発せられた箇所を検出したいということがありまして
本研究では音声データを音声認識し言語化した音声ドキュメントに対し
テキストで与えられる検索語がそのまま現れる位置を特定するタスク
音声検索語検出Ｓｐｏｋｅｎ Ｔｅｒｍ Ｄｅｔｅｃｔｉｏｎ ＳＴＤに取り組みます
本研究の目的は高速かつ誤認識に対して頑健なＳＴＤ手法の開発となっています
この
今回は以前提案していた部分距離空間上の索引付けに基づいたＳＴＤ手法の
厳密化と拡張について発表させて頂きます
それではここでＳＴＤの従来手法について簡単に説明しておきます
従来手法にはまず連続ＤＰマッチングというのがありますがこれは
音声ドキュメント全体を操作する必要があり
処理時間が問題となります
そこで索引を使用して効率化を図るということが考えられまして

考えられました
索引を使用した従来法のほとんどが誤りのないテキスト検索方法と同様の索引付けを行います

これらの索引自体には一致不一致の二値情報しか含まれていないため距離に対するしきい値を設定して
ＤＰマッチングなどで結果を絞り込む必要があります
一方提案手法
提案手法である部分距離空間上の索引付けに基づくＳＴＤでは
距離順の結果を出力することができるという特徴があります
そのため必ずしも距離に対するしきい値を設定する必要はありません
また今回の発表では使わないんですが複数認識候補を容易に扱うための拡張も考えています
それではここで提案手法の基本原理について説明したいと思います

まず提案手法は直線検出アルゴリズムハフ変換をＳＴＤタスクに適応したものと考えられます
Ｘ軸を音声ドキュメントの認識音節列Ｙ軸をクエリの音節列と見た二次元平面を考えます
そしてこの平面の各格子ごとに音節間距離を定義し
画素濃度に対応させてやるとこのように
検索語の発話位置に直線が現れます
この直線を検出することでＳＴＤを行います
画像における直線検出を違いとしましては
ＳＴＤの場合ですと音声ドキュメントが検索前に既知であると仮定できるところです
なので画素濃度に相当する音節間距離というのは
各音節ごとにあらかじめ計算しておくことができます
さらにそれらの位置を距離順にソートしたものを索引として使用することで高速かつ
距離順のＳＴＤを行います
ここで
提案手法の距離順の結果を高速に出力することができるという特徴があるんですが
これが
この利点としては例えば次のようなものがあります
従来手法では距離に対するしきい値を設定して結果を絞り込む必要があるんですが

検索した後更に結果が欲しい場合にしきい値を変更し再検索する必要があります
一方提案手法では距離順に結果が出力されるのでしきい値の設定再検索は不要となります
また検索に割ける制限されているような応用場面において
その時間内で見つかる候補だけをもっともらしい順に出力するということが可能となります
では
提案手法の詳細について説明していきたいと思います
提案手法は索引付け処理と検索時処理とふたつのパートにわかれています
まずはじめに索引付け処理について説明します
ここで処理単位を音節として説明しますが他に音素などの単位も考えられます
はじめに
Ａをある音節
Ｊを検索対象の音声ドキュメント上の位置
ＤＡＪを音節Ａ位置Ｊに現れる音節の間の音節間距離と定義します
そして音声ドキュメント上の各位置で

音節間距離ＤＡＪを計算し
その位置Ｊとペアにしたベクトルを考えます
なのでここで考えているベクトルの長さというのはドキュメント長となります
このベクトルを距離順にソートしたものをＳｏｒｔ Ｄｉｓｔａｎｃｅ Ｖｅｃｔｏｒ
ＳＤＶとここでは呼ぶことにします
索引付け処理はこのＳＤＶというのを各音節ごとに作る処理です
そして検索時にはこれらは索引として使用されます
次に検索時の処理にうつりたいと思います
次に説明するアルゴリズムを単純アルゴリズムを呼ぶことにします
単純アルゴリズムのおおまかな流れは次の通りではじめに
検索語が与えられるとそれに対応するＳＤＶを読み込みます
そしてそのＳＤＶのなかから最小距離を持つ要素を選び
発話位置にグリーディーに投票を行なっていきます

次にある位置の投票数がクエリ長に達したらその位置を検出位置として出力します
これらの操作を終了条件を満たすまで繰り返すのが単純アルゴリズムです
次に単純アルゴリズムの細かい動きについて見ていきたいと思います
例えばクエリとして検索語というのが与えられたとすると
それに対応するけんさくごのＳＤＶを読み込んでいきます
次にこのＳＤＶのなかから最小距離を持つ要素を選んで投票を行なっていくんですが
これらは各行ごとに距離順にソートされているため
最小距離を得るには先頭要素のみを見れば良いということになります
なので各ＳＤＶの先頭要素を比較します
そして最小距離を持つ要素を選んで
それをＰＯＰしますそしてＰＯＰした要素の位置情報に基づき
投票を行います
投票を行う位置はこのように傾き一の直線の
に相当する
この位置です
そしてまた先頭要素を比較
ＰＯＰ
投票という操作を繰り返していきます
するとここで赤で囲んだ位置の
投票数が五すなわちクエリ長に達します
この位置を
検出結果として出力することで高速なＳＴＤを行います
次に単純アルゴリズムの問題点について示します
先ほど説明した単純アルゴリズムの結果は局所距離順で厳密な累積距離順の検索結果にはなっていません
その例を示したいと思います
上の平面の各格子のなかの数字を音節間距離として見てください
するとこの位置に累積距離六の位置と累積距離九の位置があるのがわかります
これに対し先ほどの単純アルゴリズムに従って投票を行なっていきますと
このような順番行わって
先に累積距離九の位置が検出結果として出力されてしまいますこれが検索性能を大きくしてくれる原因となっているとわかりました
先ほどの問題を解決するため距離順計算の厳密化を行った厳密アルゴリズムを実装しました
厳密アルゴリズムのおおまかな流れは次のとおりです
はじめは単純アルゴリズムと同じで検索語に対応するＳＤＶを読み込んで
ＳＤＶのなかから最小距離を持つ要素を選び発話位置にグリーディーに投票していきます
ここで
厳密アルゴリズムではある位置の投票数がクエリ長ではなく
Ｋ溜まったらその位置の累積距離ＴＪを計算し
検出候補とします
ここでＫは検索精度と検索効率を調整するためのパラメータをなっています

続きまして検出候補のうちある条件をみたすものを検出結果として出力します
これらの操作を終了条件を満たすまで繰り返すのが厳密アルゴリズムです
次にパラメータＫを三に設定した場合の例を示します
はじめは単純アルゴリズム同様に検索語に対応するＳＤＶを読み込んで
先頭要素を比較ＰＯＰ
投票という操作を繰り返していきます
この時点で赤で囲んだ位置の投票数が
三すなわちＫに達します
ここでその位置の累積距離ＴＪを計算し
位置Ｊとペアにして一旦候補集合∪に加えます
ここで結果を直ちに出力するのではなく
この集合の中で
ある出力条件を満たす候補のみを取り出し
累積距離順に位置を出力します
これを繰り返していくのが
厳密アルゴリズムとなっています
ここでは証明は省略させて頂きますが特にパラメータＫを一を設定し
出力条件に下の式のような
累積距離小なりＳＤＶトップの局所距離の総和
としたとき
累積距離順の結果を保証する最適解アルゴリズムが得られます
またこのような候補集合∪というのは優先度付きキューで効率よく実装することができます
このようにして提案手法では
距離順の結果を出力しこれは他の手法では
見られない大きな特徴となっています
次に提案手法を実際の場面に適応するための拡張について述べます
この発表では代替距離尺度による認識誤り対策について説明します

先ほどまで傾き一の直線のみを考えていましたが実際の認識結果にはこのように認識誤りが含まれ
検出すべきラインがストレートになるとは限りません
そこで隣接音節を考慮した代替距離尺度を使用します
代替距離尺度の式としては例えばこのような近傍ペナルティ付きの最小値が考えられます
これは画像処理で扱われる平滑化フィルタのような役割を果たします
これをこの平面に適応しますと
画像距離平面はこのように変化します
これにより
傾き一の直線検出の枠組みで色のついたバグ部分をカバーすることができ
認識誤り対策となります
またこの拡張というのは距離の定義を変更するだけなので
検索時アルゴリズムを変更する必要はなく
拡張による検索効率の退化はないと思われます

続きまして評価実験にうつりたいと思います
本実験ではＣＳＪ ＳＴＤテストコレクションを使用して評価を行いました
検索対象はＣＳＪのコア講演約四十四時間の日本語講演音声です
音声ドキュメントはテストコレクション付属の音節認識結果で音節正解率は八十一．八％
音節正解精度は七十七．四％となっています
既知語
検索語
セットは既知語検索語セット五十語と未知語検索語セット五十語を使用しました

ここで検索語セットの既知語未知語の区別というのは今回使用した音節認識結果とは別にテストコレクションに付属している
大語彙連続音声認識結果の認識システムに含まれているかどうかの違いです
今回既知語と既知語セットと未知語セットに分かれているためそれぞれ別々に評価を行ったんですが
音節認識結果を使用した本実験では理屈上この差は検索性能に影響しないと思われます
続きまして
処理単位は音節としました
音節の間の距離としては音響モデルのバチャタリヤ距離を使用しました
評価を行ったマシンのスペックは次の通りで比較手法は
提案手法の単純アルゴリズムと
距離順計算の厳密化を行った厳密アルゴリズム
それをさらに代替距離尺度で拡張した拡張手法
それとベースライン手法です
厳密アルゴリズムにつきましては検索効率と精度を調整するためのパラメータＫを
中央の式のような
Ｋ＝一の場合と
Ｋをクエリ長Ｉのに変化させたものを試しました
ベースライン手法は
下の図のような対象パスの連続ＤＰマッチングです
続いて

距離順計算の厳密化の効果を示します
これは既知語検索セットの再現率適合率曲線で横軸が再現率縦軸が適合率です
青がベースライン
水色が単純アルゴリズム
赤が
最適解を保証する厳密アルゴリズムＫ＝一です
これからわかるように単純アルゴリズムの検索性能は低いのですが距離順計算の厳密化を行うことによりベースライン手法に近い検索性能にまで改善しています
特にＦ値が最大となったのはこのポイントでベースラインの場合は再現率〇．四五適合率〇．八五
Ｆ値は〇．五九となって
厳密アルゴリズムでは再現率〇．四五
適合率〇．七六Ｆ値〇．五六となりました
次に
厳密アルゴリズムで

検索精度と検索効率を調整するパラメータＫを
変化させた場合を示します
次に現れた
黄緑のラインというのは厳密アルゴリズム
のパラメータＫを
〇．四×Ｉすなわちクエリ長の四十％程度に設定したものです
この時点では検索性能にほとんど変化はありませんが
さらにＫの値をしていきますと
このように
検索効率が悪くなっていきます
この実験からＫの値を大きくしていくと検索性能は下がってしまいますが
Ｋ＝〇．四×Ｉすなわちクエリ長の四十％ぐらいまで大きくしても
検索性能はほとんど変化しないということがわかりました
またこの結果というのは未知語検索語セットでも同様で
Ｋ＝〇．四×Ｉぐらいまでは検索性能にほとんど変化はありませんでした
次に処理時間の評価です
このグラフは厳密アルゴリズムＫ＝一で最大のＦ値をとったしきい値〇．三で固定して

パラメータＫの値を変えたときの処理時間です
横軸が
ＫをＸ×クエリ長
としたときのＸの値で縦軸が一クエリあたりの平均処理時間です
青が厳密アルゴリズムで赤が単純アルゴリズム
ベースライン手法は約
一クエリあたり約三百二十ｍｓとなりました
これからわかるように提案手法のほうが高速であるということがわかります


またＫの値を大きくしていくと
Ｋ＝〇．四×Ｉぐらいまでは徐々に早くなっていきます
これはＫの値を大きくすることで累積距離の計算頻度が減ったためだと思われます
さらに Ｋの値を大きくしていくと今度はだんだん遅くなってしまいます

これはＫの値を大きくして累積距離の計算頻度が減ったんですが
同時に候補集合から候補を取り出して
結果を出力する頻度が減り
その結果


候補集合が大きくなり
候補の挿入取り出しに要する時間が増えたためだと思われます
この
傾向は未知語検索語セットでも同様でＫ＝〇．四×Ｉのところで
最速となりそれ以降はだんだん遅くなりました
次は
検索性能と検索効率の関係です
横軸が再現率縦軸が一クエリあたりの処理時間です
先ほどのスライドでは
単純アルゴリズムのほうが早いように見えたんですが
検索性能が低いため再現率に対する処理時間で見てみますと
単純アルゴリズムの検索効率は良くないと言うということがわかります
次に
Ｋの値を増やしてきますと
検索効率はだんだん改善されていって〇．四×Ｉのところで飽和しました
そしてさらに

Ｋの値を大きくしてくと検索効率は
低下していきました
次に代替距離尺度による拡張の効果を示します
このグラフは既知語検索語セットの再現率適合率曲線です
青のラインがベースライン手法

赤のラインが拡張前の厳密アルゴリズム
Ｋ＝〇．四×Ｉです

オレンジが
オレンジと水色がこの下の式の代替距離尺度で拡張した拡張手法です
このグラフからわかりますように
代替距離尺度による拡張の効果として再現率の高い領域で
適合率の改善が得られました
次は拡張の効果を
拡張の
検索効率の
変換について見ていきたいと思います
横軸が再現率縦軸が一クエリあたりの処理時間となっています
赤が検索前でオレンジと水色が検索語の結果です拡張後の結果となっています
こちらでも
拡張により再現率の高い領域で効果が得られ
処理速度が改善されました

最後に既知語セットと未知語セットの再現率適合率曲線を示します
左が既知語検索語セットで右が未知語検索語セットとなっています
先ほど音節認識結果を使用した
今回の実験では理屈上既知語未知語の差は影響しないと説明しましたが
未知語検索語セットの検索性能のほうが悪いという結果になってしまいました
これは未知語検索語セットのほうが長いクエリが多く
提案手法の傾き位置の直線による近似が難しくなったためだと思われます
しかしながら
拡張手法の適合率が三十％以上ある
この領域において
拡張手法はベースライン手法に近い検索性能を約
五十から百倍高速に達成しました
最後にまとめです
部分距離空間上の索引付けに基づく距離順かつ高速なＳＴＤ手法を提案しました
提案手法の大きな特徴は距離順の結果が高速に出力されるという点です
提案手法はベースライン手法に近い検索性能を約五十から百倍高速に達成しました
認識誤りに対する拡張の効果として再現率が高い領域で
適合率および処理速度の改善が得られました
以上で発表は終わりです
