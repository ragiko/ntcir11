はい音節継続時間を利用した直線検出に基づくＳＴＤ手法
というテーマで
豊橋技術科学大学自然言語処理研究室のが発表させて頂きます
現在ウェブ上などでマルチメディアコンテンツが増加しています音声を含むマルチメディアコンテンツが増加しています
その中で大量の音声中から検索要求に応じて特定の単語の発話位置を検出する
という問題が考えられます

このような問題はＳＴＤ
音声検索語検出ですねＳｐｏｋｅｎ Ｔｅｒｍ Ｄｅｔｅｃｔｉｏｎ
略してＳＴＤ
と呼ばれます
 ＳＴＤでは例えば自然言語という検索要求があった場合大量の音声中からその発話位置を検出してくる
という問題になっております
先行研究としてらやらの直線検出に直線検出によるＳＴＤというものがありますこの手法では音声認識により検索対象の音声を音節列に変換します
また検索語も音節列に変換し
その二つの音節列で音節間距離平面を構成します
その構成した音節間距離平面を画像と考え
その画像上で直線検出を行うことでＳＴＤを実現しています

らはこの音節間距離平面の効率的な索引付け手法を
提案しています
 ＳＴＤを実行している様子を図で説明します

横軸が
検索対象の音声の音声認識結果音節列縦軸が検索語の音節列です
この音節間距離平面の
白い所が音節間の類似度が小さい点
音節間距離が大きい点

黒い点が
音節間の類似度が大きい点
つまり音節間距離が小さい点ということになります
で
この斜め四十五度の直線上に
黒い点
が並ぶ部分が
音声中で
検索語が発話されている位置と対応することになります

この黒い点が並ぶ
部分を検出することでＳＴＤが実現できます

しかし実際の音声認識の際には認識誤りが発生します
ある音節が脱落する
脱落誤りの場合
例えばこの場合自然言語がしぜ言語
と認識されてしまっていた場合は
この傾き一の直線検出というものでは検出できません

しかし
実際の音声認識の際にはこのような誤りが発生しますので

脱落誤り挿入誤り
こういう
こういっ
た認識誤りに対応する手法が必要となります


次に提案法の説明です
提案法では
音節継続時間を考慮した音節間距離平面を構成し
そのうえで直線検出を行うことで
検索性能の改善を試みました

先行研究となるらの手法では
音節単位で音節間距離平面を構成していましたそれをフレーム単位で

構成することになります
音節間
音節継続時間を考慮したフレーム単位の音節
間距離平面を構成するためには

検索対象となる音声ドキュメント音声ドキュメント
の認識結果の音節列と検索語の音節列両方について音節継続時間情報が必要となります
まず検索対象である音声ドキュメントの音節列には音声認識システムの出力の音節継続時間情報を付与します

これに対して検索語はテキストで与えられるため

音節継続時間情報を持っていません
そこでこれは音声認識結果から
音素文脈を利用して推定することになります
検索対象の音声ドキュメントから
音素音節音素という三つ組
の平均音節継続時間
を
計算しておきます
検索語を与えられた場合
その前後の音素
を考慮し
この平均音節継続時間を付与することで
検索語の

音節継続時間を推定します
しかし必ずしも
検索対象の音声ドキュメント
が検索語の
音素音節音素
という三つ組
を持っているとは限りません
そこで
これ以外に
音素音節
の組の平均継続音節継続時間
またコンテキスト情報を持たない音節
の平均継続時間
を計算しておき
これらを必要に応じて使います
そうですね
また必ずしも検索対象の音声ドキュメント中に
検索語
の音節が発話されているとは限りません
そこで
他の他の全
音声ドキュメント
からも音素
音節音素
という三つ組の平均音節継続時間
また音素音節という
継続これの平均音節継続時間
また音節の平均継続時間を計算しておき
これらを必要に応じて使います
これら二つの音節継続時間を考慮した音節列を用いて
音節間距離平面を構成し
そのうえで直線検出を行います

提案法が認識誤りに対応する仕組み
を図で説明します
認識誤りすいません音声認識の際にまた脱落誤りが発生した場合なんですけれども

この場合

本来その音節があった部分は他の音節によって置き換えられていると考えられます

例えば自然言語がしぜ言語と認識されてしまっていた場合
その脱落した誤りは他の音節によって置き換えられています

そこで
この音節継続時間を考慮した直線検出を行うことで
認識誤りに対応し直線検出
によって
発話位置を検出できる
となっています


ここまで図を用いて提案法を説明しました
ここで提案法の直線検出を定式化したいと思います





少し数式が汚くて申し訳ないんですけれども
検索語のフレーム
ｉ
が属する音節をａｉ
音声ドキュメントのフレームｊ
が属する音節をbj

検索語のフレーム数を m
音声ドキュメントのフレーム数をn
フレームｉとフレームｊの
交点の
フレーム間距離をdij
検索語の音節数を
Mとします

ここで
検索対象の音声ドキュメントフレーム
位置ｊ
から傾き一の直線上のフレーム間距離dの累積距離
ｄｊを計算します
でｄｊが
適当な閾値よりも小さい位置ｊ
を
発話位置
の候補として出力することで
発話位置の検出を行います
またフレーム間の距離の定義について二つ
定義しました
一つはフレームｉ
が属する音節ａｉ
とフレームｊが属する音節
ｂｊ
の間の音節間距離をそのまま使用するというものです
もう一つはその距離に重み付けを行います

これは検索語の各音節の推定フレーム数で
正規化と書いてあるんですけれども重み付けを行うもので

検索語の
音節の推定フレーム数が長いものほど小さな重み
短いものほど大きな重みを付ける
というものです

例えばここの例ですと
検索語クエリ
というもので
フレーム数が二
すいません音節が
音節クがフレーム数二音節エがフレーム数三
音節リがフレーム数一
であった場合は
音節ク
には
重み一．五
音節エには重み一
音節リには重み三が付く
というようなことになっております
次に傾きを可変とした
直線検出についてです
ここまでは傾き一
である直線検出
について説明してきましたが実際には
音声ドキュメント中の正解発話区間の
音節継続時間は様々に変化しています

そのため検索語の音節音節継続時間の推定
には誤差が生じることになります
例えば
音声ドキュメント音節列が
推定の音節継続時間よりも
長かった場合
この図のように
傾き一の直線検出
で検出できません

また同様に音声ドキュメント側の音節列が推定よりも短かった場合
この図のようになって
これも検出できないということになります

そこで
このように
傾き可変の直線検出を行う
行い
これそれぞれで累積距離を計算し
この中で一番累積距離が小さくなったものを
音声ドキュメント
フレームｊ位置ｊ
での累積距離ｄｊとして出力します
ここで傾き可変の場合の
直線検出
について定式化を行います
先程と記号の類は同じで
すが新しく
傾きの集合のＲａｔｉｏを定義しました

先程までの傾き一の直線検出というのはこのＲａｔｉｏの
中に一
しかない
状態
と同じです
でこのＲａｔｉｏというのは直線をどう傾かせて
検出を行うかというものを決めるものになりますが
例えば傾き零．九
傾き一傾き一．一
の直線で検出を行う場合この下のように三つの数字が入ることになりこの三つの傾きで
変数を
ｄｊを決めるということになります

でフレーム間距離については先程と同じ
音節間距離そのまま使うものと

検索語の音節数のフレーム
長の推定
長さによって重み付けを行い正規化を行う
もの
と二つ
を行います
次に累積距離の閾値の調整についてです
これは検索語の音節数により累積距離ｄｊ
の閾値を変化させるというものです
音節数が少ない検索語は湧き出し誤りが多く発生する
と考えられるため
累積距離ｄｊに対する閾値は厳しめに設定したほうが良い
と考えられます
また音節数が多い検索語はこの手法の場合
フレームの推定の
誤差が
大きくなるため
これは緩めに
設定するのが良い
というふうに考えられます

その式がこの以下のようになっております

γは
音節数に関わらず一律で
閾値を設定する場合の閾値です

つまりが普通は閾値調整を行わない場合はγで
検出を行う
ということですね

でM^は基準の音節数
でβはこの閾値調整を
どれほど効かせるかというのを決める調整のパラメータです
でMは検索語の音節数となります


この
M^というのが基準の音節数でこの音節数が少ない検索語というのと
音節数が多い検索語というものの中間の
値を設定するものとなります
でこのβというのは調整パラメータとなっていてこのβが小さければ小さいほど
この
この傾きが
大きくなって
閾値調整を強く効かせるということになります
すいませんβが小さければ小さいほど
ですね

提案法を実装し実験を行いました
テストセットは
ＮＴＣＩＲの音声ドキュメント
検索タスクで配布しているＳＴＤのテストコレクション
から検索対象はコアの百七十七講演

検索語は既知語のセット五十語です
でこの既知語のセッ
トなんですけれども
音声認識
を
連続音節認識で行っているため既知語
未知語
のセットあると思うんですけれど
どちらも特に

既知語未知語であることに特に意味はありません
で検索単位は発話で発話を見つけてこれれば正解ということになります
で検索対象の音声ドキュメントなんですけれども
これはテストコレクションで配布されているものを使用しました
連続音節認識で
音節正解率は八十一．八％
またフレーム間の距離は
これは音節間の距離
とも言えるんですけれどもこれはバタチャリヤ距離を使用しました

評価指標で
今回評価指標には
FF値を使用しました
式の定義は以下のようになっております
ベースライン手法についてです
ベースライン手法についてなんですけれども
これは
昨日の最後の発表で
あったんですけれども
私の研究室で
提案している
この音節単位の
直線検出のＳＴＤ
というものの最適化アルゴリズム最適解アルゴリズム
を使用したもの
をベースラインとしました

詳しくはお手本お手元の発表資料
をご参照下さい

まず一つ目の実験では傾きを可変とした直線検出を行いました
検出直線の傾きを変えることで
検索語の
音節列の

継続時間の推定
というものが保証できているか
のずれを保証できているかどうかということを確かめるため
傾き一
のみの場合と

傾きを一から二十％ずらして
九段階で
検索したもの
三十％ずらして十三段階で検索したもの
の三つで行いました

実験一の結果です
検出直線の傾きを
変更することで
検索性能が向上していることが分かりました
この処理により検索語の音節継続時間の推定のずれというものをある程度保証できている
ということが分かると思います

当然なことなんですけれども
検出直線の
角度の変更の範囲というものを広げれば広げるほど計算時間は増え
ます

それと検索性能はトレードオフの関係となっている
と思われますが
今回二十％ずらした場合と三十％ずらした場合で
それほど検索性能の
変化がなかったため
この
角度の変更をどの程度の範囲で行えばいいかということは
今後検討する
必要があると考えています

次に実験二ではフレーム間距離
を
検索語の音節継続時間
によって
正規化を行うかどうか
ということ
も違いで検索性能の変化
を

調べました

正規化を行わない場合はＮｏｎＮｏｒｍａｌｉｚｅｄ正規化を行う場合をＮｏｒｍａｌｉｚｅｄとしました
このノンノーマライズドというのは正規化を行わない場合ということで
長い音節程重要視する検索語の内推定した
継続時間が長いものほど
重要視するということになっていて正規化を行う方はどの音節も一律の
重みで評価するということになっています

で結果です
F値の最大で比べると正規化を行った場合の方がわずかに良くなりました
しかしこのリコールプレシジョンカーブを見ると
必ずしもいつも
正規化を行った方が良いという訳ではないことが分かります

低リコール領域では
検索性能は向上していますが高リコール領域では逆に落ちているという結果になっています
この原因についてですが高リコール領域では低リコール領域に比べて認識誤りが多く発生しているということが考えられると思います
でそういう場合は音節継続時間が短いような音節というのは脱落したり
また挿入誤りが色々発生したりということが考えられて考えられます
そういう場合は長い音節程
重みを付けて重要視して検索した方が
検索性能が良くなるのではないかというように考えました

最後に実験三では累積距離の閾値調整を行うことによる検索性能の変化を調べました
先程の
を出したんですけれどもγ無調整で
の閾値で検出を行う場合をＮｏｎＡｄｊｕｓｔｅｄ

γダッシュ
調整した閾値で
検索を行う場合はＡｄｊｕｓｔｅｄとしました
今回なんですけれども

基準の音節数は五
五音節
調整パラメータは三としましたすいません


結果です閾値調整により全面的に検索性能は向上しました
閾値調整を行わない場合に比べ十一％良くなりましたが
ちょっとベースライン性能には達しませんでした

またお手元の資料の
ベースラインの手法と
これこちらが最新の値になっていてお手元の資料はちょっと古い値になっています
申し訳ありませんでした
まとめです


もう終わりそう
まとめは以上のようになっ
ています
また今後の課題は次の通りとなっています
御清聴ありがとうございました
