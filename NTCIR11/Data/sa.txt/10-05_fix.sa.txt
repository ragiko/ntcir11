では楽曲連想再生のための文書特徴量と音響特徴量の対応付けということで名古屋大学の
本来でしたら武田
が発表さして頂くとこだったんですが北岡のほう
が言わさして頂きたいと思います
でこの
ここでの発表といいますかこの内容なんですけどもちょっと
ちょこっともすこし裏のところを先にお話させて頂きたいと思いますけれども

まず楽曲再生のための対話と検索と言うふうに書いているんですが
我々のほうはですね対話の研究なんかもやっているわけなんですが

特に楽曲再生それに限らず検索タスクというものに関してなんですが我々は音声対話によっていろいろこう
ものを検索して例えば音楽を再生するといったようなことをするっていうこと
それとあと普通の人間同士が喋っていてなんか一生懸命なんか興味のあるものを
持ってこようよって見つけ出したいよというようなそういうものっていうのっていうのは

基本的に達成目標は同じであろうと
いうようなことそういう考えがありましてで最近ではちょっと対話
とそれから人間同士の
対話というか人間の
おしゃべり
そういうものに間
をなるべく取っぱらおうというようなそういうようなシステムの
ことを考えて
いろいろな基本思想の下でいろいろなことをやろうとしています
でそういう中の一つの例として我々は楽曲
検索というのが一番直感的に分かりやすいということで

使っています
特にこういう
対話とかおしゃべりとかからやっぱりこうなんか特徴を抽出して
再生を
曲を候補を出してきて
で提示するっていうようなときにはシステムとわざわざ対話するよりも
敢えて人間同士の
長い時間の一人で話すとか例えば対話してるとか
そういったところから持ってきたほうが
やっぱり直接システムに対話して持ってきてもらおうとするよりも
もっと
多くの情報を持ってるんじゃないかと
そういう
思想が
少し根底のところにはあります
ということでここのワークショップのほうに
ちょっとちょっと問題提起の意味も込めてここで
発表させて頂こうということにして
おります
でじゃ本題のといいますか今回のちょっと技術的なお話
ここはちょっと音楽音楽じゃない音声から少し離れるところが
あるんですがちょっとそこは

かんべんして頂きまして研究の背景
入ります
研究の背景に関しましては先ほどの御発表ともう基本的には同じで
音楽配信サービスが非常に充実して
どこからでも音楽がいろいろ買いとれます
それから個人がそういった背景の下で大量の楽曲をPCに所有するとで先ほどの方もおっしゃってましたけどもあの今の若い方若い方って私が言う
もうそんな年になってしまいましたけども学生さん
とかに聞きますと楽曲PCでどのぐらい持ってんのとか言うふうに聞きますと普通にほぼ全員の学生が千曲単位を答えます
そのぐらい
普通に大量にPCに曲をもっていていうのが当り前
な時代です
ただそういった楽曲をどういう風に聞いてるか
ていうと大体
曲名とかアーティストを自分で選択してちょっと
敢えて選んで聞く
あるいはアルバム単位でこう
順番に聞く
もしくはもこういう順番で聞きますっていうプレイリストを作っといて
でそれを

その順番で繰り返し聞くと
そういったようなことをやってるわけです
であとランダム再生みたいなものもあったりするわけですけどもほんとにランダムなってしまう
そういったことがあるわ
なのでそうではなくてもう少し気の利いたことをやってやりたいで
そこで考えてるのが新しい楽曲
検索どちらかというと推薦手法
についての検討というのを行ってきています
で
この推薦のシステムなんですがちょっと今は先ほども言いました通り音声から一瞬離れて
みてちょっと例を挙げます
例えば閲覧してるウェブページ
にいま合うような楽曲っていうのを検索してそれにバックグラウンドミュージックとして乗せてやろう
と言うようなことを考えます
で例えばこうやって

なんかたまたま見てた
ウェブページがたった今失恋しました彼は三年付き合った人です四ヶ月前から海外と日本で遠恋っていうんですかね遠距離恋愛をしていましたみたいなところをちょっと見てた
しましょう
でそうするとこの時には普通は文章を解析してなんか候補を選択してこれに合ったような音楽を流す
ということが一つの例として考えられるわけです
で例えばこういった曲が流れて来たらいいなみたいなのはなんとなく
分かるわけですがじゃあどうやったらこういう曲が推薦できますか
ていうそういうことを考えたい
ということですね
で
どうやってやればいいか要はこの文書に対してどういう楽曲と関連付けたらいいか要は語彙と楽曲とを関連付けるというこういう必要が生じてくる
ということになるわけです
で
今までにもそういうことは当然問題意識としてあったわけで語彙とか曲との関連付けの従来研究というのはこのいくつかあります
でちょっとめぼしいところでちょっと
いくつか挙げさして頂きますが例えば感性語と楽曲っていうのを関連付けるという研究がありましてこれいくつかの感性的な語っていうのを選んでおきましてでこの曲を聞いてどんなような
感じを受けるかっていうのを
レベル付け
してもらうといったようなこと
をしたい
例です
で
あと次にレビューに出現する語彙とあと楽曲とを関連付けておこう
とするとレビューの語彙が出てくればその曲をかけましょう
というようなことをやってみたり
あるいは同じ人たち
なんですけどもそれを

レビューに限らず例えばなんらかの方法で
楽曲自身の歌詞だったりとかいろんなアノテーションほかのところから持ってきたアノテーションとかそういった語彙を使って
でその語彙に合ったものが出てくればそれをかけましょう
そいったようなことをやるというのが
主流の音楽検
でした
でところがこういうことをすると何が問題かというとやっぱり語彙の種類を限定する必要がある例えば感性語とか音楽用語はここに出てきた
語以外のものに関しては
どうしてもできない
しかしで基本的には楽曲と単一の語彙との関連付けということに
絞られてきてしまいます
でさらに楽曲
ある一つの楽曲についてはそういうことはできるんですがその楽曲が例えば似てるとか似てないとかいった類似性っていうのはどうしても
ここでは考えることができません語彙のところでしか
やってないわけですから
でちょっとそれをまとめますとの今の今までの関連手法では関連付け手法ではこういったことに対してなんかこう曲に対する語彙っていうのが
なんらかの語彙空間の中でいろいろ張られててでその中に
この
語を入れてみるとこんなとこにあるねっていう風なことしかでき
わけです
ですからどうしても語が違えばその
使用する語彙にずれが生じる
でレビューが記述されていない楽曲レビューとかそういったものがもともと存在しない楽曲もあるわけです
これに対しては語彙空間でなんとかしようなんてのは無理なわけです
であと最後に言いましたように楽曲の音響的な類似性っちゅうのが無考慮である
ていうことになるわけです
で我々のほうはじゃあそれに対してどういうふうに対処するか
ということを考えます
でそれは
考えたその方法というのはいまもともとの思想はおんなじですここの先ほどのこれがある曲ＡとかＢとかいうこういう

語彙で張られた空間に
あるわけですがそれとは別に音響的な特徴空間というのを別に用意しておきます
で同じ曲ＡＢに対してこうあるわけですがそれがある特徴空間上に
置かれている
こういう状況を考えます
でこれはまたあとで説明しますがこういう空間を用意しておきましてでこれらの間の関連付けがなんらかされていれば
今のように一曲の一曲じゃないひとつの文書から得られた
ある点というのをこの楽曲のほうへマッピングするそしてそのマッピングされた音響的な空間の中で類似しているものを選んでくる
とこういう
手順が踏めると
いうことになるわけです
で最終的に楽曲リストとして提案して曲をかける
いうふうになります
でその
手法の概要なんですけれどもちょっとこれ楽曲とテキストがさっきと逆に見づらくて申し訳ありませんこちらが楽曲ですこちらがテキストです
で楽曲のほうはなんらかの音響的な特徴さきほどのご研究にありましたようにいろんな特徴が考えられるわけですが音響ベクトルというのを
なんか用意しますちょっとどんなものがあるかは後でお見せしますが
それと楽曲を解説したテキストいろんなものがこれは入手できます
こういったものに関してこれを文書ベクトルという形で表現することが可能です
でこれらの間の線形変換ここではどんな変換があってもいいんですが一番単純に線形変換を考えましてこの線形変換で変換できると
いうことを考えて

これを推定しておく
こういった方法を取る
これこうすればよいとでこうすることによって複数の単語を含むテキストが入力可能になります
ここでなんらかの文書ベクトルになればいい
であと音響的特徴の類似度を考慮することができます
空間上での近さというものが定義できているのでそれが可能になります
でじゃあそれぞれの
空間での点というのはどういう風に
作るかっていうことになります
文書ベクトルＤですけれどもこれのほうはまず一番簡単にいえば特定品詞の単語の頻度に基づく文書ベクトルこれは普通の
いわゆる文書ベクトルですね
を作ります例えばこの楽曲位置でこここういう文がありますがここに赤にいろいろ
語がありますなんとなく
特徴的な語が選ばれておるものと思いますけれどもこういったような語
をようはベクトルで頻度をＴＦＩＤＦに重みをつけますけれどもちょっと重みをつけますけれどもそれによってこういう風な
ベクトルを作ると
こういう
これが
基本です
でただこれだと非常に語彙の数が多くなってスパースで長いものになってしまいますので特異値分解
LSAによって
ちょっと短めの文にしてやるということで文書ベクトルと
いう形にすると
これが基本的な文書ベクトルの作り方です
でそのときにいろいろ考慮するべきところもあるんですがこれはちょっとあとで実験なんかを通しながら説明して行きますけども楽曲どんな文書を利用してこれを作るかっていうのでレビューであったり音楽ブログであったりあと普通日常のブログであったりこういったところからなんか
こやったところを考える必要があるでしょ
てこと
それからあとどんな品詞を使ったらうまくいくだろうと
いうようなこともちょっと考えないといけません
からあと単語なのかあと単語連鎖なのかていうことようはこれバイグラムだとかそういったところで実際にはバイグラムまでしかやってないんですが単語単なる単語のベクトルじゃなくてバイグラムの
ベクトルとしてはじめ用意しておいてそこからLSAをかけるとか
そういったこと
ですがそういったことも考えてやったほうがいいかもしれない
そういうところを考慮してちょっとそのあたりの実験結果も
示せたらとおもいます
次に音響ベクトルの話しですけれども音響ベクトルはまず
基本的には音響特徴量を抽出します
で今回の
ほうはほとんどの場合がフレームワイズに特徴抽出できる特徴ででそれらをベクトル量子化
します
で特徴量として表現するんでベクトル量子化して特徴量します
でフレームワイズにやりますので非常にたくさんの数のそのコードができてくるわけですがこれを
基本的にクラスタリングコードブックでクラスタリングした結果をヒストグラム化してこのヒストグラムとなったこれこれ自体が

音響ベクトルと
言うふうに
呼ばれるものと
いうふうに我々は定義してこれを音響ベクトルとして使っています
これにはいろんな方法があると思うんですけれども我々が使ったものとしては音響特徴量この音色
音色ですね表現するようなスペクトルスペクトルバンド幅スペクトルロールオフちょっと細かいことは今回は説明いたしませんけれどもこういったものがあります
それから音量ですとかリズム
あと
こま
そうですねこういったものを使って先ほどのものを表現
しています
でベクトルのコードブックサイズとしては基本的にはこのくらいで試しましたが最終的には千二十四だったかな
ちょっとが
あたりで実験がメインで行われています
こういったことができます
で
先ほどのちょっと出てきたのとまた
復習も兼ねまして今のような音響ベクトルＡというのが出て千二十四
に
してたんですがそれとあと文書ベクトルＤのほう
これも特異値分解で
実際には単語数とかエヌグラムまあバイグラムぐらいですと何万となるわけですがそれを
ＬＳＡで千二十四にする
ゆうようなことをします
で
そこの間の関連付けですけれども基本的にはどの文書とこの音楽っていうのが結びついているっていうのがもう分かっているそういう条件のもとで学習が可能
なものっていうのは入手できますのででそれらを使えばある文書ベクトルと音響ベクトルの組っていうのがあってでそれの間をこう関連付けたときの誤差これですね
この誤差が
最小化されるような
形でＷを学習します
このＷっていうのは
このように解析的に解けるっていうことが分かってますのでこの形これを

この式をそのまま解けば良い
これでＷが推定できると
二乗誤差最小化の条件のもとで解けと
いうことになるわけです
ということが
でこういう風にしましてじゃあ実際にじゃあどのくらいこれでうまくいくんだろうっていうことを
評価しないといけないんでちょっと評価方法についても触れさして頂きます
で例えばブログ記事とかなんとかとにかく文書を入れますで文書ベクトルを
作って楽曲を検索した時の結果今実際ちょっと曲がこう三百四曲使ってるんで三百四曲の音響ベクトルが配置されてましてでその中の三百四曲
をすべてをこの
Ｄを変換したベクトルＡからの距離
として順位付けします近いものから順位付けします
でもちろんその対応する曲が一番上に来ることが望ましい
わけですね
でということでその
対象となる曲が一体何位に来たのか
ていうのを全部の曲に関して数え上げましてでそれの
この数から要は
各
曲の
順位の逆数の平均いわゆるミーンレシプロカルランクといわれるＭＲＲこれで評価いたしました
ですので値が大きいほど良い
ということですね
ということになります
で結果です
でこれがまず
どういったものを比べたかといいますとまず文書空間による検索っていうのはほんとに先ほど言いましたようにテキストしかないという状態でテキストで空間を張っておいてその
単語で一番近い
ていうか単語がある
やつですねそれの
それを引っ張ってくるっていう方法単語が重なり度で引っ張ってくるっていうだけの方法ですね
で提案手法っていうのが先ほどの方法で
変換してやってその音響空間上で近いものを持ってくるという方法
それからバイグラムというのは先ほどの文書ベクトルのほうをバイグラムで作っといてからＬＳＡしたと
ゆう結果
になります
であのこれをご覧いただければわかると思うんですけどもで下はどんな

文書を使って先ほどのＷを推定したかと
言うものになるんですけれどもその結果を見ますと基本的にはレビューとか歌詞とかあと
ブログ記事で曲を
評価しているようなやつとかいっぱいあるわけですねんで歌詞とかもあるですがこういったのをいっぱい使いますとだんだん増えてけば
結構よくなりましてこの辺ですね零.五ＭＲＲで零.五ぐらいまで

三百何十曲ぐらいでしたら
得られると
ゆうような結果
が得られています
で文書ベクトルにどんな品詞を使えばいいかってゆうことも検討しなきゃいけないねってゆう話だったんですがそれを検討したのがこの結果になります
でクローズな方とオープンな方とが両方ここは用意してますけれどもこれの結果なんですが

名詞がやっぱり効きますねさきほどもあったと思いますけども名詞ってゆうのは非常に曲を
表現
するのに良い
なにかとにかく文章を特徴づけるのに非常に良いと
ゆうことですねトピック
には
適してる
であと形容詞動詞もある程度効くということで合計結局名詞形容詞動詞それから未知語がいっぱいあるかなっていうようなだから独特な単語がたくさんあるってゆうことだと思うんですがそういう未知語がたくさんあるなっていうことが結構効く
みたいですね
でそういう結果でクローズだともうほぼほぼ完璧にできちゃうんですけれどもオープンでこのくらいのことだけこれは単語ベースなんですけど
それでも零.一六っていうことは五曲ぐらい出しゃ
普通
入ってくるかなって
零.一六っていうか零.二近いので五曲くらい出せばその正しいのが出てくるかなと
いうこと
そういうような結果になってます
でこれを使いまして
実際に文書の連想再生システムインタフェースというのを作りましたでこれ実際ウェブでいま公開わからないんですけども実験用に作ったものですんで
こういう
テキストトゥーミュージックというサイト作りましてでここに
なんか自由に書いてもらって曲を出してもらって評価をするということをやりました
で実際に
曲入れてもらうのものはちょと五つくらい決めましてここにある

たぶん予稿にもあると思いますけどもこの五つを入れましてで曲を出してもらう出してもらってでそれが合ってるかどうかっていうのを主観評価してもらった結果です
でそうしますと大体上位にランクされるものとランダムに選んできた五曲
それから下位五曲になったものそれとの差を見てみますと基本的にはうまく
選ばれてきます
よい
結果が出てきます
ただ曲によっては曲単語がうまくマッピングされなくて
ちょっと
いまいちだっていうのもまだ存在するのは存在するというそういうような結果です
ただ推薦システムですんでそうちょっと間違ってもそんなに
痛いわけではありません
でこれがその例です

これ
私も生まれる前なんで私も

この辺なんかこう
サビのに至るこの一連の流れ聞いててあもうたまりませんわとかこういうこういうあたりのなんかこの辺からなんかこの曲がぴったりだなというのが分かるかなと思いますこういったのが実際に出てきますもう一つぐらい

もいよいよ私分かんないんですけどこれも内容を入れると実際に選ばれたのがこれと
いうことでですねこれも正しいものが選ばれているこういうことができるということですあのこの辺の曲がお分かりになる方はちょっと私も
どのくらいの年代の方なのか私けども
私もよく知りません正直
でも正しいんだそうです

はい
でそれがあと関連付け評価をいくつかお見せしたいと思います
これはですねがっ
複数の楽曲を説明したブログ記事っちゅうのはやっぱりいっぱいありまして一曲だけじゃないんですねでそう
のを入れてみるとどうなるかなっていうのをちょっとやってみました
普通単一だったら結構うまくいくんですね
結構うまく検出できますが複数を入れてやるとちょっと落ちますが
それでもですね
例えばこの
これ大塚
愛に関して
なんか評価してるんですがそん中にいっぱい曲が出てくるんですが一応結果としては大塚愛の曲が
推薦されるとこういったような結果も得られています
あと

これ
こういうブログを書く人っているみたいですねあの今日のＢＧＭっていうのなんかお題を決めてでそれに対してこの日常の
それにそれに合うような日常のことを書くと
いうようなこと
しているような人がいるらしいです
ですから要は曲とは直接関係ない記事なんですが曲とは合ってる本人は合ってるつもり
で曲も曲も決まってるとだからここのブログ記事を入れてやるとその曲が出てくるかどうか
ていうようなことをた
とまあ
まあまあまあまあ
上の方には出てくる
ということが分かります
いろんなブログを特に使えば
割と
いくのかなということなんですがでももう少し欲しいなと思うんでもう少し学習データとかを充実する必要があるのかなという風な感じ
であります
であと
ここだけいまちょ特に考えているとこで
今みたいにブログの記事を
っていう風にやってましたけども
あのやっぱり最終的には我々はやりたいのはそのさきほど一番最初に言いました通り対話で取り出すとかいうのと人と人との対話で何かなんか探し出すっていうのではその人と人との対話のほうが情報量が多いんじゃないかと
いうこと
それのきっかけみたいなもんなんですがとこういう感じ







お分かりになる方は今度は比較的若い方が
浜崎あゆみにことに対する

女子高生の本当の会話です
本物の会話です
でこれたまたま
これ第一著者
の
しまった
止めちゃった
まずかったな
第一著者の
妹さんほんとにしゃべったのを録音したんだそうですけど
今みたいな
ことを
しゃべっていたと
します
でこれ違う
今みたいなことをしゃべってたとしますこういうのに対してどのくらい
できるかっていうのをちょっと評価したのがこの結果に
なります
でこういうふうに今みたいなことをしゃべっている
とまあ
浜崎あゆみの曲とかそういうのが
出てくる
で
なんかこうしゃべっているうちにこういうのが裏でかかる
そういったようなことができる
ということになっているわけです
ちょっと音声に関してはこのあたりであと二つぐらいちょっと例だけ見せますこれ結婚式に関する
ブログ記事がありましてこうしますとやっぱり結婚式関連の曲っていうのが紹介されてくる
であるとかで
すね
これ思いっきり失恋の話ですねここが
失恋のこと書く人って結構いますね

この辺なんか今話したいことがあるとかなんとかって
たりあと
すごくへこむとかこういう
こういう表現をうまくとらえているかどうかは分かりませんが少なくともこれに対して別れの曲が出ると
いうようなことはできる
こういうことができます
ですからこれが書き起こしであったり実際のブログであったりするわけですがこういったところから音声を取ってきて音声を認識することによって
こういったことが推薦に生かせればバックグラウンドミュージックとしてうまく
検索としてうまく動けば
なんか
こう
アンビエントな感じでうまく動くものが作れるんじゃないかと
ゆうことで今
いろいろと検討を勧めているところであります
ということでまとめますと複数の語彙と楽曲のきょ
特徴を関連付ける方法を
提案しました
で文書空間の学習テキストでいろんなものを使うブログ記事なんかを使うといいということです
で最終的にはフィードバックを利用してちょっと主観評価なんかをして結構似たものが
うまく出てくるということを確認しました
ということです
以上です
